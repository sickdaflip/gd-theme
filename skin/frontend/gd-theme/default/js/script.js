'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function ($) {

  "use strict";

  var FOUNDATION_VERSION = '6.3.1';

  // Global Foundation object
  // This is attached to the window, or used as a module for AMD/Browserify
  var Foundation = {
    version: FOUNDATION_VERSION,

    /**
     * Stores initialized plugins.
     */
    _plugins: {},

    /**
     * Stores generated unique ids for plugin instances
     */
    _uuids: [],

    /**
     * Returns a boolean for RTL support
     */
    rtl: function rtl() {
      return $('html').attr('dir') === 'rtl';
    },
    /**
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.
     */
    plugin: function plugin(_plugin, name) {
      // Object key to use when adding to global Foundation object
      // Examples: Foundation.Reveal, Foundation.OffCanvas
      var className = name || functionName(_plugin);
      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
      // Examples: data-reveal, data-off-canvas
      var attrName = hyphenate(className);

      // Add to the Foundation object and the plugins list (for reflowing)
      this._plugins[attrName] = this[className] = _plugin;
    },
    /**
     * @function
     * Populates the _uuids array with pointers to each individual plugin instance.
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @param {String} name - the name of the plugin, passed as a camelCased string.
     * @fires Plugin#init
     */
    registerPlugin: function registerPlugin(plugin, name) {
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
      plugin.uuid = this.GetYoDigits(6, pluginName);

      if (!plugin.$element.attr('data-' + pluginName)) {
        plugin.$element.attr('data-' + pluginName, plugin.uuid);
      }
      if (!plugin.$element.data('zfPlugin')) {
        plugin.$element.data('zfPlugin', plugin);
      }
      /**
       * Fires when the plugin has initialized.
       * @event Plugin#init
       */
      plugin.$element.trigger('init.zf.' + pluginName);

      this._uuids.push(plugin.uuid);

      return;
    },
    /**
     * @function
     * Removes the plugins uuid from the _uuids array.
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
     * Also fires the destroyed event for the plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @fires Plugin#destroyed
     */
    unregisterPlugin: function unregisterPlugin(plugin) {
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
<<<<<<< HEAD
      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')
=======
      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin'
>>>>>>> master
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
<<<<<<< HEAD
      .trigger('destroyed.zf.' + pluginName);
=======
      ).trigger('destroyed.zf.' + pluginName);
>>>>>>> master
      for (var prop in plugin) {
        plugin[prop] = null; //clean up script to prep for garbage collection.
      }
      return;
    },

    /**
     * @function
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.
     */
    reInit: function reInit(plugins) {
      var isJQ = plugins instanceof $;
      try {
        if (isJQ) {
          plugins.each(function () {
            $(this).data('zfPlugin')._init();
          });
        } else {
          var type = typeof plugins === 'undefined' ? 'undefined' : _typeof(plugins),
              _this = this,
              fns = {
            'object': function object(plgs) {
              plgs.forEach(function (p) {
                p = hyphenate(p);
                $('[data-' + p + ']').foundation('_init');
              });
            },
            'string': function string() {
              plugins = hyphenate(plugins);
              $('[data-' + plugins + ']').foundation('_init');
            },
            'undefined': function undefined() {
              this['object'](Object.keys(_this._plugins));
            }
          };
          fns[type](plugins);
        }
      } catch (err) {
        console.error(err);
      } finally {
        return plugins;
      }
    },

    /**
     * returns a random base-36 uid with namespacing
     * @function
     * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
     * @param {String} namespace - name of plugin to be incorporated in uid, optional.
     * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
     * @returns {String} - unique id
     */
    GetYoDigits: function GetYoDigits(length, namespace) {
      length = length || 6;
      return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
    },
    /**
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
     */
    reflow: function reflow(elem, plugins) {

      // If plugins is undefined, just grab everything
      if (typeof plugins === 'undefined') {
        plugins = Object.keys(this._plugins);
      }
      // If plugins is a string, convert it to an array with one item
      else if (typeof plugins === 'string') {
          plugins = [plugins];
        }

      var _this = this;

      // Iterate through each plugin
      $.each(plugins, function (i, name) {
        // Get the current plugin
        var plugin = _this._plugins[name];

        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
        var $elem = $(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

        // For each plugin found, initialize it
        $elem.each(function () {
          var $el = $(this),
              opts = {};
          // Don't double-dip on plugins
          if ($el.data('zfPlugin')) {
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
            return;
          }

          if ($el.attr('data-options')) {
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
              var opt = e.split(':').map(function (el) {
                return el.trim();
              });
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
            });
          }
          try {
            $el.data('zfPlugin', new plugin($(this), opts));
          } catch (er) {
            console.error(er);
          } finally {
            return;
          }
        });
      });
    },
    getFnName: functionName,
    transitionend: function transitionend($elem) {
      var transitions = {
        'transition': 'transitionend',
        'WebkitTransition': 'webkitTransitionEnd',
        'MozTransition': 'transitionend',
        'OTransition': 'otransitionend'
      };
      var elem = document.createElement('div'),
          end;

      for (var t in transitions) {
        if (typeof elem.style[t] !== 'undefined') {
          end = transitions[t];
        }
      }
      if (end) {
        return end;
      } else {
        end = setTimeout(function () {
          $elem.triggerHandler('transitionend', [$elem]);
        }, 1);
        return 'transitionend';
      }
    }
  };

  Foundation.util = {
    /**
     * Function for applying a debounce effect to a function call.
     * @function
     * @param {Function} func - Function to be called at end of timeout.
     * @param {Number} delay - Time in ms to delay the call of `func`.
     * @returns function
     */
    throttle: function throttle(func, delay) {
      var timer = null;

      return function () {
        var context = this,
            args = arguments;

        if (timer === null) {
          timer = setTimeout(function () {
            func.apply(context, args);
            timer = null;
          }, delay);
        }
      };
    }
  };

  // TODO: consider not making this a jQuery function
  // TODO: need way to reflow vs. re-initialize
  /**
   * The Foundation jQuery method.
   * @param {String|Array} method - An action to perform on the current jQuery object.
   */
  var foundation = function foundation(method) {
    var type = typeof method === 'undefined' ? 'undefined' : _typeof(method),
        $meta = $('meta.foundation-mq'),
        $noJS = $('.no-js');

    if (!$meta.length) {
      $('<meta class="foundation-mq">').appendTo(document.head);
    }
    if ($noJS.length) {
      $noJS.removeClass('no-js');
    }

    if (type === 'undefined') {
      //needs to initialize the Foundation object, or an individual plugin.
      Foundation.MediaQuery._init();
      Foundation.reflow(this);
    } else if (type === 'string') {
      //an individual method to invoke on a plugin or group of plugins
      var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
      var plugClass = this.data('zfPlugin'); //determine the class of plugin

      if (plugClass !== undefined && plugClass[method] !== undefined) {
        //make sure both the class and method exist
        if (this.length === 1) {
          //if there's only one, call it directly.
          plugClass[method].apply(plugClass, args);
        } else {
          this.each(function (i, el) {
            //otherwise loop through the jQuery collection and invoke the method on each
            plugClass[method].apply($(el).data('zfPlugin'), args);
          });
        }
      } else {
        //error for no class or no method
        throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
      }
    } else {
      //error for invalid argument type
      throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
    }
    return this;
  };

  window.Foundation = Foundation;
  $.fn.foundation = foundation;

  // Polyfill for requestAnimationFrame
  (function () {
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
      return new Date().getTime();
    };

    var vendors = ['webkit', 'moz'];
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
      var vp = vendors[i];
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;
      window.requestAnimationFrame = function (callback) {
        var now = Date.now();
        var nextTime = Math.max(lastTime + 16, now);
        return setTimeout(function () {
          callback(lastTime = nextTime);
        }, nextTime - now);
      };
      window.cancelAnimationFrame = clearTimeout;
    }
    /**
     * Polyfill for performance.now, required by rAF
     */
    if (!window.performance || !window.performance.now) {
      window.performance = {
        start: Date.now(),
        now: function now() {
          return Date.now() - this.start;
        }
      };
    }
  })();
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // closest thing possible to the ECMAScript 5
        // internal IsCallable function
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function fNOP() {},
          fBound = function fBound() {
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };

      if (this.prototype) {
        // native functions don't have a prototype
        fNOP.prototype = this.prototype;
      }
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
  // Polyfill to get the name of a function in IE9
  function functionName(fn) {
    if (Function.prototype.name === undefined) {
      var funcNameRegex = /function\s([^(]{1,})\(/;
      var results = funcNameRegex.exec(fn.toString());
      return results && results.length > 1 ? results[1].trim() : "";
    } else if (fn.prototype === undefined) {
      return fn.constructor.name;
    } else {
      return fn.prototype.constructor.name;
    }
  }
  function parseValue(str) {
    if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;
  }
  // Convert PascalCase to kebab-case
  // Thank you: http://stackoverflow.com/a/8955580
  function hyphenate(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  }
}(jQuery);
'use strict';

!function ($) {

  Foundation.Box = {
    ImNotTouchingYou: ImNotTouchingYou,
    GetDimensions: GetDimensions,
    GetOffsets: GetOffsets
<<<<<<< HEAD
  };

  /**
   * Compares the dimensions of an element to a container and determines collision events with container.
   * @function
   * @param {jQuery} element - jQuery object to test for collisions.
   * @param {jQuery} parent - jQuery object to use as bounding container.
   * @param {Boolean} lrOnly - set to true to check left and right values only.
   * @param {Boolean} tbOnly - set to true to check top and bottom values only.
   * @default if no parent object passed, detects collisions with `window`.
   * @returns {Boolean} - true if collision free, false if a collision in any direction.
   */
  function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {
=======

    /**
     * Compares the dimensions of an element to a container and determines collision events with container.
     * @function
     * @param {jQuery} element - jQuery object to test for collisions.
     * @param {jQuery} parent - jQuery object to use as bounding container.
     * @param {Boolean} lrOnly - set to true to check left and right values only.
     * @param {Boolean} tbOnly - set to true to check top and bottom values only.
     * @default if no parent object passed, detects collisions with `window`.
     * @returns {Boolean} - true if collision free, false if a collision in any direction.
     */
  };function ImNotTouchingYou(element, parent, lrOnly, tbOnly) {
>>>>>>> master
    var eleDims = GetDimensions(element),
        top,
        bottom,
        left,
        right;

    if (parent) {
      var parDims = GetDimensions(parent);

      bottom = eleDims.offset.top + eleDims.height <= parDims.height + parDims.offset.top;
      top = eleDims.offset.top >= parDims.offset.top;
      left = eleDims.offset.left >= parDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= parDims.width + parDims.offset.left;
    } else {
      bottom = eleDims.offset.top + eleDims.height <= eleDims.windowDims.height + eleDims.windowDims.offset.top;
      top = eleDims.offset.top >= eleDims.windowDims.offset.top;
      left = eleDims.offset.left >= eleDims.windowDims.offset.left;
      right = eleDims.offset.left + eleDims.width <= eleDims.windowDims.width;
    }

    var allDirs = [bottom, top, left, right];

    if (lrOnly) {
      return left === right === true;
    }

    if (tbOnly) {
      return top === bottom === true;
    }

    return allDirs.indexOf(false) === -1;
  };

  /**
   * Uses native methods to return an object of dimension values.
   * @function
   * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
   * @returns {Object} - nested object of integer pixel values
   * TODO - if element is window, return only those values.
   */
  function GetDimensions(elem, test) {
    elem = elem.length ? elem[0] : elem;

    if (elem === window || elem === document) {
      throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
    }

    var rect = elem.getBoundingClientRect(),
        parRect = elem.parentNode.getBoundingClientRect(),
        winRect = document.body.getBoundingClientRect(),
        winY = window.pageYOffset,
        winX = window.pageXOffset;

    return {
      width: rect.width,
      height: rect.height,
      offset: {
        top: rect.top + winY,
        left: rect.left + winX
      },
      parentDims: {
        width: parRect.width,
        height: parRect.height,
        offset: {
          top: parRect.top + winY,
          left: parRect.left + winX
        }
      },
      windowDims: {
        width: winRect.width,
        height: winRect.height,
        offset: {
          top: winY,
          left: winX
        }
      }
    };
  }

  /**
   * Returns an object of top and left integer pixel values for dynamically rendered elements,
   * such as: Tooltip, Reveal, and Dropdown
   * @function
   * @param {jQuery} element - jQuery object for the element being positioned.
   * @param {jQuery} anchor - jQuery object for the element's anchor point.
   * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
   * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
   * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
   * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
   * TODO alter/rewrite to work with `em` values as well/instead of pixels
   */
  function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
    var $eleDims = GetDimensions(element),
        $anchorDims = anchor ? GetDimensions(anchor) : null;

    switch (position) {
      case 'top':
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top
        };
        break;
      case 'right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset,
          top: $anchorDims.offset.top
        };
        break;
      case 'center top':
        return {
          left: $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top - ($eleDims.height + vOffset)
        };
        break;
      case 'center bottom':
        return {
          left: isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'center left':
        return {
          left: $anchorDims.offset.left - ($eleDims.width + hOffset),
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center right':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset + 1,
          top: $anchorDims.offset.top + $anchorDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'center':
        return {
          left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2,
          top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - $eleDims.height / 2
        };
        break;
      case 'reveal':
        return {
          left: ($eleDims.windowDims.width - $eleDims.width) / 2,
          top: $eleDims.windowDims.offset.top + vOffset
        };
      case 'reveal full':
        return {
          left: $eleDims.windowDims.offset.left,
          top: $eleDims.windowDims.offset.top
        };
        break;
      case 'left bottom':
        return {
          left: $anchorDims.offset.left,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      case 'right bottom':
        return {
          left: $anchorDims.offset.left + $anchorDims.width + hOffset - $eleDims.width,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
        break;
      default:
        return {
          left: Foundation.rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width : $anchorDims.offset.left + hOffset,
          top: $anchorDims.offset.top + $anchorDims.height + vOffset
        };
    }
  }
}(jQuery);
/*******************************************
 *                                         *
 * This util was created by Marius Olbertz *
 * Please thank Marius on GitHub /owlbertz *
 * or the web http://www.mariusolbertz.de/ *
 *                                         *
 ******************************************/

'use strict';

!function ($) {

  var keyCodes = {
    9: 'TAB',
    13: 'ENTER',
    27: 'ESCAPE',
    32: 'SPACE',
    37: 'ARROW_LEFT',
    38: 'ARROW_UP',
    39: 'ARROW_RIGHT',
    40: 'ARROW_DOWN'
  };

  var commands = {};

  var Keyboard = {
    keys: getKeyCodes(keyCodes),

    /**
     * Parses the (keyboard) event and returns a String that represents its key
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
     * @param {Event} event - the event generated by the event handler
     * @return String key - String that represents the key pressed
     */
    parseKey: function parseKey(event) {
      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();

      // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
      key = key.replace(/\W+/, '');

      if (event.shiftKey) key = 'SHIFT_' + key;
      if (event.ctrlKey) key = 'CTRL_' + key;
      if (event.altKey) key = 'ALT_' + key;

      // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
      key = key.replace(/_$/, '');

      return key;
    },


    /**
     * Handles the given (keyboard) event
     * @param {Event} event - the event generated by the event handler
     * @param {String} component - Foundation component's name, e.g. Slider or Reveal
     * @param {Objects} functions - collection of functions that are to be executed
     */
    handleKey: function handleKey(event, component, functions) {
      var commandList = commands[component],
          keyCode = this.parseKey(event),
          cmds,
          command,
          fn;

      if (!commandList) return console.warn('Component not defined!');

      if (typeof commandList.ltr === 'undefined') {
        // this component does not differentiate between ltr and rtl
        cmds = commandList; // use plain list
      } else {
        // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
        if (Foundation.rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);else cmds = $.extend({}, commandList.rtl, commandList.ltr);
      }
      command = cmds[keyCode];

      fn = functions[command];
      if (fn && typeof fn === 'function') {
        // execute function  if exists
        var returnValue = fn.apply();
        if (functions.handled || typeof functions.handled === 'function') {
          // execute function when event was handled
          functions.handled(returnValue);
        }
      } else {
        if (functions.unhandled || typeof functions.unhandled === 'function') {
          // execute function when event was not handled
          functions.unhandled();
        }
      }
    },


    /**
     * Finds all focusable elements within the given `$element`
     * @param {jQuery} $element - jQuery object to search within
     * @return {jQuery} $focusable - all focusable elements within `$element`
     */
    findFocusable: function findFocusable($element) {
      if (!$element) {
        return false;
      }
      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
        if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) {
          return false;
        } //only have visible elements and those that have a tabindex greater or equal 0
        return true;
      });
    },


    /**
     * Returns the component name name
     * @param {Object} component - Foundation component, e.g. Slider or Reveal
     * @return String componentName
     */

    register: function register(componentName, cmds) {
      commands[componentName] = cmds;
    },


    /**
     * Traps the focus in the given element.
     * @param  {jQuery} $element  jQuery object to trap the foucs into.
     */
    trapFocus: function trapFocus($element) {
      var $focusable = Foundation.Keyboard.findFocusable($element),
          $firstFocusable = $focusable.eq(0),
          $lastFocusable = $focusable.eq(-1);

      $element.on('keydown.zf.trapfocus', function (event) {
        if (event.target === $lastFocusable[0] && Foundation.Keyboard.parseKey(event) === 'TAB') {
          event.preventDefault();
          $firstFocusable.focus();
        } else if (event.target === $firstFocusable[0] && Foundation.Keyboard.parseKey(event) === 'SHIFT_TAB') {
          event.preventDefault();
          $lastFocusable.focus();
        }
      });
    },

    /**
     * Releases the trapped focus from the given element.
     * @param  {jQuery} $element  jQuery object to release the focus for.
     */
    releaseFocus: function releaseFocus($element) {
      $element.off('keydown.zf.trapfocus');
    }
  };

  /*
   * Constants for easier comparing.
   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
   */
  function getKeyCodes(kcs) {
    var k = {};
    for (var kc in kcs) {
      k[kcs[kc]] = kcs[kc];
    }return k;
  }

  Foundation.Keyboard = Keyboard;
}(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function ($) {

  // Default set of media queries
  var defaultQueries = {
    'default': 'only screen',
    landscape: 'only screen and (orientation: landscape)',
    portrait: 'only screen and (orientation: portrait)',
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };

  var MediaQuery = {
    queries: [],

    current: '',

    /**
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function
     * @private
     */
    _init: function _init() {
      var self = this;
      var extractedStyles = $('.foundation-mq').css('font-family');
      var namedQueries;

      namedQueries = parseStyleToObject(extractedStyles);

      for (var key in namedQueries) {
        if (namedQueries.hasOwnProperty(key)) {
          self.queries.push({
            name: key,
            value: 'only screen and (min-width: ' + namedQueries[key] + ')'
          });
        }
      }

      this.current = this._getCurrentSize();

      this._watcher();
    },


    /**
     * Checks if the screen is at least as wide as a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
     */
    atLeast: function atLeast(size) {
      var query = this.get(size);

      if (query) {
        return window.matchMedia(query).matches;
      }

      return false;
    },


    /**
     * Checks if the screen matches to a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
     */
    is: function is(size) {
      size = size.trim().split(' ');
      if (size.length > 1 && size[1] === 'only') {
        if (size[0] === this._getCurrentSize()) return true;
      } else {
        return this.atLeast(size[0]);
      }
      return false;
    },


    /**
     * Gets the media query of a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to get.
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
     */
    get: function get(size) {
      for (var i in this.queries) {
        if (this.queries.hasOwnProperty(i)) {
          var query = this.queries[i];
          if (size === query.name) return query.value;
        }
      }

      return null;
    },


    /**
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function
     * @private
     * @returns {String} Name of the current breakpoint.
     */
    _getCurrentSize: function _getCurrentSize() {
      var matched;

      for (var i = 0; i < this.queries.length; i++) {
        var query = this.queries[i];

        if (window.matchMedia(query.value).matches) {
          matched = query;
        }
      }

      if ((typeof matched === 'undefined' ? 'undefined' : _typeof(matched)) === 'object') {
        return matched.name;
      } else {
        return matched;
      }
    },


    /**
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
     * @function
     * @private
     */
    _watcher: function _watcher() {
      var _this = this;

      $(window).on('resize.zf.mediaquery', function () {
        var newSize = _this._getCurrentSize(),
            currentSize = _this.current;

        if (newSize !== currentSize) {
          // Change the current media query
          _this.current = newSize;

          // Broadcast the media query change on the window
          $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
        }
      });
    }
  };

  Foundation.MediaQuery = MediaQuery;

  // matchMedia() polyfill - Test a CSS media type/query in JS.
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
  window.matchMedia || (window.matchMedia = function () {
    'use strict';

    // For browsers that support matchMedium api such as IE 9 and webkit

    var styleMedia = window.styleMedia || window.media;

    // For those that don't support matchMedium
    if (!styleMedia) {
      var style = document.createElement('style'),
          script = document.getElementsByTagName('script')[0],
          info = null;

      style.type = 'text/css';
      style.id = 'matchmediajs-test';

      script && script.parentNode && script.parentNode.insertBefore(style, script);

      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

      styleMedia = {
        matchMedium: function matchMedium(media) {
          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
          if (style.styleSheet) {
            style.styleSheet.cssText = text;
          } else {
            style.textContent = text;
          }

          // Test if media query is true or false
          return info.width === '1px';
        }
      };
    }

    return function (media) {
      return {
        matches: styleMedia.matchMedium(media || 'all'),
        media: media || 'all'
      };
    };
  }());

  // Thank you: https://github.com/sindresorhus/query-string
  function parseStyleToObject(str) {
    var styleObject = {};

    if (typeof str !== 'string') {
      return styleObject;
    }

    str = str.trim().slice(1, -1); // browsers re-quote string style values

    if (!str) {
      return styleObject;
    }

    styleObject = str.split('&').reduce(function (ret, param) {
      var parts = param.replace(/\+/g, ' ').split('=');
      var key = parts[0];
      var val = parts[1];
      key = decodeURIComponent(key);

      // missing `=` should be `null`:
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
      val = val === undefined ? null : decodeURIComponent(val);

      if (!ret.hasOwnProperty(key)) {
        ret[key] = val;
      } else if (Array.isArray(ret[key])) {
        ret[key].push(val);
      } else {
        ret[key] = [ret[key], val];
      }
      return ret;
    }, {});

    return styleObject;
  }

  Foundation.MediaQuery = MediaQuery;
}(jQuery);
'use strict';

!function ($) {

  /**
   * Motion module.
   * @module foundation.motion
   */

  var initClasses = ['mui-enter', 'mui-leave'];
  var activeClasses = ['mui-enter-active', 'mui-leave-active'];

  var Motion = {
    animateIn: function animateIn(element, animation, cb) {
      animate(true, element, animation, cb);
    },

    animateOut: function animateOut(element, animation, cb) {
      animate(false, element, animation, cb);
    }
  };

  function Move(duration, elem, fn) {
    var anim,
        prog,
        start = null;
    // console.log('called');

    if (duration === 0) {
      fn.apply(elem);
      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      return;
    }

    function move(ts) {
      if (!start) start = ts;
      // console.log(start, ts);
      prog = ts - start;
      fn.apply(elem);

      if (prog < duration) {
        anim = window.requestAnimationFrame(move, elem);
      } else {
        window.cancelAnimationFrame(anim);
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
      }
    }
    anim = window.requestAnimationFrame(move);
  }

  /**
   * Animates an element in or out using a CSS transition class.
   * @function
   * @private
   * @param {Boolean} isIn - Defines if the animation is in or out.
   * @param {Object} element - jQuery or HTML object to animate.
   * @param {String} animation - CSS class to use.
   * @param {Function} cb - Callback to run when animation is finished.
   */
  function animate(isIn, element, animation, cb) {
    element = $(element).eq(0);

    if (!element.length) return;

    var initClass = isIn ? initClasses[0] : initClasses[1];
    var activeClass = isIn ? activeClasses[0] : activeClasses[1];

    // Set up the animation
    reset();

    element.addClass(animation).css('transition', 'none');

    requestAnimationFrame(function () {
      element.addClass(initClass);
      if (isIn) element.show();
    });

    // Start the animation
    requestAnimationFrame(function () {
      element[0].offsetWidth;
      element.css('transition', '').addClass(activeClass);
    });

    // Clean up the animation when it finishes
    element.one(Foundation.transitionend(element), finish);

    // Hides the element (for out animations), resets the element, and runs a callback
    function finish() {
      if (!isIn) element.hide();
      reset();
      if (cb) cb.apply(element);
    }

    // Resets transitions and removes motion-specific classes
    function reset() {
      element[0].style.transitionDuration = 0;
      element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
    }
  }

  Foundation.Move = Move;
  Foundation.Motion = Motion;
}(jQuery);
'use strict';

!function ($) {

    var Nest = {
        Feather: function Feather(menu) {
            var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';

            menu.attr('role', 'menubar');

            var items = menu.find('li').attr({ 'role': 'menuitem' }),
                subMenuClass = 'is-' + type + '-submenu',
                subItemClass = subMenuClass + '-item',
                hasSubClass = 'is-' + type + '-submenu-parent',
                applyAria = type !== 'accordion'; // Accordions handle their own ARIA attriutes.

            menu.find('a:first').attr('tabindex', 0);

            items.each(function () {
                var $item = $(this),
                    $sub = $item.children('ul');

                if ($sub.length) {
                    $item.addClass(hasSubClass);
                    $sub.addClass('submenu ' + subMenuClass).attr({ 'data-submenu': '' });
                    if (applyAria) {
                        $item.attr({
                            'aria-haspopup': true,
                            'aria-expanded': false,
                            'aria-label': $item.children('a:first').text()
                        });

                        $sub.attr({
                            'aria-hidden': true,
                            'role': 'menu'
                        });
                    }
                }

                if ($item.parent('[data-submenu]').length) {
                    $item.addClass('is-submenu-item ' + subItemClass);
                }
            });

            return;
        },
        Burn: function Burn(menu, type) {
            var items = menu.find('li').removeAttr('tabindex'),
                subMenuClass = 'is-' + type + '-submenu',
                subItemClass = subMenuClass + '-item',
                hasSubClass = 'is-' + type + '-submenu-parent';

            menu.find('>li, .menu, .menu > li').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');

            // console.log(      menu.find('.' + subMenuClass + ', .' + subItemClass + ', .has-submenu, .is-submenu-item, .submenu, [data-submenu]')
            //           .removeClass(subMenuClass + ' ' + subItemClass + ' has-submenu is-submenu-item submenu')
            //           .removeAttr('data-submenu'));
            // items.each(function(){
            //   var $item = $(this),
            //       $sub = $item.children('ul');
            //   if($item.parent('[data-submenu]').length){
            //     $item.removeClass('is-submenu-item ' + subItemClass);
            //   }
            //   if($sub.length){
            //     $item.removeClass('has-submenu');
            //     $sub.removeClass('submenu ' + subMenuClass).removeAttr('data-submenu');
            //   }
            // });
        }
    };

    Foundation.Nest = Nest;
}(jQuery);
'use strict';

!function ($) {

  function Timer(elem, options, cb) {
    var _this = this,
        duration = options.duration,
        //options is an object for easily adding features later.
    nameSpace = Object.keys(elem.data())[0] || 'timer',
        remain = -1,
        start,
        timer;

    this.isPaused = false;

    this.restart = function () {
      remain = -1;
      clearTimeout(timer);
      this.start();
    };

    this.start = function () {
      this.isPaused = false;
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      remain = remain <= 0 ? duration : remain;
      elem.data('paused', false);
      start = Date.now();
      timer = setTimeout(function () {
        if (options.infinite) {
          _this.restart(); //rerun the timer.
        }
        if (cb && typeof cb === 'function') {
          cb();
        }
      }, remain);
      elem.trigger('timerstart.zf.' + nameSpace);
    };

    this.pause = function () {
      this.isPaused = true;
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      elem.data('paused', true);
      var end = Date.now();
      remain = remain - (end - start);
      elem.trigger('timerpaused.zf.' + nameSpace);
    };
  }

  /**
   * Runs a callback function when images are fully loaded.
   * @param {Object} images - Image(s) to check if loaded.
   * @param {Func} callback - Function to execute when image is fully loaded.
   */
  function onImagesLoaded(images, callback) {
    var self = this,
        unloaded = images.length;

    if (unloaded === 0) {
      callback();
    }

    images.each(function () {
      // Check if image is loaded
      if (this.complete || this.readyState === 4 || this.readyState === 'complete') {
        singleImageLoaded();
      }
      // Force load the image
      else {
          // fix for IE. See https://css-tricks.com/snippets/jquery/fixing-load-in-ie-for-cached-images/
          var src = $(this).attr('src');
          $(this).attr('src', src + (src.indexOf('?') >= 0 ? '&' : '?') + new Date().getTime());
          $(this).one('load', function () {
            singleImageLoaded();
          });
        }
    });

    function singleImageLoaded() {
      unloaded--;
      if (unloaded === 0) {
        callback();
      }
    }
  }

  Foundation.Timer = Timer;
  Foundation.onImagesLoaded = onImagesLoaded;
}(jQuery);
'use strict';

//**************************************************
//**Work inspired by multiple jquery swipe plugins**
//**Done by Yohai Ararat ***************************
//**************************************************
(function ($) {

	$.spotSwipe = {
		version: '1.0.0',
		enabled: 'ontouchstart' in document.documentElement,
		preventDefault: false,
		moveThreshold: 75,
		timeThreshold: 200
	};

	var startPosX,
	    startPosY,
	    startTime,
	    elapsedTime,
	    isMoving = false;

	function onTouchEnd() {
		//  alert(this);
		this.removeEventListener('touchmove', onTouchMove);
		this.removeEventListener('touchend', onTouchEnd);
		isMoving = false;
	}

	function onTouchMove(e) {
		if ($.spotSwipe.preventDefault) {
			e.preventDefault();
		}
		if (isMoving) {
			var x = e.touches[0].pageX;
			var y = e.touches[0].pageY;
			var dx = startPosX - x;
			var dy = startPosY - y;
			var dir;
			elapsedTime = new Date().getTime() - startTime;
			if (Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
				dir = dx > 0 ? 'left' : 'right';
			}
			// else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
			//   dir = dy > 0 ? 'down' : 'up';
			// }
			if (dir) {
				e.preventDefault();
				onTouchEnd.call(this);
				$(this).trigger('swipe', dir).trigger('swipe' + dir);
			}
		}
	}

	function onTouchStart(e) {
		if (e.touches.length == 1) {
			startPosX = e.touches[0].pageX;
			startPosY = e.touches[0].pageY;
			isMoving = true;
			startTime = new Date().getTime();
			this.addEventListener('touchmove', onTouchMove, false);
			this.addEventListener('touchend', onTouchEnd, false);
		}
	}

	function init() {
		this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
	}

	function teardown() {
		this.removeEventListener('touchstart', onTouchStart);
	}

	$.event.special.swipe = { setup: init };

	$.each(['left', 'up', 'down', 'right'], function () {
		$.event.special['swipe' + this] = { setup: function setup() {
				$(this).on('swipe', $.noop);
			} };
	});
})(jQuery);
/****************************************************
 * Method for adding psuedo drag events to elements *
 ***************************************************/
!function ($) {
	$.fn.addTouch = function () {
		this.each(function (i, el) {
			$(el).bind('touchstart touchmove touchend touchcancel', function () {
				//we pass the original event object because the jQuery event
				//object is normalized to w3c specs and does not provide the TouchList
				handleTouch(event);
			});
		});

		var handleTouch = function handleTouch(event) {
			var touches = event.changedTouches,
			    first = touches[0],
			    eventTypes = {
				touchstart: 'mousedown',
				touchmove: 'mousemove',
				touchend: 'mouseup'
			},
			    type = eventTypes[event.type],
			    simulatedEvent;

			if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
				simulatedEvent = new window.MouseEvent(type, {
					'bubbles': true,
					'cancelable': true,
					'screenX': first.screenX,
					'screenY': first.screenY,
					'clientX': first.clientX,
					'clientY': first.clientY
				});
			} else {
				simulatedEvent = document.createEvent('MouseEvent');
				simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
			}
			first.target.dispatchEvent(simulatedEvent);
		};
	};
}(jQuery);

//**********************************
//**From the jQuery Mobile Library**
//**need to recreate functionality**
//**and try to improve if possible**
//**********************************

/* Removing the jQuery function ****
************************************

(function( $, window, undefined ) {

	var $document = $( document ),
		// supportTouch = $.mobile.support.touch,
		touchStartEvent = 'touchstart'//supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = 'touchend'//supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = 'touchmove'//supportTouch ? "touchmove" : "mousemove";

	// setup new event shortcuts
	$.each( ( "touchstart touchmove touchend " +
		"swipe swipeleft swiperight" ).split( " " ), function( i, name ) {

		$.fn[ name ] = function( fn ) {
			return fn ? this.bind( name, fn ) : this.trigger( name );
		};

		// jQuery < 1.8
		if ( $.attrFn ) {
			$.attrFn[ name ] = true;
		}
	});

	function triggerCustomEvent( obj, eventType, event, bubble ) {
		var originalType = event.type;
		event.type = eventType;
		if ( bubble ) {
			$.event.trigger( event, undefined, obj );
		} else {
			$.event.dispatch.call( obj, event );
		}
		event.type = originalType;
	}

	// also handles taphold

	// Also handles swipeleft, swiperight
	$.event.special.swipe = {

		// More than this horizontal displacement, and we will suppress scrolling.
		scrollSupressionThreshold: 30,

		// More time than this, and it isn't a swipe.
		durationThreshold: 1000,

		// Swipe horizontal displacement must be more than this.
		horizontalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		// Swipe vertical displacement must be less than this.
		verticalDistanceThreshold: window.devicePixelRatio >= 2 ? 15 : 30,

		getLocation: function ( event ) {
			var winPageX = window.pageXOffset,
				winPageY = window.pageYOffset,
				x = event.clientX,
				y = event.clientY;

			if ( event.pageY === 0 && Math.floor( y ) > Math.floor( event.pageY ) ||
				event.pageX === 0 && Math.floor( x ) > Math.floor( event.pageX ) ) {

				// iOS4 clientX/clientY have the value that should have been
				// in pageX/pageY. While pageX/page/ have the value 0
				x = x - winPageX;
				y = y - winPageY;
			} else if ( y < ( event.pageY - winPageY) || x < ( event.pageX - winPageX ) ) {

				// Some Android browsers have totally bogus values for clientX/Y
				// when scrolling/zooming a page. Detectable since clientX/clientY
				// should never be smaller than pageX/pageY minus page scroll
				x = event.pageX - winPageX;
				y = event.pageY - winPageY;
			}

			return {
				x: x,
				y: y
			};
		},

		start: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ],
						origin: $( event.target )
					};
		},

		stop: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event,
				location = $.event.special.swipe.getLocation( data );
			return {
						time: ( new Date() ).getTime(),
						coords: [ location.x, location.y ]
					};
		},

		handleSwipe: function( start, stop, thisObject, origTarget ) {
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {
				var direction = start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight";

				triggerCustomEvent( thisObject, "swipe", $.Event( "swipe", { target: origTarget, swipestart: start, swipestop: stop }), true );
				triggerCustomEvent( thisObject, direction,$.Event( direction, { target: origTarget, swipestart: start, swipestop: stop } ), true );
				return true;
			}
			return false;

		},

		// This serves as a flag to ensure that at most one swipe event event is
		// in work at any given time
		eventInProgress: false,

		setup: function() {
			var events,
				thisObject = this,
				$this = $( thisObject ),
				context = {};

			// Retrieve the events data for this element and add the swipe context
			events = $.data( this, "mobile-events" );
			if ( !events ) {
				events = { length: 0 };
				$.data( this, "mobile-events", events );
			}
			events.length++;
			events.swipe = context;

			context.start = function( event ) {

				// Bail if we're already working on a swipe event
				if ( $.event.special.swipe.eventInProgress ) {
					return;
				}
				$.event.special.swipe.eventInProgress = true;

				var stop,
					start = $.event.special.swipe.start( event ),
					origTarget = event.target,
					emitted = false;

				context.move = function( event ) {
					if ( !start || event.isDefaultPrevented() ) {
						return;
					}

					stop = $.event.special.swipe.stop( event );
					if ( !emitted ) {
						emitted = $.event.special.swipe.handleSwipe( start, stop, thisObject, origTarget );
						if ( emitted ) {

							// Reset the context to make way for the next swipe event
							$.event.special.swipe.eventInProgress = false;
						}
					}
					// prevent scrolling
					if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
						event.preventDefault();
					}
				};

				context.stop = function() {
						emitted = true;

						// Reset the context to make way for the next swipe event
						$.event.special.swipe.eventInProgress = false;
						$document.off( touchMoveEvent, context.move );
						context.move = null;
				};

				$document.on( touchMoveEvent, context.move )
					.one( touchStopEvent, context.stop );
			};
			$this.on( touchStartEvent, context.start );
		},

		teardown: function() {
			var events, context;

			events = $.data( this, "mobile-events" );
			if ( events ) {
				context = events.swipe;
				delete events.swipe;
				events.length--;
				if ( events.length === 0 ) {
					$.removeData( this, "mobile-events" );
				}
			}

			if ( context ) {
				if ( context.start ) {
					$( this ).off( touchStartEvent, context.start );
				}
				if ( context.move ) {
					$document.off( touchMoveEvent, context.move );
				}
				if ( context.stop ) {
					$document.off( touchStopEvent, context.stop );
				}
			}
		}
	};
	$.each({
		swipeleft: "swipe.left",
		swiperight: "swipe.right"
	}, function( event, sourceEvent ) {

		$.event.special[ event ] = {
			setup: function() {
				$( this ).bind( sourceEvent, $.noop );
			},
			teardown: function() {
				$( this ).unbind( sourceEvent );
			}
		};
	});
})( jQuery, this );
*/
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function ($) {

  var MutationObserver = function () {
    var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
    for (var i = 0; i < prefixes.length; i++) {
      if (prefixes[i] + 'MutationObserver' in window) {
        return window[prefixes[i] + 'MutationObserver'];
      }
    }
    return false;
  }();

  var triggers = function triggers(el, type) {
    el.data(type).split(' ').forEach(function (id) {
      $('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
    });
  };
  // Elements with [data-open] will reveal a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-open]', function () {
    triggers($(this), 'open');
  });

  // Elements with [data-close] will close a plugin that supports it when clicked.
  // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
  $(document).on('click.zf.trigger', '[data-close]', function () {
    var id = $(this).data('close');
    if (id) {
      triggers($(this), 'close');
    } else {
      $(this).trigger('close.zf.trigger');
    }
  });

  // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
  $(document).on('click.zf.trigger', '[data-toggle]', function () {
    var id = $(this).data('toggle');
    if (id) {
      triggers($(this), 'toggle');
    } else {
      $(this).trigger('toggle.zf.trigger');
    }
  });

  // Elements with [data-closable] will respond to close.zf.trigger events.
  $(document).on('close.zf.trigger', '[data-closable]', function (e) {
    e.stopPropagation();
    var animation = $(this).data('closable');

    if (animation !== '') {
      Foundation.Motion.animateOut($(this), animation, function () {
        $(this).trigger('closed.zf');
      });
    } else {
      $(this).fadeOut().trigger('closed.zf');
    }
  });

  $(document).on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', function () {
    var id = $(this).data('toggle-focus');
    $('#' + id).triggerHandler('toggle.zf.trigger', [$(this)]);
  });

  /**
  * Fires once after all other scripts have loaded
  * @function
  * @private
  */
  $(window).on('load', function () {
    checkListeners();
  });

  function checkListeners() {
    eventsListener();
    resizeListener();
    scrollListener();
    closemeListener();
  }

  //******** only fires this function once on load, if there's something to watch ********
  function closemeListener(pluginName) {
    var yetiBoxes = $('[data-yeti-box]'),
        plugNames = ['dropdown', 'tooltip', 'reveal'];

    if (pluginName) {
      if (typeof pluginName === 'string') {
        plugNames.push(pluginName);
      } else if ((typeof pluginName === 'undefined' ? 'undefined' : _typeof(pluginName)) === 'object' && typeof pluginName[0] === 'string') {
        plugNames.concat(pluginName);
      } else {
        console.error('Plugin names must be strings');
      }
    }
    if (yetiBoxes.length) {
      var listeners = plugNames.map(function (name) {
        return 'closeme.zf.' + name;
      }).join(' ');

      $(window).off(listeners).on(listeners, function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = $('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = $(this);

          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      });
    }
  }

  function resizeListener(debounce) {
    var timer = void 0,
        $nodes = $('[data-resize]');
    if ($nodes.length) {
      $(window).off('resize.zf.trigger').on('resize.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('resizeme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a resize event
          $nodes.attr('data-events', "resize");
        }, debounce || 10); //default time to emit resize event
      });
    }
  }

  function scrollListener(debounce) {
    var timer = void 0,
        $nodes = $('[data-scroll]');
    if ($nodes.length) {
      $(window).off('scroll.zf.trigger').on('scroll.zf.trigger', function (e) {
        if (timer) {
          clearTimeout(timer);
        }

        timer = setTimeout(function () {

          if (!MutationObserver) {
            //fallback for IE 9
            $nodes.each(function () {
              $(this).triggerHandler('scrollme.zf.trigger');
            });
          }
          //trigger all listening elements and signal a scroll event
          $nodes.attr('data-events', "scroll");
        }, debounce || 10); //default time to emit scroll event
      });
    }
  }

  function eventsListener() {
    if (!MutationObserver) {
      return false;
    }
    var nodes = document.querySelectorAll('[data-resize], [data-scroll], [data-mutate]');

    //element callback
    var listeningElementsMutation = function listeningElementsMutation(mutationRecordsList) {
      var $target = $(mutationRecordsList[0].target);

      //trigger the event handler for the element depending on type
      switch (mutationRecordsList[0].type) {

        case "attributes":
          if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
            $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
          }
          if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
            $target.triggerHandler('resizeme.zf.trigger', [$target]);
          }
          if (mutationRecordsList[0].attributeName === "style") {
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
          }
          break;

        case "childList":
          $target.closest("[data-mutate]").attr("data-events", "mutate");
          $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
          break;

        default:
          return false;
        //nothing
      }
    };

    if (nodes.length) {
      //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
      for (var i = 0; i <= nodes.length - 1; i++) {
        var elementObserver = new MutationObserver(listeningElementsMutation);
        elementObserver.observe(nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
      }
    }
  }

  // ------------------------------------

  // [PH]
  // Foundation.CheckWatchers = checkWatchers;
  Foundation.IHearYou = checkListeners;
  // Foundation.ISeeYou = scrollListener;
  // Foundation.IFeelYou = closemeListener;
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Abide module.
   * @module foundation.abide
   */

  var Abide = function () {
    /**
     * Creates a new instance of Abide.
     * @class
     * @fires Abide#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Abide(element) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Abide);

      this.$element = element;
      this.options = $.extend({}, Abide.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Abide');
    }

    /**
     * Initializes the Abide plugin and calls functions to get Abide functioning on load.
     * @private
     */


    _createClass(Abide, [{
      key: '_init',
      value: function _init() {
        this.$inputs = this.$element.find('input, textarea, select');

        this._events();
      }

      /**
       * Initializes events for Abide.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this2 = this;

        this.$element.off('.abide').on('reset.zf.abide', function () {
          _this2.resetForm();
        }).on('submit.zf.abide', function () {
          return _this2.validateForm();
        });

        if (this.options.validateOn === 'fieldChange') {
          this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {
            _this2.validateInput($(e.target));
          });
        }

        if (this.options.liveValidate) {
          this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {
            _this2.validateInput($(e.target));
          });
        }

        if (this.options.validateOnBlur) {
          this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {
            _this2.validateInput($(e.target));
          });
        }
      }

      /**
       * Calls necessary functions to update Abide upon DOM change
       * @private
       */

    }, {
      key: '_reflow',
      value: function _reflow() {
        this._init();
      }

      /**
       * Checks whether or not a form element has the required attribute and if it's checked or not
       * @param {Object} element - jQuery object to check for required attribute
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
       */

    }, {
      key: 'requiredCheck',
      value: function requiredCheck($el) {
        if (!$el.attr('required')) return true;

        var isGood = true;

        switch ($el[0].type) {
          case 'checkbox':
            isGood = $el[0].checked;
            break;

          case 'select':
          case 'select-one':
          case 'select-multiple':
            var opt = $el.find('option:selected');
            if (!opt.length || !opt.val()) isGood = false;
            break;

          default:
            if (!$el.val() || !$el.val().length) isGood = false;
        }

        return isGood;
      }

      /**
       * Get:
       * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:
       *   1. The element's direct sibling('s).
       *   2. The element's parent's children.
       * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.
       *
       * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
       *
       * @param {Object} $el - jQuery object to use as reference to find the form error selector.
       * @returns {Object} jQuery object with the selector.
       */

    }, {
      key: 'findFormError',
      value: function findFormError($el) {
        var id = $el[0].id;
        var $error = $el.siblings(this.options.formErrorSelector);

        if (!$error.length) {
          $error = $el.parent().find(this.options.formErrorSelector);
        }

        $error = $error.add(this.$element.find('[data-form-error-for="' + id + '"]'));

        return $error;
      }

      /**
       * Get the first element in this order:
       * 2. The <label> with the attribute `[for="someInputId"]`
       * 3. The `.closest()` <label>
       *
       * @param {Object} $el - jQuery object to check for required attribute
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
       */

    }, {
      key: 'findLabel',
      value: function findLabel($el) {
        var id = $el[0].id;
        var $label = this.$element.find('label[for="' + id + '"]');

        if (!$label.length) {
          return $el.closest('label');
        }

        return $label;
      }

      /**
       * Get the set of labels associated with a set of radio els in this order
       * 2. The <label> with the attribute `[for="someInputId"]`
       * 3. The `.closest()` <label>
       *
       * @param {Object} $el - jQuery object to check for required attribute
       * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
       */

    }, {
      key: 'findRadioLabels',
      value: function findRadioLabels($els) {
        var _this3 = this;

        var labels = $els.map(function (i, el) {
          var id = el.id;
          var $label = _this3.$element.find('label[for="' + id + '"]');

          if (!$label.length) {
            $label = $(el).closest('label');
          }
          return $label[0];
        });

        return $(labels);
      }

      /**
       * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
       * @param {Object} $el - jQuery object to add the class to
       */

    }, {
      key: 'addErrorClasses',
      value: function addErrorClasses($el) {
        var $label = this.findLabel($el);
        var $formError = this.findFormError($el);

        if ($label.length) {
          $label.addClass(this.options.labelErrorClass);
        }

        if ($formError.length) {
          $formError.addClass(this.options.formErrorClass);
        }

        $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');
      }

      /**
       * Remove CSS error classes etc from an entire radio button group
       * @param {String} groupName - A string that specifies the name of a radio button group
       *
       */

    }, {
      key: 'removeRadioErrorClasses',
      value: function removeRadioErrorClasses(groupName) {
        var $els = this.$element.find(':radio[name="' + groupName + '"]');
        var $labels = this.findRadioLabels($els);
        var $formErrors = this.findFormError($els);

        if ($labels.length) {
          $labels.removeClass(this.options.labelErrorClass);
        }

        if ($formErrors.length) {
          $formErrors.removeClass(this.options.formErrorClass);
        }

        $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
      }

      /**
       * Removes CSS error class as specified by the Abide settings from the label, input, and the form
       * @param {Object} $el - jQuery object to remove the class from
       */

    }, {
      key: 'removeErrorClasses',
      value: function removeErrorClasses($el) {
        // radios need to clear all of the els
        if ($el[0].type == 'radio') {
          return this.removeRadioErrorClasses($el.attr('name'));
        }

        var $label = this.findLabel($el);
        var $formError = this.findFormError($el);

        if ($label.length) {
          $label.removeClass(this.options.labelErrorClass);
        }

        if ($formError.length) {
          $formError.removeClass(this.options.formErrorClass);
        }

        $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
      }

      /**
       * Goes through a form to find inputs and proceeds to validate them in ways specific to their type. 
       * Ignores inputs with data-abide-ignore, type="hidden" or disabled attributes set
       * @fires Abide#invalid
       * @fires Abide#valid
       * @param {Object} element - jQuery object to validate, should be an HTML input
       * @returns {Boolean} goodToGo - If the input is valid or not.
       */

    }, {
      key: 'validateInput',
      value: function validateInput($el) {
<<<<<<< HEAD
        var _this4 = this;

=======
>>>>>>> master
        var clearRequire = this.requiredCheck($el),
            validated = false,
            customValidator = true,
            validator = $el.attr('data-validator'),
            equalTo = true;

        // don't validate ignored inputs or hidden inputs or disabled inputs
        if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]') || $el.is('[disabled]')) {
          return true;
        }

        switch ($el[0].type) {
          case 'radio':
            validated = this.validateRadio($el.attr('name'));
            break;

          case 'checkbox':
            validated = clearRequire;
            break;

          case 'select':
          case 'select-one':
          case 'select-multiple':
            validated = clearRequire;
            break;

          default:
            validated = this.validateText($el);
        }

        if (validator) {
          customValidator = this.matchValidation($el, validator, $el.attr('required'));
        }

        if ($el.attr('data-equalto')) {
          equalTo = this.options.validators.equalTo($el);
        }

        var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;
        var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';

        if (goodToGo) {
          // Re-validate inputs that depend on this one with equalto
          var dependentElements = this.$element.find('[data-equalto="' + $el.attr('id') + '"]');
          if (dependentElements.length) {
<<<<<<< HEAD
            (function () {
              var _this = _this4;
              dependentElements.each(function () {
                if ($(this).val()) {
                  _this.validateInput($(this));
                }
              });
            })();
=======
            var _this = this;
            dependentElements.each(function () {
              if ($(this).val()) {
                _this.validateInput($(this));
              }
            });
>>>>>>> master
          }
        }

        this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);

        /**
         * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
         * Trigger includes the DOM element of the input.
         * @event Abide#valid
         * @event Abide#invalid
         */
        $el.trigger(message, [$el]);

        return goodToGo;
      }

      /**
       * Goes through a form and if there are any invalid inputs, it will display the form error element
       * @returns {Boolean} noError - true if no errors were detected...
       * @fires Abide#formvalid
       * @fires Abide#forminvalid
       */

    }, {
      key: 'validateForm',
      value: function validateForm() {
        var acc = [];
        var _this = this;

        this.$inputs.each(function () {
          acc.push(_this.validateInput($(this)));
        });

        var noError = acc.indexOf(false) === -1;

        this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');

        /**
         * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
         * Trigger includes the element of the form.
         * @event Abide#formvalid
         * @event Abide#forminvalid
         */
        this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);

        return noError;
      }

      /**
       * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
       * @param {Object} $el - jQuery object to validate, should be a text input HTML element
       * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
       * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
       */

    }, {
      key: 'validateText',
      value: function validateText($el, pattern) {
        // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
        pattern = pattern || $el.attr('pattern') || $el.attr('type');
        var inputText = $el.val();
        var valid = false;

        if (inputText.length) {
          // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
          if (this.options.patterns.hasOwnProperty(pattern)) {
            valid = this.options.patterns[pattern].test(inputText);
          }
          // If the pattern name isn't also the type attribute of the field, then test it as a regexp
          else if (pattern !== $el.attr('type')) {
              valid = new RegExp(pattern).test(inputText);
            } else {
              valid = true;
            }
        }
        // An empty field is valid if it's not required
        else if (!$el.prop('required')) {
            valid = true;
          }

        return valid;
      }

      /**
       * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
       * @param {String} groupName - A string that specifies the name of a radio button group
       * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
       */

    }, {
      key: 'validateRadio',
      value: function validateRadio(groupName) {
        // If at least one radio in the group has the `required` attribute, the group is considered required
        // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
        var $group = this.$element.find(':radio[name="' + groupName + '"]');
        var valid = false,
            required = false;

        // For the group to be required, at least one radio needs to be required
        $group.each(function (i, e) {
          if ($(e).attr('required')) {
            required = true;
          }
        });
        if (!required) valid = true;

        if (!valid) {
          // For the group to be valid, at least one radio needs to be checked
          $group.each(function (i, e) {
            if ($(e).prop('checked')) {
              valid = true;
            }
          });
        };

        return valid;
      }

      /**
       * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
       * @param {Object} $el - jQuery input element.
       * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
       * @param {Boolean} required - self explanatory?
       * @returns {Boolean} - true if validations passed.
       */

    }, {
      key: 'matchValidation',
      value: function matchValidation($el, validators, required) {
<<<<<<< HEAD
        var _this5 = this;
=======
        var _this4 = this;
>>>>>>> master

        required = required ? true : false;

        var clear = validators.split(' ').map(function (v) {
<<<<<<< HEAD
          return _this5.options.validators[v]($el, required, $el.parent());
=======
          return _this4.options.validators[v]($el, required, $el.parent());
>>>>>>> master
        });
        return clear.indexOf(false) === -1;
      }

      /**
       * Resets form inputs and styles
       * @fires Abide#formreset
       */

    }, {
      key: 'resetForm',
      value: function resetForm() {
        var $form = this.$element,
            opts = this.options;

        $('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);
        $('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);
        $(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);
        $form.find('[data-abide-error]').css('display', 'none');
        $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
        $(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
        $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
        /**
         * Fires when the form has been reset.
         * @event Abide#formreset
         */
        $form.trigger('formreset.zf.abide', [$form]);
      }

      /**
       * Destroys an instance of Abide.
       * Removes error styles and classes from elements, without resetting their values.
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        var _this = this;
        this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');

        this.$inputs.off('.abide').each(function () {
          _this.removeErrorClasses($(this));
        });

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Abide;
  }();

  /**
   * Default settings for plugin
   */


  Abide.defaults = {
    /**
     * The default event to validate inputs. Checkboxes and radios validate immediately.
     * Remove or change this value for manual validation.
     * @option
     * @type {?string}
     * @default 'fieldChange'
     */
    validateOn: 'fieldChange',

    /**
     * Class to be applied to input labels on failed validation.
     * @option
     * @type {string}
     * @default 'is-invalid-label'
     */
    labelErrorClass: 'is-invalid-label',

    /**
     * Class to be applied to inputs on failed validation.
     * @option
     * @type {string}
     * @default 'is-invalid-input'
     */
    inputErrorClass: 'is-invalid-input',

    /**
     * Class selector to use to target Form Errors for show/hide.
     * @option
     * @type {string}
     * @default '.form-error'
     */
    formErrorSelector: '.form-error',

    /**
     * Class added to Form Errors on failed validation.
     * @option
     * @type {string}
     * @default 'is-visible'
     */
    formErrorClass: 'is-visible',

    /**
     * Set to true to validate text inputs on any value change.
     * @option
     * @type {boolean}
     * @default false
     */
    liveValidate: false,

    /**
     * Set to true to validate inputs on blur.
     * @option
     * @type {boolean}
     * @default false
     */
    validateOnBlur: false,

    patterns: {
      alpha: /^[a-zA-Z]+$/,
      alpha_numeric: /^[a-zA-Z0-9]+$/,
      integer: /^[-+]?\d+$/,
      number: /^[-+]?\d*(?:[\.\,]\d+)?$/,

      // amex, visa, diners
      card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
      cvv: /^([0-9]){3,4}$/,

      // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
      email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,

      url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
      // abc.de
      domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,

      datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
      // YYYY-MM-DD
      date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
      // HH:MM:SS
      time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
      dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
      // MM/DD/YYYY
      month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
      // DD/MM/YYYY
      day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,

      // #FFF or #FFFFFF
      color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/
    },

    /**
     * Optional validation functions to be used. `equalTo` being the only default included function.
     * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
     * el : The jQuery element to validate.
     * required : Boolean value of the required attribute be present or not.
     * parent : The direct parent of the input.
     * @option
     */
    validators: {
      equalTo: function equalTo(el, required, parent) {
        return $('#' + el.attr('data-equalto')).val() === el.val();
      }
    }
<<<<<<< HEAD
  };

  // Window exports
  Foundation.plugin(Abide, 'Abide');
=======

    // Window exports
  };Foundation.plugin(Abide, 'Abide');
>>>>>>> master
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Accordion module.
   * @module foundation.accordion
   * @requires foundation.util.keyboard
   * @requires foundation.util.motion
   */

  var Accordion = function () {
    /**
     * Creates a new instance of an accordion.
     * @class
     * @fires Accordion#init
     * @param {jQuery} element - jQuery object to make into an accordion.
     * @param {Object} options - a plain object with settings to override the default options.
     */
    function Accordion(element, options) {
      _classCallCheck(this, Accordion);

      this.$element = element;
      this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Accordion');
      Foundation.Keyboard.register('Accordion', {
        'ENTER': 'toggle',
        'SPACE': 'toggle',
        'ARROW_DOWN': 'next',
        'ARROW_UP': 'previous'
      });
    }

    /**
     * Initializes the accordion by animating the preset active pane(s).
     * @private
     */


    _createClass(Accordion, [{
      key: '_init',
      value: function _init() {
        var _this2 = this;

        this.$element.attr('role', 'tablist');
        this.$tabs = this.$element.children('[data-accordion-item]');

        this.$tabs.each(function (idx, el) {
          var $el = $(el),
              $content = $el.children('[data-tab-content]'),
              id = $content[0].id || Foundation.GetYoDigits(6, 'accordion'),
              linkId = el.id || id + '-label';

          $el.find('a:first').attr({
            'aria-controls': id,
            'role': 'tab',
            'id': linkId,
            'aria-expanded': false,
            'aria-selected': false
          });

          $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });
        });
        var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
        this.firstTimeInit = true;
        if ($initActive.length) {
          this.down($initActive, this.firstTimeInit);
          this.firstTimeInit = false;
        }

        this._checkDeepLink = function () {
          var anchor = window.location.hash;
          //need a hash and a relevant anchor in this tabset
          if (anchor.length) {
            var $link = _this2.$element.find('[href$="' + anchor + '"]'),
                $anchor = $(anchor);

            if ($link.length && $anchor) {
              if (!$link.parent('[data-accordion-item]').hasClass('is-active')) {
                _this2.down($anchor, _this2.firstTimeInit);
                _this2.firstTimeInit = false;
              };

              //roll up a little to show the titles
              if (_this2.options.deepLinkSmudge) {
                var _this = _this2;
                $(window).load(function () {
                  var offset = _this.$element.offset();
                  $('html, body').animate({ scrollTop: offset.top }, _this.options.deepLinkSmudgeDelay);
                });
              }

              /**
                * Fires when the zplugin has deeplinked at pageload
                * @event Accordion#deeplink
                */
              _this2.$element.trigger('deeplink.zf.accordion', [$link, $anchor]);
            }
          }
        };

        //use browser to open a tab, if it exists in this tabset
        if (this.options.deepLink) {
          this._checkDeepLink();
        }

        this._events();
      }

      /**
       * Adds event handlers for items within the accordion.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        this.$tabs.each(function () {
          var $elem = $(this);
          var $tabContent = $elem.children('[data-tab-content]');
          if ($tabContent.length) {
            $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
              e.preventDefault();
              _this.toggle($tabContent);
            }).on('keydown.zf.accordion', function (e) {
              Foundation.Keyboard.handleKey(e, 'Accordion', {
                toggle: function toggle() {
                  _this.toggle($tabContent);
                },
                next: function next() {
                  var $a = $elem.next().find('a').focus();
                  if (!_this.options.multiExpand) {
                    $a.trigger('click.zf.accordion');
                  }
                },
                previous: function previous() {
                  var $a = $elem.prev().find('a').focus();
                  if (!_this.options.multiExpand) {
                    $a.trigger('click.zf.accordion');
                  }
                },
                handled: function handled() {
                  e.preventDefault();
                  e.stopPropagation();
                }
              });
            });
          }
        });
        if (this.options.deepLink) {
          $(window).on('popstate', this._checkDeepLink);
        }
      }

      /**
       * Toggles the selected content pane's open/close state.
       * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
       * @function
       */

    }, {
      key: 'toggle',
      value: function toggle($target) {
        if ($target.parent().hasClass('is-active')) {
          this.up($target);
        } else {
          this.down($target);
        }
        //either replace or update browser history
        if (this.options.deepLink) {
          var anchor = $target.prev('a').attr('href');

          if (this.options.updateHistory) {
            history.pushState({}, '', anchor);
          } else {
            history.replaceState({}, '', anchor);
          }
        }
      }

      /**
       * Opens the accordion tab defined by `$target`.
       * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
       * @param {Boolean} firstTime - flag to determine if reflow should happen.
       * @fires Accordion#down
       * @function
       */

    }, {
      key: 'down',
      value: function down($target, firstTime) {
        var _this3 = this;

        $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

        if (!this.options.multiExpand && !firstTime) {
          var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');
          if ($currentActive.length) {
            this.up($currentActive.not($target));
          }
        }

        $target.slideDown(this.options.slideSpeed, function () {
          /**
           * Fires when the tab is done opening.
           * @event Accordion#down
           */
          _this3.$element.trigger('down.zf.accordion', [$target]);
        });

        $('#' + $target.attr('aria-labelledby')).attr({
          'aria-expanded': true,
          'aria-selected': true
        });
      }

      /**
       * Closes the tab defined by `$target`.
       * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
       * @fires Accordion#up
       * @function
       */

    }, {
      key: 'up',
      value: function up($target) {
        var $aunts = $target.parent().siblings(),
            _this = this;

        if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
          return;
        }

        // Foundation.Move(this.options.slideSpeed, $target, function(){
        $target.slideUp(_this.options.slideSpeed, function () {
          /**
           * Fires when the tab is done collapsing up.
           * @event Accordion#up
           */
          _this.$element.trigger('up.zf.accordion', [$target]);
        });
        // });

        $target.attr('aria-hidden', true).parent().removeClass('is-active');

        $('#' + $target.attr('aria-labelledby')).attr({
          'aria-expanded': false,
          'aria-selected': false
        });
      }

      /**
       * Destroys an instance of an accordion.
       * @fires Accordion#destroyed
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
        this.$element.find('a').off('.zf.accordion');
        if (this.options.deepLink) {
          $(window).off('popstate', this._checkDeepLink);
        }

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Accordion;
  }();

  Accordion.defaults = {
    /**
     * Amount of time to animate the opening of an accordion pane.
     * @option
     * @type {number}
     * @default 250
     */
    slideSpeed: 250,
    /**
     * Allow the accordion to have multiple open panes.
     * @option
     * @type {boolean}
     * @default false
     */
    multiExpand: false,
    /**
     * Allow the accordion to close all panes.
     * @option
     * @type {boolean}
     * @default false
     */
    allowAllClosed: false,
    /**
     * Allows the window to scroll to content of pane specified by hash anchor
     * @option
     * @type {boolean}
     * @default false
     */
    deepLink: false,

    /**
     * Adjust the deep link scroll to make sure the top of the accordion panel is visible
     * @option
     * @type {boolean}
     * @default false
     */
    deepLinkSmudge: false,

    /**
     * Animation time (ms) for the deep link adjustment
     * @option
     * @type {number}
     * @default 300
     */
    deepLinkSmudgeDelay: 300,

    /**
     * Update the browser history with the open accordion
     * @option
     * @type {boolean}
     * @default false
     */
    updateHistory: false
  };

  // Window exports
  Foundation.plugin(Accordion, 'Accordion');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

    /**
     * AccordionMenu module.
     * @module foundation.accordionMenu
     * @requires foundation.util.keyboard
     * @requires foundation.util.motion
     * @requires foundation.util.nest
     */

    var AccordionMenu = function () {
        /**
         * Creates a new instance of an accordion menu.
         * @class
         * @fires AccordionMenu#init
         * @param {jQuery} element - jQuery object to make into an accordion menu.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        function AccordionMenu(element, options) {
            _classCallCheck(this, AccordionMenu);

            this.$element = element;
            this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);

            Foundation.Nest.Feather(this.$element, 'accordion');

            this._init();

            Foundation.registerPlugin(this, 'AccordionMenu');
            Foundation.Keyboard.register('AccordionMenu', {
                'ENTER': 'toggle',
                'SPACE': 'toggle',
                'ARROW_RIGHT': 'open',
                'ARROW_UP': 'up',
                'ARROW_DOWN': 'down',
                'ARROW_LEFT': 'close',
                'ESCAPE': 'closeAll'
            });
        }

        /**
         * Initializes the accordion menu by hiding all nested menus.
         * @private
         */


        _createClass(AccordionMenu, [{
            key: '_init',
            value: function _init() {
                var _this = this;

                this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
                this.$element.attr({
                    'role': 'menu',
                    'aria-multiselectable': this.options.multiOpen
                });

                this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
                this.$menuLinks.each(function () {
                    var linkId = this.id || Foundation.GetYoDigits(6, 'acc-menu-link'),
                        $elem = $(this),
                        $sub = $elem.children('[data-submenu]'),
                        subId = $sub[0].id || Foundation.GetYoDigits(6, 'acc-menu'),
                        isActive = $sub.hasClass('is-active');

                    if (_this.options.submenuToggle) {
                        $elem.addClass('has-submenu-toggle');
                        $elem.children('a').after('<button id="' + linkId + '" class="submenu-toggle" aria-controls="' + subId + '" aria-expanded="' + isActive + '"><span class="submenu-toggle-text">' + _this.options.submenuToggleText + '</span></button>');
                    } else {
                        $elem.attr({
                            'aria-controls': subId,
                            'aria-expanded': isActive,
                            'role': 'menuitem',
                            'id': linkId
                        });
                    }
                    $sub.attr({
                        'aria-labelledby': linkId,
                        'aria-hidden': !isActive,
                        'role': 'menu',
                        'id': subId
                    });
                });
                var initPanes = this.$element.find('.is-active');
                if (initPanes.length) {
                    var _this = this;
                    initPanes.each(function () {
                        _this.down($(this));
                    });
                }
                this._events();
            }

            /**
             * Adds event handlers for items within the menu.
             * @private
             */

        }, {
            key: '_events',
            value: function _events() {
                var _this = this;

                this.$element.find('li').each(function () {
                    var $submenu = $(this).children('[data-submenu]');

                    if ($submenu.length) {
                        if (_this.options.submenuToggle) {
                            $(this).children('.submenu-toggle').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
                                _this.toggle($submenu);
                            });
                        } else {
                            $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
                                e.preventDefault();
                                _this.toggle($submenu);
                            });
                        }
                    }
                }).on('keydown.zf.accordionmenu', function (e) {
                    var $element = $(this),
                        $elements = $element.parent('ul').children('li'),
                        $prevElement,
                        $nextElement,
                        $target = $element.children('[data-submenu]');

                    $elements.each(function (i) {
                        if ($(this).is($element)) {
                            $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
                            $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

                            if ($(this).children('[data-submenu]:visible').length) {
                                // has open sub menu
                                $nextElement = $element.find('li:first-child').find('a').first();
                            }
                            if ($(this).is(':first-child')) {
                                // is first element of sub menu
                                $prevElement = $element.parents('li').first().find('a').first();
                            } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
                                // if previous element has open sub menu
                                $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
                            }
                            if ($(this).is(':last-child')) {
                                // is last element of sub menu
                                $nextElement = $element.parents('li').first().next('li').find('a').first();
                            }

                            return;
                        }
                    });

                    Foundation.Keyboard.handleKey(e, 'AccordionMenu', {
                        open: function open() {
                            if ($target.is(':hidden')) {
                                _this.down($target);
                                $target.find('li').first().find('a').first().focus();
                            }
                        },
                        close: function close() {
                            if ($target.length && !$target.is(':hidden')) {
                                // close active sub of this item
                                _this.up($target);
                            } else if ($element.parent('[data-submenu]').length) {
                                // close currently open sub
                                _this.up($element.parent('[data-submenu]'));
                                $element.parents('li').first().find('a').first().focus();
                            }
                        },
                        up: function up() {
                            $prevElement.focus();
                            return true;
                        },
                        down: function down() {
                            $nextElement.focus();
                            return true;
                        },
                        toggle: function toggle() {
                            if ($element.children('[data-submenu]').length) {
                                _this.toggle($element.children('[data-submenu]'));
                            }
                        },
                        closeAll: function closeAll() {
                            _this.hideAll();
                        },
                        handled: function handled(preventDefault) {
                            if (preventDefault) {
                                e.preventDefault();
                            }
                            e.stopImmediatePropagation();
                        }
                    });
                }); //.attr('tabindex', 0);
            }

            /**
             * Closes all panes of the menu.
             * @function
             */

        }, {
            key: 'hideAll',
            value: function hideAll() {
                this.up(this.$element.find('[data-submenu]'));
            }

            /**
             * Opens all panes of the menu.
             * @function
             */

        }, {
            key: 'showAll',
            value: function showAll() {
                this.down(this.$element.find('[data-submenu]'));
            }

            /**
             * Toggles the open/close state of a submenu.
             * @function
             * @param {jQuery} $target - the submenu to toggle
             */

        }, {
            key: 'toggle',
            value: function toggle($target) {
                if (!$target.is(':animated')) {
                    if (!$target.is(':hidden')) {
                        this.up($target);
                    } else {
                        this.down($target);
                    }
                }
            }

            /**
             * Opens the sub-menu defined by `$target`.
             * @param {jQuery} $target - Sub-menu to open.
             * @fires AccordionMenu#down
             */

        }, {
            key: 'down',
            value: function down($target) {
                var _this = this;

                if (!this.options.multiOpen) {
                    this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
                }

                $target.addClass('is-active').attr({ 'aria-hidden': false });

                if (this.options.submenuToggle) {
                    $target.prev('.submenu-toggle').attr({ 'aria-expanded': true });
                } else {
                    $target.parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });
                }

                //Foundation.Move(this.options.slideSpeed, $target, function() {
                $target.slideDown(_this.options.slideSpeed, function () {
                    /**
                     * Fires when the menu is done opening.
                     * @event AccordionMenu#down
                     */
                    _this.$element.trigger('down.zf.accordionMenu', [$target]);
                });
                //});
            }

            /**
             * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
             * @param {jQuery} $target - Sub-menu to close.
             * @fires AccordionMenu#up
             */

        }, {
            key: 'up',
            value: function up($target) {
                var _this = this;
                //Foundation.Move(this.options.slideSpeed, $target, function(){
                $target.slideUp(_this.options.slideSpeed, function () {
                    /**
                     * Fires when the menu is done collapsing up.
                     * @event AccordionMenu#up
                     */
                    _this.$element.trigger('up.zf.accordionMenu', [$target]);
                });
                //});

                var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);

                if (this.options.submenuToggle) {
                    $menus.prev('.submenu-toggle').attr('aria-expanded', false);
                } else {
                    $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
                }
            }

            /**
             * Destroys an instance of accordion menu.
             * @fires AccordionMenu#destroyed
             */

        }, {
            key: 'destroy',
            value: function destroy() {
                this.$element.find('[data-submenu]').slideDown(0).css('display', '');
                this.$element.find('a').off('click.zf.accordionMenu');

                if (this.options.submenuToggle) {
                    this.$element.find('.has-submenu-toggle').removeClass('has-submenu-toggle');
                    this.$element.find('.submenu-toggle').remove();
                }

                Foundation.Nest.Burn(this.$element, 'accordion');
                Foundation.unregisterPlugin(this);
            }
        }]);

        return AccordionMenu;
    }();

    AccordionMenu.defaults = {
        /**
         * Amount of time to animate the opening of a submenu in ms.
         * @option
         * @example 250
         */
        slideSpeed: 250,
        /**
         * Adds a separate submenu toggle button. This allows the parent item to have a link.
         * @option
         * @example true
         */
        submenuToggle: false,
        /**
         * The text used for the submenu toggle if enabled. This is used for screen readers only.
         * @option
         * @example true
         */
        submenuToggleText: 'Toggle menu',
        /**
         * Allow the menu to have multiple open panes.
         * @option
         * @example true
         */
        multiOpen: true
    };

    // Window exports
    Foundation.plugin(AccordionMenu, 'AccordionMenu');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Equalizer module.
   * @module foundation.equalizer
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader if equalizer contains images
   */

  var Equalizer = function () {
    /**
     * Creates a new instance of Equalizer.
     * @class
     * @fires Equalizer#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Equalizer(element, options) {
      _classCallCheck(this, Equalizer);

      this.$element = element;
      this.options = $.extend({}, Equalizer.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Equalizer');
    }

    /**
     * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
     * @private
     */


    _createClass(Equalizer, [{
      key: '_init',
      value: function _init() {
        var eqId = this.$element.attr('data-equalizer') || '';
        var $watched = this.$element.find('[data-equalizer-watch="' + eqId + '"]');

        this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
        this.$element.attr('data-resize', eqId || Foundation.GetYoDigits(6, 'eq'));
        this.$element.attr('data-mutate', eqId || Foundation.GetYoDigits(6, 'eq'));

        this.hasNested = this.$element.find('[data-equalizer]').length > 0;
        this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
        this.isOn = false;
        this._bindHandler = {
          onResizeMeBound: this._onResizeMe.bind(this),
          onPostEqualizedBound: this._onPostEqualized.bind(this)
        };

        var imgs = this.$element.find('img');
        var tooSmall;
        if (this.options.equalizeOn) {
          tooSmall = this._checkMQ();
          $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
        } else {
          this._events();
        }
        if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {
          if (imgs.length) {
            Foundation.onImagesLoaded(imgs, this._reflow.bind(this));
          } else {
            this._reflow();
          }
        }
      }

      /**
       * Removes event listeners if the breakpoint is too small.
       * @private
       */

    }, {
      key: '_pauseEvents',
      value: function _pauseEvents() {
        this.isOn = false;
        this.$element.off({
          '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
          'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,
          'mutateme.zf.trigger': this._bindHandler.onResizeMeBound
        });
      }

      /**
       * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
       * @private
       */

    }, {
      key: '_onResizeMe',
      value: function _onResizeMe(e) {
        this._reflow();
      }

      /**
       * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
       * @private
       */

    }, {
      key: '_onPostEqualized',
      value: function _onPostEqualized(e) {
        if (e.target !== this.$element[0]) {
          this._reflow();
        }
      }

      /**
       * Initializes events for Equalizer.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;
        this._pauseEvents();
        if (this.hasNested) {
          this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
        } else {
          this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
          this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);
        }
        this.isOn = true;
      }

      /**
       * Checks the current breakpoint to the minimum required size.
       * @private
       */

    }, {
      key: '_checkMQ',
      value: function _checkMQ() {
        var tooSmall = !Foundation.MediaQuery.is(this.options.equalizeOn);
        if (tooSmall) {
          if (this.isOn) {
            this._pauseEvents();
            this.$watched.css('height', 'auto');
          }
        } else {
          if (!this.isOn) {
            this._events();
          }
        }
        return tooSmall;
      }

      /**
       * A noop version for the plugin
       * @private
       */

    }, {
      key: '_killswitch',
      value: function _killswitch() {
        return;
      }

      /**
       * Calls necessary functions to update Equalizer upon DOM change
       * @private
       */

    }, {
      key: '_reflow',
      value: function _reflow() {
        if (!this.options.equalizeOnStack) {
          if (this._isStacked()) {
            this.$watched.css('height', 'auto');
            return false;
          }
        }
        if (this.options.equalizeByRow) {
          this.getHeightsByRow(this.applyHeightByRow.bind(this));
        } else {
          this.getHeights(this.applyHeight.bind(this));
        }
      }

      /**
       * Manually determines if the first 2 elements are *NOT* stacked.
       * @private
       */

    }, {
      key: '_isStacked',
      value: function _isStacked() {
        if (!this.$watched[0] || !this.$watched[1]) {
          return true;
        }
        return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
      }

      /**
       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
       * @param {Function} cb - A non-optional callback to return the heights array to.
       * @returns {Array} heights - An array of heights of children within Equalizer container
       */

    }, {
      key: 'getHeights',
      value: function getHeights(cb) {
        var heights = [];
        for (var i = 0, len = this.$watched.length; i < len; i++) {
          this.$watched[i].style.height = 'auto';
          heights.push(this.$watched[i].offsetHeight);
        }
        cb(heights);
      }

      /**
       * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
       * @param {Function} cb - A non-optional callback to return the heights array to.
       * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
       */

    }, {
      key: 'getHeightsByRow',
      value: function getHeightsByRow(cb) {
        var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
            groups = [],
            group = 0;
        //group by Row
        groups[group] = [];
        for (var i = 0, len = this.$watched.length; i < len; i++) {
          this.$watched[i].style.height = 'auto';
          //maybe could use this.$watched[i].offsetTop
          var elOffsetTop = $(this.$watched[i]).offset().top;
          if (elOffsetTop != lastElTopOffset) {
            group++;
            groups[group] = [];
            lastElTopOffset = elOffsetTop;
          }
          groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
        }

        for (var j = 0, ln = groups.length; j < ln; j++) {
          var heights = $(groups[j]).map(function () {
            return this[1];
          }).get();
          var max = Math.max.apply(null, heights);
          groups[j].push(max);
        }
        cb(groups);
      }

      /**
       * Changes the CSS height property of each child in an Equalizer parent to match the tallest
       * @param {array} heights - An array of heights of children within Equalizer container
       * @fires Equalizer#preequalized
       * @fires Equalizer#postequalized
       */

    }, {
      key: 'applyHeight',
      value: function applyHeight(heights) {
        var max = Math.max.apply(null, heights);
        /**
         * Fires before the heights are applied
         * @event Equalizer#preequalized
         */
        this.$element.trigger('preequalized.zf.equalizer');

        this.$watched.css('height', max);

        /**
         * Fires when the heights have been applied
         * @event Equalizer#postequalized
         */
        this.$element.trigger('postequalized.zf.equalizer');
      }

      /**
       * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
       * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
       * @fires Equalizer#preequalized
       * @fires Equalizer#preequalizedrow
       * @fires Equalizer#postequalizedrow
       * @fires Equalizer#postequalized
       */

    }, {
      key: 'applyHeightByRow',
      value: function applyHeightByRow(groups) {
        /**
         * Fires before the heights are applied
         */
        this.$element.trigger('preequalized.zf.equalizer');
        for (var i = 0, len = groups.length; i < len; i++) {
          var groupsILength = groups[i].length,
              max = groups[i][groupsILength - 1];
          if (groupsILength <= 2) {
            $(groups[i][0][0]).css({ 'height': 'auto' });
            continue;
          }
          /**
            * Fires before the heights per row are applied
            * @event Equalizer#preequalizedrow
            */
          this.$element.trigger('preequalizedrow.zf.equalizer');
          for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
            $(groups[i][j][0]).css({ 'height': max });
          }
          /**
            * Fires when the heights per row have been applied
            * @event Equalizer#postequalizedrow
            */
          this.$element.trigger('postequalizedrow.zf.equalizer');
        }
        /**
         * Fires when the heights have been applied
         */
        this.$element.trigger('postequalized.zf.equalizer');
      }

      /**
       * Destroys an instance of Equalizer.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this._pauseEvents();
        this.$watched.css('height', 'auto');

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Equalizer;
  }();

  /**
   * Default settings for plugin
   */


  Equalizer.defaults = {
    /**
     * Enable height equalization when stacked on smaller screens.
     * @option
     * @type {boolean}
     * @default false
     */
    equalizeOnStack: false,
    /**
     * Enable height equalization row by row.
     * @option
     * @type {boolean}
     * @default false
     */
    equalizeByRow: false,
    /**
     * String representing the minimum breakpoint size the plugin should equalize heights on.
     * @option
     * @type {string}
     * @default ''
     */
    equalizeOn: ''
  };

  // Window exports
  Foundation.plugin(Equalizer, 'Equalizer');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Interchange module.
   * @module foundation.interchange
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.timerAndImageLoader
   */

  var Interchange = function () {
    /**
     * Creates a new instance of Interchange.
     * @class
     * @fires Interchange#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Interchange(element, options) {
      _classCallCheck(this, Interchange);

      this.$element = element;
      this.options = $.extend({}, Interchange.defaults, options);
      this.rules = [];
      this.currentPath = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Interchange');
    }

    /**
     * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
     * @function
     * @private
     */


    _createClass(Interchange, [{
      key: '_init',
      value: function _init() {
        this._addBreakpoints();
        this._generateRules();
        this._reflow();
      }

      /**
       * Initializes events for Interchange.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this2 = this;

        $(window).on('resize.zf.interchange', Foundation.util.throttle(function () {
          _this2._reflow();
        }, 50));
      }

      /**
       * Calls necessary functions to update Interchange upon DOM change
       * @function
       * @private
       */

    }, {
      key: '_reflow',
      value: function _reflow() {
        var match;

        // Iterate through each rule, but only save the last match
        for (var i in this.rules) {
          if (this.rules.hasOwnProperty(i)) {
            var rule = this.rules[i];
            if (window.matchMedia(rule.query).matches) {
              match = rule;
            }
          }
        }

        if (match) {
          this.replace(match.path);
        }
      }

      /**
       * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
       * @function
       * @private
       */

    }, {
      key: '_addBreakpoints',
      value: function _addBreakpoints() {
        for (var i in Foundation.MediaQuery.queries) {
          if (Foundation.MediaQuery.queries.hasOwnProperty(i)) {
            var query = Foundation.MediaQuery.queries[i];
            Interchange.SPECIAL_QUERIES[query.name] = query.value;
          }
        }
      }

      /**
       * Checks the Interchange element for the provided media query + content pairings
       * @function
       * @private
       * @param {Object} element - jQuery object that is an Interchange instance
       * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
       */

    }, {
      key: '_generateRules',
      value: function _generateRules(element) {
        var rulesList = [];
        var rules;

        if (this.options.rules) {
          rules = this.options.rules;
        } else {
          rules = this.$element.data('interchange');
        }

        rules = typeof rules === 'string' ? rules.match(/\[.*?\]/g) : rules;

        for (var i in rules) {
          if (rules.hasOwnProperty(i)) {
            var rule = rules[i].slice(1, -1).split(', ');
            var path = rule.slice(0, -1).join('');
            var query = rule[rule.length - 1];

            if (Interchange.SPECIAL_QUERIES[query]) {
              query = Interchange.SPECIAL_QUERIES[query];
            }

            rulesList.push({
              path: path,
              query: query
            });
          }
        }

        this.rules = rulesList;
      }

      /**
       * Update the `src` property of an image, or change the HTML of a container, to the specified path.
       * @function
       * @param {String} path - Path to the image or HTML partial.
       * @fires Interchange#replaced
       */

    }, {
      key: 'replace',
      value: function replace(path) {
        if (this.currentPath === path) return;

        var _this = this,
            trigger = 'replaced.zf.interchange';

        // Replacing images
        if (this.$element[0].nodeName === 'IMG') {
          this.$element.attr('src', path).on('load', function () {
            _this.currentPath = path;
          }).trigger(trigger);
        }
        // Replacing background images
        else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
            this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);
          }
          // Replacing HTML
          else {
              $.get(path, function (response) {
                _this.$element.html(response).trigger(trigger);
                $(response).foundation();
                _this.currentPath = path;
              });
            }

        /**
         * Fires when content in an Interchange element is done being loaded.
         * @event Interchange#replaced
         */
        // this.$element.trigger('replaced.zf.interchange');
      }

      /**
       * Destroys an instance of interchange.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        //TODO this.
      }
    }]);

    return Interchange;
  }();

  /**
   * Default settings for plugin
   */


  Interchange.defaults = {
    /**
     * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
     * @option
     * @type {?array}
     * @default null
     */
    rules: null
  };

  Interchange.SPECIAL_QUERIES = {
    'landscape': 'screen and (orientation: landscape)',
    'portrait': 'screen and (orientation: portrait)',
    'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
  };

  // Window exports
  Foundation.plugin(Interchange, 'Interchange');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Magellan module.
   * @module foundation.magellan
   */

  var Magellan = function () {
    /**
     * Creates a new instance of Magellan.
     * @class
     * @fires Magellan#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Magellan(element, options) {
      _classCallCheck(this, Magellan);

      this.$element = element;
      this.options = $.extend({}, Magellan.defaults, this.$element.data(), options);

      this._init();
      this.calcPoints();

      Foundation.registerPlugin(this, 'Magellan');
    }

    /**
     * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
     * @private
     */


    _createClass(Magellan, [{
      key: '_init',
      value: function _init() {
        var id = this.$element[0].id || Foundation.GetYoDigits(6, 'magellan');
        var _this = this;
        this.$targets = $('[data-magellan-target]');
        this.$links = this.$element.find('a');
        this.$element.attr({
          'data-resize': id,
          'data-scroll': id,
          'id': id
        });
        this.$active = $();
        this.scrollPos = parseInt(window.pageYOffset, 10);

        this._events();
      }

      /**
       * Calculates an array of pixel values that are the demarcation lines between locations on the page.
       * Can be invoked if new elements are added or the size of a location changes.
       * @function
       */

    }, {
      key: 'calcPoints',
      value: function calcPoints() {
        var _this = this,
            body = document.body,
            html = document.documentElement;

        this.points = [];
        this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
        this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));

        this.$targets.each(function () {
          var $tar = $(this),
              pt = Math.round($tar.offset().top - _this.options.threshold);
          $tar.targetPoint = pt;
          _this.points.push(pt);
        });
      }

      /**
       * Initializes events for Magellan.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this,
            $body = $('html, body'),
            opts = {
          duration: _this.options.animationDuration,
          easing: _this.options.animationEasing
        };
        $(window).one('load', function () {
          if (_this.options.deepLinking) {
            if (location.hash) {
              _this.scrollToLoc(location.hash);
            }
          }
          _this.calcPoints();
          _this._updateActive();
        });

        this.$element.on({
          'resizeme.zf.trigger': this.reflow.bind(this),
          'scrollme.zf.trigger': this._updateActive.bind(this)
        }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
          e.preventDefault();
          var arrival = this.getAttribute('href');
          _this.scrollToLoc(arrival);
        });
        $(window).on('popstate', function (e) {
          if (_this.options.deepLinking) {
            _this.scrollToLoc(window.location.hash);
          }
        });
      }

      /**
       * Function to scroll to a given location on the page.
       * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
       * @function
       */

    }, {
      key: 'scrollToLoc',
      value: function scrollToLoc(loc) {
        // Do nothing if target does not exist to prevent errors
        if (!$(loc).length) {
          return false;
        }
        this._inTransition = true;
        var _this = this,
            scrollPos = Math.round($(loc).offset().top - this.options.threshold / 2 - this.options.barOffset);

        $('html, body').stop(true).animate({ scrollTop: scrollPos }, this.options.animationDuration, this.options.animationEasing, function () {
          _this._inTransition = false;_this._updateActive();
        });
      }

      /**
       * Calls necessary functions to update Magellan upon DOM change
       * @function
       */

    }, {
      key: 'reflow',
      value: function reflow() {
        this.calcPoints();
        this._updateActive();
      }

      /**
       * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
       * @private
       * @function
       * @fires Magellan#update
       */

    }, {
      key: '_updateActive',
      value: function _updateActive() /*evt, elem, scrollPos*/{
        if (this._inTransition) {
          return;
        }
        var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),
            curIdx;

        if (winPos + this.winHeight === this.docHeight) {
          curIdx = this.points.length - 1;
        } else if (winPos < this.points[0]) {
          curIdx = undefined;
        } else {
          var isDown = this.scrollPos < winPos,
              _this = this,
              curVisible = this.points.filter(function (p, i) {
            return isDown ? p - _this.options.barOffset <= winPos : p - _this.options.barOffset - _this.options.threshold <= winPos;
          });
          curIdx = curVisible.length ? curVisible.length - 1 : 0;
        }

        this.$active.removeClass(this.options.activeClass);
        this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);

        if (this.options.deepLinking) {
          var hash = "";
          if (curIdx != undefined) {
            hash = this.$active[0].getAttribute('href');
          }
          if (hash !== window.location.hash) {
            if (window.history.pushState) {
              window.history.pushState(null, null, hash);
            } else {
              window.location.hash = hash;
            }
          }
        }

        this.scrollPos = winPos;
        /**
         * Fires when magellan is finished updating to the new active element.
         * @event Magellan#update
         */
        this.$element.trigger('update.zf.magellan', [this.$active]);
      }

      /**
       * Destroys an instance of Magellan and resets the url of the window.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);

        if (this.options.deepLinking) {
          var hash = this.$active[0].getAttribute('href');
          window.location.hash.replace(hash, '');
        }

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Magellan;
  }();

  /**
   * Default settings for plugin
   */


  Magellan.defaults = {
    /**
     * Amount of time, in ms, the animated scrolling should take between locations.
     * @option
     * @type {number}
     * @default 500
     */
    animationDuration: 500,
    /**
     * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
     * @option
     * @type {string}
     * @default 'linear'
     * @see {@link https://api.jquery.com/animate|Jquery animate}
     */
    animationEasing: 'linear',
    /**
     * Number of pixels to use as a marker for location changes.
     * @option
     * @type {number}
     * @default 50
     */
    threshold: 50,
    /**
     * Class applied to the active locations link on the magellan container.
     * @option
     * @type {string}
     * @default 'active'
     */
    activeClass: 'active',
    /**
     * Allows the script to manipulate the url of the current page, and if supported, alter the history.
     * @option
     * @type {boolean}
     * @default false
     */
    deepLinking: false,
    /**
     * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
     * @option
     * @type {number}
     * @default 0
     */
    barOffset: 0
<<<<<<< HEAD
  };

  // Window exports
  Foundation.plugin(Magellan, 'Magellan');
=======

    // Window exports
  };Foundation.plugin(Magellan, 'Magellan');
>>>>>>> master
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * OffCanvas module.
   * @module foundation.offcanvas
   * @requires foundation.util.keyboard
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.triggers
   * @requires foundation.util.motion
   */

  var OffCanvas = function () {
    /**
     * Creates a new instance of an off-canvas wrapper.
     * @class
     * @fires OffCanvas#init
     * @param {Object} element - jQuery object to initialize.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function OffCanvas(element, options) {
      _classCallCheck(this, OffCanvas);

      this.$element = element;
      this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);
      this.$lastTrigger = $();
      this.$triggers = $();

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'OffCanvas');
      Foundation.Keyboard.register('OffCanvas', {
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
     * @function
     * @private
     */


    _createClass(OffCanvas, [{
      key: '_init',
      value: function _init() {
        var id = this.$element.attr('id');

        this.$element.attr('aria-hidden', 'true');

        this.$element.addClass('is-transition-' + this.options.transition);

        // Find triggers that affect this element and add aria-expanded to them
        this.$triggers = $(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);

        // Add an overlay over the content if necessary
        if (this.options.contentOverlay === true) {
          var overlay = document.createElement('div');
          var overlayPosition = $(this.$element).css("position") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';
          overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);
          this.$overlay = $(overlay);
          if (overlayPosition === 'is-overlay-fixed') {
            $('body').append(this.$overlay);
          } else {
            this.$element.siblings('[data-off-canvas-content]').append(this.$overlay);
          }
        }

        this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);

        if (this.options.isRevealed === true) {
          this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
          this._setMQChecker();
        }
        if (!this.options.transitionTime === true) {
          this.options.transitionTime = parseFloat(window.getComputedStyle($('[data-off-canvas]')[0]).transitionDuration) * 1000;
        }
      }

      /**
       * Adds event handlers to the off-canvas wrapper and the exit overlay.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        this.$element.off('.zf.trigger .zf.offcanvas').on({
          'open.zf.trigger': this.open.bind(this),
          'close.zf.trigger': this.close.bind(this),
          'toggle.zf.trigger': this.toggle.bind(this),
          'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
        });

        if (this.options.closeOnClick === true) {
          var $target = this.options.contentOverlay ? this.$overlay : $('[data-off-canvas-content]');
          $target.on({ 'click.zf.offcanvas': this.close.bind(this) });
        }
      }

      /**
       * Applies event listener for elements that will reveal at certain breakpoints.
       * @private
       */

    }, {
      key: '_setMQChecker',
      value: function _setMQChecker() {
        var _this = this;

        $(window).on('changed.zf.mediaquery', function () {
          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
            _this.reveal(true);
          } else {
            _this.reveal(false);
          }
        }).one('load.zf.offcanvas', function () {
          if (Foundation.MediaQuery.atLeast(_this.options.revealOn)) {
            _this.reveal(true);
          }
        });
      }

      /**
       * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
       * @param {Boolean} isRevealed - true if element should be revealed.
       * @function
       */

    }, {
      key: 'reveal',
      value: function reveal(isRevealed) {
        var $closer = this.$element.find('[data-close]');
        if (isRevealed) {
          this.close();
          this.isRevealed = true;
          this.$element.attr('aria-hidden', 'false');
          this.$element.off('open.zf.trigger toggle.zf.trigger');
          if ($closer.length) {
            $closer.hide();
          }
        } else {
          this.isRevealed = false;
          this.$element.attr('aria-hidden', 'true');
          this.$element.off('open.zf.trigger toggle.zf.trigger').on({
            'open.zf.trigger': this.open.bind(this),
            'toggle.zf.trigger': this.toggle.bind(this)
          });
          if ($closer.length) {
            $closer.show();
          }
        }
      }

      /**
       * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.
       * @private
       */

    }, {
      key: '_stopScrolling',
      value: function _stopScrolling(event) {
        return false;
      }

      // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios
      // Only really works for y, not sure how to extend to x or if we need to.

    }, {
      key: '_recordScrollable',
      value: function _recordScrollable(event) {
        var elem = this; // called from event handler context with this as elem

        // If the element is scrollable (content overflows), then...
        if (elem.scrollHeight !== elem.clientHeight) {
          // If we're at the top, scroll down one pixel to allow scrolling up
          if (elem.scrollTop === 0) {
            elem.scrollTop = 1;
          }
          // If we're at the bottom, scroll up one pixel to allow scrolling down
          if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {
            elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;
          }
        }
        elem.allowUp = elem.scrollTop > 0;
        elem.allowDown = elem.scrollTop < elem.scrollHeight - elem.clientHeight;
        elem.lastY = event.originalEvent.pageY;
      }
    }, {
      key: '_stopScrollPropagation',
      value: function _stopScrollPropagation(event) {
        var elem = this; // called from event handler context with this as elem
        var up = event.pageY < elem.lastY;
        var down = !up;
        elem.lastY = event.pageY;

        if (up && elem.allowUp || down && elem.allowDown) {
          event.stopPropagation();
        } else {
          event.preventDefault();
        }
      }

      /**
       * Opens the off-canvas menu.
       * @function
       * @param {Object} event - Event object passed from listener.
       * @param {jQuery} trigger - element that triggered the off-canvas to open.
       * @fires OffCanvas#opened
       */

    }, {
      key: 'open',
      value: function open(event, trigger) {
        if (this.$element.hasClass('is-open') || this.isRevealed) {
          return;
        }
        var _this = this;

        if (trigger) {
          this.$lastTrigger = trigger;
        }

        if (this.options.forceTo === 'top') {
          window.scrollTo(0, 0);
        } else if (this.options.forceTo === 'bottom') {
          window.scrollTo(0, document.body.scrollHeight);
        }

        /**
         * Fires when the off-canvas menu opens.
         * @event OffCanvas#opened
         */
        _this.$element.addClass('is-open');

        this.$triggers.attr('aria-expanded', 'true');
        this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');

        // If `contentScroll` is set to false, add class and disable scrolling on touch devices.
        if (this.options.contentScroll === false) {
          $('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);
          this.$element.on('touchstart', this._recordScrollable);
          this.$element.on('touchmove', this._stopScrollPropagation);
        }

        if (this.options.contentOverlay === true) {
          this.$overlay.addClass('is-visible');
        }

        if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
          this.$overlay.addClass('is-closable');
        }

        if (this.options.autoFocus === true) {
          this.$element.one(Foundation.transitionend(this.$element), function () {
            var canvasFocus = _this.$element.find('[data-autofocus]');
            if (canvasFocus.length) {
              canvasFocus.eq(0).focus();
            } else {
              _this.$element.find('a, button').eq(0).focus();
            }
          });
        }

        if (this.options.trapFocus === true) {
          this.$element.siblings('[data-off-canvas-content]').attr('tabindex', '-1');
          Foundation.Keyboard.trapFocus(this.$element);
        }
      }

      /**
       * Closes the off-canvas menu.
       * @function
       * @param {Function} cb - optional cb to fire after closure.
       * @fires OffCanvas#closed
       */

    }, {
      key: 'close',
      value: function close(cb) {
        if (!this.$element.hasClass('is-open') || this.isRevealed) {
          return;
        }

        var _this = this;

        _this.$element.removeClass('is-open');

<<<<<<< HEAD
        this.$element.attr('aria-hidden', 'true')
=======
        this.$element.attr('aria-hidden', 'true'
>>>>>>> master
        /**
         * Fires when the off-canvas menu opens.
         * @event OffCanvas#closed
         */
<<<<<<< HEAD
        .trigger('closed.zf.offcanvas');
=======
        ).trigger('closed.zf.offcanvas');
>>>>>>> master

        // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.
        if (this.options.contentScroll === false) {
          $('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);
          this.$element.off('touchstart', this._recordScrollable);
          this.$element.off('touchmove', this._stopScrollPropagation);
        }

        if (this.options.contentOverlay === true) {
          this.$overlay.removeClass('is-visible');
        }

        if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
          this.$overlay.removeClass('is-closable');
        }

        this.$triggers.attr('aria-expanded', 'false');

        if (this.options.trapFocus === true) {
          this.$element.siblings('[data-off-canvas-content]').removeAttr('tabindex');
          Foundation.Keyboard.releaseFocus(this.$element);
        }
      }

      /**
       * Toggles the off-canvas menu open or closed.
       * @function
       * @param {Object} event - Event object passed from listener.
       * @param {jQuery} trigger - element that triggered the off-canvas to open.
       */

    }, {
      key: 'toggle',
      value: function toggle(event, trigger) {
        if (this.$element.hasClass('is-open')) {
          this.close(event, trigger);
        } else {
          this.open(event, trigger);
        }
      }

      /**
       * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
       * @function
       * @private
       */

    }, {
      key: '_handleKeyboard',
      value: function _handleKeyboard(e) {
        var _this2 = this;

        Foundation.Keyboard.handleKey(e, 'OffCanvas', {
          close: function close() {
            _this2.close();
            _this2.$lastTrigger.focus();
            return true;
          },
          handled: function handled() {
            e.stopPropagation();
            e.preventDefault();
          }
        });
      }

      /**
       * Destroys the offcanvas plugin.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.close();
        this.$element.off('.zf.trigger .zf.offcanvas');
        this.$overlay.off('.zf.offcanvas');

        Foundation.unregisterPlugin(this);
      }
    }]);

    return OffCanvas;
  }();

  OffCanvas.defaults = {
    /**
     * Allow the user to click outside of the menu to close it.
     * @option
     * @type {boolean}
     * @default true
     */
    closeOnClick: true,

    /**
     * Adds an overlay on top of `[data-off-canvas-content]`.
     * @option
     * @type {boolean}
     * @default true
     */
    contentOverlay: true,

    /**
     * Enable/disable scrolling of the main content when an off canvas panel is open.
     * @option
     * @type {boolean}
     * @default true
     */
    contentScroll: true,

    /**
     * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
     * @option
     * @type {number}
     * @default 0
     */
    transitionTime: 0,

    /**
     * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.
     * @option
     * @type {string}
     * @default push
     */
    transition: 'push',

    /**
     * Force the page to scroll to top or bottom on open.
     * @option
     * @type {?string}
     * @default null
     */
    forceTo: null,

    /**
     * Allow the offcanvas to remain open for certain breakpoints.
     * @option
     * @type {boolean}
     * @default false
     */
    isRevealed: false,

    /**
     * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
     * @option
     * @type {?string}
     * @default null
     */
    revealOn: null,

    /**
     * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.
     * @option
     * @type {boolean}
     * @default true
     */
    autoFocus: true,

    /**
     * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
     * @option
     * @type {string}
     * @default reveal-for-
     * @todo improve the regex testing for this.
     */
    revealClass: 'reveal-for-',

    /**
     * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
     * @option
     * @type {boolean}
     * @default false
     */
    trapFocus: false
<<<<<<< HEAD
  };

  // Window exports
  Foundation.plugin(OffCanvas, 'OffCanvas');
=======

    // Window exports
  };Foundation.plugin(OffCanvas, 'OffCanvas');
>>>>>>> master
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * ResponsiveMenu module.
   * @module foundation.responsiveMenu
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   */

  var ResponsiveMenu = function () {
    /**
     * Creates a new instance of a responsive menu.
     * @class
     * @fires ResponsiveMenu#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function ResponsiveMenu(element, options) {
      _classCallCheck(this, ResponsiveMenu);

      this.$element = $(element);
      this.rules = this.$element.data('responsive-menu');
      this.currentMq = null;
      this.currentPlugin = null;

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveMenu');
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
     * @function
     * @private
     */


    _createClass(ResponsiveMenu, [{
      key: '_init',
      value: function _init() {
        // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
        if (typeof this.rules === 'string') {
          var rulesTree = {};

          // Parse rules from "classes" pulled from data attribute
          var rules = this.rules.split(' ');

          // Iterate through every rule found
          for (var i = 0; i < rules.length; i++) {
            var rule = rules[i].split('-');
            var ruleSize = rule.length > 1 ? rule[0] : 'small';
            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

            if (MenuPlugins[rulePlugin] !== null) {
              rulesTree[ruleSize] = MenuPlugins[rulePlugin];
            }
          }

          this.rules = rulesTree;
        }

        if (!$.isEmptyObject(this.rules)) {
          this._checkMediaQueries();
        }
        // Add data-mutate since children may need it.
        this.$element.attr('data-mutate', this.$element.attr('data-mutate') || Foundation.GetYoDigits(6, 'responsive-menu'));
      }

      /**
       * Initializes events for the Menu.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        $(window).on('changed.zf.mediaquery', function () {
          _this._checkMediaQueries();
        });
        // $(window).on('resize.zf.ResponsiveMenu', function() {
        //   _this._checkMediaQueries();
        // });
      }

      /**
       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
       * @function
       * @private
       */

    }, {
      key: '_checkMediaQueries',
      value: function _checkMediaQueries() {
        var matchedMq,
            _this = this;
        // Iterate through each rule and find the last matching rule
        $.each(this.rules, function (key) {
          if (Foundation.MediaQuery.atLeast(key)) {
            matchedMq = key;
          }
        });

        // No match? No dice
        if (!matchedMq) return;

        // Plugin already initialized? We good
        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

        // Remove existing plugin-specific CSS classes
        $.each(MenuPlugins, function (key, value) {
          _this.$element.removeClass(value.cssClass);
        });

        // Add the CSS class for the new plugin
        this.$element.addClass(this.rules[matchedMq].cssClass);

        // Create an instance of the new plugin
        if (this.currentPlugin) this.currentPlugin.destroy();
        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
      }

      /**
       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.currentPlugin.destroy();
        $(window).off('.zf.ResponsiveMenu');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return ResponsiveMenu;
  }();

  ResponsiveMenu.defaults = {};

  // The plugin matches the plugin classes with these plugin instances.
  var MenuPlugins = {
    dropdown: {
      cssClass: 'dropdown',
      plugin: Foundation._plugins['dropdown-menu'] || null
    },
    drilldown: {
      cssClass: 'drilldown',
      plugin: Foundation._plugins['drilldown'] || null
    },
    accordion: {
      cssClass: 'accordion-menu',
      plugin: Foundation._plugins['accordion-menu'] || null
    }
  };

  // Window exports
  Foundation.plugin(ResponsiveMenu, 'ResponsiveMenu');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * ResponsiveToggle module.
   * @module foundation.responsiveToggle
   * @requires foundation.util.mediaQuery
   */

  var ResponsiveToggle = function () {
    /**
     * Creates a new instance of Tab Bar.
     * @class
     * @fires ResponsiveToggle#init
     * @param {jQuery} element - jQuery object to attach tab bar functionality to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function ResponsiveToggle(element, options) {
      _classCallCheck(this, ResponsiveToggle);

      this.$element = $(element);
      this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveToggle');
    }

    /**
     * Initializes the tab bar by finding the target element, toggling element, and running update().
     * @function
     * @private
     */


    _createClass(ResponsiveToggle, [{
      key: '_init',
      value: function _init() {
        var targetID = this.$element.data('responsive-toggle');
        if (!targetID) {
          console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
        }

        this.$targetMenu = $('#' + targetID);
        this.$toggler = this.$element.find('[data-toggle]').filter(function () {
          var target = $(this).data('toggle');
          return target === targetID || target === "";
        });
        this.options = $.extend({}, this.options, this.$targetMenu.data());

        // If they were set, parse the animation classes
        if (this.options.animate) {
          var input = this.options.animate.split(' ');

          this.animationIn = input[0];
          this.animationOut = input[1] || null;
        }

        this._update();
      }

      /**
       * Adds necessary event handlers for the tab bar to work.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        this._updateMqHandler = this._update.bind(this);

        $(window).on('changed.zf.mediaquery', this._updateMqHandler);

        this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
      }

      /**
       * Checks the current media query to determine if the tab bar should be visible or hidden.
       * @function
       * @private
       */

    }, {
      key: '_update',
      value: function _update() {
        // Mobile
        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
          this.$element.show();
          this.$targetMenu.hide();
        }

        // Desktop
        else {
            this.$element.hide();
            this.$targetMenu.show();
          }
      }

      /**
       * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
       * @function
       * @fires ResponsiveToggle#toggled
       */

    }, {
      key: 'toggleMenu',
      value: function toggleMenu() {
        var _this2 = this;

        if (!Foundation.MediaQuery.atLeast(this.options.hideFor)) {
          /**
           * Fires when the element attached to the tab bar toggles.
           * @event ResponsiveToggle#toggled
           */
          if (this.options.animate) {
            if (this.$targetMenu.is(':hidden')) {
              Foundation.Motion.animateIn(this.$targetMenu, this.animationIn, function () {
                _this2.$element.trigger('toggled.zf.responsiveToggle');
                _this2.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');
              });
            } else {
              Foundation.Motion.animateOut(this.$targetMenu, this.animationOut, function () {
                _this2.$element.trigger('toggled.zf.responsiveToggle');
              });
            }
          } else {
            this.$targetMenu.toggle(0);
            this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');
            this.$element.trigger('toggled.zf.responsiveToggle');
          }
        }
      }
    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.responsiveToggle');
        this.$toggler.off('.zf.responsiveToggle');

        $(window).off('changed.zf.mediaquery', this._updateMqHandler);

        Foundation.unregisterPlugin(this);
      }
    }]);

    return ResponsiveToggle;
  }();

  ResponsiveToggle.defaults = {
    /**
     * The breakpoint after which the menu is always shown, and the tab bar is hidden.
     * @option
     * @type {string}
     * @default 'medium'
     */
    hideFor: 'medium',

    /**
     * To decide if the toggle should be animated or not.
     * @option
     * @type {boolean}
     * @default false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(ResponsiveToggle, 'ResponsiveToggle');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Reveal module.
   * @module foundation.reveal
   * @requires foundation.util.keyboard
   * @requires foundation.util.box
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   * @requires foundation.util.motion if using animations
   */

  var Reveal = function () {
    /**
     * Creates a new instance of Reveal.
     * @class
     * @param {jQuery} element - jQuery object to use for the modal.
     * @param {Object} options - optional parameters.
     */
    function Reveal(element, options) {
      _classCallCheck(this, Reveal);

      this.$element = element;
      this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);
      this._init();

      Foundation.registerPlugin(this, 'Reveal');
      Foundation.Keyboard.register('Reveal', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ESCAPE': 'close'
      });
    }

    /**
     * Initializes the modal by adding the overlay and close buttons, (if selected).
     * @private
     */


    _createClass(Reveal, [{
      key: '_init',
      value: function _init() {
        this.id = this.$element.attr('id');
        this.isActive = false;
        this.cached = { mq: Foundation.MediaQuery.current };
        this.isMobile = mobileSniff();

        this.$anchor = $('[data-open="' + this.id + '"]').length ? $('[data-open="' + this.id + '"]') : $('[data-toggle="' + this.id + '"]');
        this.$anchor.attr({
          'aria-controls': this.id,
          'aria-haspopup': true,
          'tabindex': 0
        });

        if (this.options.fullScreen || this.$element.hasClass('full')) {
          this.options.fullScreen = true;
          this.options.overlay = false;
        }
        if (this.options.overlay && !this.$overlay) {
          this.$overlay = this._makeOverlay(this.id);
        }

        this.$element.attr({
          'role': 'dialog',
          'aria-hidden': true,
          'data-yeti-box': this.id,
          'data-resize': this.id
        });

        if (this.$overlay) {
          this.$element.detach().appendTo(this.$overlay);
        } else {
          this.$element.detach().appendTo($(this.options.appendTo));
          this.$element.addClass('without-overlay');
        }
        this._events();
        if (this.options.deepLink && window.location.hash === '#' + this.id) {
          $(window).one('load.zf.reveal', this.open.bind(this));
        }
      }

      /**
       * Creates an overlay div to display behind the modal.
       * @private
       */

    }, {
      key: '_makeOverlay',
      value: function _makeOverlay() {
        return $('<div></div>').addClass('reveal-overlay').appendTo(this.options.appendTo);
      }

      /**
       * Updates position of modal
       * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
       * @private
       */

    }, {
      key: '_updatePosition',
      value: function _updatePosition() {
        var width = this.$element.outerWidth();
        var outerWidth = $(window).width();
        var height = this.$element.outerHeight();
        var outerHeight = $(window).height();
        var left, top;
        if (this.options.hOffset === 'auto') {
          left = parseInt((outerWidth - width) / 2, 10);
        } else {
          left = parseInt(this.options.hOffset, 10);
        }
        if (this.options.vOffset === 'auto') {
          if (height > outerHeight) {
            top = parseInt(Math.min(100, outerHeight / 10), 10);
          } else {
            top = parseInt((outerHeight - height) / 4, 10);
          }
        } else {
          top = parseInt(this.options.vOffset, 10);
        }
        this.$element.css({ top: top + 'px' });
        // only worry about left if we don't have an overlay or we havea  horizontal offset,
        // otherwise we're perfectly in the middle
        if (!this.$overlay || this.options.hOffset !== 'auto') {
          this.$element.css({ left: left + 'px' });
          this.$element.css({ margin: '0px' });
        }
      }

      /**
       * Adds event handlers for the modal.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this2 = this;

        var _this = this;

        this.$element.on({
          'open.zf.trigger': this.open.bind(this),
          'close.zf.trigger': function closeZfTrigger(event, $element) {
            if (event.target === _this.$element[0] || $(event.target).parents('[data-closable]')[0] === $element) {
              // only close reveal when it's explicitly called
              return _this2.close.apply(_this2);
            }
          },
          'toggle.zf.trigger': this.toggle.bind(this),
          'resizeme.zf.trigger': function resizemeZfTrigger() {
            _this._updatePosition();
          }
        });

        if (this.$anchor.length) {
          this.$anchor.on('keydown.zf.reveal', function (e) {
            if (e.which === 13 || e.which === 32) {
              e.stopPropagation();
              e.preventDefault();
              _this.open();
            }
          });
        }

        if (this.options.closeOnClick && this.options.overlay) {
          this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
              return;
            }
            _this.close();
          });
        }
        if (this.options.deepLink) {
          $(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));
        }
      }

      /**
       * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
       * @private
       */

    }, {
      key: '_handleState',
      value: function _handleState(e) {
        if (window.location.hash === '#' + this.id && !this.isActive) {
          this.open();
        } else {
          this.close();
        }
      }

      /**
       * Opens the modal controlled by `this.$anchor`, and closes all others by default.
       * @function
       * @fires Reveal#closeme
       * @fires Reveal#open
       */

    }, {
      key: 'open',
      value: function open() {
        var _this3 = this;

        if (this.options.deepLink) {
          var hash = '#' + this.id;

          if (window.history.pushState) {
            window.history.pushState(null, null, hash);
          } else {
            window.location.hash = hash;
          }
        }

        this.isActive = true;

        // Make elements invisible, but remove display: none so we can get size and positioning
        this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);
        if (this.options.overlay) {
          this.$overlay.css({ 'visibility': 'hidden' }).show();
        }

        this._updatePosition();

        this.$element.hide().css({ 'visibility': '' });

        if (this.$overlay) {
          this.$overlay.css({ 'visibility': '' }).hide();
          if (this.$element.hasClass('fast')) {
            this.$overlay.addClass('fast');
          } else if (this.$element.hasClass('slow')) {
            this.$overlay.addClass('slow');
          }
        }

        if (!this.options.multipleOpened) {
          /**
           * Fires immediately before the modal opens.
           * Closes any other modals that are currently open
           * @event Reveal#closeme
           */
          this.$element.trigger('closeme.zf.reveal', this.id);
        }

        var _this = this;

        function addRevealOpenClasses() {
          if (_this.isMobile) {
            if (!_this.originalScrollPos) {
              _this.originalScrollPos = window.pageYOffset;
            }
            $('html, body').addClass('is-reveal-open');
          } else {
            $('body').addClass('is-reveal-open');
          }
        }
        // Motion UI method of reveal
        if (this.options.animationIn) {
<<<<<<< HEAD
          (function () {
            var afterAnimation = function afterAnimation() {
              _this.$element.attr({
                'aria-hidden': false,
                'tabindex': -1
              }).focus();
              addRevealOpenClasses();
              Foundation.Keyboard.trapFocus(_this.$element);
            };

            if (_this3.options.overlay) {
              Foundation.Motion.animateIn(_this3.$overlay, 'fade-in');
            }
            Foundation.Motion.animateIn(_this3.$element, _this3.options.animationIn, function () {
              if (_this3.$element) {
                // protect against object having been removed
                _this3.focusableElements = Foundation.Keyboard.findFocusable(_this3.$element);
                afterAnimation();
              }
            });
          })();
=======
          var afterAnimation = function afterAnimation() {
            _this.$element.attr({
              'aria-hidden': false,
              'tabindex': -1
            }).focus();
            addRevealOpenClasses();
            Foundation.Keyboard.trapFocus(_this.$element);
          };

          if (this.options.overlay) {
            Foundation.Motion.animateIn(this.$overlay, 'fade-in');
          }
          Foundation.Motion.animateIn(this.$element, this.options.animationIn, function () {
            if (_this3.$element) {
              // protect against object having been removed
              _this3.focusableElements = Foundation.Keyboard.findFocusable(_this3.$element);
              afterAnimation();
            }
          });
>>>>>>> master
        }
        // jQuery method of reveal
        else {
            if (this.options.overlay) {
              this.$overlay.show(0);
            }
            this.$element.show(this.options.showDelay);
          }

        // handle accessibility
        this.$element.attr({
          'aria-hidden': false,
          'tabindex': -1
        }).focus();
        Foundation.Keyboard.trapFocus(this.$element);

        /**
         * Fires when the modal has successfully opened.
         * @event Reveal#open
         */
        this.$element.trigger('open.zf.reveal');

        addRevealOpenClasses();

        setTimeout(function () {
          _this3._extraHandlers();
        }, 0);
      }

      /**
       * Adds extra event handlers for the body and window if necessary.
       * @private
       */

    }, {
      key: '_extraHandlers',
      value: function _extraHandlers() {
        var _this = this;
        if (!this.$element) {
          return;
        } // If we're in the middle of cleanup, don't freak out
        this.focusableElements = Foundation.Keyboard.findFocusable(this.$element);

        if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
          $('body').on('click.zf.reveal', function (e) {
            if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target) || !$.contains(document, e.target)) {
              return;
            }
            _this.close();
          });
        }

        if (this.options.closeOnEsc) {
          $(window).on('keydown.zf.reveal', function (e) {
            Foundation.Keyboard.handleKey(e, 'Reveal', {
              close: function close() {
                if (_this.options.closeOnEsc) {
                  _this.close();
                  _this.$anchor.focus();
                }
              }
            });
          });
        }

        // lock focus within modal while tabbing
        this.$element.on('keydown.zf.reveal', function (e) {
          var $target = $(this);
          // handle keyboard event with keyboard util
          Foundation.Keyboard.handleKey(e, 'Reveal', {
            open: function open() {
              if (_this.$element.find(':focus').is(_this.$element.find('[data-close]'))) {
                setTimeout(function () {
                  // set focus back to anchor if close button has been activated
                  _this.$anchor.focus();
                }, 1);
              } else if ($target.is(_this.focusableElements)) {
                // dont't trigger if acual element has focus (i.e. inputs, links, ...)
                _this.open();
              }
            },
            close: function close() {
              if (_this.options.closeOnEsc) {
                _this.close();
                _this.$anchor.focus();
              }
            },
            handled: function handled(preventDefault) {
              if (preventDefault) {
                e.preventDefault();
              }
            }
          });
        });
      }

      /**
       * Closes the modal.
       * @function
       * @fires Reveal#closed
       */

    }, {
      key: 'close',
      value: function close() {
        if (!this.isActive || !this.$element.is(':visible')) {
          return false;
        }
        var _this = this;

        // Motion UI method of hiding
        if (this.options.animationOut) {
          if (this.options.overlay) {
            Foundation.Motion.animateOut(this.$overlay, 'fade-out', finishUp);
          } else {
            finishUp();
          }

          Foundation.Motion.animateOut(this.$element, this.options.animationOut);
        }
        // jQuery method of hiding
        else {

            this.$element.hide(this.options.hideDelay);

            if (this.options.overlay) {
              this.$overlay.hide(0, finishUp);
            } else {
              finishUp();
            }
          }

        // Conditionals to remove extra event listeners added on open
        if (this.options.closeOnEsc) {
          $(window).off('keydown.zf.reveal');
        }

        if (!this.options.overlay && this.options.closeOnClick) {
          $('body').off('click.zf.reveal');
        }

        this.$element.off('keydown.zf.reveal');

        function finishUp() {
          if (_this.isMobile) {
            if ($('.reveal:visible').length === 0) {
              $('html, body').removeClass('is-reveal-open');
            }
            if (_this.originalScrollPos) {
              $('body').scrollTop(_this.originalScrollPos);
              _this.originalScrollPos = null;
            }
          } else {
            if ($('.reveal:visible').length === 0) {
              $('body').removeClass('is-reveal-open');
            }
          }

          Foundation.Keyboard.releaseFocus(_this.$element);

          _this.$element.attr('aria-hidden', true);

          /**
          * Fires when the modal is done closing.
          * @event Reveal#closed
          */
          _this.$element.trigger('closed.zf.reveal');
        }

        /**
        * Resets the modal content
        * This prevents a running video to keep going in the background
        */
        if (this.options.resetOnClose) {
          this.$element.html(this.$element.html());
        }

        this.isActive = false;
        if (_this.options.deepLink) {
          if (window.history.replaceState) {
            window.history.replaceState('', document.title, window.location.href.replace('#' + this.id, ''));
          } else {
            window.location.hash = '';
          }
        }
      }

      /**
       * Toggles the open/closed state of a modal.
       * @function
       */

    }, {
      key: 'toggle',
      value: function toggle() {
        if (this.isActive) {
          this.close();
        } else {
          this.open();
        }
      }
    }, {
      key: 'destroy',


      /**
       * Destroys an instance of a modal.
       * @function
       */
      value: function destroy() {
        if (this.options.overlay) {
          this.$element.appendTo($(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()
          this.$overlay.hide().off().remove();
        }
        this.$element.hide().off();
        this.$anchor.off('.zf');
        $(window).off('.zf.reveal:' + this.id);

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Reveal;
  }();

  Reveal.defaults = {
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @type {string}
     * @default ''
     */
    animationIn: '',
    /**
     * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
     * @option
     * @type {string}
     * @default ''
     */
    animationOut: '',
    /**
     * Time, in ms, to delay the opening of a modal after a click if no animation used.
     * @option
     * @type {number}
     * @default 0
     */
    showDelay: 0,
    /**
     * Time, in ms, to delay the closing of a modal after a click if no animation used.
     * @option
     * @type {number}
     * @default 0
     */
    hideDelay: 0,
    /**
     * Allows a click on the body/overlay to close the modal.
     * @option
     * @type {boolean}
     * @default true
     */
    closeOnClick: true,
    /**
     * Allows the modal to close if the user presses the `ESCAPE` key.
     * @option
     * @type {boolean}
     * @default true
     */
    closeOnEsc: true,
    /**
     * If true, allows multiple modals to be displayed at once.
     * @option
     * @type {boolean}
     * @default false
     */
    multipleOpened: false,
    /**
     * Distance, in pixels, the modal should push down from the top of the screen.
     * @option
     * @type {number|string}
     * @default auto
     */
    vOffset: 'auto',
    /**
     * Distance, in pixels, the modal should push in from the side of the screen.
     * @option
     * @type {number|string}
     * @default auto
     */
    hOffset: 'auto',
    /**
     * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
     * @option
     * @type {boolean}
     * @default false
     */
    fullScreen: false,
    /**
     * Percentage of screen height the modal should push up from the bottom of the view.
     * @option
     * @type {number}
     * @default 10
     */
    btmOffsetPct: 10,
    /**
     * Allows the modal to generate an overlay div, which will cover the view when modal opens.
     * @option
     * @type {boolean}
     * @default true
     */
    overlay: true,
    /**
     * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
     * @option
     * @type {boolean}
     * @default false
     */
    resetOnClose: false,
    /**
     * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
     * @option
     * @type {boolean}
     * @default false
     */
    deepLink: false,
    /**
    * Allows the modal to append to custom div.
    * @option
    * @type {string}
    * @default "body"
    */
    appendTo: "body"

  };

  // Window exports
  Foundation.plugin(Reveal, 'Reveal');

  function iPhoneSniff() {
    return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)
    );
  }

  function androidSniff() {
    return (/Android/.test(window.navigator.userAgent)
    );
  }

  function mobileSniff() {
    return iPhoneSniff() || androidSniff();
  }
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Sticky module.
   * @module foundation.sticky
   * @requires foundation.util.triggers
   * @requires foundation.util.mediaQuery
   */

  var Sticky = function () {
    /**
     * Creates a new instance of a sticky thing.
     * @class
     * @param {jQuery} element - jQuery object to make sticky.
     * @param {Object} options - options object passed when creating the element programmatically.
     */
    function Sticky(element, options) {
      _classCallCheck(this, Sticky);

      this.$element = element;
      this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);

      this._init();

      Foundation.registerPlugin(this, 'Sticky');
    }

    /**
     * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
     * @function
     * @private
     */


    _createClass(Sticky, [{
      key: '_init',
      value: function _init() {
        var $parent = this.$element.parent('[data-sticky-container]'),
            id = this.$element[0].id || Foundation.GetYoDigits(6, 'sticky'),
            _this = this;

        if (!$parent.length) {
          this.wasWrapped = true;
        }
        this.$container = $parent.length ? $parent : $(this.options.container).wrapInner(this.$element);
        this.$container.addClass(this.options.containerClass);

        this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id, 'data-mutate': id });
        if (this.options.anchor !== '') {
          $('#' + _this.options.anchor).attr({ 'data-mutate': id });
        }

        this.scrollCount = this.options.checkEvery;
        this.isStuck = false;
        $(window).one('load.zf.sticky', function () {
          //We calculate the container height to have correct values for anchor points offset calculation.
          _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
          _this.$container.css('height', _this.containerHeight);
          _this.elemHeight = _this.containerHeight;
          if (_this.options.anchor !== '') {
            _this.$anchor = $('#' + _this.options.anchor);
          } else {
            _this._parsePoints();
          }

          _this._setSizes(function () {
            var scroll = window.pageYOffset;
            _this._calc(false, scroll);
            //Unstick the element will ensure that proper classes are set.
            if (!_this.isStuck) {
              _this._removeSticky(scroll >= _this.topPoint ? false : true);
            }
          });
          _this._events(id.split('-').reverse().join('-'));
        });
      }

      /**
       * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
       * @function
       * @private
       */

    }, {
      key: '_parsePoints',
      value: function _parsePoints() {
        var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
            btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
            pts = [top, btm],
            breaks = {};
        for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
          var pt;
          if (typeof pts[i] === 'number') {
            pt = pts[i];
          } else {
            var place = pts[i].split(':'),
                anchor = $('#' + place[0]);

            pt = anchor.offset().top;
            if (place[1] && place[1].toLowerCase() === 'bottom') {
              pt += anchor[0].getBoundingClientRect().height;
            }
          }
          breaks[i] = pt;
        }

        this.points = breaks;
        return;
      }

      /**
       * Adds event handlers for the scrolling element.
       * @private
       * @param {String} id - psuedo-random id for unique scroll event listener.
       */

    }, {
      key: '_events',
      value: function _events(id) {
        var _this = this,
            scrollListener = this.scrollListener = 'scroll.zf.' + id;
        if (this.isOn) {
          return;
        }
        if (this.canStick) {
          this.isOn = true;
          $(window).off(scrollListener).on(scrollListener, function (e) {
            if (_this.scrollCount === 0) {
              _this.scrollCount = _this.options.checkEvery;
              _this._setSizes(function () {
                _this._calc(false, window.pageYOffset);
              });
            } else {
              _this.scrollCount--;
              _this._calc(false, window.pageYOffset);
            }
          });
        }

        this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
          _this._eventsHandler(id);
        });

        this.$element.on('mutateme.zf.trigger', function (e, el) {
          _this._eventsHandler(id);
        });

        if (this.$anchor) {
          this.$anchor.on('mutateme.zf.trigger', function (e, el) {
            _this._eventsHandler(id);
          });
        }
      }

      /**
       * Handler for events.
       * @private
       * @param {String} id - psuedo-random id for unique scroll event listener.
       */

    }, {
      key: '_eventsHandler',
      value: function _eventsHandler(id) {
        var _this = this,
            scrollListener = this.scrollListener = 'scroll.zf.' + id;

        _this._setSizes(function () {
          _this._calc(false);
          if (_this.canStick) {
            if (!_this.isOn) {
              _this._events(id);
            }
          } else if (_this.isOn) {
            _this._pauseListeners(scrollListener);
          }
        });
      }

      /**
       * Removes event handlers for scroll and change events on anchor.
       * @fires Sticky#pause
       * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
       */

    }, {
      key: '_pauseListeners',
      value: function _pauseListeners(scrollListener) {
        this.isOn = false;
        $(window).off(scrollListener);

        /**
         * Fires when the plugin is paused due to resize event shrinking the view.
         * @event Sticky#pause
         * @private
         */
        this.$element.trigger('pause.zf.sticky');
      }

      /**
       * Called on every `scroll` event and on `_init`
       * fires functions based on booleans and cached values
       * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
       * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
       */

    }, {
      key: '_calc',
      value: function _calc(checkSizes, scroll) {
        if (checkSizes) {
          this._setSizes();
        }

        if (!this.canStick) {
          if (this.isStuck) {
            this._removeSticky(true);
          }
          return false;
        }

        if (!scroll) {
          scroll = window.pageYOffset;
        }

        if (scroll >= this.topPoint) {
          if (scroll <= this.bottomPoint) {
            if (!this.isStuck) {
              this._setSticky();
            }
          } else {
            if (this.isStuck) {
              this._removeSticky(false);
            }
          }
        } else {
          if (this.isStuck) {
            this._removeSticky(true);
          }
        }
      }

      /**
       * Causes the $element to become stuck.
       * Adds `position: fixed;`, and helper classes.
       * @fires Sticky#stuckto
       * @function
       * @private
       */

    }, {
      key: '_setSticky',
      value: function _setSticky() {
        var _this = this,
            stickTo = this.options.stickTo,
            mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
            notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
            css = {};

        css[mrgn] = this.options[mrgn] + 'em';
        css[stickTo] = 0;
        css[notStuckTo] = 'auto';
        this.isStuck = true;
<<<<<<< HEAD
        this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)
=======
        this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css
>>>>>>> master
        /**
         * Fires when the $element has become `position: fixed;`
         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
         * @event Sticky#stuckto
         */
<<<<<<< HEAD
        .trigger('sticky.zf.stuckto:' + stickTo);
=======
        ).trigger('sticky.zf.stuckto:' + stickTo);
>>>>>>> master
        this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
          _this._setSizes();
        });
      }

      /**
       * Causes the $element to become unstuck.
       * Removes `position: fixed;`, and helper classes.
       * Adds other helper classes.
       * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
       * @fires Sticky#unstuckfrom
       * @private
       */

    }, {
      key: '_removeSticky',
      value: function _removeSticky(isTop) {
        var stickTo = this.options.stickTo,
            stickToTop = stickTo === 'top',
            css = {},
            anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
            mrgn = stickToTop ? 'marginTop' : 'marginBottom',
            notStuckTo = stickToTop ? 'bottom' : 'top',
            topOrBottom = isTop ? 'top' : 'bottom';

        css[mrgn] = 0;

        css['bottom'] = 'auto';
        if (isTop) {
          css['top'] = 0;
        } else {
          css['top'] = anchorPt;
        }

        this.isStuck = false;
<<<<<<< HEAD
        this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)
=======
        this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css
>>>>>>> master
        /**
         * Fires when the $element has become anchored.
         * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
         * @event Sticky#unstuckfrom
         */
<<<<<<< HEAD
        .trigger('sticky.zf.unstuckfrom:' + topOrBottom);
=======
        ).trigger('sticky.zf.unstuckfrom:' + topOrBottom);
>>>>>>> master
      }

      /**
       * Sets the $element and $container sizes for plugin.
       * Calls `_setBreakPoints`.
       * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
       * @private
       */

    }, {
      key: '_setSizes',
      value: function _setSizes(cb) {
        this.canStick = Foundation.MediaQuery.is(this.options.stickyOn);
        if (!this.canStick) {
          if (cb && typeof cb === 'function') {
            cb();
          }
        }
        var _this = this,
            newElemWidth = this.$container[0].getBoundingClientRect().width,
            comp = window.getComputedStyle(this.$container[0]),
            pdngl = parseInt(comp['padding-left'], 10),
            pdngr = parseInt(comp['padding-right'], 10);

        if (this.$anchor && this.$anchor.length) {
          this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
        } else {
          this._parsePoints();
        }

        this.$element.css({
          'max-width': newElemWidth - pdngl - pdngr + 'px'
        });

        var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
        if (this.$element.css("display") == "none") {
          newContainerHeight = 0;
        }
        this.containerHeight = newContainerHeight;
        this.$container.css({
          height: newContainerHeight
        });
        this.elemHeight = newContainerHeight;

        if (!this.isStuck) {
          if (this.$element.hasClass('is-at-bottom')) {
            var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
            this.$element.css('top', anchorPt);
          }
        }

        this._setBreakPoints(newContainerHeight, function () {
          if (cb && typeof cb === 'function') {
            cb();
          }
        });
      }

      /**
       * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
       * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
       * @param {Function} cb - optional callback function to be called on completion.
       * @private
       */

    }, {
      key: '_setBreakPoints',
      value: function _setBreakPoints(elemHeight, cb) {
        if (!this.canStick) {
          if (cb && typeof cb === 'function') {
            cb();
          } else {
            return false;
          }
        }
        var mTop = emCalc(this.options.marginTop),
            mBtm = emCalc(this.options.marginBottom),
            topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
            bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,

        // topPoint = this.$anchor.offset().top || this.points[0],
        // bottomPoint = topPoint + this.anchorHeight || this.points[1],
        winHeight = window.innerHeight;

        if (this.options.stickTo === 'top') {
          topPoint -= mTop;
          bottomPoint -= elemHeight + mTop;
        } else if (this.options.stickTo === 'bottom') {
          topPoint -= winHeight - (elemHeight + mBtm);
          bottomPoint -= winHeight - mBtm;
        } else {
          //this would be the stickTo: both option... tricky
        }

        this.topPoint = topPoint;
        this.bottomPoint = bottomPoint;

        if (cb && typeof cb === 'function') {
          cb();
        }
      }

      /**
       * Destroys the current sticky element.
       * Resets the element to the top position first.
       * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this._removeSticky(true);

        this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({
          height: '',
          top: '',
          bottom: '',
          'max-width': ''
        }).off('resizeme.zf.trigger').off('mutateme.zf.trigger');
        if (this.$anchor && this.$anchor.length) {
          this.$anchor.off('change.zf.sticky');
        }
        $(window).off(this.scrollListener);

        if (this.wasWrapped) {
          this.$element.unwrap();
        } else {
          this.$container.removeClass(this.options.containerClass).css({
            height: ''
          });
        }
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Sticky;
  }();

  Sticky.defaults = {
    /**
     * Customizable container template. Add your own classes for styling and sizing.
     * @option
     * @type {string}
     * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'
     */
    container: '<div data-sticky-container></div>',
    /**
     * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.
     * @option
     * @type {string}
     * @default 'top'
     */
    stickTo: 'top',
    /**
     * If anchored to a single element, the id of that element.
     * @option
     * @type {string}
     * @default ''
     */
    anchor: '',
    /**
     * If using more than one element as anchor points, the id of the top anchor.
     * @option
     * @type {string}
     * @default ''
     */
    topAnchor: '',
    /**
     * If using more than one element as anchor points, the id of the bottom anchor.
     * @option
     * @type {string}
     * @default ''
     */
    btmAnchor: '',
    /**
     * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
     * @option
     * @type {number}
     * @default 1
     */
    marginTop: 1,
    /**
     * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
     * @option
     * @type {number}
     * @default 1
     */
    marginBottom: 1,
    /**
     * Breakpoint string that is the minimum screen size an element should become sticky.
     * @option
     * @type {string}
     * @default 'medium'
     */
    stickyOn: 'medium',
    /**
     * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
     * @option
     * @type {string}
     * @default 'sticky'
     */
    stickyClass: 'sticky',
    /**
     * Class applied to sticky container. Foundation defaults to `sticky-container`.
     * @option
     * @type {string}
     * @default 'sticky-container'
     */
    containerClass: 'sticky-container',
    /**
     * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
     * @option
     * @type {number}
     * @default -1
     */
    checkEvery: -1
  };

  /**
   * Helper function to calculate em values
   * @param Number {em} - number of em's to calculate into pixels
   */
  function emCalc(em) {
    return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
  }

  // Window exports
  Foundation.plugin(Sticky, 'Sticky');
}(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Tabs module.
   * @module foundation.tabs
   * @requires foundation.util.keyboard
   * @requires foundation.util.timerAndImageLoader if tabs contain images
   */

  var Tabs = function () {
    /**
     * Creates a new instance of tabs.
     * @class
     * @fires Tabs#init
     * @param {jQuery} element - jQuery object to make into tabs.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Tabs(element, options) {
      _classCallCheck(this, Tabs);

      this.$element = element;
      this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);

      this._init();
      Foundation.registerPlugin(this, 'Tabs');
      Foundation.Keyboard.register('Tabs', {
        'ENTER': 'open',
        'SPACE': 'open',
        'ARROW_RIGHT': 'next',
        'ARROW_UP': 'previous',
        'ARROW_DOWN': 'next',
        'ARROW_LEFT': 'previous'
        // 'TAB': 'next',
        // 'SHIFT_TAB': 'previous'
      });
    }

    /**
     * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
     * @private
     */


    _createClass(Tabs, [{
      key: '_init',
      value: function _init() {
        var _this2 = this;

        var _this = this;

        this.$element.attr({ 'role': 'tablist' });
        this.$tabTitles = this.$element.find('.' + this.options.linkClass);
        this.$tabContent = $('[data-tabs-content="' + this.$element[0].id + '"]');

        this.$tabTitles.each(function () {
          var $elem = $(this),
              $link = $elem.find('a'),
              isActive = $elem.hasClass('' + _this.options.linkActiveClass),
              hash = $link[0].hash.slice(1),
              linkId = $link[0].id ? $link[0].id : hash + '-label',
              $tabContent = $('#' + hash);

          $elem.attr({ 'role': 'presentation' });

          $link.attr({
            'role': 'tab',
            'aria-controls': hash,
            'aria-selected': isActive,
            'id': linkId
          });

          $tabContent.attr({
            'role': 'tabpanel',
            'aria-hidden': !isActive,
            'aria-labelledby': linkId
          });

          if (isActive && _this.options.autoFocus) {
            $(window).load(function () {
              $('html, body').animate({ scrollTop: $elem.offset().top }, _this.options.deepLinkSmudgeDelay, function () {
                $link.focus();
              });
            });
          }
        });
        if (this.options.matchHeight) {
          var $images = this.$tabContent.find('img');

          if ($images.length) {
            Foundation.onImagesLoaded($images, this._setHeight.bind(this));
          } else {
            this._setHeight();
          }
        }

        //current context-bound function to open tabs on page load or history popstate
        this._checkDeepLink = function () {
          var anchor = window.location.hash;
          //need a hash and a relevant anchor in this tabset
          if (anchor.length) {
            var $link = _this2.$element.find('[href$="' + anchor + '"]');
            if ($link.length) {
              _this2.selectTab($(anchor), true);

              //roll up a little to show the titles
              if (_this2.options.deepLinkSmudge) {
                var offset = _this2.$element.offset();
                $('html, body').animate({ scrollTop: offset.top }, _this2.options.deepLinkSmudgeDelay);
              }

              /**
                * Fires when the zplugin has deeplinked at pageload
                * @event Tabs#deeplink
                */
              _this2.$element.trigger('deeplink.zf.tabs', [$link, $(anchor)]);
            }
          }
        };

        //use browser to open a tab, if it exists in this tabset
        if (this.options.deepLink) {
          this._checkDeepLink();
        }

        this._events();
      }

      /**
       * Adds event handlers for items within the tabs.
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        this._addKeyHandler();
        this._addClickHandler();
        this._setHeightMqHandler = null;

        if (this.options.matchHeight) {
          this._setHeightMqHandler = this._setHeight.bind(this);

          $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
        }

        if (this.options.deepLink) {
          $(window).on('popstate', this._checkDeepLink);
        }
      }

      /**
       * Adds click handlers for items within the tabs.
       * @private
       */

    }, {
      key: '_addClickHandler',
      value: function _addClickHandler() {
        var _this = this;

        this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {
          e.preventDefault();
          e.stopPropagation();
          _this._handleTabChange($(this));
        });
      }

      /**
       * Adds keyboard event handlers for items within the tabs.
       * @private
       */

    }, {
      key: '_addKeyHandler',
      value: function _addKeyHandler() {
        var _this = this;

        this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {
          if (e.which === 9) return;

          var $element = $(this),
              $elements = $element.parent('ul').children('li'),
              $prevElement,
              $nextElement;

          $elements.each(function (i) {
            if ($(this).is($element)) {
              if (_this.options.wrapOnKeys) {
                $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
                $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
              } else {
                $prevElement = $elements.eq(Math.max(0, i - 1));
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
              }
              return;
            }
          });

          // handle keyboard event with keyboard util
          Foundation.Keyboard.handleKey(e, 'Tabs', {
            open: function open() {
              $element.find('[role="tab"]').focus();
              _this._handleTabChange($element);
            },
            previous: function previous() {
              $prevElement.find('[role="tab"]').focus();
              _this._handleTabChange($prevElement);
            },
            next: function next() {
              $nextElement.find('[role="tab"]').focus();
              _this._handleTabChange($nextElement);
            },
            handled: function handled() {
              e.stopPropagation();
              e.preventDefault();
            }
          });
        });
      }

      /**
       * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.
       * @param {jQuery} $target - Tab to open.
       * @param {boolean} historyHandled - browser has already handled a history update
       * @fires Tabs#change
       * @function
       */

    }, {
      key: '_handleTabChange',
      value: function _handleTabChange($target, historyHandled) {

        /**
         * Check for active class on target. Collapse if exists.
         */
        if ($target.hasClass('' + this.options.linkActiveClass)) {
          if (this.options.activeCollapse) {
            this._collapseTab($target);

            /**
             * Fires when the zplugin has successfully collapsed tabs.
             * @event Tabs#collapse
             */
            this.$element.trigger('collapse.zf.tabs', [$target]);
          }
          return;
        }

        var $oldTab = this.$element.find('.' + this.options.linkClass + '.' + this.options.linkActiveClass),
            $tabLink = $target.find('[role="tab"]'),
            hash = $tabLink[0].hash,
            $targetContent = this.$tabContent.find(hash);

        //close old tab
        this._collapseTab($oldTab);

        //open new tab
        this._openTab($target);

        //either replace or update browser history
        if (this.options.deepLink && !historyHandled) {
          var anchor = $target.find('a').attr('href');

          if (this.options.updateHistory) {
            history.pushState({}, '', anchor);
          } else {
            history.replaceState({}, '', anchor);
          }
        }

        /**
         * Fires when the plugin has successfully changed tabs.
         * @event Tabs#change
         */
        this.$element.trigger('change.zf.tabs', [$target, $targetContent]);

        //fire to children a mutation event
        $targetContent.find("[data-mutate]").trigger("mutateme.zf.trigger");
      }

      /**
       * Opens the tab `$targetContent` defined by `$target`.
       * @param {jQuery} $target - Tab to Open.
       * @function
       */

    }, {
      key: '_openTab',
      value: function _openTab($target) {
        var $tabLink = $target.find('[role="tab"]'),
            hash = $tabLink[0].hash,
            $targetContent = this.$tabContent.find(hash);

        $target.addClass('' + this.options.linkActiveClass);

        $tabLink.attr({ 'aria-selected': 'true' });

        $targetContent.addClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'false' });
      }

      /**
       * Collapses `$targetContent` defined by `$target`.
       * @param {jQuery} $target - Tab to Open.
       * @function
       */

    }, {
      key: '_collapseTab',
      value: function _collapseTab($target) {
        var $target_anchor = $target.removeClass('' + this.options.linkActiveClass).find('[role="tab"]').attr({ 'aria-selected': 'false' });

        $('#' + $target_anchor.attr('aria-controls')).removeClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'true' });
      }

      /**
       * Public method for selecting a content pane to display.
       * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
       * @param {boolean} historyHandled - browser has already handled a history update
       * @function
       */

    }, {
      key: 'selectTab',
      value: function selectTab(elem, historyHandled) {
        var idStr;

        if ((typeof elem === 'undefined' ? 'undefined' : _typeof(elem)) === 'object') {
          idStr = elem[0].id;
        } else {
          idStr = elem;
        }

        if (idStr.indexOf('#') < 0) {
          idStr = '#' + idStr;
        }

        var $target = this.$tabTitles.find('[href$="' + idStr + '"]').parent('.' + this.options.linkClass);

        this._handleTabChange($target, historyHandled);
      }
    }, {
      key: '_setHeight',

      /**
       * Sets the height of each panel to the height of the tallest panel.
       * If enabled in options, gets called on media query change.
       * If loading content via external source, can be called directly or with _reflow.
       * If enabled with `data-match-height="true"`, tabs sets to equal height
       * @function
       * @private
       */
      value: function _setHeight() {
        var max = 0,
            _this = this; // Lock down the `this` value for the root tabs object

        this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {

          var panel = $(this),
              isActive = panel.hasClass('' + _this.options.panelActiveClass); // get the options from the parent instead of trying to get them from the child

          if (!isActive) {
            panel.css({ 'visibility': 'hidden', 'display': 'block' });
          }

          var temp = this.getBoundingClientRect().height;

          if (!isActive) {
            panel.css({
              'visibility': '',
              'display': ''
            });
          }

          max = temp > max ? temp : max;
        }).css('height', max + 'px');
      }

      /**
       * Destroys an instance of an tabs.
       * @fires Tabs#destroyed
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();

        if (this.options.matchHeight) {
          if (this._setHeightMqHandler != null) {
            $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
          }
        }

        if (this.options.deepLink) {
          $(window).off('popstate', this._checkDeepLink);
        }

        Foundation.unregisterPlugin(this);
      }
    }]);

    return Tabs;
  }();

  Tabs.defaults = {
    /**
     * Allows the window to scroll to content of pane specified by hash anchor
     * @option
     * @type {boolean}
     * @default false
     */
    deepLink: false,

    /**
     * Adjust the deep link scroll to make sure the top of the tab panel is visible
     * @option
     * @type {boolean}
     * @default false
     */
    deepLinkSmudge: false,

    /**
     * Animation time (ms) for the deep link adjustment
     * @option
     * @type {number}
     * @default 300
     */
    deepLinkSmudgeDelay: 300,

    /**
     * Update the browser history with the open tab
     * @option
     * @type {boolean}
     * @default false
     */
    updateHistory: false,

    /**
     * Allows the window to scroll to content of active pane on load if set to true.
     * Not recommended if more than one tab panel per page.
     * @option
     * @type {boolean}
     * @default false
     */
    autoFocus: false,

    /**
     * Allows keyboard input to 'wrap' around the tab links.
     * @option
     * @type {boolean}
     * @default true
     */
    wrapOnKeys: true,

    /**
     * Allows the tab content panes to match heights if set to true.
     * @option
     * @type {boolean}
     * @default false
     */
    matchHeight: false,

    /**
     * Allows active tabs to collapse when clicked.
     * @option
     * @type {boolean}
     * @default false
     */
    activeCollapse: false,

    /**
     * Class applied to `li`'s in tab link list.
     * @option
     * @type {string}
     * @default 'tabs-title'
     */
    linkClass: 'tabs-title',

    /**
     * Class applied to the active `li` in tab link list.
     * @option
     * @type {string}
     * @default 'is-active'
     */
    linkActiveClass: 'is-active',

    /**
     * Class applied to the content containers.
     * @option
     * @type {string}
     * @default 'tabs-panel'
     */
    panelClass: 'tabs-panel',

    /**
     * Class applied to the active content container.
     * @option
     * @type {string}
     * @default 'is-active'
     */
    panelActiveClass: 'is-active'
  };

  // Window exports
  Foundation.plugin(Tabs, 'Tabs');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * Toggler module.
   * @module foundation.toggler
   * @requires foundation.util.motion
   * @requires foundation.util.triggers
   */

  var Toggler = function () {
    /**
     * Creates a new instance of Toggler.
     * @class
     * @fires Toggler#init
     * @param {Object} element - jQuery object to add the trigger to.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function Toggler(element, options) {
      _classCallCheck(this, Toggler);

      this.$element = element;
      this.options = $.extend({}, Toggler.defaults, element.data(), options);
      this.className = '';

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'Toggler');
    }

    /**
     * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
     * @function
     * @private
     */


    _createClass(Toggler, [{
      key: '_init',
      value: function _init() {
        var input;
        // Parse animation classes if they were set
        if (this.options.animate) {
          input = this.options.animate.split(' ');

          this.animationIn = input[0];
          this.animationOut = input[1] || null;
        }
        // Otherwise, parse toggle class
        else {
            input = this.$element.data('toggler');
            // Allow for a . at the beginning of the string
            this.className = input[0] === '.' ? input.slice(1) : input;
          }

        // Add ARIA attributes to triggers
        var id = this.$element[0].id;
        $('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-controls', id);
        // If the target is hidden, add aria-hidden
        this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
      }

      /**
       * Initializes events for the toggle trigger.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
      }

      /**
       * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
       * @function
       * @fires Toggler#on
       * @fires Toggler#off
       */

    }, {
      key: 'toggle',
      value: function toggle() {
        this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
      }
    }, {
      key: '_toggleClass',
      value: function _toggleClass() {
        this.$element.toggleClass(this.className);

        var isOn = this.$element.hasClass(this.className);
        if (isOn) {
          /**
           * Fires if the target element has the class after a toggle.
           * @event Toggler#on
           */
          this.$element.trigger('on.zf.toggler');
        } else {
          /**
           * Fires if the target element does not have the class after a toggle.
           * @event Toggler#off
           */
          this.$element.trigger('off.zf.toggler');
        }

        this._updateARIA(isOn);
        this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');
      }
    }, {
      key: '_toggleAnimate',
      value: function _toggleAnimate() {
        var _this = this;

        if (this.$element.is(':hidden')) {
          Foundation.Motion.animateIn(this.$element, this.animationIn, function () {
            _this._updateARIA(true);
            this.trigger('on.zf.toggler');
            this.find('[data-mutate]').trigger('mutateme.zf.trigger');
          });
        } else {
          Foundation.Motion.animateOut(this.$element, this.animationOut, function () {
            _this._updateARIA(false);
            this.trigger('off.zf.toggler');
            this.find('[data-mutate]').trigger('mutateme.zf.trigger');
          });
        }
      }
    }, {
      key: '_updateARIA',
      value: function _updateARIA(isOn) {
        this.$element.attr('aria-expanded', isOn ? true : false);
      }

      /**
       * Destroys the instance of Toggler on the element.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        this.$element.off('.zf.toggler');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return Toggler;
  }();

  Toggler.defaults = {
    /**
     * Tells the plugin if the element should animated when toggled.
     * @option
     * @type {boolean}
     * @default false
     */
    animate: false
  };

  // Window exports
  Foundation.plugin(Toggler, 'Toggler');
}(jQuery);
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

!function ($) {

  /**
   * ResponsiveAccordionTabs module.
   * @module foundation.responsiveAccordionTabs
   * @requires foundation.util.keyboard
   * @requires foundation.util.timerAndImageLoader
   * @requires foundation.util.motion
   * @requires foundation.accordion
   * @requires foundation.tabs
   */

  var ResponsiveAccordionTabs = function () {
    /**
     * Creates a new instance of a responsive accordion tabs.
     * @class
     * @fires ResponsiveAccordionTabs#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function ResponsiveAccordionTabs(element, options) {
      _classCallCheck(this, ResponsiveAccordionTabs);

      this.$element = $(element);
      this.options = $.extend({}, this.$element.data(), options);
      this.rules = this.$element.data('responsive-accordion-tabs');
      this.currentMq = null;
      this.currentPlugin = null;
      if (!this.$element.attr('id')) {
        this.$element.attr('id', Foundation.GetYoDigits(6, 'responsiveaccordiontabs'));
      };

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveAccordionTabs');
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.
     * @function
     * @private
     */


    _createClass(ResponsiveAccordionTabs, [{
      key: '_init',
      value: function _init() {
        // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
        if (typeof this.rules === 'string') {
          var rulesTree = {};

          // Parse rules from "classes" pulled from data attribute
          var rules = this.rules.split(' ');

          // Iterate through every rule found
          for (var i = 0; i < rules.length; i++) {
            var rule = rules[i].split('-');
            var ruleSize = rule.length > 1 ? rule[0] : 'small';
            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

            if (MenuPlugins[rulePlugin] !== null) {
              rulesTree[ruleSize] = MenuPlugins[rulePlugin];
            }
          }

          this.rules = rulesTree;
        }

        this._getAllOptions();

        if (!$.isEmptyObject(this.rules)) {
          this._checkMediaQueries();
        }
      }
    }, {
      key: '_getAllOptions',
      value: function _getAllOptions() {
        //get all defaults and options
        var _this = this;
        _this.allOptions = {};
        for (var key in MenuPlugins) {
          if (MenuPlugins.hasOwnProperty(key)) {
            var obj = MenuPlugins[key];
            try {
              var dummyPlugin = $('<ul></ul>');
              var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);
              for (var keyKey in tmpPlugin.options) {
                if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {
                  var objObj = tmpPlugin.options[keyKey];
                  _this.allOptions[keyKey] = objObj;
                }
              }
              tmpPlugin.destroy();
            } catch (e) {}
          }
        }
      }

      /**
       * Initializes events for the Menu.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        $(window).on('changed.zf.mediaquery', function () {
          _this._checkMediaQueries();
        });
      }

      /**
       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
       * @function
       * @private
       */

    }, {
      key: '_checkMediaQueries',
      value: function _checkMediaQueries() {
        var matchedMq,
            _this = this;
        // Iterate through each rule and find the last matching rule
        $.each(this.rules, function (key) {
          if (Foundation.MediaQuery.atLeast(key)) {
            matchedMq = key;
          }
        });

        // No match? No dice
        if (!matchedMq) return;

        // Plugin already initialized? We good
        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

        // Remove existing plugin-specific CSS classes
        $.each(MenuPlugins, function (key, value) {
          _this.$element.removeClass(value.cssClass);
        });

        // Add the CSS class for the new plugin
        this.$element.addClass(this.rules[matchedMq].cssClass);

        // Create an instance of the new plugin
        if (this.currentPlugin) {
          //don't know why but on nested elements data zfPlugin get's lost
          if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);
          this.currentPlugin.destroy();
        }
        this._handleMarkup(this.rules[matchedMq].cssClass);
        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
        this.storezfData = this.currentPlugin.$element.data('zfPlugin');
      }
    }, {
      key: '_handleMarkup',
      value: function _handleMarkup(toSet) {
        var _this = this,
            fromString = 'accordion';
        var $panels = $('[data-tabs-content=' + this.$element.attr('id') + ']');
        if ($panels.length) fromString = 'tabs';
        if (fromString === toSet) {
          return;
        };

        var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';
        var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';

        this.$element.removeAttr('role');
        var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');
        var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');

        if (fromString === 'tabs') {
          $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');
          $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');
        } else {
          $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');
        };

        $panels.css({ display: '', visibility: '' });
        $liHeads.css({ display: '', visibility: '' });
        if (toSet === 'accordion') {
          $panels.each(function (key, value) {
            $(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({ height: '' });
            $('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id="tabs-placeholder-' + _this.$element.attr('id') + '"></div>').remove();
            $liHeads.addClass('accordion-item').attr('data-accordion-item', '');
            $liHeadsA.addClass('accordion-title');
          });
        } else if (toSet === 'tabs') {
          var $tabsContent = $('[data-tabs-content=' + _this.$element.attr('id') + ']');
          var $placeholder = $('#tabs-placeholder-' + _this.$element.attr('id'));
          if ($placeholder.length) {
            $tabsContent = $('<div class="tabs-content"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));
            $placeholder.remove();
          } else {
            $tabsContent = $('<div class="tabs-content"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));
          };
          $panels.each(function (key, value) {
            var tempValue = $(value).appendTo($tabsContent).addClass(tabsPanel);
            var hash = $liHeadsA.get(key).hash.slice(1);
            var id = $(value).attr('id') || Foundation.GetYoDigits(6, 'accordion');
            if (hash !== id) {
              if (hash !== '') {
                $(value).attr('id', hash);
              } else {
                hash = id;
                $(value).attr('id', hash);
                $($liHeadsA.get(key)).attr('href', $($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);
              };
            };
            var isActive = $($liHeads.get(key)).hasClass('is-active');
            if (isActive) {
              tempValue.addClass('is-active');
            };
          });
          $liHeads.addClass(tabsTitle);
        };
      }

      /**
       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        if (this.currentPlugin) this.currentPlugin.destroy();
        $(window).off('.zf.ResponsiveAccordionTabs');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return ResponsiveAccordionTabs;
  }();

  ResponsiveAccordionTabs.defaults = {};

  // The plugin matches the plugin classes with these plugin instances.
  var MenuPlugins = {
    tabs: {
      cssClass: 'tabs',
      plugin: Foundation._plugins.tabs || null
    },
    accordion: {
      cssClass: 'accordion',
      plugin: Foundation._plugins.accordion || null
    }
  };

  // Window exports
  Foundation.plugin(ResponsiveAccordionTabs, 'ResponsiveAccordionTabs');
}(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD
		define(['jquery'], factory);
	} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
		// CommonJS
		factory(require('jquery'));
	} else {
		// Browser globals
		factory(jQuery);
	}
})(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch (e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires,
				    t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return document.cookie = [encode(key), '=', stringifyCookieValue(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
			options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};
});
'use strict';

/*!
 * jQuery Cookiebar Plugin
 * https://github.com/carlwoodhouse/jquery.cookieBar
 *
 * Copyright 2012, Carl Woodhouse
 * Disclaimer: if you still get fined for not complying with the eu cookielaw, it's not our fault.
 */

(function ($) {
    $.fn.cookieBar = function (options) {
        var settings = $.extend({
            'closeButton': 'none',
            'secure': false,
            'path': '/',
            'domain': ''
        }, options);

        return this.each(function () {
            var cookiebar = $(this);

            // just in case they didnt hide it by default.
            cookiebar.hide();

            // if close button not defined. define it!
            if (settings.closeButton == 'none') {
                cookiebar.append('<a class="cookiebar-close">Continue</a>');
                settings = $.extend({
                    'closeButton': '.cookiebar-close'
                }, options);
            }

            if ($.cookie('cookiebar') != 'hide') {
                cookiebar.show();
            }

            cookiebar.find(settings.closeButton).click(function () {
                cookiebar.hide();
                $.cookie('cookiebar', 'hide', { path: settings.path, secure: settings.secure, domain: settings.domain, expires: 30 });
                return false;
            });
        });
    };

    // self injection init
    $.cookieBar = function (options) {
        $('body').prepend('<div class="ui-widget"><div style="display: none;" class="cookie-message ui-widget-header blue"><p>By using this website you allow us to place cookies on your computer. They are harmless and never personally identify you.</p></div></div>');
        $('.cookie-message').cookieBar(options);
    };
})(jQuery);

/*!
 * Dependancy:
 * jQuery Cookie Plugin
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2011, Klaus Hartl
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.opensource.org/licenses/GPL-2.0
 */
(function ($) {
    $.cookie = function (key, value, options) {
        // key and at least value given, set cookie...
        if (arguments.length > 1 && (!/Object/.test(Object.prototype.toString.call(value)) || value === null || value === undefined)) {
            options = $.extend({}, options);

            if (value === null || value === undefined) {
                options.expires = -1;
            }

            if (typeof options.expires === 'number') {
                var days = options.expires,
                    t = options.expires = new Date();
                t.setDate(t.getDate() + days);
            }

            value = String(value);

            return document.cookie = [encodeURIComponent(key), '=', options.raw ? value : encodeURIComponent(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
            options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
        }

        // key and possibly options given, get cookie...
        options = value || {};
        var decode = options.raw ? function (s) {
            return s;
        } : decodeURIComponent;

        var pairs = document.cookie.split('; ');
        for (var i = 0, pair; pair = pairs[i] && pairs[i].split('='); i++) {
            // IE saves cookies with empty string as "c; ", e.g. without "=" as opposed to EOMB, thus pair[1] may be undefined
            if (decode(pair[0]) === key) return decode(pair[1] || '');
        }
        return null;
    };
})(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery Raty FA - A Star Rating Plugin with Font Awesome
 *
 * Licensed under The MIT License
 *
 * @author  : Jacob Overgaard
 * @doc     : http://jacob87.github.io/raty-fa/
 * @version : 0.1.1
 *
 */

;(function ($) {

  var methods = {
    init: function init(settings) {
      return this.each(function () {
        methods.destroy.call(this);

        this.opt = $.extend(true, {}, $.fn.raty.defaults, settings);

        var that = $(this),
            inits = ['number', 'readOnly', 'score', 'scoreName'];

        methods._callback.call(this, inits);

        if (this.opt.precision) {
          methods._adjustPrecision.call(this);
        }

        this.opt.number = methods._between(this.opt.number, 0, this.opt.numberMax);

        this.stars = methods._createStars.call(this);
        this.score = methods._createScore.call(this);

        methods._apply.call(this, this.opt.score);

        if (this.opt.cancel) {
          this.cancel = methods._createCancel.call(this);
        }

        if (this.opt.width) {
          that.css('width', this.opt.width);
        }

        if (this.opt.readOnly) {
          methods._lock.call(this);
        } else {
          that.css('cursor', 'pointer');
          methods._binds.call(this);
        }

        methods._target.call(this, this.opt.score);

        that.data({ 'settings': this.opt, 'raty': true });
      });
    }, _adjustPrecision: function _adjustPrecision() {
      this.opt.targetType = 'score';
      this.opt.half = true;
    }, _apply: function _apply(score) {
      if (score && score > 0) {
        score = methods._between(score, 0, this.opt.number);
        this.score.val(score);
      }

      methods._fill.call(this, score);

      if (score) {
        methods._roundStars.call(this, score);
      }
    }, _between: function _between(value, min, max) {
      return Math.min(Math.max(parseFloat(value), min), max);
    }, _binds: function _binds() {
      if (this.cancel) {
        methods._bindCancel.call(this);
      }

      methods._bindClick.call(this);
      methods._bindOut.call(this);
      methods._bindOver.call(this);
    }, _bindCancel: function _bindCancel() {
      methods._bindClickCancel.call(this);
      methods._bindOutCancel.call(this);
      methods._bindOverCancel.call(this);
    }, _bindClick: function _bindClick() {
      var self = this,
          that = $(self);

      self.stars.on('click.raty', function (evt) {
        self.score.val(self.opt.half || self.opt.precision ? that.data('score') : $(this).data('score'));

        if (self.opt.click) {
          self.opt.click.call(self, parseFloat(self.score.val()), evt);
        }
      });
    }, _bindClickCancel: function _bindClickCancel() {
      var self = this;

      self.cancel.on('click.raty', function (evt) {
        self.score.removeAttr('value');

        if (self.opt.click) {
          self.opt.click.call(self, null, evt);
        }
      });
    }, _bindOut: function _bindOut() {
      var self = this;

      $(this).on('mouseleave.raty', function (evt) {
        var score = parseFloat(self.score.val()) || undefined;

        methods._apply.call(self, score);
        methods._target.call(self, score, evt);

        if (self.opt.mouseout) {
          self.opt.mouseout.call(self, score, evt);
        }
      });
    }, _bindOutCancel: function _bindOutCancel() {
      var self = this;

      self.cancel.on('mouseleave.raty', function (evt) {
        $(this).attr('class', self.opt.cancelOff);

        if (self.opt.mouseout) {
          self.opt.mouseout.call(self, self.score.val() || null, evt);
        }
      });
    }, _bindOverCancel: function _bindOverCancel() {
      var self = this;

      self.cancel.on('mouseover.raty', function (evt) {
        $(this).attr('class', self.opt.cancelOn);

        self.stars.attr('class', self.opt.starOff);

        methods._target.call(self, null, evt);

        if (self.opt.mouseover) {
          self.opt.mouseover.call(self, null);
        }
      });
    }, _bindOver: function _bindOver() {
      var self = this,
          that = $(self),
          action = self.opt.half ? 'mousemove.raty' : 'mouseover.raty';

      self.stars.on(action, function (evt) {
        var score = parseInt($(this).data('score'), 10);

        if (self.opt.half) {
          var position = parseFloat((evt.pageX - $(this).offset().left) / (self.opt.size ? self.opt.size : parseInt(that.css('font-size')))),
              plus = position > .5 ? 1 : .5;

          score = score - 1 + plus;

          methods._fill.call(self, score);

          if (self.opt.precision) {
            score = score - plus + position;
          }

          methods._roundStars.call(self, score);

          that.data('score', score);
        } else {
          methods._fill.call(self, score);
        }

        methods._target.call(self, score, evt);

        if (self.opt.mouseover) {
          self.opt.mouseover.call(self, score, evt);
        }
      });
    }, _callback: function _callback(options) {
      for (var i in options) {
        if (typeof this.opt[options[i]] === 'function') {
          this.opt[options[i]] = this.opt[options[i]].call(this);
        }
      }
    }, _createCancel: function _createCancel() {
      var that = $(this),
          icon = this.opt.cancelOff,
          cancel = $('<i />', { class: icon, title: this.opt.cancelHint });

      if (this.opt.cancelPlace == 'left') {
        that.prepend('&#160;').prepend(cancel);
      } else {
        that.append('&#160;').append(cancel);
      }

      return cancel;
    }, _createScore: function _createScore() {
      return $('<input />', { type: 'hidden', name: this.opt.scoreName }).appendTo(this);
    }, _createStars: function _createStars() {
      var that = $(this);

      for (var i = 1; i <= this.opt.number; i++) {
        var title = methods._getHint.call(this, i),
            icon = this.opt.score && this.opt.score >= i ? 'starOn' : 'starOff';

        icon = this.opt[icon];

        $('<i />', { class: icon, title: title, 'data-score': i }).appendTo(this);

        if (this.opt.space) {
          that.append(i < this.opt.number ? '&#160;' : '');
        }
      }

      return that.children('i');
    }, _error: function _error(message) {
      $(this).html(message);

      $.error(message);
    }, _fill: function _fill(score) {
      var self = this,
          hash = 0;

      for (var i = 1; i <= self.stars.length; i++) {
        var star = self.stars.eq(i - 1),
            select = self.opt.single ? i == score : i <= score;

        if (self.opt.iconRange && self.opt.iconRange.length > hash) {
          var irange = self.opt.iconRange[hash],
              on = irange.on || self.opt.starOn,
              off = irange.off || self.opt.starOff,
              icon = select ? on : off;

          if (i <= irange.range) {
            star.attr('class', icon);
          }

          if (i == irange.range) {
            hash++;
          }
        } else {
          var icon = select ? 'starOn' : 'starOff';

          star.attr('class', this.opt[icon]);
        }
      }
    }, _getHint: function _getHint(score) {
      var hint = this.opt.hints[score - 1];
      return hint === '' ? '' : hint || score;
    }, _lock: function _lock() {
      var score = parseInt(this.score.val(), 10),
          // TODO: 3.1 >> [['1'], ['2'], ['3', '.1', '.2']]
      hint = score ? methods._getHint.call(this, score) : this.opt.noRatedMsg;

      $(this).data('readonly', true).css('cursor', '').attr('title', hint);

      this.score.attr('readonly', 'readonly');
      this.stars.attr('title', hint);

      if (this.cancel) {
        this.cancel.hide();
      }
    }, _roundStars: function _roundStars(score) {
      var rest = (score - Math.floor(score)).toFixed(2);

      if (rest > this.opt.round.down) {
        var icon = 'starOn'; // Up:   [x.76 .. x.99]

        if (this.opt.halfShow && rest < this.opt.round.up) {
          // Half: [x.26 .. x.75]
          icon = 'starHalf';
        } else if (rest < this.opt.round.full) {
          // Down: [x.00 .. x.5]
          icon = 'starOff';
        }

        this.stars.eq(Math.ceil(score) - 1).attr('class', this.opt[icon]);
      } // Full down: [x.00 .. x.25]
    }, _target: function _target(score, evt) {
      if (this.opt.target) {
        var target = $(this.opt.target);

        if (target.length === 0) {
          methods._error.call(this, 'Target selector invalid or missing!');
        }

        if (this.opt.targetFormat.indexOf('{score}') < 0) {
          methods._error.call(this, 'Template "{score}" missing!');
        }

        var mouseover = evt && evt.type == 'mouseover';

        if (score === undefined) {
          score = this.opt.targetText;
        } else if (score === null) {
          score = mouseover ? this.opt.cancelHint : this.opt.targetText;
        } else {
          if (this.opt.targetType == 'hint') {
            score = methods._getHint.call(this, Math.ceil(score));
          } else if (this.opt.precision) {
            score = parseFloat(score).toFixed(1);
          }

          if (!mouseover && !this.opt.targetKeep) {
            score = this.opt.targetText;
          }
        }

        if (score) {
          score = this.opt.targetFormat.toString().replace('{score}', score);
        }

        if (target.is(':input')) {
          target.val(score);
        } else {
          target.html(score);
        }
      }
    }, _unlock: function _unlock() {
      $(this).data('readonly', false).css('cursor', 'pointer').removeAttr('title');

      this.score.removeAttr('readonly', 'readonly');

      for (var i = 0; i < this.opt.number; i++) {
        this.stars.eq(i).attr('title', methods._getHint.call(this, i + 1));
      }

      if (this.cancel) {
        this.cancel.css('display', '');
      }
    }, cancel: function cancel(click) {
      return this.each(function () {
        if ($(this).data('readonly') !== true) {
          methods[click ? 'click' : 'score'].call(this, null);
          this.score.removeAttr('value');
        }
      });
    }, click: function click(score) {
      return $(this).each(function () {
        if ($(this).data('readonly') !== true) {
          methods._apply.call(this, score);

          if (!this.opt.click) {
            methods._error.call(this, 'You must add the "click: function(score, evt) { }" callback.');
          }

          this.opt.click.call(this, score, $.Event('click'));

          methods._target.call(this, score);
        }
      });
    }, destroy: function destroy() {
      return $(this).each(function () {
        var that = $(this),
            raw = that.data('raw');

        if (raw) {
          that.off('.raty').empty().css({ cursor: raw.style.cursor, width: raw.style.width }).removeData('readonly');
        } else {
          that.data('raw', that.clone()[0]);
        }
      });
    }, getScore: function getScore() {
      var score = [],
          value;

      $(this).each(function () {
        value = this.score.val();

        score.push(value ? parseFloat(value) : undefined);
      });

      return score.length > 1 ? score : score[0];
    }, readOnly: function readOnly(readonly) {
      return this.each(function () {
        var that = $(this);

        if (that.data('readonly') !== readonly) {
          if (readonly) {
            that.off('.raty').children('i').off('.raty');

            methods._lock.call(this);
          } else {
            methods._binds.call(this);
            methods._unlock.call(this);
          }

          that.data('readonly', readonly);
        }
      });
    }, reload: function reload() {
      return methods.set.call(this, {});
    }, score: function score() {
      return arguments.length ? methods.setScore.apply(this, arguments) : methods.getScore.call(this);
    }, set: function set(settings) {
      return this.each(function () {
        var that = $(this),
            actual = that.data('settings'),
            news = $.extend({}, actual, settings);

        that.raty(news);
      });
    }, setScore: function setScore(score) {
      return $(this).each(function () {
        if ($(this).data('readonly') !== true) {
          methods._apply.call(this, score);
          methods._target.call(this, score);
        }
      });
    }
  };

  $.fn.raty = function (method) {
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else if ((typeof method === 'undefined' ? 'undefined' : _typeof(method)) === 'object' || !method) {
      return methods.init.apply(this, arguments);
    } else {
      $.error('Method ' + method + ' does not exist!');
    }
  };

  $.fn.raty.defaults = {
    cancel: false,
    cancelHint: 'Cancel this rating!',
    cancelOff: 'fa fa-fw fa-minus-square',
    cancelOn: 'fa fa-fw fa-check-square',
    cancelPlace: 'left',
    click: undefined,
    half: false,
    halfShow: true,
    hints: ['bad', 'poor', 'regular', 'good', 'gorgeous'],
    iconRange: undefined,
    mouseout: undefined,
    mouseover: undefined,
    noRatedMsg: 'Not rated yet!',
    number: 5,
    numberMax: 20,
    precision: false,
    readOnly: false,
    round: { down: .25, full: .6, up: .76 },
    score: undefined,
    scoreName: 'score',
    single: false,
    size: null,
    space: true,
    starHalf: 'fa fa-fw fa-star-half-o',
    starOff: 'fa fa-fw fa-star-o',
    starOn: 'fa fa-fw fa-star',
    target: undefined,
    targetFormat: '{score}',
    targetKeep: false,
    targetText: '',
    targetType: 'hint',
    width: false
  };
})(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Owl carousel
 * @version 2.1.6
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 * @todo Lazy Load Icon
 * @todo prevent animationend bubling
 * @todo itemsScaleUp
 * @todo Test Zepto
 * @todo stagePadding calculate wrong active classes
 */
;(function ($, window, document, undefined) {

	/**
  * Creates a carousel.
  * @class The Owl Carousel.
  * @public
  * @param {HTMLElement|jQuery} element - The element to create the carousel for.
  * @param {Object} [options] - The options
  */
	function Owl(element, options) {

		/**
   * Current settings for the carousel.
   * @public
   */
		this.settings = null;

		/**
   * Current options set by the caller including defaults.
   * @public
   */
		this.options = $.extend({}, Owl.Defaults, options);

		/**
   * Plugin element.
   * @public
   */
		this.$element = $(element);

		/**
   * Proxied event handlers.
   * @protected
   */
		this._handlers = {};

		/**
   * References to the running plugins of this carousel.
   * @protected
   */
		this._plugins = {};

		/**
   * Currently suppressed events to prevent them from beeing retriggered.
   * @protected
   */
		this._supress = {};

		/**
   * Absolute current position.
   * @protected
   */
		this._current = null;

		/**
   * Animation speed in milliseconds.
   * @protected
   */
		this._speed = null;

		/**
   * Coordinates of all items in pixel.
   * @todo The name of this member is missleading.
   * @protected
   */
		this._coordinates = [];

		/**
   * Current breakpoint.
   * @todo Real media queries would be nice.
   * @protected
   */
		this._breakpoint = null;

		/**
   * Current width of the plugin element.
   */
		this._width = null;

		/**
   * All real items.
   * @protected
   */
		this._items = [];

		/**
   * All cloned items.
   * @protected
   */
		this._clones = [];

		/**
   * Merge values of all items.
   * @todo Maybe this could be part of a plugin.
   * @protected
   */
		this._mergers = [];

		/**
   * Widths of all items.
   */
		this._widths = [];

		/**
   * Invalidated parts within the update process.
   * @protected
   */
		this._invalidated = {};

		/**
   * Ordered list of workers for the update process.
   * @protected
   */
		this._pipe = [];

		/**
   * Current state information for the drag operation.
   * @todo #261
   * @protected
   */
		this._drag = {
			time: null,
			target: null,
			pointer: null,
			stage: {
				start: null,
				current: null
			},
			direction: null
		};

		/**
   * Current state information and their tags.
   * @type {Object}
   * @protected
   */
		this._states = {
			current: {},
			tags: {
				'initializing': ['busy'],
				'animating': ['busy'],
				'dragging': ['interacting']
			}
		};

		$.each(['onResize', 'onThrottledResize'], $.proxy(function (i, handler) {
			this._handlers[handler] = $.proxy(this[handler], this);
		}, this));

		$.each(Owl.Plugins, $.proxy(function (key, plugin) {
			this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] = new plugin(this);
		}, this));

		$.each(Owl.Workers, $.proxy(function (priority, worker) {
			this._pipe.push({
				'filter': worker.filter,
				'run': $.proxy(worker.run, this)
			});
		}, this));

		this.setup();
		this.initialize();
	}

	/**
  * Default options for the carousel.
  * @public
  */
	Owl.Defaults = {
		items: 3,
		loop: false,
		center: false,
		rewind: false,

		mouseDrag: true,
		touchDrag: true,
		pullDrag: true,
		freeDrag: false,

		margin: 0,
		stagePadding: 0,

		merge: false,
		mergeFit: true,
		autoWidth: false,

		startPosition: 0,
		rtl: false,

		smartSpeed: 250,
		fluidSpeed: false,
		dragEndSpeed: false,

		responsive: {},
		responsiveRefreshRate: 200,
		responsiveBaseElement: window,

		fallbackEasing: 'swing',

		info: false,

		nestedItemSelector: false,
		itemElement: 'div',
		stageElement: 'div',

		refreshClass: 'owl-refresh',
		loadedClass: 'owl-loaded',
		loadingClass: 'owl-loading',
		rtlClass: 'owl-rtl',
		responsiveClass: 'owl-responsive',
		dragClass: 'owl-drag',
		itemClass: 'owl-item',
		stageClass: 'owl-stage',
		stageOuterClass: 'owl-stage-outer',
		grabClass: 'owl-grab'
	};

	/**
  * Enumeration for width.
  * @public
  * @readonly
  * @enum {String}
  */
	Owl.Width = {
		Default: 'default',
		Inner: 'inner',
		Outer: 'outer'
	};

	/**
  * Enumeration for types.
  * @public
  * @readonly
  * @enum {String}
  */
	Owl.Type = {
		Event: 'event',
		State: 'state'
	};

	/**
  * Contains all registered plugins.
  * @public
  */
	Owl.Plugins = {};

	/**
  * List of workers involved in the update process.
  */
	Owl.Workers = [{
		filter: ['width', 'settings'],
		run: function run() {
			this._width = this.$element.width();
		}
	}, {
		filter: ['width', 'items', 'settings'],
		run: function run(cache) {
			cache.current = this._items && this._items[this.relative(this._current)];
		}
	}, {
		filter: ['items', 'settings'],
		run: function run() {
			this.$stage.children('.cloned').remove();
		}
	}, {
		filter: ['width', 'items', 'settings'],
		run: function run(cache) {
			var margin = this.settings.margin || '',
			    grid = !this.settings.autoWidth,
			    rtl = this.settings.rtl,
			    css = {
				'width': 'auto',
				'margin-left': rtl ? margin : '',
				'margin-right': rtl ? '' : margin
			};

			!grid && this.$stage.children().css(css);

			cache.css = css;
		}
	}, {
		filter: ['width', 'items', 'settings'],
		run: function run(cache) {
			var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
			    merge = null,
			    iterator = this._items.length,
			    grid = !this.settings.autoWidth,
			    widths = [];

			cache.items = {
				merge: false,
				width: width
			};

			while (iterator--) {
				merge = this._mergers[iterator];
				merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;

				cache.items.merge = merge > 1 || cache.items.merge;

				widths[iterator] = !grid ? this._items[iterator].width() : width * merge;
			}

			this._widths = widths;
		}
	}, {
		filter: ['items', 'settings'],
		run: function run() {
			var clones = [],
			    items = this._items,
			    settings = this.settings,

			// TODO: Should be computed from number of min width items in stage
			view = Math.max(settings.items * 2, 4),
			    size = Math.ceil(items.length / 2) * 2,
			    repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0,
			    append = '',
			    prepend = '';

			repeat /= 2;

			while (repeat--) {
				// Switch to only using appended clones
				clones.push(this.normalize(clones.length / 2, true));
				append = append + items[clones[clones.length - 1]][0].outerHTML;
				clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));
				prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;
			}

			this._clones = clones;

			$(append).addClass('cloned').appendTo(this.$stage);
			$(prepend).addClass('cloned').prependTo(this.$stage);
		}
	}, {
		filter: ['width', 'items', 'settings'],
		run: function run() {
			var rtl = this.settings.rtl ? 1 : -1,
			    size = this._clones.length + this._items.length,
			    iterator = -1,
			    previous = 0,
			    current = 0,
			    coordinates = [];

			while (++iterator < size) {
				previous = coordinates[iterator - 1] || 0;
				current = this._widths[this.relative(iterator)] + this.settings.margin;
				coordinates.push(previous + current * rtl);
			}

			this._coordinates = coordinates;
		}
	}, {
		filter: ['width', 'items', 'settings'],
		run: function run() {
			var padding = this.settings.stagePadding,
			    coordinates = this._coordinates,
			    css = {
				'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,
				'padding-left': padding || '',
				'padding-right': padding || ''
			};

			this.$stage.css(css);
		}
	}, {
		filter: ['width', 'items', 'settings'],
		run: function run(cache) {
			var iterator = this._coordinates.length,
			    grid = !this.settings.autoWidth,
			    items = this.$stage.children();

			if (grid && cache.items.merge) {
				while (iterator--) {
					cache.css.width = this._widths[this.relative(iterator)];
					items.eq(iterator).css(cache.css);
				}
			} else if (grid) {
				cache.css.width = cache.items.width;
				items.css(cache.css);
			}
		}
	}, {
		filter: ['items'],
		run: function run() {
			this._coordinates.length < 1 && this.$stage.removeAttr('style');
		}
	}, {
		filter: ['width', 'items', 'settings'],
		run: function run(cache) {
			cache.current = cache.current ? this.$stage.children().index(cache.current) : 0;
			cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));
			this.reset(cache.current);
		}
	}, {
		filter: ['position'],
		run: function run() {
			this.animate(this.coordinates(this._current));
		}
	}, {
		filter: ['width', 'position', 'items', 'settings'],
		run: function run() {
			var rtl = this.settings.rtl ? 1 : -1,
			    padding = this.settings.stagePadding * 2,
			    begin = this.coordinates(this.current()) + padding,
			    end = begin + this.width() * rtl,
			    inner,
			    outer,
			    matches = [],
			    i,
			    n;

			for (i = 0, n = this._coordinates.length; i < n; i++) {
				inner = this._coordinates[i - 1] || 0;
				outer = Math.abs(this._coordinates[i]) + padding * rtl;

				if (this.op(inner, '<=', begin) && this.op(inner, '>', end) || this.op(outer, '<', begin) && this.op(outer, '>', end)) {
					matches.push(i);
				}
			}

			this.$stage.children('.active').removeClass('active');
			this.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active');

			if (this.settings.center) {
				this.$stage.children('.center').removeClass('center');
				this.$stage.children().eq(this.current()).addClass('center');
			}
		}
	}];

	/**
  * Initializes the carousel.
  * @protected
  */
	Owl.prototype.initialize = function () {
		this.enter('initializing');
		this.trigger('initialize');

		this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);

		if (this.settings.autoWidth && !this.is('pre-loading')) {
			var imgs, nestedSelector, width;
			imgs = this.$element.find('img');
			nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;
			width = this.$element.children(nestedSelector).width();

			if (imgs.length && width <= 0) {
				this.preloadAutoWidthImages(imgs);
			}
		}

		this.$element.addClass(this.options.loadingClass);

		// create stage
		this.$stage = $('<' + this.settings.stageElement + ' class="' + this.settings.stageClass + '"/>').wrap('<div class="' + this.settings.stageOuterClass + '"/>');

		// append stage
		this.$element.append(this.$stage.parent());

		// append content
		this.replace(this.$element.children().not(this.$stage.parent()));

		// check visibility
		if (this.$element.is(':visible')) {
			// update view
			this.refresh();
		} else {
			// invalidate width
			this.invalidate('width');
		}

		this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);

		// register event handlers
		this.registerEventHandlers();

		this.leave('initializing');
		this.trigger('initialized');
	};

	/**
  * Setups the current settings.
  * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?
  * @todo Support for media queries by using `matchMedia` would be nice.
  * @public
  */
	Owl.prototype.setup = function () {
		var viewport = this.viewport(),
		    overwrites = this.options.responsive,
		    match = -1,
		    settings = null;

		if (!overwrites) {
			settings = $.extend({}, this.options);
		} else {
			$.each(overwrites, function (breakpoint) {
				if (breakpoint <= viewport && breakpoint > match) {
					match = Number(breakpoint);
				}
			});

			settings = $.extend({}, this.options, overwrites[match]);
			if (typeof settings.stagePadding === 'function') {
				settings.stagePadding = settings.stagePadding();
			}
			delete settings.responsive;

			// responsive class
			if (settings.responsiveClass) {
				this.$element.attr('class', this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\S+\\s', 'g'), '$1' + match));
			}
		}

		this.trigger('change', { property: { name: 'settings', value: settings } });
		this._breakpoint = match;
		this.settings = settings;
		this.invalidate('settings');
		this.trigger('changed', { property: { name: 'settings', value: this.settings } });
	};

	/**
  * Updates option logic if necessery.
  * @protected
  */
	Owl.prototype.optionsLogic = function () {
		if (this.settings.autoWidth) {
			this.settings.stagePadding = false;
			this.settings.merge = false;
		}
	};

	/**
  * Prepares an item before add.
  * @todo Rename event parameter `content` to `item`.
  * @protected
  * @returns {jQuery|HTMLElement} - The item container.
  */
	Owl.prototype.prepare = function (item) {
		var event = this.trigger('prepare', { content: item });

		if (!event.data) {
			event.data = $('<' + this.settings.itemElement + '/>').addClass(this.options.itemClass).append(item);
		}

		this.trigger('prepared', { content: event.data });

		return event.data;
	};

	/**
  * Updates the view.
  * @public
  */
	Owl.prototype.update = function () {
		var i = 0,
		    n = this._pipe.length,
		    filter = $.proxy(function (p) {
			return this[p];
		}, this._invalidated),
		    cache = {};

		while (i < n) {
			if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {
				this._pipe[i].run(cache);
			}
			i++;
		}

		this._invalidated = {};

		!this.is('valid') && this.enter('valid');
	};

	/**
  * Gets the width of the view.
  * @public
  * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.
  * @returns {Number} - The width of the view in pixel.
  */
	Owl.prototype.width = function (dimension) {
		dimension = dimension || Owl.Width.Default;
		switch (dimension) {
			case Owl.Width.Inner:
			case Owl.Width.Outer:
				return this._width;
			default:
				return this._width - this.settings.stagePadding * 2 + this.settings.margin;
		}
	};

	/**
  * Refreshes the carousel primarily for adaptive purposes.
  * @public
  */
	Owl.prototype.refresh = function () {
		this.enter('refreshing');
		this.trigger('refresh');

		this.setup();

		this.optionsLogic();

		this.$element.addClass(this.options.refreshClass);

		this.update();

		this.$element.removeClass(this.options.refreshClass);

		this.leave('refreshing');
		this.trigger('refreshed');
	};

	/**
  * Checks window `resize` event.
  * @protected
  */
	Owl.prototype.onThrottledResize = function () {
		window.clearTimeout(this.resizeTimer);
		this.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
	};

	/**
  * Checks window `resize` event.
  * @protected
  */
	Owl.prototype.onResize = function () {
		if (!this._items.length) {
			return false;
		}

		if (this._width === this.$element.width()) {
			return false;
		}

		if (!this.$element.is(':visible')) {
			return false;
		}

		this.enter('resizing');

		if (this.trigger('resize').isDefaultPrevented()) {
			this.leave('resizing');
			return false;
		}

		this.invalidate('width');

		this.refresh();

		this.leave('resizing');
		this.trigger('resized');
	};

	/**
  * Registers event handlers.
  * @todo Check `msPointerEnabled`
  * @todo #261
  * @protected
  */
	Owl.prototype.registerEventHandlers = function () {
		if ($.support.transition) {
			this.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this));
		}

		if (this.settings.responsive !== false) {
			this.on(window, 'resize', this._handlers.onThrottledResize);
		}

		if (this.settings.mouseDrag) {
			this.$element.addClass(this.options.dragClass);
			this.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this));
			this.$stage.on('dragstart.owl.core selectstart.owl.core', function () {
				return false;
			});
		}

		if (this.settings.touchDrag) {
			this.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this));
			this.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this));
		}
	};

	/**
  * Handles `touchstart` and `mousedown` events.
  * @todo Horizontal swipe threshold as option
  * @todo #261
  * @protected
  * @param {Event} event - The event arguments.
  */
	Owl.prototype.onDragStart = function (event) {
		var stage = null;

		if (event.which === 3) {
			return;
		}

		if ($.support.transform) {
			stage = this.$stage.css('transform').replace(/.*\(|\)| /g, '').split(',');
			stage = {
				x: stage[stage.length === 16 ? 12 : 4],
				y: stage[stage.length === 16 ? 13 : 5]
			};
		} else {
			stage = this.$stage.position();
			stage = {
				x: this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin : stage.left,
				y: stage.top
			};
		}

		if (this.is('animating')) {
			$.support.transform ? this.animate(stage.x) : this.$stage.stop();
			this.invalidate('position');
		}

		this.$element.toggleClass(this.options.grabClass, event.type === 'mousedown');

		this.speed(0);

		this._drag.time = new Date().getTime();
		this._drag.target = $(event.target);
		this._drag.stage.start = stage;
		this._drag.stage.current = stage;
		this._drag.pointer = this.pointer(event);

		$(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));

		$(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function (event) {
			var delta = this.difference(this._drag.pointer, this.pointer(event));

			$(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));

			if (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) {
				return;
			}

			event.preventDefault();

			this.enter('dragging');
			this.trigger('drag');
		}, this));
	};

	/**
  * Handles the `touchmove` and `mousemove` events.
  * @todo #261
  * @protected
  * @param {Event} event - The event arguments.
  */
	Owl.prototype.onDragMove = function (event) {
		var minimum = null,
		    maximum = null,
		    pull = null,
		    delta = this.difference(this._drag.pointer, this.pointer(event)),
		    stage = this.difference(this._drag.stage.start, delta);

		if (!this.is('dragging')) {
			return;
		}

		event.preventDefault();

		if (this.settings.loop) {
			minimum = this.coordinates(this.minimum());
			maximum = this.coordinates(this.maximum() + 1) - minimum;
			stage.x = ((stage.x - minimum) % maximum + maximum) % maximum + minimum;
		} else {
			minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());
			maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());
			pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;
			stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);
		}

		this._drag.stage.current = stage;

		this.animate(stage.x);
	};

	/**
  * Handles the `touchend` and `mouseup` events.
  * @todo #261
  * @todo Threshold for click event
  * @protected
  * @param {Event} event - The event arguments.
  */
	Owl.prototype.onDragEnd = function (event) {
		var delta = this.difference(this._drag.pointer, this.pointer(event)),
		    stage = this._drag.stage.current,
		    direction = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right';

		$(document).off('.owl.core');

		this.$element.removeClass(this.options.grabClass);

		if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {
			this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);
			this.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));
			this.invalidate('position');
			this.update();

			this._drag.direction = direction;

			if (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {
				this._drag.target.one('click.owl.core', function () {
					return false;
				});
			}
		}

		if (!this.is('dragging')) {
			return;
		}

		this.leave('dragging');
		this.trigger('dragged');
	};

	/**
  * Gets absolute position of the closest item for a coordinate.
  * @todo Setting `freeDrag` makes `closest` not reusable. See #165.
  * @protected
  * @param {Number} coordinate - The coordinate in pixel.
  * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.
  * @return {Number} - The absolute position of the closest item.
  */
	Owl.prototype.closest = function (coordinate, direction) {
		var position = -1,
		    pull = 30,
		    width = this.width(),
		    coordinates = this.coordinates();

		if (!this.settings.freeDrag) {
			// check closest item
			$.each(coordinates, $.proxy(function (index, value) {
				// on a left pull, check on current index
				if (direction === 'left' && coordinate > value - pull && coordinate < value + pull) {
					position = index;
					// on a right pull, check on previous index
					// to do so, subtract width from value and set position = index + 1
				} else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) {
					position = index + 1;
				} else if (this.op(coordinate, '<', value) && this.op(coordinate, '>', coordinates[index + 1] || value - width)) {
					position = direction === 'left' ? index + 1 : index;
				}
				return position === -1;
			}, this));
		}

		if (!this.settings.loop) {
			// non loop boundries
			if (this.op(coordinate, '>', coordinates[this.minimum()])) {
				position = coordinate = this.minimum();
			} else if (this.op(coordinate, '<', coordinates[this.maximum()])) {
				position = coordinate = this.maximum();
			}
		}

		return position;
	};

	/**
  * Animates the stage.
  * @todo #270
  * @public
  * @param {Number} coordinate - The coordinate in pixels.
  */
	Owl.prototype.animate = function (coordinate) {
		var animate = this.speed() > 0;

		this.is('animating') && this.onTransitionEnd();

		if (animate) {
			this.enter('animating');
			this.trigger('translate');
		}

		if ($.support.transform3d && $.support.transition) {
			this.$stage.css({
				transform: 'translate3d(' + coordinate + 'px,0px,0px)',
				transition: this.speed() / 1000 + 's'
			});
		} else if (animate) {
			this.$stage.animate({
				left: coordinate + 'px'
			}, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));
		} else {
			this.$stage.css({
				left: coordinate + 'px'
			});
		}
	};

	/**
  * Checks whether the carousel is in a specific state or not.
  * @param {String} state - The state to check.
  * @returns {Boolean} - The flag which indicates if the carousel is busy.
  */
	Owl.prototype.is = function (state) {
		return this._states.current[state] && this._states.current[state] > 0;
	};

	/**
  * Sets the absolute position of the current item.
  * @public
  * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.
  * @returns {Number} - The absolute position of the current item.
  */
	Owl.prototype.current = function (position) {
		if (position === undefined) {
			return this._current;
		}

		if (this._items.length === 0) {
			return undefined;
		}

		position = this.normalize(position);

		if (this._current !== position) {
			var event = this.trigger('change', { property: { name: 'position', value: position } });

			if (event.data !== undefined) {
				position = this.normalize(event.data);
			}

			this._current = position;

			this.invalidate('position');

			this.trigger('changed', { property: { name: 'position', value: this._current } });
		}

		return this._current;
	};

	/**
  * Invalidates the given part of the update routine.
  * @param {String} [part] - The part to invalidate.
  * @returns {Array.<String>} - The invalidated parts.
  */
	Owl.prototype.invalidate = function (part) {
		if ($.type(part) === 'string') {
			this._invalidated[part] = true;
			this.is('valid') && this.leave('valid');
		}
		return $.map(this._invalidated, function (v, i) {
			return i;
		});
	};

	/**
  * Resets the absolute position of the current item.
  * @public
  * @param {Number} position - The absolute position of the new item.
  */
	Owl.prototype.reset = function (position) {
		position = this.normalize(position);

		if (position === undefined) {
			return;
		}

		this._speed = 0;
		this._current = position;

		this.suppress(['translate', 'translated']);

		this.animate(this.coordinates(position));

		this.release(['translate', 'translated']);
	};

	/**
  * Normalizes an absolute or a relative position of an item.
  * @public
  * @param {Number} position - The absolute or relative position to normalize.
  * @param {Boolean} [relative=false] - Whether the given position is relative or not.
  * @returns {Number} - The normalized position.
  */
	Owl.prototype.normalize = function (position, relative) {
		var n = this._items.length,
		    m = relative ? 0 : this._clones.length;

		if (!this.isNumeric(position) || n < 1) {
			position = undefined;
		} else if (position < 0 || position >= n + m) {
			position = ((position - m / 2) % n + n) % n + m / 2;
		}

		return position;
	};

	/**
  * Converts an absolute position of an item into a relative one.
  * @public
  * @param {Number} position - The absolute position to convert.
  * @returns {Number} - The converted position.
  */
	Owl.prototype.relative = function (position) {
		position -= this._clones.length / 2;
		return this.normalize(position, true);
	};

	/**
  * Gets the maximum position for the current item.
  * @public
  * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
  * @returns {Number}
  */
	Owl.prototype.maximum = function (relative) {
		var settings = this.settings,
		    maximum = this._coordinates.length,
		    iterator,
		    reciprocalItemsWidth,
		    elementWidth;

		if (settings.loop) {
			maximum = this._clones.length / 2 + this._items.length - 1;
		} else if (settings.autoWidth || settings.merge) {
			iterator = this._items.length;
			reciprocalItemsWidth = this._items[--iterator].width();
			elementWidth = this.$element.width();
			while (iterator--) {
				reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;
				if (reciprocalItemsWidth > elementWidth) {
					break;
				}
			}
			maximum = iterator + 1;
		} else if (settings.center) {
			maximum = this._items.length - 1;
		} else {
			maximum = this._items.length - settings.items;
		}

		if (relative) {
			maximum -= this._clones.length / 2;
		}

		return Math.max(maximum, 0);
	};

	/**
  * Gets the minimum position for the current item.
  * @public
  * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
  * @returns {Number}
  */
	Owl.prototype.minimum = function (relative) {
		return relative ? 0 : this._clones.length / 2;
	};

	/**
  * Gets an item at the specified relative position.
  * @public
  * @param {Number} [position] - The relative position of the item.
  * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
  */
	Owl.prototype.items = function (position) {
		if (position === undefined) {
			return this._items.slice();
		}

		position = this.normalize(position, true);
		return this._items[position];
	};

	/**
  * Gets an item at the specified relative position.
  * @public
  * @param {Number} [position] - The relative position of the item.
  * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
  */
	Owl.prototype.mergers = function (position) {
		if (position === undefined) {
			return this._mergers.slice();
		}

		position = this.normalize(position, true);
		return this._mergers[position];
	};

	/**
  * Gets the absolute positions of clones for an item.
  * @public
  * @param {Number} [position] - The relative position of the item.
  * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.
  */
	Owl.prototype.clones = function (position) {
		var odd = this._clones.length / 2,
		    even = odd + this._items.length,
		    map = function map(index) {
			return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2;
		};

		if (position === undefined) {
			return $.map(this._clones, function (v, i) {
				return map(i);
			});
		}

		return $.map(this._clones, function (v, i) {
			return v === position ? map(i) : null;
		});
	};

	/**
  * Sets the current animation speed.
  * @public
  * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.
  * @returns {Number} - The current animation speed in milliseconds.
  */
	Owl.prototype.speed = function (speed) {
		if (speed !== undefined) {
			this._speed = speed;
		}

		return this._speed;
	};

	/**
  * Gets the coordinate of an item.
  * @todo The name of this method is missleanding.
  * @public
  * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.
  * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.
  */
	Owl.prototype.coordinates = function (position) {
		var multiplier = 1,
		    newPosition = position - 1,
		    coordinate;

		if (position === undefined) {
			return $.map(this._coordinates, $.proxy(function (coordinate, index) {
				return this.coordinates(index);
			}, this));
		}

		if (this.settings.center) {
			if (this.settings.rtl) {
				multiplier = -1;
				newPosition = position + 1;
			}

			coordinate = this._coordinates[position];
			coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;
		} else {
			coordinate = this._coordinates[newPosition] || 0;
		}

		coordinate = Math.ceil(coordinate);

		return coordinate;
	};

	/**
  * Calculates the speed for a translation.
  * @protected
  * @param {Number} from - The absolute position of the start item.
  * @param {Number} to - The absolute position of the target item.
  * @param {Number} [factor=undefined] - The time factor in milliseconds.
  * @returns {Number} - The time in milliseconds for the translation.
  */
	Owl.prototype.duration = function (from, to, factor) {
		if (factor === 0) {
			return 0;
		}

		return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs(factor || this.settings.smartSpeed);
	};

	/**
  * Slides to the specified item.
  * @public
  * @param {Number} position - The position of the item.
  * @param {Number} [speed] - The time in milliseconds for the transition.
  */
	Owl.prototype.to = function (position, speed) {
		var current = this.current(),
		    revert = null,
		    distance = position - this.relative(current),
		    direction = (distance > 0) - (distance < 0),
		    items = this._items.length,
		    minimum = this.minimum(),
		    maximum = this.maximum();

		if (this.settings.loop) {
			if (!this.settings.rewind && Math.abs(distance) > items / 2) {
				distance += direction * -1 * items;
			}

			position = current + distance;
			revert = ((position - minimum) % items + items) % items + minimum;

			if (revert !== position && revert - distance <= maximum && revert - distance > 0) {
				current = revert - distance;
				position = revert;
				this.reset(current);
			}
		} else if (this.settings.rewind) {
			maximum += 1;
			position = (position % maximum + maximum) % maximum;
		} else {
			position = Math.max(minimum, Math.min(maximum, position));
		}

		this.speed(this.duration(current, position, speed));
		this.current(position);

		if (this.$element.is(':visible')) {
			this.update();
		}
	};

	/**
  * Slides to the next item.
  * @public
  * @param {Number} [speed] - The time in milliseconds for the transition.
  */
	Owl.prototype.next = function (speed) {
		speed = speed || false;
		this.to(this.relative(this.current()) + 1, speed);
	};

	/**
  * Slides to the previous item.
  * @public
  * @param {Number} [speed] - The time in milliseconds for the transition.
  */
	Owl.prototype.prev = function (speed) {
		speed = speed || false;
		this.to(this.relative(this.current()) - 1, speed);
	};

	/**
  * Handles the end of an animation.
  * @protected
  * @param {Event} event - The event arguments.
  */
	Owl.prototype.onTransitionEnd = function (event) {

		// if css2 animation then event object is undefined
		if (event !== undefined) {
			event.stopPropagation();

			// Catch only owl-stage transitionEnd event
			if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {
				return false;
			}
		}

		this.leave('animating');
		this.trigger('translated');
	};

	/**
  * Gets viewport width.
  * @protected
  * @return {Number} - The width in pixel.
  */
	Owl.prototype.viewport = function () {
		var width;
		if (this.options.responsiveBaseElement !== window) {
			width = $(this.options.responsiveBaseElement).width();
		} else if (window.innerWidth) {
			width = window.innerWidth;
		} else if (document.documentElement && document.documentElement.clientWidth) {
			width = document.documentElement.clientWidth;
		} else {
			console.warn('Can not detect viewport width.');
		}
		return width;
	};

	/**
  * Replaces the current content.
  * @public
  * @param {HTMLElement|jQuery|String} content - The new content.
  */
	Owl.prototype.replace = function (content) {
		this.$stage.empty();
		this._items = [];

		if (content) {
			content = content instanceof jQuery ? content : $(content);
		}

		if (this.settings.nestedItemSelector) {
			content = content.find('.' + this.settings.nestedItemSelector);
		}

		content.filter(function () {
			return this.nodeType === 1;
		}).each($.proxy(function (index, item) {
			item = this.prepare(item);
			this.$stage.append(item);
			this._items.push(item);
			this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
		}, this));

		this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);

		this.invalidate('items');
	};

	/**
  * Adds an item.
  * @todo Use `item` instead of `content` for the event arguments.
  * @public
  * @param {HTMLElement|jQuery|String} content - The item content to add.
  * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.
  */
	Owl.prototype.add = function (content, position) {
		var current = this.relative(this._current);

		position = position === undefined ? this._items.length : this.normalize(position, true);
		content = content instanceof jQuery ? content : $(content);

		this.trigger('add', { content: content, position: position });

		content = this.prepare(content);

		if (this._items.length === 0 || position === this._items.length) {
			this._items.length === 0 && this.$stage.append(content);
			this._items.length !== 0 && this._items[position - 1].after(content);
			this._items.push(content);
			this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
		} else {
			this._items[position].before(content);
			this._items.splice(position, 0, content);
			this._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
		}

		this._items[current] && this.reset(this._items[current].index());

		this.invalidate('items');

		this.trigger('added', { content: content, position: position });
	};

	/**
  * Removes an item by its position.
  * @todo Use `item` instead of `content` for the event arguments.
  * @public
  * @param {Number} position - The relative position of the item to remove.
  */
	Owl.prototype.remove = function (position) {
		position = this.normalize(position, true);

		if (position === undefined) {
			return;
		}

		this.trigger('remove', { content: this._items[position], position: position });

		this._items[position].remove();
		this._items.splice(position, 1);
		this._mergers.splice(position, 1);

		this.invalidate('items');

		this.trigger('removed', { content: null, position: position });
	};

	/**
  * Preloads images with auto width.
  * @todo Replace by a more generic approach
  * @protected
  */
	Owl.prototype.preloadAutoWidthImages = function (images) {
		images.each($.proxy(function (i, element) {
			this.enter('pre-loading');
			element = $(element);
			$(new Image()).one('load', $.proxy(function (e) {
				element.attr('src', e.target.src);
				element.css('opacity', 1);
				this.leave('pre-loading');
				!this.is('pre-loading') && !this.is('initializing') && this.refresh();
			}, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina'));
		}, this));
	};

	/**
  * Destroys the carousel.
  * @public
  */
	Owl.prototype.destroy = function () {

		this.$element.off('.owl.core');
		this.$stage.off('.owl.core');
		$(document).off('.owl.core');

		if (this.settings.responsive !== false) {
			window.clearTimeout(this.resizeTimer);
			this.off(window, 'resize', this._handlers.onThrottledResize);
		}

		for (var i in this._plugins) {
			this._plugins[i].destroy();
		}

		this.$stage.children('.cloned').remove();

		this.$stage.unwrap();
		this.$stage.children().contents().unwrap();
		this.$stage.children().unwrap();

		this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\S+\\s', 'g'), '')).removeData('owl.carousel');
	};

	/**
  * Operators to calculate right-to-left and left-to-right.
  * @protected
  * @param {Number} [a] - The left side operand.
  * @param {String} [o] - The operator.
  * @param {Number} [b] - The right side operand.
  */
	Owl.prototype.op = function (a, o, b) {
		var rtl = this.settings.rtl;
		switch (o) {
			case '<':
				return rtl ? a > b : a < b;
			case '>':
				return rtl ? a < b : a > b;
			case '>=':
				return rtl ? a <= b : a >= b;
			case '<=':
				return rtl ? a >= b : a <= b;
			default:
				break;
		}
	};

	/**
  * Attaches to an internal event.
  * @protected
  * @param {HTMLElement} element - The event source.
  * @param {String} event - The event name.
  * @param {Function} listener - The event handler to attach.
  * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.
  */
	Owl.prototype.on = function (element, event, listener, capture) {
		if (element.addEventListener) {
			element.addEventListener(event, listener, capture);
		} else if (element.attachEvent) {
			element.attachEvent('on' + event, listener);
		}
	};

	/**
  * Detaches from an internal event.
  * @protected
  * @param {HTMLElement} element - The event source.
  * @param {String} event - The event name.
  * @param {Function} listener - The attached event handler to detach.
  * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.
  */
	Owl.prototype.off = function (element, event, listener, capture) {
		if (element.removeEventListener) {
			element.removeEventListener(event, listener, capture);
		} else if (element.detachEvent) {
			element.detachEvent('on' + event, listener);
		}
	};

	/**
  * Triggers a public event.
  * @todo Remove `status`, `relatedTarget` should be used instead.
  * @protected
  * @param {String} name - The event name.
  * @param {*} [data=null] - The event data.
  * @param {String} [namespace=carousel] - The event namespace.
  * @param {String} [state] - The state which is associated with the event.
  * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.
  * @returns {Event} - The event arguments.
  */
	Owl.prototype.trigger = function (name, data, namespace, state, enter) {
		var status = {
			item: { count: this._items.length, index: this.current() }
		},
		    handler = $.camelCase($.grep(['on', name, namespace], function (v) {
			return v;
		}).join('-').toLowerCase()),
		    event = $.Event([name, 'owl', namespace || 'carousel'].join('.').toLowerCase(), $.extend({ relatedTarget: this }, status, data));

		if (!this._supress[name]) {
			$.each(this._plugins, function (name, plugin) {
				if (plugin.onTrigger) {
					plugin.onTrigger(event);
				}
			});

			this.register({ type: Owl.Type.Event, name: name });
			this.$element.trigger(event);

			if (this.settings && typeof this.settings[handler] === 'function') {
				this.settings[handler].call(this, event);
			}
		}

		return event;
	};

	/**
  * Enters a state.
  * @param name - The state name.
  */
	Owl.prototype.enter = function (name) {
		$.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {
			if (this._states.current[name] === undefined) {
				this._states.current[name] = 0;
			}

			this._states.current[name]++;
		}, this));
	};

	/**
  * Leaves a state.
  * @param name - The state name.
  */
	Owl.prototype.leave = function (name) {
		$.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {
			this._states.current[name]--;
		}, this));
	};

	/**
  * Registers an event or state.
  * @public
  * @param {Object} object - The event or state to register.
  */
	Owl.prototype.register = function (object) {
		if (object.type === Owl.Type.Event) {
			if (!$.event.special[object.name]) {
				$.event.special[object.name] = {};
			}

			if (!$.event.special[object.name].owl) {
				var _default = $.event.special[object.name]._default;
				$.event.special[object.name]._default = function (e) {
					if (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) {
						return _default.apply(this, arguments);
					}
					return e.namespace && e.namespace.indexOf('owl') > -1;
				};
				$.event.special[object.name].owl = true;
			}
		} else if (object.type === Owl.Type.State) {
			if (!this._states.tags[object.name]) {
				this._states.tags[object.name] = object.tags;
			} else {
				this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);
			}

			this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function (tag, i) {
				return $.inArray(tag, this._states.tags[object.name]) === i;
			}, this));
		}
	};

	/**
  * Suppresses events.
  * @protected
  * @param {Array.<String>} events - The events to suppress.
  */
	Owl.prototype.suppress = function (events) {
		$.each(events, $.proxy(function (index, event) {
			this._supress[event] = true;
		}, this));
	};

	/**
  * Releases suppressed events.
  * @protected
  * @param {Array.<String>} events - The events to release.
  */
	Owl.prototype.release = function (events) {
		$.each(events, $.proxy(function (index, event) {
			delete this._supress[event];
		}, this));
	};

	/**
  * Gets unified pointer coordinates from event.
  * @todo #261
  * @protected
  * @param {Event} - The `mousedown` or `touchstart` event.
  * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.
  */
	Owl.prototype.pointer = function (event) {
		var result = { x: null, y: null };

		event = event.originalEvent || event || window.event;

		event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event;

		if (event.pageX) {
			result.x = event.pageX;
			result.y = event.pageY;
		} else {
			result.x = event.clientX;
			result.y = event.clientY;
		}

		return result;
	};

	/**
  * Determines if the input is a Number or something that can be coerced to a Number
  * @protected
  * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested
  * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number
  */
	Owl.prototype.isNumeric = function (number) {
		return !isNaN(parseFloat(number));
	};

	/**
  * Gets the difference of two vectors.
  * @todo #261
  * @protected
  * @param {Object} - The first vector.
  * @param {Object} - The second vector.
  * @returns {Object} - The difference.
  */
	Owl.prototype.difference = function (first, second) {
		return {
			x: first.x - second.x,
			y: first.y - second.y
		};
	};

	/**
  * The jQuery Plugin for the Owl Carousel
  * @todo Navigation plugin `next` and `prev`
  * @public
  */
	$.fn.owlCarousel = function (option) {
		var args = Array.prototype.slice.call(arguments, 1);

		return this.each(function () {
			var $this = $(this),
			    data = $this.data('owl.carousel');

			if (!data) {
				data = new Owl(this, (typeof option === 'undefined' ? 'undefined' : _typeof(option)) == 'object' && option);
				$this.data('owl.carousel', data);

				$.each(['next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'], function (i, event) {
					data.register({ type: Owl.Type.Event, name: event });
					data.$element.on(event + '.owl.carousel.core', $.proxy(function (e) {
						if (e.namespace && e.relatedTarget !== this) {
							this.suppress([event]);
							data[event].apply(this, [].slice.call(arguments, 1));
							this.release([event]);
						}
					}, data));
				});
			}

			if (typeof option == 'string' && option.charAt(0) !== '_') {
				data[option].apply(data, args);
			}
		});
	};

	/**
  * The constructor for the jQuery Plugin
  * @public
  */
	$.fn.owlCarousel.Constructor = Owl;
})(window.Zepto || window.jQuery, window, document);
'use strict';

/**
 * Animate Plugin
 * @version 2.1.0
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function ($, window, document, undefined) {

	/**
  * Creates the animate plugin.
  * @class The Navigation Plugin
  * @param {Owl} scope - The Owl Carousel
  */
	var Animate = function Animate(scope) {
		this.core = scope;
		this.core.options = $.extend({}, Animate.Defaults, this.core.options);
		this.swapping = true;
		this.previous = undefined;
		this.next = undefined;

		this.handlers = {
			'change.owl.carousel': $.proxy(function (e) {
				if (e.namespace && e.property.name == 'position') {
					this.previous = this.core.current();
					this.next = e.property.value;
				}
			}, this),
			'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function (e) {
				if (e.namespace) {
					this.swapping = e.type == 'translated';
				}
			}, this),
			'translate.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {
					this.swap();
				}
			}, this)
		};

		this.core.$element.on(this.handlers);
	};

	/**
  * Default options.
  * @public
  */
	Animate.Defaults = {
		animateOut: false,
		animateIn: false
	};

	/**
  * Toggles the animation classes whenever an translations starts.
  * @protected
  * @returns {Boolean|undefined}
  */
	Animate.prototype.swap = function () {

		if (this.core.settings.items !== 1) {
			return;
		}

		if (!$.support.animation || !$.support.transition) {
			return;
		}

		this.core.speed(0);

		var left,
		    clear = $.proxy(this.clear, this),
		    previous = this.core.$stage.children().eq(this.previous),
		    next = this.core.$stage.children().eq(this.next),
		    incoming = this.core.settings.animateIn,
		    outgoing = this.core.settings.animateOut;

		if (this.core.current() === this.previous) {
			return;
		}

		if (outgoing) {
			left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);
			previous.one($.support.animation.end, clear).css({ 'left': left + 'px' }).addClass('animated owl-animated-out').addClass(outgoing);
		}

		if (incoming) {
			next.one($.support.animation.end, clear).addClass('animated owl-animated-in').addClass(incoming);
		}
	};

	Animate.prototype.clear = function (e) {
		$(e.target).css({ 'left': '' }).removeClass('animated owl-animated-out owl-animated-in').removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut);
		this.core.onTransitionEnd();
	};

	/**
  * Destroys the plugin.
  * @public
  */
	Animate.prototype.destroy = function () {
		var handler, property;

		for (handler in this.handlers) {
			this.core.$element.off(handler, this.handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.Animate = Animate;
})(window.Zepto || window.jQuery, window, document);
'use strict';

/**
 * AutoHeight Plugin
 * @version 2.1.0
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function ($, window, document, undefined) {

	/**
  * Creates the auto height plugin.
  * @class The Auto Height Plugin
  * @param {Owl} carousel - The Owl Carousel
  */
	var AutoHeight = function AutoHeight(carousel) {
		/**
   * Reference to the core.
   * @protected
   * @type {Owl}
   */
		this._core = carousel;

		/**
   * All event handlers.
   * @protected
   * @type {Object}
   */
		this._handlers = {
			'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._core.settings.autoHeight) {
					this.update();
				}
			}, this),
			'changed.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._core.settings.autoHeight && e.property.name == 'position') {
					this.update();
				}
			}, this),
			'loaded.owl.lazy': $.proxy(function (e) {
				if (e.namespace && this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) {
					this.update();
				}
			}, this)
		};

		// set default options
		this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options);

		// register event handlers
		this._core.$element.on(this._handlers);
	};

	/**
  * Default options.
  * @public
  */
	AutoHeight.Defaults = {
		autoHeight: false,
		autoHeightClass: 'owl-height'
	};

	/**
  * Updates the view.
  */
	AutoHeight.prototype.update = function () {
		var start = this._core._current,
		    end = start + this._core.settings.items,
		    visible = this._core.$stage.children().toArray().slice(start, end),
		    heights = [],
		    maxheight = 0;

		$.each(visible, function (index, item) {
			heights.push($(item).height());
		});

		maxheight = Math.max.apply(null, heights);

		this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);
	};

	AutoHeight.prototype.destroy = function () {
		var handler, property;

		for (handler in this._handlers) {
			this._core.$element.off(handler, this._handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;
})(window.Zepto || window.jQuery, window, document);
'use strict';

/**
 * Autoplay Plugin
 * @version 2.1.0
 * @author Bartosz Wojciechowski
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function ($, window, document, undefined) {

	/**
  * Creates the autoplay plugin.
  * @class The Autoplay Plugin
  * @param {Owl} scope - The Owl Carousel
  */
	var Autoplay = function Autoplay(carousel) {
		/**
   * Reference to the core.
   * @protected
   * @type {Owl}
   */
		this._core = carousel;

		/**
   * The autoplay timeout.
   * @type {Timeout}
   */
		this._timeout = null;

		/**
   * Indicates whenever the autoplay is paused.
   * @type {Boolean}
   */
		this._paused = false;

		/**
   * All event handlers.
   * @protected
   * @type {Object}
   */
		this._handlers = {
			'changed.owl.carousel': $.proxy(function (e) {
				if (e.namespace && e.property.name === 'settings') {
					if (this._core.settings.autoplay) {
						this.play();
					} else {
						this.stop();
					}
				} else if (e.namespace && e.property.name === 'position') {
					//console.log('play?', e);
					if (this._core.settings.autoplay) {
						this._setAutoPlayInterval();
					}
				}
			}, this),
			'initialized.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._core.settings.autoplay) {
					this.play();
				}
			}, this),
			'play.owl.autoplay': $.proxy(function (e, t, s) {
				if (e.namespace) {
					this.play(t, s);
				}
			}, this),
			'stop.owl.autoplay': $.proxy(function (e) {
				if (e.namespace) {
					this.stop();
				}
			}, this),
			'mouseover.owl.autoplay': $.proxy(function () {
				if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
					this.pause();
				}
			}, this),
			'mouseleave.owl.autoplay': $.proxy(function () {
				if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
					this.play();
				}
			}, this),
			'touchstart.owl.core': $.proxy(function () {
				if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
					this.pause();
				}
			}, this),
			'touchend.owl.core': $.proxy(function () {
				if (this._core.settings.autoplayHoverPause) {
					this.play();
				}
			}, this)
		};

		// register event handlers
		this._core.$element.on(this._handlers);

		// set default options
		this._core.options = $.extend({}, Autoplay.Defaults, this._core.options);
	};

	/**
  * Default options.
  * @public
  */
	Autoplay.Defaults = {
		autoplay: false,
		autoplayTimeout: 5000,
		autoplayHoverPause: false,
		autoplaySpeed: false
	};

	/**
  * Starts the autoplay.
  * @public
  * @param {Number} [timeout] - The interval before the next animation starts.
  * @param {Number} [speed] - The animation speed for the animations.
  */
	Autoplay.prototype.play = function (timeout, speed) {
		this._paused = false;

		if (this._core.is('rotating')) {
			return;
		}

		this._core.enter('rotating');

		this._setAutoPlayInterval();
	};

	/**
  * Gets a new timeout
  * @private
  * @param {Number} [timeout] - The interval before the next animation starts.
  * @param {Number} [speed] - The animation speed for the animations.
  * @return {Timeout}
  */
	Autoplay.prototype._getNextTimeout = function (timeout, speed) {
		if (this._timeout) {
			window.clearTimeout(this._timeout);
		}
		return window.setTimeout($.proxy(function () {
			if (this._paused || this._core.is('busy') || this._core.is('interacting') || document.hidden) {
				return;
			}
			this._core.next(speed || this._core.settings.autoplaySpeed);
		}, this), timeout || this._core.settings.autoplayTimeout);
	};

	/**
  * Sets autoplay in motion.
  * @private
  */
	Autoplay.prototype._setAutoPlayInterval = function () {
		this._timeout = this._getNextTimeout();
	};

	/**
  * Stops the autoplay.
  * @public
  */
	Autoplay.prototype.stop = function () {
		if (!this._core.is('rotating')) {
			return;
		}

		window.clearTimeout(this._timeout);
		this._core.leave('rotating');
	};

	/**
  * Stops the autoplay.
  * @public
  */
	Autoplay.prototype.pause = function () {
		if (!this._core.is('rotating')) {
			return;
		}

		this._paused = true;
	};

	/**
  * Destroys the plugin.
  */
	Autoplay.prototype.destroy = function () {
		var handler, property;

		this.stop();

		for (handler in this._handlers) {
			this._core.$element.off(handler, this._handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;
})(window.Zepto || window.jQuery, window, document);
'use strict';

/**
 * AutoRefresh Plugin
 * @version 2.1.0
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function ($, window, document, undefined) {

	/**
  * Creates the auto refresh plugin.
  * @class The Auto Refresh Plugin
  * @param {Owl} carousel - The Owl Carousel
  */
	var AutoRefresh = function AutoRefresh(carousel) {
		/**
   * Reference to the core.
   * @protected
   * @type {Owl}
   */
		this._core = carousel;

		/**
   * Refresh interval.
   * @protected
   * @type {number}
   */
		this._interval = null;

		/**
   * Whether the element is currently visible or not.
   * @protected
   * @type {Boolean}
   */
		this._visible = null;

		/**
   * All event handlers.
   * @protected
   * @type {Object}
   */
		this._handlers = {
			'initialized.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._core.settings.autoRefresh) {
					this.watch();
				}
			}, this)
		};

		// set default options
		this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options);

		// register event handlers
		this._core.$element.on(this._handlers);
	};

	/**
  * Default options.
  * @public
  */
	AutoRefresh.Defaults = {
		autoRefresh: true,
		autoRefreshInterval: 500
	};

	/**
  * Watches the element.
  */
	AutoRefresh.prototype.watch = function () {
		if (this._interval) {
			return;
		}

		this._visible = this._core.$element.is(':visible');
		this._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);
	};

	/**
  * Refreshes the element.
  */
	AutoRefresh.prototype.refresh = function () {
		if (this._core.$element.is(':visible') === this._visible) {
			return;
		}

		this._visible = !this._visible;

		this._core.$element.toggleClass('owl-hidden', !this._visible);

		this._visible && this._core.invalidate('width') && this._core.refresh();
	};

	/**
  * Destroys the plugin.
  */
	AutoRefresh.prototype.destroy = function () {
		var handler, property;

		window.clearInterval(this._interval);

		for (handler in this._handlers) {
			this._core.$element.off(handler, this._handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;
})(window.Zepto || window.jQuery, window, document);
'use strict';

/**
 * Hash Plugin
 * @version 2.1.0
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function ($, window, document, undefined) {
	'use strict';

	/**
  * Creates the hash plugin.
  * @class The Hash Plugin
  * @param {Owl} carousel - The Owl Carousel
  */

	var Hash = function Hash(carousel) {
		/**
   * Reference to the core.
   * @protected
   * @type {Owl}
   */
		this._core = carousel;

		/**
   * Hash index for the items.
   * @protected
   * @type {Object}
   */
		this._hashes = {};

		/**
   * The carousel element.
   * @type {jQuery}
   */
		this.$element = this._core.$element;

		/**
   * All event handlers.
   * @protected
   * @type {Object}
   */
		this._handlers = {
			'initialized.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._core.settings.startPosition === 'URLHash') {
					$(window).trigger('hashchange.owl.navigation');
				}
			}, this),
			'prepared.owl.carousel': $.proxy(function (e) {
				if (e.namespace) {
					var hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');

					if (!hash) {
						return;
					}

					this._hashes[hash] = e.content;
				}
			}, this),
			'changed.owl.carousel': $.proxy(function (e) {
				if (e.namespace && e.property.name === 'position') {
					var current = this._core.items(this._core.relative(this._core.current())),
					    hash = $.map(this._hashes, function (item, hash) {
						return item === current ? hash : null;
					}).join();

					if (!hash || window.location.hash.slice(1) === hash) {
						return;
					}

					window.location.hash = hash;
				}
			}, this)
		};

		// set default options
		this._core.options = $.extend({}, Hash.Defaults, this._core.options);

		// register the event handlers
		this.$element.on(this._handlers);

		// register event listener for hash navigation
		$(window).on('hashchange.owl.navigation', $.proxy(function (e) {
			var hash = window.location.hash.substring(1),
			    items = this._core.$stage.children(),
			    position = this._hashes[hash] && items.index(this._hashes[hash]);

			if (position === undefined || position === this._core.current()) {
				return;
			}

			this._core.to(this._core.relative(position), false, true);
		}, this));
	};

	/**
  * Default options.
  * @public
  */
	Hash.Defaults = {
		URLhashListener: false
	};

	/**
  * Destroys the plugin.
  * @public
  */
	Hash.prototype.destroy = function () {
		var handler, property;

		$(window).off('hashchange.owl.navigation');

		for (handler in this._handlers) {
			this._core.$element.off(handler, this._handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.Hash = Hash;
})(window.Zepto || window.jQuery, window, document);
'use strict';

/**
 * Lazy Plugin
 * @version 2.1.0
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function ($, window, document, undefined) {

	/**
  * Creates the lazy plugin.
  * @class The Lazy Plugin
  * @param {Owl} carousel - The Owl Carousel
  */
	var Lazy = function Lazy(carousel) {

		/**
   * Reference to the core.
   * @protected
   * @type {Owl}
   */
		this._core = carousel;

		/**
   * Already loaded items.
   * @protected
   * @type {Array.<jQuery>}
   */
		this._loaded = [];

		/**
   * Event handlers.
   * @protected
   * @type {Object}
   */
		this._handlers = {
			'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function (e) {
				if (!e.namespace) {
					return;
				}

				if (!this._core.settings || !this._core.settings.lazyLoad) {
					return;
				}

				if (e.property && e.property.name == 'position' || e.type == 'initialized') {
					var settings = this._core.settings,
					    n = settings.center && Math.ceil(settings.items / 2) || settings.items,
					    i = settings.center && n * -1 || 0,
					    position = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i,
					    clones = this._core.clones().length,
					    load = $.proxy(function (i, v) {
						this.load(v);
					}, this);

					while (i++ < n) {
						this.load(clones / 2 + this._core.relative(position));
						clones && $.each(this._core.clones(this._core.relative(position)), load);
						position++;
					}
				}
			}, this)
		};

		// set the default options
		this._core.options = $.extend({}, Lazy.Defaults, this._core.options);

		// register event handler
		this._core.$element.on(this._handlers);
	};

	/**
  * Default options.
  * @public
  */
	Lazy.Defaults = {
		lazyLoad: false
	};

	/**
  * Loads all resources of an item at the specified position.
  * @param {Number} position - The absolute position of the item.
  * @protected
  */
	Lazy.prototype.load = function (position) {
		var $item = this._core.$stage.children().eq(position),
		    $elements = $item && $item.find('.owl-lazy');

		if (!$elements || $.inArray($item.get(0), this._loaded) > -1) {
			return;
		}

		$elements.each($.proxy(function (index, element) {
			var $element = $(element),
			    image,
			    url = window.devicePixelRatio > 1 && $element.attr('data-src-retina') || $element.attr('data-src');

			this._core.trigger('load', { element: $element, url: url }, 'lazy');

			if ($element.is('img')) {
				$element.one('load.owl.lazy', $.proxy(function () {
					$element.css('opacity', 1);
					this._core.trigger('loaded', { element: $element, url: url }, 'lazy');
				}, this)).attr('src', url);
			} else {
				image = new Image();
				image.onload = $.proxy(function () {
					$element.css({
						'background-image': 'url("' + url + '")',
						'opacity': '1'
					});
					this._core.trigger('loaded', { element: $element, url: url }, 'lazy');
				}, this);
				image.src = url;
			}
		}, this));

		this._loaded.push($item.get(0));
	};

	/**
  * Destroys the plugin.
  * @public
  */
	Lazy.prototype.destroy = function () {
		var handler, property;

		for (handler in this.handlers) {
			this._core.$element.off(handler, this.handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;
})(window.Zepto || window.jQuery, window, document);
'use strict';

/**
 * Navigation Plugin
 * @version 2.1.0
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function ($, window, document, undefined) {
	'use strict';

	/**
  * Creates the navigation plugin.
  * @class The Navigation Plugin
  * @param {Owl} carousel - The Owl Carousel.
  */

	var Navigation = function Navigation(carousel) {
		/**
   * Reference to the core.
   * @protected
   * @type {Owl}
   */
		this._core = carousel;

		/**
   * Indicates whether the plugin is initialized or not.
   * @protected
   * @type {Boolean}
   */
		this._initialized = false;

		/**
   * The current paging indexes.
   * @protected
   * @type {Array}
   */
		this._pages = [];

		/**
   * All DOM elements of the user interface.
   * @protected
   * @type {Object}
   */
		this._controls = {};

		/**
   * Markup for an indicator.
   * @protected
   * @type {Array.<String>}
   */
		this._templates = [];

		/**
   * The carousel element.
   * @type {jQuery}
   */
		this.$element = this._core.$element;

		/**
   * Overridden methods of the carousel.
   * @protected
   * @type {Object}
   */
		this._overrides = {
			next: this._core.next,
			prev: this._core.prev,
			to: this._core.to
		};

		/**
   * All event handlers.
   * @protected
   * @type {Object}
   */
		this._handlers = {
			'prepared.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._core.settings.dotsData) {
					this._templates.push('<div class="' + this._core.settings.dotClass + '">' + $(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');
				}
			}, this),
			'added.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._core.settings.dotsData) {
					this._templates.splice(e.position, 0, this._templates.pop());
				}
			}, this),
			'remove.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._core.settings.dotsData) {
					this._templates.splice(e.position, 1);
				}
			}, this),
			'changed.owl.carousel': $.proxy(function (e) {
				if (e.namespace && e.property.name == 'position') {
					this.draw();
				}
			}, this),
			'initialized.owl.carousel': $.proxy(function (e) {
				if (e.namespace && !this._initialized) {
					this._core.trigger('initialize', null, 'navigation');
					this.initialize();
					this.update();
					this.draw();
					this._initialized = true;
					this._core.trigger('initialized', null, 'navigation');
				}
			}, this),
			'refreshed.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._initialized) {
					this._core.trigger('refresh', null, 'navigation');
					this.update();
					this.draw();
					this._core.trigger('refreshed', null, 'navigation');
				}
			}, this)
		};

		// set default options
		this._core.options = $.extend({}, Navigation.Defaults, this._core.options);

		// register event handlers
		this.$element.on(this._handlers);
	};

	/**
  * Default options.
  * @public
  * @todo Rename `slideBy` to `navBy`
  */
	Navigation.Defaults = {
		nav: false,
		navText: ['prev', 'next'],
		navSpeed: false,
		navElement: 'div',
		navContainer: false,
		navContainerClass: 'owl-nav',
		navClass: ['owl-prev', 'owl-next'],
		slideBy: 1,
		dotClass: 'owl-dot',
		dotsClass: 'owl-dots',
		dots: true,
		dotsEach: false,
		dotsData: false,
		dotsSpeed: false,
		dotsContainer: false
	};

	/**
  * Initializes the layout of the plugin and extends the carousel.
  * @protected
  */
	Navigation.prototype.initialize = function () {
		var override,
		    settings = this._core.settings;

		// create DOM structure for relative navigation
		this._controls.$relative = (settings.navContainer ? $(settings.navContainer) : $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');

		this._controls.$previous = $('<' + settings.navElement + '>').addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on('click', $.proxy(function (e) {
			this.prev(settings.navSpeed);
		}, this));
		this._controls.$next = $('<' + settings.navElement + '>').addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on('click', $.proxy(function (e) {
			this.next(settings.navSpeed);
		}, this));

		// create DOM structure for absolute navigation
		if (!settings.dotsData) {
			this._templates = [$('<div>').addClass(settings.dotClass).append($('<span>')).prop('outerHTML')];
		}

		this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');

		this._controls.$absolute.on('click', 'div', $.proxy(function (e) {
			var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index() : $(e.target).parent().index();

			e.preventDefault();

			this.to(index, settings.dotsSpeed);
		}, this));

		// override public methods of the carousel
		for (override in this._overrides) {
			this._core[override] = $.proxy(this[override], this);
		}
	};

	/**
  * Destroys the plugin.
  * @protected
  */
	Navigation.prototype.destroy = function () {
		var handler, control, property, override;

		for (handler in this._handlers) {
			this.$element.off(handler, this._handlers[handler]);
		}
		for (control in this._controls) {
			this._controls[control].remove();
		}
		for (override in this.overides) {
			this._core[override] = this._overrides[override];
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	/**
  * Updates the internal state.
  * @protected
  */
	Navigation.prototype.update = function () {
		var i,
		    j,
		    k,
		    lower = this._core.clones().length / 2,
		    upper = lower + this._core.items().length,
		    maximum = this._core.maximum(true),
		    settings = this._core.settings,
		    size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items;

		if (settings.slideBy !== 'page') {
			settings.slideBy = Math.min(settings.slideBy, settings.items);
		}

		if (settings.dots || settings.slideBy == 'page') {
			this._pages = [];

			for (i = lower, j = 0, k = 0; i < upper; i++) {
				if (j >= size || j === 0) {
					this._pages.push({
						start: Math.min(maximum, i - lower),
						end: i - lower + size - 1
					});
					if (Math.min(maximum, i - lower) === maximum) {
						break;
					}
					j = 0, ++k;
				}
				j += this._core.mergers(this._core.relative(i));
			}
		}
	};

	/**
  * Draws the user interface.
  * @todo The option `dotsData` wont work.
  * @protected
  */
	Navigation.prototype.draw = function () {
		var difference,
		    settings = this._core.settings,
		    disabled = this._core.items().length <= settings.items,
		    index = this._core.relative(this._core.current()),
		    loop = settings.loop || settings.rewind;

		this._controls.$relative.toggleClass('disabled', !settings.nav || disabled);

		if (settings.nav) {
			this._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true));
			this._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true));
		}

		this._controls.$absolute.toggleClass('disabled', !settings.dots || disabled);

		if (settings.dots) {
			difference = this._pages.length - this._controls.$absolute.children().length;

			if (settings.dotsData && difference !== 0) {
				this._controls.$absolute.html(this._templates.join(''));
			} else if (difference > 0) {
				this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));
			} else if (difference < 0) {
				this._controls.$absolute.children().slice(difference).remove();
			}

			this._controls.$absolute.find('.active').removeClass('active');
			this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');
		}
	};

	/**
  * Extends event data.
  * @protected
  * @param {Event} event - The event object which gets thrown.
  */
	Navigation.prototype.onTrigger = function (event) {
		var settings = this._core.settings;

		event.page = {
			index: $.inArray(this.current(), this._pages),
			count: this._pages.length,
			size: settings && (settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items)
		};
	};

	/**
  * Gets the current page position of the carousel.
  * @protected
  * @returns {Number}
  */
	Navigation.prototype.current = function () {
		var current = this._core.relative(this._core.current());
		return $.grep(this._pages, $.proxy(function (page, index) {
			return page.start <= current && page.end >= current;
		}, this)).pop();
	};

	/**
  * Gets the current succesor/predecessor position.
  * @protected
  * @returns {Number}
  */
	Navigation.prototype.getPosition = function (successor) {
		var position,
		    length,
		    settings = this._core.settings;

		if (settings.slideBy == 'page') {
			position = $.inArray(this.current(), this._pages);
			length = this._pages.length;
			successor ? ++position : --position;
			position = this._pages[(position % length + length) % length].start;
		} else {
			position = this._core.relative(this._core.current());
			length = this._core.items().length;
			successor ? position += settings.slideBy : position -= settings.slideBy;
		}

		return position;
	};

	/**
  * Slides to the next item or page.
  * @public
  * @param {Number} [speed=false] - The time in milliseconds for the transition.
  */
	Navigation.prototype.next = function (speed) {
		$.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);
	};

	/**
  * Slides to the previous item or page.
  * @public
  * @param {Number} [speed=false] - The time in milliseconds for the transition.
  */
	Navigation.prototype.prev = function (speed) {
		$.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);
	};

	/**
  * Slides to the specified item or page.
  * @public
  * @param {Number} position - The position of the item or page.
  * @param {Number} [speed] - The time in milliseconds for the transition.
  * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.
  */
	Navigation.prototype.to = function (position, speed, standard) {
		var length;

		if (!standard && this._pages.length) {
			length = this._pages.length;
			$.proxy(this._overrides.to, this._core)(this._pages[(position % length + length) % length].start, speed);
		} else {
			$.proxy(this._overrides.to, this._core)(position, speed);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;
})(window.Zepto || window.jQuery, window, document);
'use strict';

/**
 * Support Plugin
 *
 * @version 2.1.0
 * @author Vivid Planet Software GmbH
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function ($, window, document, undefined) {

	var style = $('<support>').get(0).style,
	    prefixes = 'Webkit Moz O ms'.split(' '),
	    events = {
		transition: {
			end: {
				WebkitTransition: 'webkitTransitionEnd',
				MozTransition: 'transitionend',
				OTransition: 'oTransitionEnd',
				transition: 'transitionend'
			}
		},
		animation: {
			end: {
				WebkitAnimation: 'webkitAnimationEnd',
				MozAnimation: 'animationend',
				OAnimation: 'oAnimationEnd',
				animation: 'animationend'
			}
		}
	},
	    tests = {
		csstransforms: function csstransforms() {
			return !!test('transform');
		},
		csstransforms3d: function csstransforms3d() {
			return !!test('perspective');
		},
		csstransitions: function csstransitions() {
			return !!test('transition');
		},
		cssanimations: function cssanimations() {
			return !!test('animation');
		}
	};

	function test(property, prefixed) {
		var result = false,
		    upper = property.charAt(0).toUpperCase() + property.slice(1);

		$.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function (i, property) {
			if (style[property] !== undefined) {
				result = prefixed ? property : true;
				return false;
			}
		});

		return result;
	}

	function prefixed(property) {
		return test(property, true);
	}

	if (tests.csstransitions()) {
		/* jshint -W053 */
		$.support.transition = new String(prefixed('transition'));
		$.support.transition.end = events.transition.end[$.support.transition];
	}

	if (tests.cssanimations()) {
		/* jshint -W053 */
		$.support.animation = new String(prefixed('animation'));
		$.support.animation.end = events.animation.end[$.support.animation];
	}

	if (tests.csstransforms()) {
		/* jshint -W053 */
		$.support.transform = new String(prefixed('transform'));
		$.support.transform3d = tests.csstransforms3d();
	}
})(window.Zepto || window.jQuery, window, document);
'use strict';

/**
 * Video Plugin
 * @version 2.1.0
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */
;(function ($, window, document, undefined) {

	/**
  * Creates the video plugin.
  * @class The Video Plugin
  * @param {Owl} carousel - The Owl Carousel
  */
	var Video = function Video(carousel) {
		/**
   * Reference to the core.
   * @protected
   * @type {Owl}
   */
		this._core = carousel;

		/**
   * Cache all video URLs.
   * @protected
   * @type {Object}
   */
		this._videos = {};

		/**
   * Current playing item.
   * @protected
   * @type {jQuery}
   */
		this._playing = null;

		/**
   * All event handlers.
   * @todo The cloned content removale is too late
   * @protected
   * @type {Object}
   */
		this._handlers = {
			'initialized.owl.carousel': $.proxy(function (e) {
				if (e.namespace) {
					this._core.register({ type: 'state', name: 'playing', tags: ['interacting'] });
				}
			}, this),
			'resize.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._core.settings.video && this.isInFullScreen()) {
					e.preventDefault();
				}
			}, this),
			'refreshed.owl.carousel': $.proxy(function (e) {
				if (e.namespace && this._core.is('resizing')) {
					this._core.$stage.find('.cloned .owl-video-frame').remove();
				}
			}, this),
			'changed.owl.carousel': $.proxy(function (e) {
				if (e.namespace && e.property.name === 'position' && this._playing) {
					this.stop();
				}
			}, this),
			'prepared.owl.carousel': $.proxy(function (e) {
				if (!e.namespace) {
					return;
				}

				var $element = $(e.content).find('.owl-video');

				if ($element.length) {
					$element.css('display', 'none');
					this.fetch($element, $(e.content));
				}
			}, this)
		};

		// set default options
		this._core.options = $.extend({}, Video.Defaults, this._core.options);

		// register event handlers
		this._core.$element.on(this._handlers);

		this._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function (e) {
			this.play(e);
		}, this));
	};

	/**
  * Default options.
  * @public
  */
	Video.Defaults = {
		video: false,
		videoHeight: false,
		videoWidth: false
	};

	/**
  * Gets the video ID and the type (YouTube/Vimeo/vzaar only).
  * @protected
  * @param {jQuery} target - The target containing the video data.
  * @param {jQuery} item - The item containing the video.
  */
	Video.prototype.fetch = function (target, item) {
		var type = function () {
			if (target.attr('data-vimeo-id')) {
				return 'vimeo';
			} else if (target.attr('data-vzaar-id')) {
				return 'vzaar';
			} else {
				return 'youtube';
			}
		}(),
		    id = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),
		    width = target.attr('data-width') || this._core.settings.videoWidth,
		    height = target.attr('data-height') || this._core.settings.videoHeight,
		    url = target.attr('href');

		if (url) {

			/*
   		Parses the id's out of the following urls (and probably more):
   		https://www.youtube.com/watch?v=:id
   		https://youtu.be/:id
   		https://vimeo.com/:id
   		https://vimeo.com/channels/:channel/:id
   		https://vimeo.com/groups/:group/videos/:id
   		https://app.vzaar.com/videos/:id
   			Visual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F
   */

			id = url.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);

			if (id[3].indexOf('youtu') > -1) {
				type = 'youtube';
			} else if (id[3].indexOf('vimeo') > -1) {
				type = 'vimeo';
			} else if (id[3].indexOf('vzaar') > -1) {
				type = 'vzaar';
			} else {
				throw new Error('Video URL not supported.');
			}
			id = id[6];
		} else {
			throw new Error('Missing video URL.');
		}

		this._videos[url] = {
			type: type,
			id: id,
			width: width,
			height: height
		};

		item.attr('data-video', url);

		this.thumbnail(target, this._videos[url]);
	};

	/**
  * Creates video thumbnail.
  * @protected
  * @param {jQuery} target - The target containing the video data.
  * @param {Object} info - The video info object.
  * @see `fetch`
  */
	Video.prototype.thumbnail = function (target, video) {
		var tnLink,
		    icon,
		    path,
		    dimensions = video.width && video.height ? 'style="width:' + video.width + 'px;height:' + video.height + 'px;"' : '',
		    customTn = target.find('img'),
		    srcType = 'src',
		    lazyClass = '',
		    settings = this._core.settings,
		    create = function create(path) {
			icon = '<div class="owl-video-play-icon"></div>';

			if (settings.lazyLoad) {
				tnLink = '<div class="owl-video-tn ' + lazyClass + '" ' + srcType + '="' + path + '"></div>';
			} else {
				tnLink = '<div class="owl-video-tn" style="opacity:1;background-image:url(' + path + ')"></div>';
			}
			target.after(tnLink);
			target.after(icon);
		};

		// wrap video content into owl-video-wrapper div
		target.wrap('<div class="owl-video-wrapper"' + dimensions + '></div>');

		if (this._core.settings.lazyLoad) {
			srcType = 'data-src';
			lazyClass = 'owl-lazy';
		}

		// custom thumbnail
		if (customTn.length) {
			create(customTn.attr(srcType));
			customTn.remove();
			return false;
		}

		if (video.type === 'youtube') {
			path = "//img.youtube.com/vi/" + video.id + "/hqdefault.jpg";
			create(path);
		} else if (video.type === 'vimeo') {
			$.ajax({
				type: 'GET',
				url: '//vimeo.com/api/v2/video/' + video.id + '.json',
				jsonp: 'callback',
				dataType: 'jsonp',
				success: function success(data) {
					path = data[0].thumbnail_large;
					create(path);
				}
			});
		} else if (video.type === 'vzaar') {
			$.ajax({
				type: 'GET',
				url: '//vzaar.com/api/videos/' + video.id + '.json',
				jsonp: 'callback',
				dataType: 'jsonp',
				success: function success(data) {
					path = data.framegrab_url;
					create(path);
				}
			});
		}
	};

	/**
  * Stops the current video.
  * @public
  */
	Video.prototype.stop = function () {
		this._core.trigger('stop', null, 'video');
		this._playing.find('.owl-video-frame').remove();
		this._playing.removeClass('owl-video-playing');
		this._playing = null;
		this._core.leave('playing');
		this._core.trigger('stopped', null, 'video');
	};

	/**
  * Starts the current video.
  * @public
  * @param {Event} event - The event arguments.
  */
	Video.prototype.play = function (event) {
		var target = $(event.target),
		    item = target.closest('.' + this._core.settings.itemClass),
		    video = this._videos[item.attr('data-video')],
		    width = video.width || '100%',
		    height = video.height || this._core.$stage.height(),
		    html;

		if (this._playing) {
			return;
		}

		this._core.enter('playing');
		this._core.trigger('play', null, 'video');

		item = this._core.items(this._core.relative(item.index()));

		this._core.reset(item.index());

		if (video.type === 'youtube') {
			html = '<iframe width="' + width + '" height="' + height + '" src="//www.youtube.com/embed/' + video.id + '?autoplay=1&rel=0&v=' + video.id + '" frameborder="0" allowfullscreen></iframe>';
		} else if (video.type === 'vimeo') {
			html = '<iframe src="//player.vimeo.com/video/' + video.id + '?autoplay=1" width="' + width + '" height="' + height + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';
		} else if (video.type === 'vzaar') {
			html = '<iframe frameborder="0"' + 'height="' + height + '"' + 'width="' + width + '" allowfullscreen mozallowfullscreen webkitAllowFullScreen ' + 'src="//view.vzaar.com/' + video.id + '/player?autoplay=true"></iframe>';
		}

		$('<div class="owl-video-frame">' + html + '</div>').insertAfter(item.find('.owl-video'));

		this._playing = item.addClass('owl-video-playing');
	};

	/**
  * Checks whether an video is currently in full screen mode or not.
  * @todo Bad style because looks like a readonly method but changes members.
  * @protected
  * @returns {Boolean}
  */
	Video.prototype.isInFullScreen = function () {
		var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;

		return element && $(element).parent().hasClass('owl-video-frame');
	};

	/**
  * Destroys the plugin.
  */
	Video.prototype.destroy = function () {
		var handler, property;

		this._core.$element.off('click.owl.video');

		for (handler in this._handlers) {
			this._core.$element.off(handler, this._handlers[handler]);
		}
		for (property in Object.getOwnPropertyNames(this)) {
			typeof this[property] != 'function' && (this[property] = null);
		}
	};

	$.fn.owlCarousel.Constructor.Plugins.Video = Video;
})(window.Zepto || window.jQuery, window, document);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
})(function ($) {

    var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice = Array.prototype.slice,
        nullLowestDeltaTimeout,
        lowestDelta;

    if ($.event.fixHooks) {
        for (var i = toFix.length; i;) {
            $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function setup() {
            if (this.addEventListener) {
                for (var i = toBind.length; i;) {
                    this.addEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function teardown() {
            if (this.removeEventListener) {
                for (var i = toBind.length; i;) {
                    this.removeEventListener(toBind[--i], handler, false);
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function getLineHeight(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function getPageHeight(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function mousewheel(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function unmousewheel(fn) {
            return this.unbind('mousewheel', fn);
        }
    });

    function handler(event) {
        var orgEvent = event || window.event,
            args = slice.call(arguments, 1),
            delta = 0,
            deltaX = 0,
            deltaY = 0,
            absDelta = 0,
            offsetX = 0,
            offsetY = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ('detail' in orgEvent) {
            deltaY = orgEvent.detail * -1;
        }
        if ('wheelDelta' in orgEvent) {
            deltaY = orgEvent.wheelDelta;
        }
        if ('wheelDeltaY' in orgEvent) {
            deltaY = orgEvent.wheelDeltaY;
        }
        if ('wheelDeltaX' in orgEvent) {
            deltaX = orgEvent.wheelDeltaX * -1;
        }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ('deltaY' in orgEvent) {
            deltaY = orgEvent.deltaY * -1;
            delta = deltaY;
        }
        if ('deltaX' in orgEvent) {
            deltaX = orgEvent.deltaX;
            if (deltaY === 0) {
                delta = deltaX * -1;
            }
        }

        // No change actually happened, no reason to go any further
        if (deltaY === 0 && deltaX === 0) {
            return;
        }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if (orgEvent.deltaMode === 1) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if (orgEvent.deltaMode === 2) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));

        if (!lowestDelta || absDelta < lowestDelta) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
            // Divide all the things by 40!
            delta /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
        deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);
        deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if (special.settings.normalizeOffset && this.getBoundingClientRect) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) {
            clearTimeout(nullLowestDeltaTimeout);
        }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }
});
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! lightgallery - v1.3.9 - 2017-02-05
* http://sachinchoolur.github.io/lightGallery/
* Copyright (c) 2017 Sachin N; Licensed GPLv3 */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module unless amdModuleId is set
        define(['jquery'], function (a0) {
            return factory(a0);
        });
    } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }
})(undefined, function ($) {

    (function () {
        'use strict';

        var defaults = {

            mode: 'lg-slide',

            // Ex : 'ease'
            cssEasing: 'ease',

            //'for jquery animation'
            easing: 'linear',
            speed: 600,
            height: '100%',
            width: '100%',
            addClass: '',
            startClass: 'lg-start-zoom',
            backdropDuration: 150,
            hideBarsDelay: 6000,

            useLeft: false,

            closable: true,
            loop: true,
            escKey: true,
            keyPress: true,
            controls: true,
            slideEndAnimatoin: true,
            hideControlOnEnd: false,
            mousewheel: true,

            getCaptionFromTitleOrAlt: true,

            // .lg-item || '.lg-sub-html'
            appendSubHtmlTo: '.lg-sub-html',

            subHtmlSelectorRelative: false,

            /**
             * @desc number of preload slides
             * will exicute only after the current slide is fully loaded.
             *
             * @ex you clicked on 4th image and if preload = 1 then 3rd slide and 5th
             * slide will be loaded in the background after the 4th slide is fully loaded..
             * if preload is 2 then 2nd 3rd 5th 6th slides will be preloaded.. ... ...
             *
             */
            preload: 1,
            showAfterLoad: true,
            selector: '',
            selectWithin: '',
            nextHtml: '',
            prevHtml: '',

            // 0, 1
            index: false,

            iframeMaxWidth: '100%',

            download: true,
            counter: true,
            appendCounterTo: '.lg-toolbar',

            swipeThreshold: 50,
            enableSwipe: true,
            enableDrag: true,

            dynamic: false,
            dynamicEl: [],
            galleryId: 1
        };

        function Plugin(element, options) {

            // Current lightGallery element
            this.el = element;

            // Current jquery element
            this.$el = $(element);

            // lightGallery settings
            this.s = $.extend({}, defaults, options);

            // When using dynamic mode, ensure dynamicEl is an array
            if (this.s.dynamic && this.s.dynamicEl !== 'undefined' && this.s.dynamicEl.constructor === Array && !this.s.dynamicEl.length) {
                throw 'When using dynamic mode, you must also define dynamicEl as an Array.';
            }

            // lightGallery modules
            this.modules = {};

            // false when lightgallery complete first slide;
            this.lGalleryOn = false;

            this.lgBusy = false;

            // Timeout function for hiding controls;
            this.hideBartimeout = false;

            // To determine browser supports for touch events;
            this.isTouch = 'ontouchstart' in document.documentElement;

            // Disable hideControlOnEnd if sildeEndAnimation is true
            if (this.s.slideEndAnimatoin) {
                this.s.hideControlOnEnd = false;
            }

            // Gallery items
            if (this.s.dynamic) {
                this.$items = this.s.dynamicEl;
            } else {
                if (this.s.selector === 'this') {
                    this.$items = this.$el;
                } else if (this.s.selector !== '') {
                    if (this.s.selectWithin) {
                        this.$items = $(this.s.selectWithin).find(this.s.selector);
                    } else {
                        this.$items = this.$el.find($(this.s.selector));
                    }
                } else {
                    this.$items = this.$el.children();
                }
            }

            // .lg-item
            this.$slide = '';

            // .lg-outer
            this.$outer = '';

            this.init();

            return this;
        }

        Plugin.prototype.init = function () {

            var _this = this;

            // s.preload should not be more than $item.length
            if (_this.s.preload > _this.$items.length) {
                _this.s.preload = _this.$items.length;
            }

            // if dynamic option is enabled execute immediately
            var _hash = window.location.hash;
            if (_hash.indexOf('lg=' + this.s.galleryId) > 0) {

                _this.index = parseInt(_hash.split('&slide=')[1], 10);

                $('body').addClass('lg-from-hash');
                if (!$('body').hasClass('lg-on')) {
                    setTimeout(function () {
                        _this.build(_this.index);
                    });

                    $('body').addClass('lg-on');
                }
            }

            if (_this.s.dynamic) {

                _this.$el.trigger('onBeforeOpen.lg');

                _this.index = _this.s.index || 0;

                // prevent accidental double execution
                if (!$('body').hasClass('lg-on')) {
                    setTimeout(function () {
                        _this.build(_this.index);
                        $('body').addClass('lg-on');
                    });
                }
            } else {

                // Using different namespace for click because click event should not unbind if selector is same object('this')
                _this.$items.on('click.lgcustom', function (event) {

                    // For IE8
                    try {
                        event.preventDefault();
                        event.preventDefault();
                    } catch (er) {
                        event.returnValue = false;
                    }

                    _this.$el.trigger('onBeforeOpen.lg');

                    _this.index = _this.s.index || _this.$items.index(this);

                    // prevent accidental double execution
                    if (!$('body').hasClass('lg-on')) {
                        _this.build(_this.index);
                        $('body').addClass('lg-on');
                    }
                });
            }
        };

        Plugin.prototype.build = function (index) {

            var _this = this;

            _this.structure();

            // module constructor
            $.each($.fn.lightGallery.modules, function (key) {
                _this.modules[key] = new $.fn.lightGallery.modules[key](_this.el);
            });

            // initiate slide function
            _this.slide(index, false, false, false);

            if (_this.s.keyPress) {
                _this.keyPress();
            }

            if (_this.$items.length > 1) {

                _this.arrow();

                setTimeout(function () {
                    _this.enableDrag();
                    _this.enableSwipe();
                }, 50);

                if (_this.s.mousewheel) {
                    _this.mousewheel();
                }
            }

            _this.counter();

            _this.closeGallery();

            _this.$el.trigger('onAfterOpen.lg');

            // Hide controllers if mouse doesn't move for some period
            _this.$outer.on('mousemove.lg click.lg touchstart.lg', function () {

                _this.$outer.removeClass('lg-hide-items');

                clearTimeout(_this.hideBartimeout);

                // Timeout will be cleared on each slide movement also
                _this.hideBartimeout = setTimeout(function () {
                    _this.$outer.addClass('lg-hide-items');
                }, _this.s.hideBarsDelay);
            });

            _this.$outer.trigger('mousemove.lg');
        };

        Plugin.prototype.structure = function () {
            var list = '';
            var controls = '';
            var i = 0;
            var subHtmlCont = '';
            var template;
            var _this = this;

            $('body').append('<div class="lg-backdrop"></div>');
            $('.lg-backdrop').css('transition-duration', this.s.backdropDuration + 'ms');

            // Create gallery items
            for (i = 0; i < this.$items.length; i++) {
                list += '<div class="lg-item"></div>';
            }

            // Create controlls
            if (this.s.controls && this.$items.length > 1) {
                controls = '<div class="lg-actions">' + '<div class="lg-prev lg-icon">' + this.s.prevHtml + '</div>' + '<div class="lg-next lg-icon">' + this.s.nextHtml + '</div>' + '</div>';
            }

            if (this.s.appendSubHtmlTo === '.lg-sub-html') {
                subHtmlCont = '<div class="lg-sub-html"></div>';
            }

            template = '<div class="lg-outer ' + this.s.addClass + ' ' + this.s.startClass + '">' + '<div class="lg" style="width:' + this.s.width + '; height:' + this.s.height + '">' + '<div class="lg-inner">' + list + '</div>' + '<div class="lg-toolbar lg-group">' + '<span class="lg-close lg-icon"></span>' + '</div>' + controls + subHtmlCont + '</div>' + '</div>';

            $('body').append(template);
            this.$outer = $('.lg-outer');
            this.$slide = this.$outer.find('.lg-item');

            if (this.s.useLeft) {
                this.$outer.addClass('lg-use-left');

                // Set mode lg-slide if use left is true;
                this.s.mode = 'lg-slide';
            } else {
                this.$outer.addClass('lg-use-css3');
            }

            // For fixed height gallery
            _this.setTop();
            $(window).on('resize.lg orientationchange.lg', function () {
                setTimeout(function () {
                    _this.setTop();
                }, 100);
            });

            // add class lg-current to remove initial transition
            this.$slide.eq(this.index).addClass('lg-current');

            // add Class for css support and transition mode
            if (this.doCss()) {
                this.$outer.addClass('lg-css3');
            } else {
                this.$outer.addClass('lg-css');

                // Set speed 0 because no animation will happen if browser doesn't support css3
                this.s.speed = 0;
            }

            this.$outer.addClass(this.s.mode);

            if (this.s.enableDrag && this.$items.length > 1) {
                this.$outer.addClass('lg-grab');
            }

            if (this.s.showAfterLoad) {
                this.$outer.addClass('lg-show-after-load');
            }

            if (this.doCss()) {
                var $inner = this.$outer.find('.lg-inner');
                $inner.css('transition-timing-function', this.s.cssEasing);
                $inner.css('transition-duration', this.s.speed + 'ms');
            }

            setTimeout(function () {
                $('.lg-backdrop').addClass('in');
            });

            setTimeout(function () {
                _this.$outer.addClass('lg-visible');
            }, this.s.backdropDuration);

            if (this.s.download) {
                this.$outer.find('.lg-toolbar').append('<a id="lg-download" target="_blank" download class="lg-download lg-icon"></a>');
            }

            // Store the current scroll top value to scroll back after closing the gallery..
            this.prevScrollTop = $(window).scrollTop();
        };

        // For fixed height gallery
        Plugin.prototype.setTop = function () {
            if (this.s.height !== '100%') {
                var wH = $(window).height();
                var top = (wH - parseInt(this.s.height, 10)) / 2;
                var $lGallery = this.$outer.find('.lg');
                if (wH >= parseInt(this.s.height, 10)) {
                    $lGallery.css('top', top + 'px');
                } else {
                    $lGallery.css('top', '0px');
                }
            }
        };

        // Find css3 support
        Plugin.prototype.doCss = function () {
            // check for css animation support
            var support = function support() {
                var transition = ['transition', 'MozTransition', 'WebkitTransition', 'OTransition', 'msTransition', 'KhtmlTransition'];
                var root = document.documentElement;
                var i = 0;
                for (i = 0; i < transition.length; i++) {
                    if (transition[i] in root.style) {
                        return true;
                    }
                }
            };

            if (support()) {
                return true;
            }

            return false;
        };

        /**
         *  @desc Check the given src is video
         *  @param {String} src
         *  @return {Object} video type
         *  Ex:{ youtube  :  ["//www.youtube.com/watch?v=c0asJgSyxcY", "c0asJgSyxcY"] }
         */
        Plugin.prototype.isVideo = function (src, index) {

            var html;
            if (this.s.dynamic) {
                html = this.s.dynamicEl[index].html;
            } else {
                html = this.$items.eq(index).attr('data-html');
            }

            if (!src && html) {
                return {
                    html5: true
                };
            }

            var youtube = src.match(/\/\/(?:www\.)?youtu(?:\.be|be\.com)\/(?:watch\?v=|embed\/)?([a-z0-9\-\_\%]+)/i);
            var vimeo = src.match(/\/\/(?:www\.)?vimeo.com\/([0-9a-z\-_]+)/i);
            var dailymotion = src.match(/\/\/(?:www\.)?dai.ly\/([0-9a-z\-_]+)/i);
            var vk = src.match(/\/\/(?:www\.)?(?:vk\.com|vkontakte\.ru)\/(?:video_ext\.php\?)(.*)/i);

            if (youtube) {
                return {
                    youtube: youtube
                };
            } else if (vimeo) {
                return {
                    vimeo: vimeo
                };
            } else if (dailymotion) {
                return {
                    dailymotion: dailymotion
                };
            } else if (vk) {
                return {
                    vk: vk
                };
            }
        };

        /**
         *  @desc Create image counter
         *  Ex: 1/10
         */
        Plugin.prototype.counter = function () {
            if (this.s.counter) {
                $(this.s.appendCounterTo).append('<div id="lg-counter"><span id="lg-counter-current">' + (parseInt(this.index, 10) + 1) + '</span> / <span id="lg-counter-all">' + this.$items.length + '</span></div>');
            }
        };

        /**
         *  @desc add sub-html into the slide
         *  @param {Number} index - index of the slide
         */
        Plugin.prototype.addHtml = function (index) {
            var subHtml = null;
            var subHtmlUrl;
            var $currentEle;
            if (this.s.dynamic) {
                if (this.s.dynamicEl[index].subHtmlUrl) {
                    subHtmlUrl = this.s.dynamicEl[index].subHtmlUrl;
                } else {
                    subHtml = this.s.dynamicEl[index].subHtml;
                }
            } else {
                $currentEle = this.$items.eq(index);
                if ($currentEle.attr('data-sub-html-url')) {
                    subHtmlUrl = $currentEle.attr('data-sub-html-url');
                } else {
                    subHtml = $currentEle.attr('data-sub-html');
                    if (this.s.getCaptionFromTitleOrAlt && !subHtml) {
                        subHtml = $currentEle.attr('title') || $currentEle.find('img').first().attr('alt');
                    }
                }
            }

            if (!subHtmlUrl) {
                if (typeof subHtml !== 'undefined' && subHtml !== null) {

                    // get first letter of subhtml
                    // if first letter starts with . or # get the html form the jQuery object
                    var fL = subHtml.substring(0, 1);
                    if (fL === '.' || fL === '#') {
                        if (this.s.subHtmlSelectorRelative && !this.s.dynamic) {
                            subHtml = $currentEle.find(subHtml).html();
                        } else {
                            subHtml = $(subHtml).html();
                        }
                    }
                } else {
                    subHtml = '';
                }
            }

            if (this.s.appendSubHtmlTo === '.lg-sub-html') {

                if (subHtmlUrl) {
                    this.$outer.find(this.s.appendSubHtmlTo).load(subHtmlUrl);
                } else {
                    this.$outer.find(this.s.appendSubHtmlTo).html(subHtml);
                }
            } else {

                if (subHtmlUrl) {
                    this.$slide.eq(index).load(subHtmlUrl);
                } else {
                    this.$slide.eq(index).append(subHtml);
                }
            }

            // Add lg-empty-html class if title doesn't exist
            if (typeof subHtml !== 'undefined' && subHtml !== null) {
                if (subHtml === '') {
                    this.$outer.find(this.s.appendSubHtmlTo).addClass('lg-empty-html');
                } else {
                    this.$outer.find(this.s.appendSubHtmlTo).removeClass('lg-empty-html');
                }
            }

            this.$el.trigger('onAfterAppendSubHtml.lg', [index]);
        };

        /**
         *  @desc Preload slides
         *  @param {Number} index - index of the slide
         */
        Plugin.prototype.preload = function (index) {
            var i = 1;
            var j = 1;
            for (i = 1; i <= this.s.preload; i++) {
                if (i >= this.$items.length - index) {
                    break;
                }

                this.loadContent(index + i, false, 0);
            }

            for (j = 1; j <= this.s.preload; j++) {
                if (index - j < 0) {
                    break;
                }

                this.loadContent(index - j, false, 0);
            }
        };

        /**
         *  @desc Load slide content into slide.
         *  @param {Number} index - index of the slide.
         *  @param {Boolean} rec - if true call loadcontent() function again.
         *  @param {Boolean} delay - delay for adding complete class. it is 0 except first time.
         */
        Plugin.prototype.loadContent = function (index, rec, delay) {

            var _this = this;
            var _hasPoster = false;
            var _$img;
            var _src;
            var _poster;
            var _srcset;
            var _sizes;
            var _html;
            var getResponsiveSrc = function getResponsiveSrc(srcItms) {
                var rsWidth = [];
                var rsSrc = [];
                for (var i = 0; i < srcItms.length; i++) {
                    var __src = srcItms[i].split(' ');

                    // Manage empty space
                    if (__src[0] === '') {
                        __src.splice(0, 1);
                    }

                    rsSrc.push(__src[0]);
                    rsWidth.push(__src[1]);
                }

                var wWidth = $(window).width();
                for (var j = 0; j < rsWidth.length; j++) {
                    if (parseInt(rsWidth[j], 10) > wWidth) {
                        _src = rsSrc[j];
                        break;
                    }
                }
            };

            if (_this.s.dynamic) {

                if (_this.s.dynamicEl[index].poster) {
                    _hasPoster = true;
                    _poster = _this.s.dynamicEl[index].poster;
                }

                _html = _this.s.dynamicEl[index].html;
                _src = _this.s.dynamicEl[index].src;

                if (_this.s.dynamicEl[index].responsive) {
                    var srcDyItms = _this.s.dynamicEl[index].responsive.split(',');
                    getResponsiveSrc(srcDyItms);
                }

                _srcset = _this.s.dynamicEl[index].srcset;
                _sizes = _this.s.dynamicEl[index].sizes;
            } else {

                if (_this.$items.eq(index).attr('data-poster')) {
                    _hasPoster = true;
                    _poster = _this.$items.eq(index).attr('data-poster');
                }

                _html = _this.$items.eq(index).attr('data-html');
                _src = _this.$items.eq(index).attr('href') || _this.$items.eq(index).attr('data-src');

                if (_this.$items.eq(index).attr('data-responsive')) {
                    var srcItms = _this.$items.eq(index).attr('data-responsive').split(',');
                    getResponsiveSrc(srcItms);
                }

                _srcset = _this.$items.eq(index).attr('data-srcset');
                _sizes = _this.$items.eq(index).attr('data-sizes');
            }

            //if (_src || _srcset || _sizes || _poster) {

            var iframe = false;
            if (_this.s.dynamic) {
                if (_this.s.dynamicEl[index].iframe) {
                    iframe = true;
                }
            } else {
                if (_this.$items.eq(index).attr('data-iframe') === 'true') {
                    iframe = true;
                }
            }

            var _isVideo = _this.isVideo(_src, index);
            if (!_this.$slide.eq(index).hasClass('lg-loaded')) {
                if (iframe) {
                    _this.$slide.eq(index).prepend('<div class="lg-video-cont" style="max-width:' + _this.s.iframeMaxWidth + '"><div class="lg-video"><iframe class="lg-object" frameborder="0" src="' + _src + '"  allowfullscreen="true"></iframe></div></div>');
                } else if (_hasPoster) {
                    var videoClass = '';
                    if (_isVideo && _isVideo.youtube) {
                        videoClass = 'lg-has-youtube';
                    } else if (_isVideo && _isVideo.vimeo) {
                        videoClass = 'lg-has-vimeo';
                    } else {
                        videoClass = 'lg-has-html5';
                    }

                    _this.$slide.eq(index).prepend('<div class="lg-video-cont ' + videoClass + ' "><div class="lg-video"><span class="lg-video-play"></span><img class="lg-object lg-has-poster" src="' + _poster + '" /></div></div>');
                } else if (_isVideo) {
                    _this.$slide.eq(index).prepend('<div class="lg-video-cont "><div class="lg-video"></div></div>');
                    _this.$el.trigger('hasVideo.lg', [index, _src, _html]);
                } else {
                    _this.$slide.eq(index).prepend('<div class="lg-img-wrap"><img class="lg-object lg-image" src="' + _src + '" /></div>');
                }

                _this.$el.trigger('onAferAppendSlide.lg', [index]);

                _$img = _this.$slide.eq(index).find('.lg-object');
                if (_sizes) {
                    _$img.attr('sizes', _sizes);
                }

                if (_srcset) {
                    _$img.attr('srcset', _srcset);
                    try {
                        picturefill({
                            elements: [_$img[0]]
                        });
                    } catch (e) {
                        console.error('Make sure you have included Picturefill version 2');
                    }
                }

                if (this.s.appendSubHtmlTo !== '.lg-sub-html') {
                    _this.addHtml(index);
                }

                _this.$slide.eq(index).addClass('lg-loaded');
            }

            _this.$slide.eq(index).find('.lg-object').on('load.lg error.lg', function () {

                // For first time add some delay for displaying the start animation.
                var _speed = 0;

                // Do not change the delay value because it is required for zoom plugin.
                // If gallery opened from direct url (hash) speed value should be 0
                if (delay && !$('body').hasClass('lg-from-hash')) {
                    _speed = delay;
                }

                setTimeout(function () {
                    _this.$slide.eq(index).addClass('lg-complete');
                    _this.$el.trigger('onSlideItemLoad.lg', [index, delay || 0]);
                }, _speed);
            });

            // @todo check load state for html5 videos
            if (_isVideo && _isVideo.html5 && !_hasPoster) {
                _this.$slide.eq(index).addClass('lg-complete');
            }

            if (rec === true) {
                if (!_this.$slide.eq(index).hasClass('lg-complete')) {
                    _this.$slide.eq(index).find('.lg-object').on('load.lg error.lg', function () {
                        _this.preload(index);
                    });
                } else {
                    _this.preload(index);
                }
            }

            //}
        };

        /**
        *   @desc slide function for lightgallery
            ** Slide() gets call on start
            ** ** Set lg.on true once slide() function gets called.
            ** Call loadContent() on slide() function inside setTimeout
            ** ** On first slide we do not want any animation like slide of fade
            ** ** So on first slide( if lg.on if false that is first slide) loadContent() should start loading immediately
            ** ** Else loadContent() should wait for the transition to complete.
            ** ** So set timeout s.speed + 50
        <=> ** loadContent() will load slide content in to the particular slide
            ** ** It has recursion (rec) parameter. if rec === true loadContent() will call preload() function.
            ** ** preload will execute only when the previous slide is fully loaded (images iframe)
            ** ** avoid simultaneous image load
        <=> ** Preload() will check for s.preload value and call loadContent() again accoring to preload value
            ** loadContent()  <====> Preload();
         *   @param {Number} index - index of the slide
        *   @param {Boolean} fromTouch - true if slide function called via touch event or mouse drag
        *   @param {Boolean} fromThumb - true if slide function called via thumbnail click
        *   @param {String} direction - Direction of the slide(next/prev)
        */
        Plugin.prototype.slide = function (index, fromTouch, fromThumb, direction) {

            var _prevIndex = this.$outer.find('.lg-current').index();
            var _this = this;

            // Prevent if multiple call
            // Required for hsh plugin
            if (_this.lGalleryOn && _prevIndex === index) {
                return;
            }

            var _length = this.$slide.length;
            var _time = _this.lGalleryOn ? this.s.speed : 0;

            if (!_this.lgBusy) {

                if (this.s.download) {
                    var _src;
                    if (_this.s.dynamic) {
                        _src = _this.s.dynamicEl[index].downloadUrl !== false && (_this.s.dynamicEl[index].downloadUrl || _this.s.dynamicEl[index].src);
                    } else {
                        _src = _this.$items.eq(index).attr('data-download-url') !== 'false' && (_this.$items.eq(index).attr('data-download-url') || _this.$items.eq(index).attr('href') || _this.$items.eq(index).attr('data-src'));
                    }

                    if (_src) {
                        $('#lg-download').attr('href', _src);
                        _this.$outer.removeClass('lg-hide-download');
                    } else {
                        _this.$outer.addClass('lg-hide-download');
                    }
                }

                this.$el.trigger('onBeforeSlide.lg', [_prevIndex, index, fromTouch, fromThumb]);

                _this.lgBusy = true;

                clearTimeout(_this.hideBartimeout);

                // Add title if this.s.appendSubHtmlTo === lg-sub-html
                if (this.s.appendSubHtmlTo === '.lg-sub-html') {

                    // wait for slide animation to complete
                    setTimeout(function () {
                        _this.addHtml(index);
                    }, _time);
                }

                this.arrowDisable(index);

                if (!direction) {
                    if (index < _prevIndex) {
                        direction = 'prev';
                    } else if (index > _prevIndex) {
                        direction = 'next';
                    }
                }

                if (!fromTouch) {

                    // remove all transitions
                    _this.$outer.addClass('lg-no-trans');

                    this.$slide.removeClass('lg-prev-slide lg-next-slide');

                    if (direction === 'prev') {

                        //prevslide
                        this.$slide.eq(index).addClass('lg-prev-slide');
                        this.$slide.eq(_prevIndex).addClass('lg-next-slide');
                    } else {

                        // next slide
                        this.$slide.eq(index).addClass('lg-next-slide');
                        this.$slide.eq(_prevIndex).addClass('lg-prev-slide');
                    }

                    // give 50 ms for browser to add/remove class
                    setTimeout(function () {
                        _this.$slide.removeClass('lg-current');

                        //_this.$slide.eq(_prevIndex).removeClass('lg-current');
                        _this.$slide.eq(index).addClass('lg-current');

                        // reset all transitions
                        _this.$outer.removeClass('lg-no-trans');
                    }, 50);
                } else {

                    this.$slide.removeClass('lg-prev-slide lg-current lg-next-slide');
                    var touchPrev;
                    var touchNext;
                    if (_length > 2) {
                        touchPrev = index - 1;
                        touchNext = index + 1;

                        if (index === 0 && _prevIndex === _length - 1) {

                            // next slide
                            touchNext = 0;
                            touchPrev = _length - 1;
                        } else if (index === _length - 1 && _prevIndex === 0) {

                            // prev slide
                            touchNext = 0;
                            touchPrev = _length - 1;
                        }
                    } else {
                        touchPrev = 0;
                        touchNext = 1;
                    }

                    if (direction === 'prev') {
                        _this.$slide.eq(touchNext).addClass('lg-next-slide');
                    } else {
                        _this.$slide.eq(touchPrev).addClass('lg-prev-slide');
                    }

                    _this.$slide.eq(index).addClass('lg-current');
                }

                if (_this.lGalleryOn) {
                    setTimeout(function () {
                        _this.loadContent(index, true, 0);
                    }, this.s.speed + 50);

                    setTimeout(function () {
                        _this.lgBusy = false;
                        _this.$el.trigger('onAfterSlide.lg', [_prevIndex, index, fromTouch, fromThumb]);
                    }, this.s.speed);
                } else {
                    _this.loadContent(index, true, _this.s.backdropDuration);

                    _this.lgBusy = false;
                    _this.$el.trigger('onAfterSlide.lg', [_prevIndex, index, fromTouch, fromThumb]);
                }

                _this.lGalleryOn = true;

                if (this.s.counter) {
                    $('#lg-counter-current').text(index + 1);
                }
            }
        };

        /**
         *  @desc Go to next slide
         *  @param {Boolean} fromTouch - true if slide function called via touch event
         */
        Plugin.prototype.goToNextSlide = function (fromTouch) {
            var _this = this;
            var _loop = _this.s.loop;
            if (fromTouch && _this.$slide.length < 3) {
                _loop = false;
            }

            if (!_this.lgBusy) {
                if (_this.index + 1 < _this.$slide.length) {
                    _this.index++;
                    _this.$el.trigger('onBeforeNextSlide.lg', [_this.index]);
                    _this.slide(_this.index, fromTouch, false, 'next');
                } else {
                    if (_loop) {
                        _this.index = 0;
                        _this.$el.trigger('onBeforeNextSlide.lg', [_this.index]);
                        _this.slide(_this.index, fromTouch, false, 'next');
                    } else if (_this.s.slideEndAnimatoin && !fromTouch) {
                        _this.$outer.addClass('lg-right-end');
                        setTimeout(function () {
                            _this.$outer.removeClass('lg-right-end');
                        }, 400);
                    }
                }
            }
        };

        /**
         *  @desc Go to previous slide
         *  @param {Boolean} fromTouch - true if slide function called via touch event
         */
        Plugin.prototype.goToPrevSlide = function (fromTouch) {
            var _this = this;
            var _loop = _this.s.loop;
            if (fromTouch && _this.$slide.length < 3) {
                _loop = false;
            }

            if (!_this.lgBusy) {
                if (_this.index > 0) {
                    _this.index--;
                    _this.$el.trigger('onBeforePrevSlide.lg', [_this.index, fromTouch]);
                    _this.slide(_this.index, fromTouch, false, 'prev');
                } else {
                    if (_loop) {
                        _this.index = _this.$items.length - 1;
                        _this.$el.trigger('onBeforePrevSlide.lg', [_this.index, fromTouch]);
                        _this.slide(_this.index, fromTouch, false, 'prev');
                    } else if (_this.s.slideEndAnimatoin && !fromTouch) {
                        _this.$outer.addClass('lg-left-end');
                        setTimeout(function () {
                            _this.$outer.removeClass('lg-left-end');
                        }, 400);
                    }
                }
            }
        };

        Plugin.prototype.keyPress = function () {
            var _this = this;
            if (this.$items.length > 1) {
                $(window).on('keyup.lg', function (e) {
                    if (_this.$items.length > 1) {
                        if (e.keyCode === 37) {
                            e.preventDefault();
                            _this.goToPrevSlide();
                        }

                        if (e.keyCode === 39) {
                            e.preventDefault();
                            _this.goToNextSlide();
                        }
                    }
                });
            }

            $(window).on('keydown.lg', function (e) {
                if (_this.s.escKey === true && e.keyCode === 27) {
                    e.preventDefault();
                    if (!_this.$outer.hasClass('lg-thumb-open')) {
                        _this.destroy();
                    } else {
                        _this.$outer.removeClass('lg-thumb-open');
                    }
                }
            });
        };

        Plugin.prototype.arrow = function () {
            var _this = this;
            this.$outer.find('.lg-prev').on('click.lg', function () {
                _this.goToPrevSlide();
            });

            this.$outer.find('.lg-next').on('click.lg', function () {
                _this.goToNextSlide();
            });
        };

        Plugin.prototype.arrowDisable = function (index) {

            // Disable arrows if s.hideControlOnEnd is true
            if (!this.s.loop && this.s.hideControlOnEnd) {
                if (index + 1 < this.$slide.length) {
                    this.$outer.find('.lg-next').removeAttr('disabled').removeClass('disabled');
                } else {
                    this.$outer.find('.lg-next').attr('disabled', 'disabled').addClass('disabled');
                }

                if (index > 0) {
                    this.$outer.find('.lg-prev').removeAttr('disabled').removeClass('disabled');
                } else {
                    this.$outer.find('.lg-prev').attr('disabled', 'disabled').addClass('disabled');
                }
            }
        };

        Plugin.prototype.setTranslate = function ($el, xValue, yValue) {
            // jQuery supports Automatic CSS prefixing since jQuery 1.8.0
            if (this.s.useLeft) {
                $el.css('left', xValue);
            } else {
                $el.css({
                    transform: 'translate3d(' + xValue + 'px, ' + yValue + 'px, 0px)'
                });
            }
        };

        Plugin.prototype.touchMove = function (startCoords, endCoords) {

            var distance = endCoords - startCoords;

            if (Math.abs(distance) > 15) {
                // reset opacity and transition duration
                this.$outer.addClass('lg-dragging');

                // move current slide
                this.setTranslate(this.$slide.eq(this.index), distance, 0);

                // move next and prev slide with current slide
                this.setTranslate($('.lg-prev-slide'), -this.$slide.eq(this.index).width() + distance, 0);
                this.setTranslate($('.lg-next-slide'), this.$slide.eq(this.index).width() + distance, 0);
            }
        };

        Plugin.prototype.touchEnd = function (distance) {
            var _this = this;

            // keep slide animation for any mode while dragg/swipe
            if (_this.s.mode !== 'lg-slide') {
                _this.$outer.addClass('lg-slide');
            }

            this.$slide.not('.lg-current, .lg-prev-slide, .lg-next-slide').css('opacity', '0');

            // set transition duration
            setTimeout(function () {
                _this.$outer.removeClass('lg-dragging');
                if (distance < 0 && Math.abs(distance) > _this.s.swipeThreshold) {
                    _this.goToNextSlide(true);
                } else if (distance > 0 && Math.abs(distance) > _this.s.swipeThreshold) {
                    _this.goToPrevSlide(true);
                } else if (Math.abs(distance) < 5) {

                    // Trigger click if distance is less than 5 pix
                    _this.$el.trigger('onSlideClick.lg');
                }

                _this.$slide.removeAttr('style');
            });

            // remove slide class once drag/swipe is completed if mode is not slide
            setTimeout(function () {
                if (!_this.$outer.hasClass('lg-dragging') && _this.s.mode !== 'lg-slide') {
                    _this.$outer.removeClass('lg-slide');
                }
            }, _this.s.speed + 100);
        };

        Plugin.prototype.enableSwipe = function () {
            var _this = this;
            var startCoords = 0;
            var endCoords = 0;
            var isMoved = false;

            if (_this.s.enableSwipe && _this.isTouch && _this.doCss()) {

                _this.$slide.on('touchstart.lg', function (e) {
                    if (!_this.$outer.hasClass('lg-zoomed') && !_this.lgBusy) {
                        e.preventDefault();
                        _this.manageSwipeClass();
                        startCoords = e.originalEvent.targetTouches[0].pageX;
                    }
                });

                _this.$slide.on('touchmove.lg', function (e) {
                    if (!_this.$outer.hasClass('lg-zoomed')) {
                        e.preventDefault();
                        endCoords = e.originalEvent.targetTouches[0].pageX;
                        _this.touchMove(startCoords, endCoords);
                        isMoved = true;
                    }
                });

                _this.$slide.on('touchend.lg', function () {
                    if (!_this.$outer.hasClass('lg-zoomed')) {
                        if (isMoved) {
                            isMoved = false;
                            _this.touchEnd(endCoords - startCoords);
                        } else {
                            _this.$el.trigger('onSlideClick.lg');
                        }
                    }
                });
            }
        };

        Plugin.prototype.enableDrag = function () {
            var _this = this;
            var startCoords = 0;
            var endCoords = 0;
            var isDraging = false;
            var isMoved = false;
            if (_this.s.enableDrag && !_this.isTouch && _this.doCss()) {
                _this.$slide.on('mousedown.lg', function (e) {
                    // execute only on .lg-object
                    if (!_this.$outer.hasClass('lg-zoomed')) {
                        if ($(e.target).hasClass('lg-object') || $(e.target).hasClass('lg-video-play')) {
                            e.preventDefault();

                            if (!_this.lgBusy) {
                                _this.manageSwipeClass();
                                startCoords = e.pageX;
                                isDraging = true;

                                // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723
                                _this.$outer.scrollLeft += 1;
                                _this.$outer.scrollLeft -= 1;

                                // *

                                _this.$outer.removeClass('lg-grab').addClass('lg-grabbing');

                                _this.$el.trigger('onDragstart.lg');
                            }
                        }
                    }
                });

                $(window).on('mousemove.lg', function (e) {
                    if (isDraging) {
                        isMoved = true;
                        endCoords = e.pageX;
                        _this.touchMove(startCoords, endCoords);
                        _this.$el.trigger('onDragmove.lg');
                    }
                });

                $(window).on('mouseup.lg', function (e) {
                    if (isMoved) {
                        isMoved = false;
                        _this.touchEnd(endCoords - startCoords);
                        _this.$el.trigger('onDragend.lg');
                    } else if ($(e.target).hasClass('lg-object') || $(e.target).hasClass('lg-video-play')) {
                        _this.$el.trigger('onSlideClick.lg');
                    }

                    // Prevent execution on click
                    if (isDraging) {
                        isDraging = false;
                        _this.$outer.removeClass('lg-grabbing').addClass('lg-grab');
                    }
                });
            }
        };

        Plugin.prototype.manageSwipeClass = function () {
            var _touchNext = this.index + 1;
            var _touchPrev = this.index - 1;
            if (this.s.loop && this.$slide.length > 2) {
                if (this.index === 0) {
                    _touchPrev = this.$slide.length - 1;
                } else if (this.index === this.$slide.length - 1) {
                    _touchNext = 0;
                }
            }

            this.$slide.removeClass('lg-next-slide lg-prev-slide');
            if (_touchPrev > -1) {
                this.$slide.eq(_touchPrev).addClass('lg-prev-slide');
            }

            this.$slide.eq(_touchNext).addClass('lg-next-slide');
        };

        Plugin.prototype.mousewheel = function () {
            var _this = this;
            _this.$outer.on('mousewheel.lg', function (e) {

                if (!e.deltaY) {
                    return;
                }

                if (e.deltaY > 0) {
                    _this.goToPrevSlide();
                } else {
                    _this.goToNextSlide();
                }

                e.preventDefault();
            });
        };

        Plugin.prototype.closeGallery = function () {

            var _this = this;
            var mousedown = false;
            this.$outer.find('.lg-close').on('click.lg', function () {
                _this.destroy();
            });

            if (_this.s.closable) {

                // If you drag the slide and release outside gallery gets close on chrome
                // for preventing this check mousedown and mouseup happened on .lg-item or lg-outer
                _this.$outer.on('mousedown.lg', function (e) {

                    if ($(e.target).is('.lg-outer') || $(e.target).is('.lg-item ') || $(e.target).is('.lg-img-wrap')) {
                        mousedown = true;
                    } else {
                        mousedown = false;
                    }
                });

                _this.$outer.on('mouseup.lg', function (e) {

                    if ($(e.target).is('.lg-outer') || $(e.target).is('.lg-item ') || $(e.target).is('.lg-img-wrap') && mousedown) {
                        if (!_this.$outer.hasClass('lg-dragging')) {
                            _this.destroy();
                        }
                    }
                });
            }
        };

        Plugin.prototype.destroy = function (d) {

            var _this = this;

            if (!d) {
                _this.$el.trigger('onBeforeClose.lg');
                $(window).scrollTop(_this.prevScrollTop);
            }

            /**
             * if d is false or undefined destroy will only close the gallery
             * plugins instance remains with the element
             *
             * if d is true destroy will completely remove the plugin
             */

            if (d) {
                if (!_this.s.dynamic) {
                    // only when not using dynamic mode is $items a jquery collection
                    this.$items.off('click.lg click.lgcustom');
                }

                $.removeData(_this.el, 'lightGallery');
            }

            // Unbind all events added by lightGallery
            this.$el.off('.lg.tm');

            // Distroy all lightGallery modules
            $.each($.fn.lightGallery.modules, function (key) {
                if (_this.modules[key]) {
                    _this.modules[key].destroy();
                }
            });

            this.lGalleryOn = false;

            clearTimeout(_this.hideBartimeout);
            this.hideBartimeout = false;
            $(window).off('.lg');
            $('body').removeClass('lg-on lg-from-hash');

            if (_this.$outer) {
                _this.$outer.removeClass('lg-visible');
            }

            $('.lg-backdrop').removeClass('in');

            setTimeout(function () {
                if (_this.$outer) {
                    _this.$outer.remove();
                }

                $('.lg-backdrop').remove();

                if (!d) {
                    _this.$el.trigger('onCloseAfter.lg');
                }
            }, _this.s.backdropDuration + 50);
        };

        $.fn.lightGallery = function (options) {
            return this.each(function () {
                if (!$.data(this, 'lightGallery')) {
                    $.data(this, 'lightGallery', new Plugin(this, options));
                } else {
                    try {
                        $(this).data('lightGallery').init();
                    } catch (err) {
                        console.error('lightGallery has not initiated properly');
                    }
                }
            });
        };

        $.fn.lightGallery.modules = {};
    })();
});
'use strict';

/*
  http://github.com/danpalmer/jquery.complexify.js

  This code is distributed under the WTFPL v2:
*/
(function ($) {

  $.fn.extend({
    complexify: function complexify(options, callback) {

      var MIN_COMPLEXITY = 49; // 12 chars with Upper, Lower and Number
      var MAX_COMPLEXITY = 120; //  25 chars, all charsets
      var CHARSETS = [
      // Commonly Used
      ////////////////////
      [0x0020, 0x0020], // Space
      [0x0030, 0x0039], // Numbers
      [0x0041, 0x005A], // Uppercase
      [0x0061, 0x007A], // Lowercase
      [0x0021, 0x002F], // Punctuation
      [0x003A, 0x0040], // Punctuation
      [0x005B, 0x0060], // Punctuation
      [0x007B, 0x007E], // Punctuation
      // Everything Else
      ////////////////////
      [0x0080, 0x00FF], // Latin-1 Supplement
      [0x0100, 0x017F], // Latin Extended-A
      [0x0180, 0x024F], // Latin Extended-B
      [0x0250, 0x02AF], // IPA Extensions
      [0x02B0, 0x02FF], // Spacing Modifier Letters
      [0x0300, 0x036F], // Combining Diacritical Marks
      [0x0370, 0x03FF], // Greek
      [0x0400, 0x04FF], // Cyrillic
      [0x0530, 0x058F], // Armenian
      [0x0590, 0x05FF], // Hebrew
      [0x0600, 0x06FF], // Arabic
      [0x0700, 0x074F], // Syriac
      [0x0780, 0x07BF], // Thaana
      [0x0900, 0x097F], // Devanagari
      [0x0980, 0x09FF], // Bengali
      [0x0A00, 0x0A7F], // Gurmukhi
      [0x0A80, 0x0AFF], // Gujarati
      [0x0B00, 0x0B7F], // Oriya
      [0x0B80, 0x0BFF], // Tamil
      [0x0C00, 0x0C7F], // Telugu
      [0x0C80, 0x0CFF], // Kannada
      [0x0D00, 0x0D7F], // Malayalam
      [0x0D80, 0x0DFF], // Sinhala
      [0x0E00, 0x0E7F], // Thai
      [0x0E80, 0x0EFF], // Lao
      [0x0F00, 0x0FFF], // Tibetan
      [0x1000, 0x109F], // Myanmar
      [0x10A0, 0x10FF], // Georgian
      [0x1100, 0x11FF], // Hangul Jamo
      [0x1200, 0x137F], // Ethiopic
      [0x13A0, 0x13FF], // Cherokee
      [0x1400, 0x167F], // Unified Canadian Aboriginal Syllabics
      [0x1680, 0x169F], // Ogham
      [0x16A0, 0x16FF], // Runic
      [0x1780, 0x17FF], // Khmer
      [0x1800, 0x18AF], // Mongolian
      [0x1E00, 0x1EFF], // Latin Extended Additional
      [0x1F00, 0x1FFF], // Greek Extended
      [0x2000, 0x206F], // General Punctuation
      [0x2070, 0x209F], // Superscripts and Subscripts
      [0x20A0, 0x20CF], // Currency Symbols
      [0x20D0, 0x20FF], // Combining Marks for Symbols
      [0x2100, 0x214F], // Letterlike Symbols
      [0x2150, 0x218F], // Number Forms
      [0x2190, 0x21FF], // Arrows
      [0x2200, 0x22FF], // Mathematical Operators
      [0x2300, 0x23FF], // Miscellaneous Technical
      [0x2400, 0x243F], // Control Pictures
      [0x2440, 0x245F], // Optical Character Recognition
      [0x2460, 0x24FF], // Enclosed Alphanumerics
      [0x2500, 0x257F], // Box Drawing
      [0x2580, 0x259F], // Block Elements
      [0x25A0, 0x25FF], // Geometric Shapes
      [0x2600, 0x26FF], // Miscellaneous Symbols
      [0x2700, 0x27BF], // Dingbats
      [0x2800, 0x28FF], // Braille Patterns
      [0x2E80, 0x2EFF], // CJK Radicals Supplement
      [0x2F00, 0x2FDF], // Kangxi Radicals
      [0x2FF0, 0x2FFF], // Ideographic Description Characters
      [0x3000, 0x303F], // CJK Symbols and Punctuation
      [0x3040, 0x309F], // Hiragana
      [0x30A0, 0x30FF], // Katakana
      [0x3100, 0x312F], // Bopomofo
      [0x3130, 0x318F], // Hangul Compatibility Jamo
      [0x3190, 0x319F], // Kanbun
      [0x31A0, 0x31BF], // Bopomofo Extended
      [0x3200, 0x32FF], // Enclosed CJK Letters and Months
      [0x3300, 0x33FF], // CJK Compatibility
      [0x3400, 0x4DB5], // CJK Unified Ideographs Extension A
      [0x4E00, 0x9FFF], // CJK Unified Ideographs
      [0xA000, 0xA48F], // Yi Syllables
      [0xA490, 0xA4CF], // Yi Radicals
      [0xAC00, 0xD7A3], // Hangul Syllables
      [0xD800, 0xDB7F], // High Surrogates
      [0xDB80, 0xDBFF], // High Private Use Surrogates
      [0xDC00, 0xDFFF], // Low Surrogates
      [0xE000, 0xF8FF], // Private Use
      [0xF900, 0xFAFF], // CJK Compatibility Ideographs
      [0xFB00, 0xFB4F], // Alphabetic Presentation Forms
      [0xFB50, 0xFDFF], // Arabic Presentation Forms-A
      [0xFE20, 0xFE2F], // Combining Half Marks
      [0xFE30, 0xFE4F], // CJK Compatibility Forms
      [0xFE50, 0xFE6F], // Small Form Variants
      [0xFE70, 0xFEFE], // Arabic Presentation Forms-B
      [0xFEFF, 0xFEFF], // Specials
      [0xFF00, 0xFFEF], // Halfwidth and Fullwidth Forms
      [0xFFF0, 0xFFFD] // Specials
      ];

      var defaults = {
        minimumChars: 8,
        strengthScaleFactor: 1,
        bannedPasswords: window.COMPLEXIFY_BANLIST || [],
        banMode: 'strict' // (strict|loose)
      };

      if ($.isFunction(options) && !callback) {
        callback = options;
        options = {};
      }

      options = $.extend(defaults, options);

      function additionalComplexityForCharset(str, charset) {
        for (var i = str.length - 1; i >= 0; i--) {
          if (charset[0] <= str.charCodeAt(i) && str.charCodeAt(i) <= charset[1]) {
            return charset[1] - charset[0] + 1;
          }
        }
        return 0;
      }

      function inBanlist(str) {
        if (options.banMode === 'strict') {
          for (var i = 0; i < options.bannedPasswords.length; i++) {
            if (str.toLowerCase().indexOf(options.bannedPasswords[i].toLowerCase()) !== -1) {
              return true;
            }
          }
          return false;
        } else {
          return $.inArray(str, options.bannedPasswords) > -1 ? true : false;
        }
      }

      function evaluateSecurity() {
        var password = $(this).val();
        var complexity = 0,
            valid = false;

        // Reset complexity to 0 when banned password is found
        if (!inBanlist(password)) {

          // Add character complexity
          for (var i = CHARSETS.length - 1; i >= 0; i--) {
            complexity += additionalComplexityForCharset(password, CHARSETS[i]);
          }
        } else {
          complexity = 1;
        }

        // Use natural log to produce linear scale
        complexity = Math.log(Math.pow(complexity, password.length)) * (1 / options.strengthScaleFactor);

        valid = complexity > MIN_COMPLEXITY && password.length >= options.minimumChars;

        // Scale to percentage, so it can be used for a progress bar
        complexity = complexity / MAX_COMPLEXITY * 100;
        complexity = complexity > 100 ? 100 : complexity;

        callback.call(this, valid, complexity);
      }

      this.each(function () {
        if ($(this).val()) {
          evaluateSecurity.apply(this);
        }
      });

      return this.each(function () {
        $(this).bind('keyup focus input propertychange mouseup', evaluateSecurity);
      });
    }
  });
})(jQuery);
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
* jQuery Password Strength plugin for Zurb Foundation
* 2015-10-05
*
* Copyright (c) 2008-2013 Tane Piper
* Copyright (c) 2013 Alejandro Blanco
* Copyright (c) 2014 Ed Townend
* Dual licensed under the MIT and GPL licenses.
*/

(function (jQuery) {
    // Source: src/rules.js


    var rulesEngine = {};

    try {
        if (!jQuery && module && module.exports) {
            var jQuery = require("jquery"),
                jsdom = require("jsdom").jsdom;
            jQuery = jQuery(jsdom().parentWindow);
        }
    } catch (ignore) {}

    (function ($, rulesEngine) {
        "use strict";

        var validation = {};

        rulesEngine.forbiddenSequences = ["0123456789", "abcdefghijklmnopqrstuvwxyz", "qwertyuiop", "asdfghjkl", "zxcvbnm", "!@#$%^&*()_+"];

        validation.wordNotEmail = function (options, word, score) {
            if (word.match(/^([\w\!\#$\%\&\'\*\+\-\/\=\?\^\`{\|\}\~]+\.)*[\w\!\#$\%\&\'\*\+\-\/\=\?\^\`{\|\}\~]+@((((([a-z0-9]{1}[a-z0-9\-]{0,62}[a-z0-9]{1})|[a-z])\.)+[a-z]{2,6})|(\d{1,3}\.){3}\d{1,3}(\:\d{1,5})?)$/i)) {
                return score;
            }
            return 0;
        };

        validation.wordLength = function (options, word, score) {
            var wordlen = word.length,
                lenScore = Math.pow(wordlen, options.rules.raisePower);
            if (wordlen < options.common.minChar) {
                lenScore = lenScore + score;
            }
            return lenScore;
        };

        validation.wordSimilarToUsername = function (options, word, score) {
            var username = $(options.common.usernameField).val();
            if (username && word.toLowerCase().match(username.replace(/[\-\[\]\/\{\}\(\)\*\+\=\?\:\.\\\^\$\|\!\,]/g, "\\$&").toLowerCase())) {
                return score;
            }
            return 0;
        };

        validation.wordTwoCharacterClasses = function (options, word, score) {
            if (word.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/) || word.match(/([a-zA-Z])/) && word.match(/([0-9])/) || word.match(/(.[!,@,#,$,%,\^,&,*,?,_,~])/) && word.match(/[a-zA-Z0-9_]/)) {
                return score;
            }
            return 0;
        };

        validation.wordRepetitions = function (options, word, score) {
            if (word.match(/(.)\1\1/)) {
                return score;
            }
            return 0;
        };

        validation.wordSequences = function (options, word, score) {
            var found = false,
                j;
            if (word.length > 2) {
                $.each(rulesEngine.forbiddenSequences, function (idx, seq) {
                    if (found) {
                        return;
                    }
                    var sequences = [seq, seq.split('').reverse().join('')];
                    $.each(sequences, function (idx, sequence) {
                        for (j = 0; j < word.length - 2; j += 1) {
                            // iterate the word trough a sliding window of size 3:
                            if (sequence.indexOf(word.toLowerCase().substring(j, j + 3)) > -1) {
                                found = true;
                            }
                        }
                    });
                });
                if (found) {
                    return score;
                }
            }
            return 0;
        };

        validation.wordLowercase = function (options, word, score) {
            return word.match(/[a-z]/) && score;
        };

        validation.wordUppercase = function (options, word, score) {
            return word.match(/[A-Z]/) && score;
        };

        validation.wordOneNumber = function (options, word, score) {
            return word.match(/\d+/) && score;
        };

        validation.wordThreeNumbers = function (options, word, score) {
            return word.match(/(.*[0-9].*[0-9].*[0-9])/) && score;
        };

        validation.wordOneSpecialChar = function (options, word, score) {
            return word.match(/[!,@,#,$,%,\^,&,*,?,_,~]/) && score;
        };

        validation.wordTwoSpecialChar = function (options, word, score) {
            return word.match(/(.*[!,@,#,$,%,\^,&,*,?,_,~].*[!,@,#,$,%,\^,&,*,?,_,~])/) && score;
        };

        validation.wordUpperLowerCombo = function (options, word, score) {
            return word.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/) && score;
        };

        validation.wordLetterNumberCombo = function (options, word, score) {
            return word.match(/([a-zA-Z])/) && word.match(/([0-9])/) && score;
        };

        validation.wordLetterNumberCharCombo = function (options, word, score) {
            return word.match(/([a-zA-Z0-9].*[!,@,#,$,%,\^,&,*,?,_,~])|([!,@,#,$,%,\^,&,*,?,_,~].*[a-zA-Z0-9])/) && score;
        };

        rulesEngine.validation = validation;

        rulesEngine.executeRules = function (options, word) {
            var totalScore = 0;

            $.each(options.rules.activated, function (rule, active) {
                if (active) {
                    var score = options.rules.scores[rule],
                        funct = rulesEngine.validation[rule],
                        result,
                        errorMessage;

                    if (!$.isFunction(funct)) {
                        funct = options.rules.extra[rule];
                    }

                    if ($.isFunction(funct)) {
                        result = funct(options, word, score);
                        if (result) {
                            totalScore += result;
                        }
                        if (result < 0 || !$.isNumeric(result) && !result) {
                            errorMessage = options.ui.spanError(options, rule);
                            if (errorMessage.length > 0) {
                                options.instances.errors.push(errorMessage);
                            }
                        }
                    }
                }
            });

            return totalScore;
        };
    })(jQuery, rulesEngine);

    try {
        if (module && module.exports) {
            module.exports = rulesEngine;
        }
    } catch (ignore) {}

    // Source: src/options.js


    var defaultOptions = {};

    defaultOptions.common = {};
    defaultOptions.common.minChar = 6;
    defaultOptions.common.usernameField = "#username";
    defaultOptions.common.userInputs = [
        // Selectors for input fields with user input
    ];
    defaultOptions.common.onLoad = undefined;
    defaultOptions.common.onKeyUp = undefined;
    defaultOptions.common.zxcvbn = false;
    defaultOptions.common.zxcvbnTerms = [
        // List of disrecommended words
    ];
    defaultOptions.common.debug = false;

    defaultOptions.rules = {};
    defaultOptions.rules.extra = {};
    defaultOptions.rules.scores = {
        wordNotEmail: -100,
        wordLength: -50,
        wordSimilarToUsername: -100,
        wordSequences: -20,
        wordTwoCharacterClasses: 2,
        wordRepetitions: -25,
        wordLowercase: 1,
        wordUppercase: 3,
        wordOneNumber: 3,
        wordThreeNumbers: 5,
        wordOneSpecialChar: 3,
        wordTwoSpecialChar: 5,
        wordUpperLowerCombo: 2,
        wordLetterNumberCombo: 2,
        wordLetterNumberCharCombo: 2
    };
    defaultOptions.rules.activated = {
        wordNotEmail: true,
        wordLength: true,
        wordSimilarToUsername: true,
        wordSequences: true,
        wordTwoCharacterClasses: false,
        wordRepetitions: false,
        wordLowercase: true,
        wordUppercase: true,
        wordOneNumber: true,
        wordThreeNumbers: true,
        wordOneSpecialChar: true,
        wordTwoSpecialChar: true,
        wordUpperLowerCombo: true,
        wordLetterNumberCombo: true,
        wordLetterNumberCharCombo: true
    };
    defaultOptions.rules.raisePower = 1.4;

    defaultOptions.ui = {};
    defaultOptions.ui.colorClasses = ["alert", "warning", "success"];
    defaultOptions.ui.showProgressBar = true;
    defaultOptions.ui.showPopover = false;
    defaultOptions.ui.popoverPlacement = "bottom";
    defaultOptions.ui.showStatus = false;
    defaultOptions.ui.spanError = function (options, key) {
        "use strict";

        var text = options.ui.errorMessages[key];
        if (!text) {
            return '';
        }
        return text;
    };
    defaultOptions.ui.popoverError = function (errors) {
        "use strict";

        var message = "<div>Errors:<ul class='error-list' style='margin-bottom: 0;'>";

        jQuery.each(errors, function (idx, err) {
            message += "<li>" + err + "</li>";
        });
        message += "</ul></div>";
        return message;
    };
    defaultOptions.ui.errorMessages = {
        wordLength: "Your password is too short",
        wordNotEmail: "Do not use your email as your password",
        wordSimilarToUsername: "Your password cannot contain your username",
        wordTwoCharacterClasses: "Use different character classes",
        wordRepetitions: "Too many repetitions",
        wordSequences: "Your password contains sequences"
    };
    defaultOptions.ui.verdicts = ["Weak", "Normal", "Medium", "Strong", "Very Strong"];
    defaultOptions.ui.showVerdicts = true;
    defaultOptions.ui.showVerdictsInsideProgressBar = false;
    defaultOptions.ui.useVerdictCssClass = false;
    defaultOptions.ui.showErrors = false;
    defaultOptions.ui.container = undefined;
    defaultOptions.ui.viewports = {
        progress: undefined,
        verdict: ".postfix",
        errors: undefined
    };
    defaultOptions.ui.scores = [14, 26, 38, 50];

    // Source: src/ui.js


    var ui = {};

    (function ($, ui) {
        "use strict";

        var statusClasses = ["error", "warning", "success"];

        ui.getContainer = function (options, $el) {
            var $container;

            // try to detirmine right scope be searching upwards
            $container = $el.parents(options.ui.container);
            if (!($container && $container.length === 1)) {
                $container = $el.parent();
            }
            return $container;
        };

        ui.findElement = function ($container, viewport, cssSelector) {
            if (viewport) {
                return $container.find(viewport).find(cssSelector);
            }
            return $container.find(cssSelector);
        };

        ui.getUIElements = function (options, $el) {
            var $container, result;

            if (options.instances.viewports) {
                return options.instances.viewports;
            }

            $container = ui.getContainer(options, $el);

            result = {};
            result.$progressbar = ui.findElement($container, options.ui.viewports.progress, "div.progress");
            if (options.ui.showVerdictsInsideProgressBar) {
                result.$verdict = result.$progressbar.find("span.progress-meter-text");
            }

            if (!options.ui.showPopover) {
                if (!options.ui.showVerdictsInsideProgressBar) {
                    result.$verdict = ui.findElement($container, options.ui.viewports.verdict, "span.progress-meter-text");
                }
                result.$errors = ui.findElement($container, options.ui.viewports.errors, "span.error");
            }

            options.instances.viewports = result;
            return result;
        };

        ui.initProgressBar = function (options, $el) {
            var $container = ui.getContainer(options, $el),
                progressbar = "<div class='progress'><div class='progress-meter' style='width:0%'>";
            if (options.ui.showVerdictsInsideProgressBar) {
                progressbar += "<span class='progress-meter-text'></span>";
            }
            progressbar += "</div></div>";

            if (options.ui.viewports.progress) {
                $container.find(options.ui.viewports.progress).append(progressbar);
            } else {
                $(progressbar).insertAfter($el);
            }
        };

        ui.initHelper = function (options, $el, html, viewport) {
            var $container = ui.getContainer(options, $el);
            if (viewport) {
                $container.find(viewport).append(html);
            } else {
                $(html).insertAfter($el);
            }
        };

        ui.initVerdict = function (options, $el) {
            ui.initHelper(options, $el, "<span class='password-verdict'></span>", options.ui.viewports.verdict);
        };

        ui.initErrorList = function (options, $el) {
            var $container = ui.getContainer(options, $el);
            if (!ui.findElement($container, options.ui.viewports.errors, 'span.error').length) {
                ui.initHelper(options, $el, "<span class='error' style='display:none;'></span>", options.ui.viewports.errors);
            }
        };

        ui.initPopover = function (options, $el) {
            // Support foundation tooltips?
            return false;
        };

        ui.initUI = function (options, $el) {
            if (options.ui.showPopover) {
                ui.initPopover(options, $el);
            } else {
                if (options.ui.showErrors) {
                    ui.initErrorList(options, $el);
                }
                if (options.ui.showVerdicts && !options.ui.showVerdictsInsideProgressBar) {
                    ui.initVerdict(options, $el);
                }
            }
            if (options.ui.showProgressBar) {
                ui.initProgressBar(options, $el);
            }
        };

        ui.possibleProgressBarClasses = ["alert", "warning", "success"];

        ui.updateProgressBar = function (options, $el, cssClass, percentage) {
            var $progressbar = ui.getUIElements(options, $el).$progressbar,
                $bar = $progressbar.find(".progress-meter");

            $.each(options.ui.colorClasses, function (idx, value) {
                $progressbar.removeClass(value);
            });
            $progressbar.addClass(options.ui.colorClasses[cssClass]);
            $bar.css("width", percentage + '%');
        };

        ui.updateVerdict = function (options, $el, cssClass, text) {
            var $verdict = ui.getUIElements(options, $el).$verdict;
            $verdict.removeClass(options.ui.colorClasses.join(' '));
            if (cssClass > -1) {
                $verdict.addClass(options.ui.colorClasses[cssClass]);
            }
            $verdict.html(text);
        };

        ui.updateErrors = function (options, $el) {
            var $container = ui.getContainer(options, $el),
                $errors = ui.getUIElements(options, $el).$errors,
                html = "";
            $.each(options.instances.errors, function (idx, err) {
                html += err + " ";
            });

            if (html !== "") {
                $container.addClass('error');
                $errors.show();
            } else {
                $container.removeClass('error');
                $errors.hide();
            }

            $errors.html(html);
        };

        ui.updatePopover = function (options, $el, verdictText) {
            var popover = $el.data("bs.popover"),
                html = "",
                hide = true;

            if (options.ui.showVerdicts && !options.ui.showVerdictsInsideProgressBar && verdictText.length > 0) {
                html = "<h5><span class='password-verdict'>" + verdictText + "</span></h5>";
                hide = false;
            }
            if (options.ui.showErrors) {
                if (options.instances.errors.length > 0) {
                    hide = false;
                }
                html += options.ui.popoverError(options.instances.errors);
            }

            if (hide) {
                $el.popover("hide");
                return;
            }

            if (popover.$arrow && popover.$arrow.parents("body").length > 0) {
                $el.find("+ .popover .popover-content").html(html);
            } else {
                // It's hidden
                popover.options.content = html;
                $el.popover("show");
            }
        };

        ui.updateFieldStatus = function (options, $el, cssClass) {
            var targetClass = ".postfix",
                $container = $el.parents(targetClass).first();

            $.each(statusClasses, function (idx, css) {
                $container.removeClass(css);
            });

            cssClass = statusClasses[cssClass];
            $container.addClass(cssClass);
        };

        ui.percentage = function (score, maximun) {
            var result = Math.floor(100 * score / maximun);
            result = result <= 0 ? 1 : result; // Don't show the progress bar empty
            result = result > 100 ? 100 : result;
            return result;
        };

        ui.getVerdictAndCssClass = function (options, score) {
            var cssClass, verdictText, level;

            if (score <= 0) {
                cssClass = 0;
                level = -1;
                verdictText = options.ui.verdicts[0];
            } else if (score < options.ui.scores[0]) {
                cssClass = 0;
                level = 0;
                verdictText = options.ui.verdicts[0];
            } else if (score < options.ui.scores[1]) {
                cssClass = 0;
                level = 1;
                verdictText = options.ui.verdicts[1];
            } else if (score < options.ui.scores[2]) {
                cssClass = 1;
                level = 2;
                verdictText = options.ui.verdicts[2];
            } else if (score < options.ui.scores[3]) {
                cssClass = 1;
                level = 3;
                verdictText = options.ui.verdicts[3];
            } else {
                cssClass = 2;
                level = 4;
                verdictText = options.ui.verdicts[4];
            }

            return [verdictText, cssClass, level];
        };

        ui.updateUI = function (options, $el, score) {
            var cssClass, barPercentage, verdictText, verdictCssClass;

            cssClass = ui.getVerdictAndCssClass(options, score);
            verdictText = score === 0 ? '' : cssClass[0];
            cssClass = cssClass[1];
            verdictCssClass = options.ui.useVerdictCssClass ? cssClass : -1;

            if (options.ui.showProgressBar) {
                barPercentage = ui.percentage(score, options.ui.scores[3]);
                ui.updateProgressBar(options, $el, cssClass, barPercentage);
                if (options.ui.showVerdictsInsideProgressBar) {
                    ui.updateVerdict(options, $el, verdictCssClass, verdictText);
                }
            }

            if (options.ui.showStatus) {
                ui.updateFieldStatus(options, $el, cssClass);
            }

            if (options.ui.showPopover) {
                ui.updatePopover(options, $el, verdictText);
            } else {
                if (options.ui.showVerdicts && !options.ui.showVerdictsInsideProgressBar) {
                    ui.updateVerdict(options, $el, verdictCssClass, verdictText);
                }
                if (options.ui.showErrors) {
                    ui.updateErrors(options, $el);
                }
            }
        };
    })(jQuery, ui);

    // Source: src/methods.js


    var methods = {};

    (function ($, methods) {
        "use strict";

        var onKeyUp, applyToAll;

        onKeyUp = function onKeyUp(event) {
            var $el = $(event.target),
                options = $el.data("pwstrength-foundation"),
                word = $el.val(),
                userInputs,
                verdictText,
                verdictLevel,
                score;

            if (options === undefined) {
                return;
            }

            options.instances.errors = [];
            if (word.length === 0) {
                score = 0;
            } else {
                if (options.common.zxcvbn) {
                    userInputs = [];
                    $.each(options.common.userInputs.concat([options.common.usernameField]), function (idx, selector) {
                        var value = $(selector).val();
                        if (value) {
                            userInputs.push(value);
                        }
                    });
                    userInputs = userInputs.concat(options.common.zxcvbnTerms);
                    score = zxcvbn(word, userInputs).entropy;
                } else {
                    score = rulesEngine.executeRules(options, word);
                }
            }
            ui.updateUI(options, $el, score);
            verdictText = ui.getVerdictAndCssClass(options, score);
            verdictLevel = verdictText[2];
            verdictText = verdictText[0];

            if (options.common.debug) {
                console.log(score + ' - ' + verdictText);
            }

            if ($.isFunction(options.common.onKeyUp)) {
                options.common.onKeyUp(event, {
                    score: score,
                    verdictText: verdictText,
                    verdictLevel: verdictLevel
                });
            }
        };

        methods.init = function (settings) {
            this.each(function (idx, el) {
                // Make it deep extend (first param) so it extends too the
                // rules and other inside objects
                var clonedDefaults = $.extend(true, {}, defaultOptions),
                    localOptions = $.extend(true, clonedDefaults, settings),
                    $el = $(el);

                localOptions.instances = {};
                $el.data("pwstrength-foundation", localOptions);
                $el.on("keyup", onKeyUp);
                $el.on("change", onKeyUp);
                $el.on("onpaste", onKeyUp);

                ui.initUI(localOptions, $el);
                if ($.trim($el.val())) {
                    // Not empty, calculate the strength
                    $el.trigger("keyup");
                }

                if ($.isFunction(localOptions.common.onLoad)) {
                    localOptions.common.onLoad();
                }
            });

            return this;
        };

        methods.destroy = function () {
            this.each(function (idx, el) {
                var $el = $(el),
                    options = $el.data("pwstrength-foundation"),
                    elements = ui.getUIElements(options, $el);
                elements.$progressbar.remove();
                elements.$verdict.remove();
                elements.$errors.remove();
                $el.removeData("pwstrength-foundation");
            });
        };

        methods.forceUpdate = function () {
            this.each(function (idx, el) {
                var event = { target: el };
                onKeyUp(event);
            });
        };

        methods.addRule = function (name, method, score, active) {
            this.each(function (idx, el) {
                var options = $(el).data("pwstrength-foundation");

                options.rules.activated[name] = active;
                options.rules.scores[name] = score;
                options.rules.extra[name] = method;
            });
        };

        applyToAll = function applyToAll(rule, prop, value) {
            this.each(function (idx, el) {
                $(el).data("pwstrength-foundation").rules[prop][rule] = value;
            });
        };

        methods.changeScore = function (rule, score) {
            applyToAll.call(this, rule, "scores", score);
        };

        methods.ruleActive = function (rule, active) {
            applyToAll.call(this, rule, "activated", active);
        };

        $.fn.pwstrength = function (method) {
            var result;

            if (methods[method]) {
                result = methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
            } else if ((typeof method === "undefined" ? "undefined" : _typeof(method)) === "object" || !method) {
                result = methods.init.apply(this, arguments);
            } else {
                $.error("Method " + method + " does not exist on jQuery.pwstrength-foundation");
            }

            return result;
        };
    })(jQuery, methods);
})(jQuery);
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvdW5kYXRpb24uY29yZS5qcyIsImZvdW5kYXRpb24udXRpbC5ib3guanMiLCJmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmQuanMiLCJmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeS5qcyIsImZvdW5kYXRpb24udXRpbC5tb3Rpb24uanMiLCJmb3VuZGF0aW9uLnV0aWwubmVzdC5qcyIsImZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyLmpzIiwiZm91bmRhdGlvbi51dGlsLnRvdWNoLmpzIiwiZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzLmpzIiwiZm91bmRhdGlvbi5hYmlkZS5qcyIsImZvdW5kYXRpb24uYWNjb3JkaW9uLmpzIiwiZm91bmRhdGlvbi5hY2NvcmRpb25NZW51LmpzIiwiZm91bmRhdGlvbi5lcXVhbGl6ZXIuanMiLCJmb3VuZGF0aW9uLmludGVyY2hhbmdlLmpzIiwiZm91bmRhdGlvbi5tYWdlbGxhbi5qcyIsImZvdW5kYXRpb24ub2ZmY2FudmFzLmpzIiwiZm91bmRhdGlvbi5yZXNwb25zaXZlTWVudS5qcyIsImZvdW5kYXRpb24ucmVzcG9uc2l2ZVRvZ2dsZS5qcyIsImZvdW5kYXRpb24ucmV2ZWFsLmpzIiwiZm91bmRhdGlvbi5zdGlja3kuanMiLCJmb3VuZGF0aW9uLnRhYnMuanMiLCJmb3VuZGF0aW9uLnRvZ2dsZXIuanMiLCJmb3VuZGF0aW9uLnpmLnJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLmpzIiwianF1ZXJ5LmNvb2tpZS5qcyIsImpxdWVyeS5jb29raWVCYXIuanMiLCJqcXVlcnkucmF0eS1mYS5qcyIsIm93bC5jYXJvdXNlbC5qcyIsIm93bC5hbmltYXRlLmpzIiwib3dsLmF1dG9oZWlnaHQuanMiLCJvd2wuYXV0b3BsYXkuanMiLCJvd2wuYXV0b3JlZnJlc2guanMiLCJvd2wuaGFzaC5qcyIsIm93bC5sYXp5bG9hZC5qcyIsIm93bC5uYXZpZ2F0aW9uLmpzIiwib3dsLnN1cHBvcnQuanMiLCJvd2wudmlkZW8uanMiLCJqcXVlcnkubW91c2V3aGVlbC5qcyIsImxpZ2h0Z2FsbGVyeS5qcyIsImpxdWVyeS5jb21wbGV4aWZ5LmpzIiwicHdzdHJlbmd0aC1mb3VuZGF0aW9uLmpzIl0sIm5hbWVzIjpbIiQiLCJGT1VOREFUSU9OX1ZFUlNJT04iLCJGb3VuZGF0aW9uIiwidmVyc2lvbiIsIl9wbHVnaW5zIiwiX3V1aWRzIiwicnRsIiwiYXR0ciIsInBsdWdpbiIsIm5hbWUiLCJjbGFzc05hbWUiLCJmdW5jdGlvbk5hbWUiLCJhdHRyTmFtZSIsImh5cGhlbmF0ZSIsInJlZ2lzdGVyUGx1Z2luIiwicGx1Z2luTmFtZSIsImNvbnN0cnVjdG9yIiwidG9Mb3dlckNhc2UiLCJ1dWlkIiwiR2V0WW9EaWdpdHMiLCIkZWxlbWVudCIsImRhdGEiLCJ0cmlnZ2VyIiwicHVzaCIsInVucmVnaXN0ZXJQbHVnaW4iLCJzcGxpY2UiLCJpbmRleE9mIiwicmVtb3ZlQXR0ciIsInJlbW92ZURhdGEiLCJwcm9wIiwicmVJbml0IiwicGx1Z2lucyIsImlzSlEiLCJlYWNoIiwiX2luaXQiLCJ0eXBlIiwiX3RoaXMiLCJmbnMiLCJwbGdzIiwiZm9yRWFjaCIsInAiLCJmb3VuZGF0aW9uIiwiT2JqZWN0Iiwia2V5cyIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImxlbmd0aCIsIm5hbWVzcGFjZSIsIk1hdGgiLCJyb3VuZCIsInBvdyIsInJhbmRvbSIsInRvU3RyaW5nIiwic2xpY2UiLCJyZWZsb3ciLCJlbGVtIiwiaSIsIiRlbGVtIiwiZmluZCIsImFkZEJhY2siLCIkZWwiLCJvcHRzIiwid2FybiIsInRoaW5nIiwic3BsaXQiLCJlIiwib3B0IiwibWFwIiwiZWwiLCJ0cmltIiwicGFyc2VWYWx1ZSIsImVyIiwiZ2V0Rm5OYW1lIiwidHJhbnNpdGlvbmVuZCIsInRyYW5zaXRpb25zIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZW5kIiwidCIsInN0eWxlIiwic2V0VGltZW91dCIsInRyaWdnZXJIYW5kbGVyIiwidXRpbCIsInRocm90dGxlIiwiZnVuYyIsImRlbGF5IiwidGltZXIiLCJjb250ZXh0IiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwibWV0aG9kIiwiJG1ldGEiLCIkbm9KUyIsImFwcGVuZFRvIiwiaGVhZCIsInJlbW92ZUNsYXNzIiwiTWVkaWFRdWVyeSIsIkFycmF5IiwicHJvdG90eXBlIiwiY2FsbCIsInBsdWdDbGFzcyIsInVuZGVmaW5lZCIsIlJlZmVyZW5jZUVycm9yIiwiVHlwZUVycm9yIiwid2luZG93IiwiZm4iLCJEYXRlIiwibm93IiwiZ2V0VGltZSIsInZlbmRvcnMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ2cCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImxhc3RUaW1lIiwiY2FsbGJhY2siLCJuZXh0VGltZSIsIm1heCIsImNsZWFyVGltZW91dCIsInBlcmZvcm1hbmNlIiwic3RhcnQiLCJGdW5jdGlvbiIsImJpbmQiLCJvVGhpcyIsImFBcmdzIiwiZlRvQmluZCIsImZOT1AiLCJmQm91bmQiLCJjb25jYXQiLCJmdW5jTmFtZVJlZ2V4IiwicmVzdWx0cyIsImV4ZWMiLCJzdHIiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJyZXBsYWNlIiwialF1ZXJ5IiwiQm94IiwiSW1Ob3RUb3VjaGluZ1lvdSIsIkdldERpbWVuc2lvbnMiLCJHZXRPZmZzZXRzIiwiZWxlbWVudCIsInBhcmVudCIsImxyT25seSIsInRiT25seSIsImVsZURpbXMiLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJwYXJEaW1zIiwib2Zmc2V0IiwiaGVpZ2h0Iiwid2lkdGgiLCJ3aW5kb3dEaW1zIiwiYWxsRGlycyIsIkVycm9yIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInBhclJlY3QiLCJwYXJlbnROb2RlIiwid2luUmVjdCIsImJvZHkiLCJ3aW5ZIiwicGFnZVlPZmZzZXQiLCJ3aW5YIiwicGFnZVhPZmZzZXQiLCJwYXJlbnREaW1zIiwiYW5jaG9yIiwicG9zaXRpb24iLCJ2T2Zmc2V0IiwiaE9mZnNldCIsImlzT3ZlcmZsb3ciLCIkZWxlRGltcyIsIiRhbmNob3JEaW1zIiwia2V5Q29kZXMiLCJjb21tYW5kcyIsIktleWJvYXJkIiwiZ2V0S2V5Q29kZXMiLCJwYXJzZUtleSIsImV2ZW50Iiwia2V5Iiwid2hpY2giLCJrZXlDb2RlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwidG9VcHBlckNhc2UiLCJzaGlmdEtleSIsImN0cmxLZXkiLCJhbHRLZXkiLCJoYW5kbGVLZXkiLCJjb21wb25lbnQiLCJmdW5jdGlvbnMiLCJjb21tYW5kTGlzdCIsImNtZHMiLCJjb21tYW5kIiwibHRyIiwiZXh0ZW5kIiwicmV0dXJuVmFsdWUiLCJoYW5kbGVkIiwidW5oYW5kbGVkIiwiZmluZEZvY3VzYWJsZSIsImZpbHRlciIsImlzIiwicmVnaXN0ZXIiLCJjb21wb25lbnROYW1lIiwidHJhcEZvY3VzIiwiJGZvY3VzYWJsZSIsIiRmaXJzdEZvY3VzYWJsZSIsImVxIiwiJGxhc3RGb2N1c2FibGUiLCJvbiIsInRhcmdldCIsInByZXZlbnREZWZhdWx0IiwiZm9jdXMiLCJyZWxlYXNlRm9jdXMiLCJvZmYiLCJrY3MiLCJrIiwia2MiLCJkZWZhdWx0UXVlcmllcyIsImxhbmRzY2FwZSIsInBvcnRyYWl0IiwicmV0aW5hIiwicXVlcmllcyIsImN1cnJlbnQiLCJzZWxmIiwiZXh0cmFjdGVkU3R5bGVzIiwiY3NzIiwibmFtZWRRdWVyaWVzIiwicGFyc2VTdHlsZVRvT2JqZWN0IiwiaGFzT3duUHJvcGVydHkiLCJ2YWx1ZSIsIl9nZXRDdXJyZW50U2l6ZSIsIl93YXRjaGVyIiwiYXRMZWFzdCIsInNpemUiLCJxdWVyeSIsImdldCIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwibWF0Y2hlZCIsIm5ld1NpemUiLCJjdXJyZW50U2l6ZSIsInN0eWxlTWVkaWEiLCJtZWRpYSIsInNjcmlwdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5mbyIsImlkIiwiaW5zZXJ0QmVmb3JlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImN1cnJlbnRTdHlsZSIsIm1hdGNoTWVkaXVtIiwidGV4dCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwidGV4dENvbnRlbnQiLCJzdHlsZU9iamVjdCIsInJlZHVjZSIsInJldCIsInBhcmFtIiwicGFydHMiLCJ2YWwiLCJkZWNvZGVVUklDb21wb25lbnQiLCJpc0FycmF5IiwiaW5pdENsYXNzZXMiLCJhY3RpdmVDbGFzc2VzIiwiTW90aW9uIiwiYW5pbWF0ZUluIiwiYW5pbWF0aW9uIiwiY2IiLCJhbmltYXRlIiwiYW5pbWF0ZU91dCIsIk1vdmUiLCJkdXJhdGlvbiIsImFuaW0iLCJwcm9nIiwibW92ZSIsInRzIiwiaXNJbiIsImluaXRDbGFzcyIsImFjdGl2ZUNsYXNzIiwicmVzZXQiLCJhZGRDbGFzcyIsInNob3ciLCJvZmZzZXRXaWR0aCIsIm9uZSIsImZpbmlzaCIsImhpZGUiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJOZXN0IiwiRmVhdGhlciIsIm1lbnUiLCJpdGVtcyIsInN1Yk1lbnVDbGFzcyIsInN1Ykl0ZW1DbGFzcyIsImhhc1N1YkNsYXNzIiwiYXBwbHlBcmlhIiwiJGl0ZW0iLCIkc3ViIiwiY2hpbGRyZW4iLCJCdXJuIiwiVGltZXIiLCJvcHRpb25zIiwibmFtZVNwYWNlIiwicmVtYWluIiwiaXNQYXVzZWQiLCJyZXN0YXJ0IiwiaW5maW5pdGUiLCJwYXVzZSIsIm9uSW1hZ2VzTG9hZGVkIiwiaW1hZ2VzIiwidW5sb2FkZWQiLCJjb21wbGV0ZSIsInJlYWR5U3RhdGUiLCJzaW5nbGVJbWFnZUxvYWRlZCIsInNyYyIsInNwb3RTd2lwZSIsImVuYWJsZWQiLCJkb2N1bWVudEVsZW1lbnQiLCJtb3ZlVGhyZXNob2xkIiwidGltZVRocmVzaG9sZCIsInN0YXJ0UG9zWCIsInN0YXJ0UG9zWSIsInN0YXJ0VGltZSIsImVsYXBzZWRUaW1lIiwiaXNNb3ZpbmciLCJvblRvdWNoRW5kIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm9uVG91Y2hNb3ZlIiwieCIsInRvdWNoZXMiLCJwYWdlWCIsInkiLCJwYWdlWSIsImR4IiwiZHkiLCJkaXIiLCJhYnMiLCJvblRvdWNoU3RhcnQiLCJhZGRFdmVudExpc3RlbmVyIiwiaW5pdCIsInRlYXJkb3duIiwic3BlY2lhbCIsInN3aXBlIiwic2V0dXAiLCJub29wIiwiYWRkVG91Y2giLCJoYW5kbGVUb3VjaCIsImNoYW5nZWRUb3VjaGVzIiwiZmlyc3QiLCJldmVudFR5cGVzIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwic2ltdWxhdGVkRXZlbnQiLCJNb3VzZUV2ZW50Iiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsImNyZWF0ZUV2ZW50IiwiaW5pdE1vdXNlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTXV0YXRpb25PYnNlcnZlciIsInByZWZpeGVzIiwidHJpZ2dlcnMiLCJzdG9wUHJvcGFnYXRpb24iLCJmYWRlT3V0IiwiY2hlY2tMaXN0ZW5lcnMiLCJldmVudHNMaXN0ZW5lciIsInJlc2l6ZUxpc3RlbmVyIiwic2Nyb2xsTGlzdGVuZXIiLCJjbG9zZW1lTGlzdGVuZXIiLCJ5ZXRpQm94ZXMiLCJwbHVnTmFtZXMiLCJsaXN0ZW5lcnMiLCJqb2luIiwicGx1Z2luSWQiLCJub3QiLCJkZWJvdW5jZSIsIiRub2RlcyIsIm5vZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24iLCJtdXRhdGlvblJlY29yZHNMaXN0IiwiJHRhcmdldCIsImF0dHJpYnV0ZU5hbWUiLCJjbG9zZXN0IiwiZWxlbWVudE9ic2VydmVyIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwic3VidHJlZSIsImF0dHJpYnV0ZUZpbHRlciIsIklIZWFyWW91IiwiQWJpZGUiLCJkZWZhdWx0cyIsIiRpbnB1dHMiLCJfZXZlbnRzIiwicmVzZXRGb3JtIiwidmFsaWRhdGVGb3JtIiwidmFsaWRhdGVPbiIsInZhbGlkYXRlSW5wdXQiLCJsaXZlVmFsaWRhdGUiLCJ2YWxpZGF0ZU9uQmx1ciIsImlzR29vZCIsImNoZWNrZWQiLCIkZXJyb3IiLCJzaWJsaW5ncyIsImZvcm1FcnJvclNlbGVjdG9yIiwiYWRkIiwiJGxhYmVsIiwiJGVscyIsImxhYmVscyIsImZpbmRMYWJlbCIsIiRmb3JtRXJyb3IiLCJmaW5kRm9ybUVycm9yIiwibGFiZWxFcnJvckNsYXNzIiwiZm9ybUVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJncm91cE5hbWUiLCIkbGFiZWxzIiwiZmluZFJhZGlvTGFiZWxzIiwiJGZvcm1FcnJvcnMiLCJyZW1vdmVSYWRpb0Vycm9yQ2xhc3NlcyIsImNsZWFyUmVxdWlyZSIsInJlcXVpcmVkQ2hlY2siLCJ2YWxpZGF0ZWQiLCJjdXN0b21WYWxpZGF0b3IiLCJ2YWxpZGF0b3IiLCJlcXVhbFRvIiwidmFsaWRhdGVSYWRpbyIsInZhbGlkYXRlVGV4dCIsIm1hdGNoVmFsaWRhdGlvbiIsInZhbGlkYXRvcnMiLCJnb29kVG9HbyIsIm1lc3NhZ2UiLCJkZXBlbmRlbnRFbGVtZW50cyIsImFjYyIsIm5vRXJyb3IiLCJwYXR0ZXJuIiwiaW5wdXRUZXh0IiwidmFsaWQiLCJwYXR0ZXJucyIsIlJlZ0V4cCIsIiRncm91cCIsInJlcXVpcmVkIiwiY2xlYXIiLCJ2IiwiJGZvcm0iLCJyZW1vdmVFcnJvckNsYXNzZXMiLCJhbHBoYSIsImFscGhhX251bWVyaWMiLCJpbnRlZ2VyIiwibnVtYmVyIiwiY2FyZCIsImN2diIsImVtYWlsIiwidXJsIiwiZG9tYWluIiwiZGF0ZXRpbWUiLCJkYXRlIiwidGltZSIsImRhdGVJU08iLCJtb250aF9kYXlfeWVhciIsImRheV9tb250aF95ZWFyIiwiY29sb3IiLCJBY2NvcmRpb24iLCIkdGFicyIsImlkeCIsIiRjb250ZW50IiwibGlua0lkIiwiJGluaXRBY3RpdmUiLCJmaXJzdFRpbWVJbml0IiwiZG93biIsIl9jaGVja0RlZXBMaW5rIiwibG9jYXRpb24iLCJoYXNoIiwiJGxpbmsiLCIkYW5jaG9yIiwiaGFzQ2xhc3MiLCJkZWVwTGlua1NtdWRnZSIsImxvYWQiLCJzY3JvbGxUb3AiLCJkZWVwTGlua1NtdWRnZURlbGF5IiwiZGVlcExpbmsiLCIkdGFiQ29udGVudCIsInRvZ2dsZSIsIm5leHQiLCIkYSIsIm11bHRpRXhwYW5kIiwicHJldmlvdXMiLCJwcmV2IiwidXAiLCJ1cGRhdGVIaXN0b3J5IiwiaGlzdG9yeSIsInB1c2hTdGF0ZSIsInJlcGxhY2VTdGF0ZSIsImZpcnN0VGltZSIsIiRjdXJyZW50QWN0aXZlIiwic2xpZGVEb3duIiwic2xpZGVTcGVlZCIsIiRhdW50cyIsImFsbG93QWxsQ2xvc2VkIiwic2xpZGVVcCIsInN0b3AiLCJBY2NvcmRpb25NZW51IiwibXVsdGlPcGVuIiwiJG1lbnVMaW5rcyIsInN1YklkIiwiaXNBY3RpdmUiLCJzdWJtZW51VG9nZ2xlIiwiYWZ0ZXIiLCJzdWJtZW51VG9nZ2xlVGV4dCIsImluaXRQYW5lcyIsIiRzdWJtZW51IiwiJGVsZW1lbnRzIiwiJHByZXZFbGVtZW50IiwiJG5leHRFbGVtZW50IiwibWluIiwicGFyZW50cyIsIm9wZW4iLCJjbG9zZSIsImNsb3NlQWxsIiwiaGlkZUFsbCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInBhcmVudHNVbnRpbCIsIiRtZW51cyIsInJlbW92ZSIsIkVxdWFsaXplciIsImVxSWQiLCIkd2F0Y2hlZCIsImhhc05lc3RlZCIsImlzTmVzdGVkIiwiaXNPbiIsIl9iaW5kSGFuZGxlciIsIm9uUmVzaXplTWVCb3VuZCIsIl9vblJlc2l6ZU1lIiwib25Qb3N0RXF1YWxpemVkQm91bmQiLCJfb25Qb3N0RXF1YWxpemVkIiwiaW1ncyIsInRvb1NtYWxsIiwiZXF1YWxpemVPbiIsIl9jaGVja01RIiwiX3JlZmxvdyIsIl9wYXVzZUV2ZW50cyIsImVxdWFsaXplT25TdGFjayIsIl9pc1N0YWNrZWQiLCJlcXVhbGl6ZUJ5Um93IiwiZ2V0SGVpZ2h0c0J5Um93IiwiYXBwbHlIZWlnaHRCeVJvdyIsImdldEhlaWdodHMiLCJhcHBseUhlaWdodCIsImhlaWdodHMiLCJsZW4iLCJvZmZzZXRIZWlnaHQiLCJsYXN0RWxUb3BPZmZzZXQiLCJncm91cHMiLCJncm91cCIsImVsT2Zmc2V0VG9wIiwiaiIsImxuIiwiZ3JvdXBzSUxlbmd0aCIsImxlbkoiLCJJbnRlcmNoYW5nZSIsInJ1bGVzIiwiY3VycmVudFBhdGgiLCJfYWRkQnJlYWtwb2ludHMiLCJfZ2VuZXJhdGVSdWxlcyIsIm1hdGNoIiwicnVsZSIsInBhdGgiLCJTUEVDSUFMX1FVRVJJRVMiLCJydWxlc0xpc3QiLCJub2RlTmFtZSIsInJlc3BvbnNlIiwiaHRtbCIsIk1hZ2VsbGFuIiwiY2FsY1BvaW50cyIsIiR0YXJnZXRzIiwiJGxpbmtzIiwiJGFjdGl2ZSIsInNjcm9sbFBvcyIsInBhcnNlSW50IiwicG9pbnRzIiwid2luSGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJkb2NIZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCIkdGFyIiwicHQiLCJ0aHJlc2hvbGQiLCJ0YXJnZXRQb2ludCIsIiRib2R5IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJlYXNpbmciLCJhbmltYXRpb25FYXNpbmciLCJkZWVwTGlua2luZyIsInNjcm9sbFRvTG9jIiwiX3VwZGF0ZUFjdGl2ZSIsImFycml2YWwiLCJnZXRBdHRyaWJ1dGUiLCJsb2MiLCJfaW5UcmFuc2l0aW9uIiwiYmFyT2Zmc2V0Iiwid2luUG9zIiwiY3VySWR4IiwiaXNEb3duIiwiY3VyVmlzaWJsZSIsIk9mZkNhbnZhcyIsIiRsYXN0VHJpZ2dlciIsIiR0cmlnZ2VycyIsInRyYW5zaXRpb24iLCJjb250ZW50T3ZlcmxheSIsIm92ZXJsYXkiLCJvdmVybGF5UG9zaXRpb24iLCJzZXRBdHRyaWJ1dGUiLCIkb3ZlcmxheSIsImFwcGVuZCIsImlzUmV2ZWFsZWQiLCJyZXZlYWxDbGFzcyIsInJldmVhbE9uIiwiX3NldE1RQ2hlY2tlciIsInRyYW5zaXRpb25UaW1lIiwiX2hhbmRsZUtleWJvYXJkIiwiY2xvc2VPbkNsaWNrIiwicmV2ZWFsIiwiJGNsb3NlciIsImFsbG93VXAiLCJhbGxvd0Rvd24iLCJsYXN0WSIsIm9yaWdpbmFsRXZlbnQiLCJmb3JjZVRvIiwic2Nyb2xsVG8iLCJjb250ZW50U2Nyb2xsIiwiX3N0b3BTY3JvbGxpbmciLCJfcmVjb3JkU2Nyb2xsYWJsZSIsIl9zdG9wU2Nyb2xsUHJvcGFnYXRpb24iLCJhdXRvRm9jdXMiLCJjYW52YXNGb2N1cyIsIlJlc3BvbnNpdmVNZW51IiwiY3VycmVudE1xIiwiY3VycmVudFBsdWdpbiIsInJ1bGVzVHJlZSIsInJ1bGVTaXplIiwicnVsZVBsdWdpbiIsIk1lbnVQbHVnaW5zIiwiaXNFbXB0eU9iamVjdCIsIl9jaGVja01lZGlhUXVlcmllcyIsIm1hdGNoZWRNcSIsImNzc0NsYXNzIiwiZGVzdHJveSIsImRyb3Bkb3duIiwiZHJpbGxkb3duIiwiYWNjb3JkaW9uIiwiUmVzcG9uc2l2ZVRvZ2dsZSIsInRhcmdldElEIiwiJHRhcmdldE1lbnUiLCIkdG9nZ2xlciIsImlucHV0IiwiYW5pbWF0aW9uSW4iLCJhbmltYXRpb25PdXQiLCJfdXBkYXRlIiwiX3VwZGF0ZU1xSGFuZGxlciIsInRvZ2dsZU1lbnUiLCJoaWRlRm9yIiwiUmV2ZWFsIiwiY2FjaGVkIiwibXEiLCJpc01vYmlsZSIsIm1vYmlsZVNuaWZmIiwiZnVsbFNjcmVlbiIsIl9tYWtlT3ZlcmxheSIsImRldGFjaCIsIm91dGVyV2lkdGgiLCJvdXRlckhlaWdodCIsIm1hcmdpbiIsIl91cGRhdGVQb3NpdGlvbiIsImNvbnRhaW5zIiwiX2hhbmRsZVN0YXRlIiwibXVsdGlwbGVPcGVuZWQiLCJhZGRSZXZlYWxPcGVuQ2xhc3NlcyIsIm9yaWdpbmFsU2Nyb2xsUG9zIiwiYWZ0ZXJBbmltYXRpb24iLCJmb2N1c2FibGVFbGVtZW50cyIsInNob3dEZWxheSIsIl9leHRyYUhhbmRsZXJzIiwiY2xvc2VPbkVzYyIsImZpbmlzaFVwIiwiaGlkZURlbGF5IiwicmVzZXRPbkNsb3NlIiwidGl0bGUiLCJocmVmIiwiYnRtT2Zmc2V0UGN0IiwiaVBob25lU25pZmYiLCJhbmRyb2lkU25pZmYiLCJTdGlja3kiLCIkcGFyZW50Iiwid2FzV3JhcHBlZCIsIiRjb250YWluZXIiLCJjb250YWluZXIiLCJ3cmFwSW5uZXIiLCJjb250YWluZXJDbGFzcyIsInN0aWNreUNsYXNzIiwic2Nyb2xsQ291bnQiLCJjaGVja0V2ZXJ5IiwiaXNTdHVjayIsImNvbnRhaW5lckhlaWdodCIsImVsZW1IZWlnaHQiLCJfcGFyc2VQb2ludHMiLCJfc2V0U2l6ZXMiLCJzY3JvbGwiLCJfY2FsYyIsIl9yZW1vdmVTdGlja3kiLCJ0b3BQb2ludCIsInJldmVyc2UiLCJ0b3BBbmNob3IiLCJidG0iLCJidG1BbmNob3IiLCJwdHMiLCJicmVha3MiLCJwbGFjZSIsImNhblN0aWNrIiwiX2V2ZW50c0hhbmRsZXIiLCJfcGF1c2VMaXN0ZW5lcnMiLCJjaGVja1NpemVzIiwiYm90dG9tUG9pbnQiLCJfc2V0U3RpY2t5Iiwic3RpY2tUbyIsIm1yZ24iLCJub3RTdHVja1RvIiwiaXNUb3AiLCJzdGlja1RvVG9wIiwiYW5jaG9yUHQiLCJhbmNob3JIZWlnaHQiLCJ0b3BPckJvdHRvbSIsInN0aWNreU9uIiwibmV3RWxlbVdpZHRoIiwiY29tcCIsInBkbmdsIiwicGRuZ3IiLCJuZXdDb250YWluZXJIZWlnaHQiLCJfc2V0QnJlYWtQb2ludHMiLCJtVG9wIiwiZW1DYWxjIiwibWFyZ2luVG9wIiwibUJ0bSIsIm1hcmdpbkJvdHRvbSIsInVud3JhcCIsImVtIiwiZm9udFNpemUiLCJUYWJzIiwiJHRhYlRpdGxlcyIsImxpbmtDbGFzcyIsImxpbmtBY3RpdmVDbGFzcyIsIm1hdGNoSGVpZ2h0IiwiJGltYWdlcyIsIl9zZXRIZWlnaHQiLCJzZWxlY3RUYWIiLCJfYWRkS2V5SGFuZGxlciIsIl9hZGRDbGlja0hhbmRsZXIiLCJfc2V0SGVpZ2h0TXFIYW5kbGVyIiwiX2hhbmRsZVRhYkNoYW5nZSIsIndyYXBPbktleXMiLCJsYXN0IiwiaGlzdG9yeUhhbmRsZWQiLCJhY3RpdmVDb2xsYXBzZSIsIl9jb2xsYXBzZVRhYiIsIiRvbGRUYWIiLCIkdGFiTGluayIsIiR0YXJnZXRDb250ZW50IiwiX29wZW5UYWIiLCJwYW5lbEFjdGl2ZUNsYXNzIiwiJHRhcmdldF9hbmNob3IiLCJpZFN0ciIsInBhbmVsQ2xhc3MiLCJwYW5lbCIsInRlbXAiLCJUb2dnbGVyIiwidG9nZ2xlQ2xhc3MiLCJfdXBkYXRlQVJJQSIsIlJlc3BvbnNpdmVBY2NvcmRpb25UYWJzIiwiX2dldEFsbE9wdGlvbnMiLCJhbGxPcHRpb25zIiwib2JqIiwiZHVtbXlQbHVnaW4iLCJ0bXBQbHVnaW4iLCJrZXlLZXkiLCJvYmpPYmoiLCJzdG9yZXpmRGF0YSIsIl9oYW5kbGVNYXJrdXAiLCJ0b1NldCIsImZyb21TdHJpbmciLCIkcGFuZWxzIiwidGFic1RpdGxlIiwidGFic1BhbmVsIiwiJGxpSGVhZHMiLCIkbGlIZWFkc0EiLCJkaXNwbGF5IiwidmlzaWJpbGl0eSIsIiR0YWJzQ29udGVudCIsIiRwbGFjZWhvbGRlciIsImluc2VydEFmdGVyIiwidGVtcFZhbHVlIiwidGFicyIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJleHBvcnRzIiwicmVxdWlyZSIsInBsdXNlcyIsImVuY29kZSIsInMiLCJjb25maWciLCJyYXciLCJlbmNvZGVVUklDb21wb25lbnQiLCJkZWNvZGUiLCJzdHJpbmdpZnlDb29raWVWYWx1ZSIsImpzb24iLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2VDb29raWVWYWx1ZSIsInBhcnNlIiwicmVhZCIsImNvbnZlcnRlciIsImlzRnVuY3Rpb24iLCJjb29raWUiLCJleHBpcmVzIiwiZGF5cyIsInNldFRpbWUiLCJ0b1VUQ1N0cmluZyIsInNlY3VyZSIsInJlc3VsdCIsImNvb2tpZXMiLCJsIiwic2hpZnQiLCJyZW1vdmVDb29raWUiLCJjb29raWVCYXIiLCJzZXR0aW5ncyIsImNvb2tpZWJhciIsImNsb3NlQnV0dG9uIiwiY2xpY2siLCJwcmVwZW5kIiwic2V0RGF0ZSIsImdldERhdGUiLCJwYWlycyIsInBhaXIiLCJtZXRob2RzIiwicmF0eSIsInRoYXQiLCJpbml0cyIsIl9jYWxsYmFjayIsInByZWNpc2lvbiIsIl9hZGp1c3RQcmVjaXNpb24iLCJfYmV0d2VlbiIsIm51bWJlck1heCIsInN0YXJzIiwiX2NyZWF0ZVN0YXJzIiwic2NvcmUiLCJfY3JlYXRlU2NvcmUiLCJfYXBwbHkiLCJjYW5jZWwiLCJfY3JlYXRlQ2FuY2VsIiwicmVhZE9ubHkiLCJfbG9jayIsIl9iaW5kcyIsIl90YXJnZXQiLCJ0YXJnZXRUeXBlIiwiaGFsZiIsIl9maWxsIiwiX3JvdW5kU3RhcnMiLCJfYmluZENhbmNlbCIsIl9iaW5kQ2xpY2siLCJfYmluZE91dCIsIl9iaW5kT3ZlciIsIl9iaW5kQ2xpY2tDYW5jZWwiLCJfYmluZE91dENhbmNlbCIsIl9iaW5kT3ZlckNhbmNlbCIsImV2dCIsIm1vdXNlb3V0IiwiY2FuY2VsT2ZmIiwiY2FuY2VsT24iLCJzdGFyT2ZmIiwibW91c2VvdmVyIiwiYWN0aW9uIiwicGx1cyIsImljb24iLCJjbGFzcyIsImNhbmNlbEhpbnQiLCJjYW5jZWxQbGFjZSIsInNjb3JlTmFtZSIsIl9nZXRIaW50Iiwic3BhY2UiLCJfZXJyb3IiLCJzdGFyIiwic2VsZWN0Iiwic2luZ2xlIiwiaWNvblJhbmdlIiwiaXJhbmdlIiwic3Rhck9uIiwicmFuZ2UiLCJoaW50IiwiaGludHMiLCJub1JhdGVkTXNnIiwicmVzdCIsImZsb29yIiwidG9GaXhlZCIsImhhbGZTaG93IiwiZnVsbCIsImNlaWwiLCJ0YXJnZXRGb3JtYXQiLCJ0YXJnZXRUZXh0IiwidGFyZ2V0S2VlcCIsIl91bmxvY2siLCJFdmVudCIsImVtcHR5IiwiY3Vyc29yIiwiY2xvbmUiLCJnZXRTY29yZSIsInJlYWRvbmx5IiwicmVsb2FkIiwic2V0Iiwic2V0U2NvcmUiLCJhY3R1YWwiLCJuZXdzIiwic3RhckhhbGYiLCJPd2wiLCJEZWZhdWx0cyIsIl9oYW5kbGVycyIsIl9zdXByZXNzIiwiX2N1cnJlbnQiLCJfc3BlZWQiLCJfY29vcmRpbmF0ZXMiLCJfYnJlYWtwb2ludCIsIl93aWR0aCIsIl9pdGVtcyIsIl9jbG9uZXMiLCJfbWVyZ2VycyIsIl93aWR0aHMiLCJfaW52YWxpZGF0ZWQiLCJfcGlwZSIsIl9kcmFnIiwicG9pbnRlciIsInN0YWdlIiwiZGlyZWN0aW9uIiwiX3N0YXRlcyIsInRhZ3MiLCJwcm94eSIsImhhbmRsZXIiLCJQbHVnaW5zIiwiY2hhckF0IiwiV29ya2VycyIsInByaW9yaXR5Iiwid29ya2VyIiwicnVuIiwiaW5pdGlhbGl6ZSIsImxvb3AiLCJjZW50ZXIiLCJyZXdpbmQiLCJtb3VzZURyYWciLCJ0b3VjaERyYWciLCJwdWxsRHJhZyIsImZyZWVEcmFnIiwic3RhZ2VQYWRkaW5nIiwibWVyZ2UiLCJtZXJnZUZpdCIsImF1dG9XaWR0aCIsInN0YXJ0UG9zaXRpb24iLCJzbWFydFNwZWVkIiwiZmx1aWRTcGVlZCIsImRyYWdFbmRTcGVlZCIsInJlc3BvbnNpdmUiLCJyZXNwb25zaXZlUmVmcmVzaFJhdGUiLCJyZXNwb25zaXZlQmFzZUVsZW1lbnQiLCJmYWxsYmFja0Vhc2luZyIsIm5lc3RlZEl0ZW1TZWxlY3RvciIsIml0ZW1FbGVtZW50Iiwic3RhZ2VFbGVtZW50IiwicmVmcmVzaENsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJydGxDbGFzcyIsInJlc3BvbnNpdmVDbGFzcyIsImRyYWdDbGFzcyIsIml0ZW1DbGFzcyIsInN0YWdlQ2xhc3MiLCJzdGFnZU91dGVyQ2xhc3MiLCJncmFiQ2xhc3MiLCJXaWR0aCIsIkRlZmF1bHQiLCJJbm5lciIsIk91dGVyIiwiVHlwZSIsIlN0YXRlIiwiY2FjaGUiLCJyZWxhdGl2ZSIsIiRzdGFnZSIsImdyaWQiLCJpdGVyYXRvciIsIndpZHRocyIsImNsb25lcyIsInZpZXciLCJyZXBlYXQiLCJub3JtYWxpemUiLCJvdXRlckhUTUwiLCJwcmVwZW5kVG8iLCJjb29yZGluYXRlcyIsInBhZGRpbmciLCJpbmRleCIsIm1pbmltdW0iLCJtYXhpbXVtIiwiYmVnaW4iLCJpbm5lciIsIm91dGVyIiwibiIsIm9wIiwiZW50ZXIiLCJuZXN0ZWRTZWxlY3RvciIsInByZWxvYWRBdXRvV2lkdGhJbWFnZXMiLCJ3cmFwIiwicmVmcmVzaCIsImludmFsaWRhdGUiLCJyZWdpc3RlckV2ZW50SGFuZGxlcnMiLCJsZWF2ZSIsInZpZXdwb3J0Iiwib3ZlcndyaXRlcyIsImJyZWFrcG9pbnQiLCJOdW1iZXIiLCJwcm9wZXJ0eSIsIm9wdGlvbnNMb2dpYyIsInByZXBhcmUiLCJpdGVtIiwiY29udGVudCIsInVwZGF0ZSIsImFsbCIsImdyZXAiLCJkaW1lbnNpb24iLCJvblRocm90dGxlZFJlc2l6ZSIsInJlc2l6ZVRpbWVyIiwib25SZXNpemUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJzdXBwb3J0Iiwib25UcmFuc2l0aW9uRW5kIiwib25EcmFnU3RhcnQiLCJvbkRyYWdFbmQiLCJ0cmFuc2Zvcm0iLCJzcGVlZCIsImRlbHRhIiwiZGlmZmVyZW5jZSIsIm9uRHJhZ01vdmUiLCJwdWxsIiwiY29vcmRpbmF0ZSIsInRyYW5zZm9ybTNkIiwic3RhdGUiLCJwYXJ0Iiwic3VwcHJlc3MiLCJyZWxlYXNlIiwibSIsImlzTnVtZXJpYyIsInJlY2lwcm9jYWxJdGVtc1dpZHRoIiwiZWxlbWVudFdpZHRoIiwibWVyZ2VycyIsIm9kZCIsImV2ZW4iLCJtdWx0aXBsaWVyIiwibmV3UG9zaXRpb24iLCJmcm9tIiwidG8iLCJmYWN0b3IiLCJyZXZlcnQiLCJkaXN0YW5jZSIsInNyY0VsZW1lbnQiLCJvcmlnaW5hbFRhcmdldCIsImlubmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsIm5vZGVUeXBlIiwiYmVmb3JlIiwiSW1hZ2UiLCJjb250ZW50cyIsImEiLCJvIiwiYiIsImxpc3RlbmVyIiwiY2FwdHVyZSIsImF0dGFjaEV2ZW50IiwiZGV0YWNoRXZlbnQiLCJzdGF0dXMiLCJjb3VudCIsImNhbWVsQ2FzZSIsInJlbGF0ZWRUYXJnZXQiLCJvblRyaWdnZXIiLCJvYmplY3QiLCJvd2wiLCJfZGVmYXVsdCIsInRhZyIsImluQXJyYXkiLCJldmVudHMiLCJzZWNvbmQiLCJvd2xDYXJvdXNlbCIsIm9wdGlvbiIsIiR0aGlzIiwiQ29uc3RydWN0b3IiLCJaZXB0byIsIkFuaW1hdGUiLCJzY29wZSIsImNvcmUiLCJzd2FwcGluZyIsImhhbmRsZXJzIiwic3dhcCIsImluY29taW5nIiwib3V0Z29pbmciLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiQXV0b0hlaWdodCIsImNhcm91c2VsIiwiX2NvcmUiLCJhdXRvSGVpZ2h0IiwiYXV0b0hlaWdodENsYXNzIiwidmlzaWJsZSIsInRvQXJyYXkiLCJtYXhoZWlnaHQiLCJBdXRvcGxheSIsIl90aW1lb3V0IiwiX3BhdXNlZCIsImF1dG9wbGF5IiwicGxheSIsIl9zZXRBdXRvUGxheUludGVydmFsIiwiYXV0b3BsYXlIb3ZlclBhdXNlIiwiYXV0b3BsYXlUaW1lb3V0IiwiYXV0b3BsYXlTcGVlZCIsInRpbWVvdXQiLCJfZ2V0TmV4dFRpbWVvdXQiLCJoaWRkZW4iLCJBdXRvUmVmcmVzaCIsIl9pbnRlcnZhbCIsIl92aXNpYmxlIiwiYXV0b1JlZnJlc2giLCJ3YXRjaCIsImF1dG9SZWZyZXNoSW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJIYXNoIiwiX2hhc2hlcyIsInN1YnN0cmluZyIsIlVSTGhhc2hMaXN0ZW5lciIsIkxhenkiLCJfbG9hZGVkIiwibGF6eUxvYWQiLCJpbWFnZSIsImRldmljZVBpeGVsUmF0aW8iLCJvbmxvYWQiLCJOYXZpZ2F0aW9uIiwiX2luaXRpYWxpemVkIiwiX3BhZ2VzIiwiX2NvbnRyb2xzIiwiX3RlbXBsYXRlcyIsIl9vdmVycmlkZXMiLCJkb3RzRGF0YSIsImRvdENsYXNzIiwicG9wIiwiZHJhdyIsIm5hdiIsIm5hdlRleHQiLCJuYXZTcGVlZCIsIm5hdkVsZW1lbnQiLCJuYXZDb250YWluZXIiLCJuYXZDb250YWluZXJDbGFzcyIsIm5hdkNsYXNzIiwic2xpZGVCeSIsImRvdHNDbGFzcyIsImRvdHMiLCJkb3RzRWFjaCIsImRvdHNTcGVlZCIsImRvdHNDb250YWluZXIiLCJvdmVycmlkZSIsIiRyZWxhdGl2ZSIsIiRwcmV2aW91cyIsIiRuZXh0IiwiJGFic29sdXRlIiwiY29udHJvbCIsIm92ZXJpZGVzIiwibG93ZXIiLCJ1cHBlciIsImRpc2FibGVkIiwicGFnZSIsImdldFBvc2l0aW9uIiwic3VjY2Vzc29yIiwic3RhbmRhcmQiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwiV2Via2l0QW5pbWF0aW9uIiwiTW96QW5pbWF0aW9uIiwiT0FuaW1hdGlvbiIsInRlc3RzIiwiY3NzdHJhbnNmb3JtcyIsImNzc3RyYW5zZm9ybXMzZCIsImNzc3RyYW5zaXRpb25zIiwiY3NzYW5pbWF0aW9ucyIsInByZWZpeGVkIiwiVmlkZW8iLCJfdmlkZW9zIiwiX3BsYXlpbmciLCJ2aWRlbyIsImlzSW5GdWxsU2NyZWVuIiwiZmV0Y2giLCJ2aWRlb0hlaWdodCIsInZpZGVvV2lkdGgiLCJ0aHVtYm5haWwiLCJ0bkxpbmsiLCJkaW1lbnNpb25zIiwiY3VzdG9tVG4iLCJzcmNUeXBlIiwibGF6eUNsYXNzIiwiY3JlYXRlIiwiYWpheCIsImpzb25wIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwidGh1bWJuYWlsX2xhcmdlIiwiZnJhbWVncmFiX3VybCIsImZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIm1vZHVsZSIsInRvRml4IiwidG9CaW5kIiwiZG9jdW1lbnRNb2RlIiwibnVsbExvd2VzdERlbHRhVGltZW91dCIsImxvd2VzdERlbHRhIiwiZml4SG9va3MiLCJtb3VzZUhvb2tzIiwibW91c2V3aGVlbCIsIm9ubW91c2V3aGVlbCIsImdldExpbmVIZWlnaHQiLCJnZXRQYWdlSGVpZ2h0IiwiYWRqdXN0T2xkRGVsdGFzIiwibm9ybWFsaXplT2Zmc2V0IiwidW5tb3VzZXdoZWVsIiwidW5iaW5kIiwib3JnRXZlbnQiLCJkZWx0YVgiLCJkZWx0YVkiLCJhYnNEZWx0YSIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZml4IiwiZGV0YWlsIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJheGlzIiwiSE9SSVpPTlRBTF9BWElTIiwiZGVsdGFNb2RlIiwibGluZUhlaWdodCIsInBhZ2VIZWlnaHQiLCJzaG91bGRBZGp1c3RPbGREZWx0YXMiLCJib3VuZGluZ1JlY3QiLCJkZWx0YUZhY3RvciIsInVuc2hpZnQiLCJudWxsTG93ZXN0RGVsdGEiLCJkaXNwYXRjaCIsImhhbmRsZSIsInJvb3QiLCJhMCIsIm1vZGUiLCJjc3NFYXNpbmciLCJzdGFydENsYXNzIiwiYmFja2Ryb3BEdXJhdGlvbiIsImhpZGVCYXJzRGVsYXkiLCJ1c2VMZWZ0IiwiY2xvc2FibGUiLCJlc2NLZXkiLCJrZXlQcmVzcyIsImNvbnRyb2xzIiwic2xpZGVFbmRBbmltYXRvaW4iLCJoaWRlQ29udHJvbE9uRW5kIiwiZ2V0Q2FwdGlvbkZyb21UaXRsZU9yQWx0IiwiYXBwZW5kU3ViSHRtbFRvIiwic3ViSHRtbFNlbGVjdG9yUmVsYXRpdmUiLCJwcmVsb2FkIiwic2hvd0FmdGVyTG9hZCIsInNlbGVjdG9yIiwic2VsZWN0V2l0aGluIiwibmV4dEh0bWwiLCJwcmV2SHRtbCIsImlmcmFtZU1heFdpZHRoIiwiZG93bmxvYWQiLCJjb3VudGVyIiwiYXBwZW5kQ291bnRlclRvIiwic3dpcGVUaHJlc2hvbGQiLCJlbmFibGVTd2lwZSIsImVuYWJsZURyYWciLCJkeW5hbWljIiwiZHluYW1pY0VsIiwiZ2FsbGVyeUlkIiwiUGx1Z2luIiwibW9kdWxlcyIsImxHYWxsZXJ5T24iLCJsZ0J1c3kiLCJoaWRlQmFydGltZW91dCIsImlzVG91Y2giLCIkaXRlbXMiLCIkc2xpZGUiLCIkb3V0ZXIiLCJfaGFzaCIsImJ1aWxkIiwic3RydWN0dXJlIiwibGlnaHRHYWxsZXJ5Iiwic2xpZGUiLCJhcnJvdyIsImNsb3NlR2FsbGVyeSIsImxpc3QiLCJzdWJIdG1sQ29udCIsInRlbXBsYXRlIiwic2V0VG9wIiwiZG9Dc3MiLCIkaW5uZXIiLCJwcmV2U2Nyb2xsVG9wIiwid0giLCIkbEdhbGxlcnkiLCJpc1ZpZGVvIiwiaHRtbDUiLCJ5b3V0dWJlIiwidmltZW8iLCJkYWlseW1vdGlvbiIsInZrIiwiYWRkSHRtbCIsInN1Ykh0bWwiLCJzdWJIdG1sVXJsIiwiJGN1cnJlbnRFbGUiLCJmTCIsImxvYWRDb250ZW50IiwicmVjIiwiX2hhc1Bvc3RlciIsIl8kaW1nIiwiX3NyYyIsIl9wb3N0ZXIiLCJfc3Jjc2V0IiwiX3NpemVzIiwiX2h0bWwiLCJnZXRSZXNwb25zaXZlU3JjIiwic3JjSXRtcyIsInJzV2lkdGgiLCJyc1NyYyIsIl9fc3JjIiwid1dpZHRoIiwicG9zdGVyIiwic3JjRHlJdG1zIiwic3Jjc2V0Iiwic2l6ZXMiLCJpZnJhbWUiLCJfaXNWaWRlbyIsInZpZGVvQ2xhc3MiLCJwaWN0dXJlZmlsbCIsImVsZW1lbnRzIiwiZnJvbVRvdWNoIiwiZnJvbVRodW1iIiwiX3ByZXZJbmRleCIsIl9sZW5ndGgiLCJfdGltZSIsImRvd25sb2FkVXJsIiwiYXJyb3dEaXNhYmxlIiwidG91Y2hQcmV2IiwidG91Y2hOZXh0IiwiZ29Ub05leHRTbGlkZSIsIl9sb29wIiwiZ29Ub1ByZXZTbGlkZSIsInNldFRyYW5zbGF0ZSIsInhWYWx1ZSIsInlWYWx1ZSIsInRvdWNoTW92ZSIsInN0YXJ0Q29vcmRzIiwiZW5kQ29vcmRzIiwidG91Y2hFbmQiLCJpc01vdmVkIiwibWFuYWdlU3dpcGVDbGFzcyIsInRhcmdldFRvdWNoZXMiLCJpc0RyYWdpbmciLCJzY3JvbGxMZWZ0IiwiX3RvdWNoTmV4dCIsIl90b3VjaFByZXYiLCJtb3VzZWRvd24iLCJkIiwiY29tcGxleGlmeSIsIk1JTl9DT01QTEVYSVRZIiwiTUFYX0NPTVBMRVhJVFkiLCJDSEFSU0VUUyIsIm1pbmltdW1DaGFycyIsInN0cmVuZ3RoU2NhbGVGYWN0b3IiLCJiYW5uZWRQYXNzd29yZHMiLCJDT01QTEVYSUZZX0JBTkxJU1QiLCJiYW5Nb2RlIiwiYWRkaXRpb25hbENvbXBsZXhpdHlGb3JDaGFyc2V0IiwiY2hhcnNldCIsImNoYXJDb2RlQXQiLCJpbkJhbmxpc3QiLCJldmFsdWF0ZVNlY3VyaXR5IiwicGFzc3dvcmQiLCJjb21wbGV4aXR5IiwibG9nIiwicnVsZXNFbmdpbmUiLCJqc2RvbSIsInBhcmVudFdpbmRvdyIsImlnbm9yZSIsInZhbGlkYXRpb24iLCJmb3JiaWRkZW5TZXF1ZW5jZXMiLCJ3b3JkTm90RW1haWwiLCJ3b3JkIiwid29yZExlbmd0aCIsIndvcmRsZW4iLCJsZW5TY29yZSIsInJhaXNlUG93ZXIiLCJjb21tb24iLCJtaW5DaGFyIiwid29yZFNpbWlsYXJUb1VzZXJuYW1lIiwidXNlcm5hbWUiLCJ1c2VybmFtZUZpZWxkIiwid29yZFR3b0NoYXJhY3RlckNsYXNzZXMiLCJ3b3JkUmVwZXRpdGlvbnMiLCJ3b3JkU2VxdWVuY2VzIiwiZm91bmQiLCJzZXEiLCJzZXF1ZW5jZXMiLCJzZXF1ZW5jZSIsIndvcmRMb3dlcmNhc2UiLCJ3b3JkVXBwZXJjYXNlIiwid29yZE9uZU51bWJlciIsIndvcmRUaHJlZU51bWJlcnMiLCJ3b3JkT25lU3BlY2lhbENoYXIiLCJ3b3JkVHdvU3BlY2lhbENoYXIiLCJ3b3JkVXBwZXJMb3dlckNvbWJvIiwid29yZExldHRlck51bWJlckNvbWJvIiwid29yZExldHRlck51bWJlckNoYXJDb21ibyIsImV4ZWN1dGVSdWxlcyIsInRvdGFsU2NvcmUiLCJhY3RpdmF0ZWQiLCJhY3RpdmUiLCJzY29yZXMiLCJmdW5jdCIsImVycm9yTWVzc2FnZSIsImV4dHJhIiwidWkiLCJzcGFuRXJyb3IiLCJpbnN0YW5jZXMiLCJlcnJvcnMiLCJkZWZhdWx0T3B0aW9ucyIsInVzZXJJbnB1dHMiLCJvbkxvYWQiLCJvbktleVVwIiwienhjdmJuIiwienhjdmJuVGVybXMiLCJkZWJ1ZyIsImNvbG9yQ2xhc3NlcyIsInNob3dQcm9ncmVzc0JhciIsInNob3dQb3BvdmVyIiwicG9wb3ZlclBsYWNlbWVudCIsInNob3dTdGF0dXMiLCJlcnJvck1lc3NhZ2VzIiwicG9wb3ZlckVycm9yIiwidmVyZGljdHMiLCJzaG93VmVyZGljdHMiLCJzaG93VmVyZGljdHNJbnNpZGVQcm9ncmVzc0JhciIsInVzZVZlcmRpY3RDc3NDbGFzcyIsInNob3dFcnJvcnMiLCJ2aWV3cG9ydHMiLCJwcm9ncmVzcyIsInZlcmRpY3QiLCJzdGF0dXNDbGFzc2VzIiwiZ2V0Q29udGFpbmVyIiwiZmluZEVsZW1lbnQiLCJjc3NTZWxlY3RvciIsImdldFVJRWxlbWVudHMiLCIkcHJvZ3Jlc3NiYXIiLCIkdmVyZGljdCIsIiRlcnJvcnMiLCJpbml0UHJvZ3Jlc3NCYXIiLCJwcm9ncmVzc2JhciIsImluaXRIZWxwZXIiLCJpbml0VmVyZGljdCIsImluaXRFcnJvckxpc3QiLCJpbml0UG9wb3ZlciIsImluaXRVSSIsInBvc3NpYmxlUHJvZ3Jlc3NCYXJDbGFzc2VzIiwidXBkYXRlUHJvZ3Jlc3NCYXIiLCJwZXJjZW50YWdlIiwiJGJhciIsInVwZGF0ZVZlcmRpY3QiLCJ1cGRhdGVFcnJvcnMiLCJ1cGRhdGVQb3BvdmVyIiwidmVyZGljdFRleHQiLCJwb3BvdmVyIiwiJGFycm93IiwidXBkYXRlRmllbGRTdGF0dXMiLCJ0YXJnZXRDbGFzcyIsIm1heGltdW4iLCJnZXRWZXJkaWN0QW5kQ3NzQ2xhc3MiLCJsZXZlbCIsInVwZGF0ZVVJIiwiYmFyUGVyY2VudGFnZSIsInZlcmRpY3RDc3NDbGFzcyIsImFwcGx5VG9BbGwiLCJ2ZXJkaWN0TGV2ZWwiLCJlbnRyb3B5IiwiY2xvbmVkRGVmYXVsdHMiLCJsb2NhbE9wdGlvbnMiLCJmb3JjZVVwZGF0ZSIsImFkZFJ1bGUiLCJjaGFuZ2VTY29yZSIsInJ1bGVBY3RpdmUiLCJwd3N0cmVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsQ0FBQyxVQUFTQSxDQUFULEVBQVk7O0FBRWI7O0FBRUEsTUFBSUMscUJBQXFCLE9BQXpCOztBQUVBO0FBQ0E7QUFDQSxNQUFJQyxhQUFhO0FBQ2ZDLGFBQVNGLGtCQURNOztBQUdmOzs7QUFHQUcsY0FBVSxFQU5LOztBQVFmOzs7QUFHQUMsWUFBUSxFQVhPOztBQWFmOzs7QUFHQUMsU0FBSyxlQUFVO0FBQ2IsYUFBT04sRUFBRSxNQUFGLEVBQVVPLElBQVYsQ0FBZSxLQUFmLE1BQTBCLEtBQWpDO0FBQ0QsS0FsQmM7QUFtQmY7Ozs7QUFJQUMsWUFBUSxnQkFBU0EsT0FBVCxFQUFpQkMsSUFBakIsRUFBdUI7QUFDN0I7QUFDQTtBQUNBLFVBQUlDLFlBQWFELFFBQVFFLGFBQWFILE9BQWIsQ0FBekI7QUFDQTtBQUNBO0FBQ0EsVUFBSUksV0FBWUMsVUFBVUgsU0FBVixDQUFoQjs7QUFFQTtBQUNBLFdBQUtOLFFBQUwsQ0FBY1EsUUFBZCxJQUEwQixLQUFLRixTQUFMLElBQWtCRixPQUE1QztBQUNELEtBakNjO0FBa0NmOzs7Ozs7Ozs7QUFTQU0sb0JBQWdCLHdCQUFTTixNQUFULEVBQWlCQyxJQUFqQixFQUFzQjtBQUNwQyxVQUFJTSxhQUFhTixPQUFPSSxVQUFVSixJQUFWLENBQVAsR0FBeUJFLGFBQWFILE9BQU9RLFdBQXBCLEVBQWlDQyxXQUFqQyxFQUExQztBQUNBVCxhQUFPVSxJQUFQLEdBQWMsS0FBS0MsV0FBTCxDQUFpQixDQUFqQixFQUFvQkosVUFBcEIsQ0FBZDs7QUFFQSxVQUFHLENBQUNQLE9BQU9ZLFFBQVAsQ0FBZ0JiLElBQWhCLFdBQTZCUSxVQUE3QixDQUFKLEVBQStDO0FBQUVQLGVBQU9ZLFFBQVAsQ0FBZ0JiLElBQWhCLFdBQTZCUSxVQUE3QixFQUEyQ1AsT0FBT1UsSUFBbEQ7QUFBMEQ7QUFDM0csVUFBRyxDQUFDVixPQUFPWSxRQUFQLENBQWdCQyxJQUFoQixDQUFxQixVQUFyQixDQUFKLEVBQXFDO0FBQUViLGVBQU9ZLFFBQVAsQ0FBZ0JDLElBQWhCLENBQXFCLFVBQXJCLEVBQWlDYixNQUFqQztBQUEyQztBQUM1RTs7OztBQUlOQSxhQUFPWSxRQUFQLENBQWdCRSxPQUFoQixjQUFtQ1AsVUFBbkM7O0FBRUEsV0FBS1YsTUFBTCxDQUFZa0IsSUFBWixDQUFpQmYsT0FBT1UsSUFBeEI7O0FBRUE7QUFDRCxLQTFEYztBQTJEZjs7Ozs7Ozs7QUFRQU0sc0JBQWtCLDBCQUFTaEIsTUFBVCxFQUFnQjtBQUNoQyxVQUFJTyxhQUFhRixVQUFVRixhQUFhSCxPQUFPWSxRQUFQLENBQWdCQyxJQUFoQixDQUFxQixVQUFyQixFQUFpQ0wsV0FBOUMsQ0FBVixDQUFqQjs7QUFFQSxXQUFLWCxNQUFMLENBQVlvQixNQUFaLENBQW1CLEtBQUtwQixNQUFMLENBQVlxQixPQUFaLENBQW9CbEIsT0FBT1UsSUFBM0IsQ0FBbkIsRUFBcUQsQ0FBckQ7QUFDQVYsYUFBT1ksUUFBUCxDQUFnQk8sVUFBaEIsV0FBbUNaLFVBQW5DLEVBQWlEYSxVQUFqRCxDQUE0RCxVQUE1RDtBQUNNOzs7O0FBRE4sT0FLT04sT0FMUCxtQkFLK0JQLFVBTC9CO0FBTUEsV0FBSSxJQUFJYyxJQUFSLElBQWdCckIsTUFBaEIsRUFBdUI7QUFDckJBLGVBQU9xQixJQUFQLElBQWUsSUFBZixDQURxQixDQUNEO0FBQ3JCO0FBQ0Q7QUFDRCxLQWpGYzs7QUFtRmY7Ozs7OztBQU1DQyxZQUFRLGdCQUFTQyxPQUFULEVBQWlCO0FBQ3ZCLFVBQUlDLE9BQU9ELG1CQUFtQi9CLENBQTlCO0FBQ0EsVUFBRztBQUNELFlBQUdnQyxJQUFILEVBQVE7QUFDTkQsa0JBQVFFLElBQVIsQ0FBYSxZQUFVO0FBQ3JCakMsY0FBRSxJQUFGLEVBQVFxQixJQUFSLENBQWEsVUFBYixFQUF5QmEsS0FBekI7QUFDRCxXQUZEO0FBR0QsU0FKRCxNQUlLO0FBQ0gsY0FBSUMsY0FBY0osT0FBZCx5Q0FBY0EsT0FBZCxDQUFKO0FBQUEsY0FDQUssUUFBUSxJQURSO0FBQUEsY0FFQUMsTUFBTTtBQUNKLHNCQUFVLGdCQUFTQyxJQUFULEVBQWM7QUFDdEJBLG1CQUFLQyxPQUFMLENBQWEsVUFBU0MsQ0FBVCxFQUFXO0FBQ3RCQSxvQkFBSTNCLFVBQVUyQixDQUFWLENBQUo7QUFDQXhDLGtCQUFFLFdBQVV3QyxDQUFWLEdBQWEsR0FBZixFQUFvQkMsVUFBcEIsQ0FBK0IsT0FBL0I7QUFDRCxlQUhEO0FBSUQsYUFORztBQU9KLHNCQUFVLGtCQUFVO0FBQ2xCVix3QkFBVWxCLFVBQVVrQixPQUFWLENBQVY7QUFDQS9CLGdCQUFFLFdBQVUrQixPQUFWLEdBQW1CLEdBQXJCLEVBQTBCVSxVQUExQixDQUFxQyxPQUFyQztBQUNELGFBVkc7QUFXSix5QkFBYSxxQkFBVTtBQUNyQixtQkFBSyxRQUFMLEVBQWVDLE9BQU9DLElBQVAsQ0FBWVAsTUFBTWhDLFFBQWxCLENBQWY7QUFDRDtBQWJHLFdBRk47QUFpQkFpQyxjQUFJRixJQUFKLEVBQVVKLE9BQVY7QUFDRDtBQUNGLE9BekJELENBeUJDLE9BQU1hLEdBQU4sRUFBVTtBQUNUQyxnQkFBUUMsS0FBUixDQUFjRixHQUFkO0FBQ0QsT0EzQkQsU0EyQlE7QUFDTixlQUFPYixPQUFQO0FBQ0Q7QUFDRixLQXpIYTs7QUEySGY7Ozs7Ozs7O0FBUUFaLGlCQUFhLHFCQUFTNEIsTUFBVCxFQUFpQkMsU0FBakIsRUFBMkI7QUFDdENELGVBQVNBLFVBQVUsQ0FBbkI7QUFDQSxhQUFPRSxLQUFLQyxLQUFMLENBQVlELEtBQUtFLEdBQUwsQ0FBUyxFQUFULEVBQWFKLFNBQVMsQ0FBdEIsSUFBMkJFLEtBQUtHLE1BQUwsS0FBZ0JILEtBQUtFLEdBQUwsQ0FBUyxFQUFULEVBQWFKLE1BQWIsQ0FBdkQsRUFBOEVNLFFBQTlFLENBQXVGLEVBQXZGLEVBQTJGQyxLQUEzRixDQUFpRyxDQUFqRyxLQUF1R04sa0JBQWdCQSxTQUFoQixHQUE4QixFQUFySSxDQUFQO0FBQ0QsS0F0SWM7QUF1SWY7Ozs7O0FBS0FPLFlBQVEsZ0JBQVNDLElBQVQsRUFBZXpCLE9BQWYsRUFBd0I7O0FBRTlCO0FBQ0EsVUFBSSxPQUFPQSxPQUFQLEtBQW1CLFdBQXZCLEVBQW9DO0FBQ2xDQSxrQkFBVVcsT0FBT0MsSUFBUCxDQUFZLEtBQUt2QyxRQUFqQixDQUFWO0FBQ0Q7QUFDRDtBQUhBLFdBSUssSUFBSSxPQUFPMkIsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUNwQ0Esb0JBQVUsQ0FBQ0EsT0FBRCxDQUFWO0FBQ0Q7O0FBRUQsVUFBSUssUUFBUSxJQUFaOztBQUVBO0FBQ0FwQyxRQUFFaUMsSUFBRixDQUFPRixPQUFQLEVBQWdCLFVBQVMwQixDQUFULEVBQVloRCxJQUFaLEVBQWtCO0FBQ2hDO0FBQ0EsWUFBSUQsU0FBUzRCLE1BQU1oQyxRQUFOLENBQWVLLElBQWYsQ0FBYjs7QUFFQTtBQUNBLFlBQUlpRCxRQUFRMUQsRUFBRXdELElBQUYsRUFBUUcsSUFBUixDQUFhLFdBQVNsRCxJQUFULEdBQWMsR0FBM0IsRUFBZ0NtRCxPQUFoQyxDQUF3QyxXQUFTbkQsSUFBVCxHQUFjLEdBQXRELENBQVo7O0FBRUE7QUFDQWlELGNBQU16QixJQUFOLENBQVcsWUFBVztBQUNwQixjQUFJNEIsTUFBTTdELEVBQUUsSUFBRixDQUFWO0FBQUEsY0FDSThELE9BQU8sRUFEWDtBQUVBO0FBQ0EsY0FBSUQsSUFBSXhDLElBQUosQ0FBUyxVQUFULENBQUosRUFBMEI7QUFDeEJ3QixvQkFBUWtCLElBQVIsQ0FBYSx5QkFBdUJ0RCxJQUF2QixHQUE0QixzREFBekM7QUFDQTtBQUNEOztBQUVELGNBQUdvRCxJQUFJdEQsSUFBSixDQUFTLGNBQVQsQ0FBSCxFQUE0QjtBQUMxQixnQkFBSXlELFFBQVFILElBQUl0RCxJQUFKLENBQVMsY0FBVCxFQUF5QjBELEtBQXpCLENBQStCLEdBQS9CLEVBQW9DMUIsT0FBcEMsQ0FBNEMsVUFBUzJCLENBQVQsRUFBWVQsQ0FBWixFQUFjO0FBQ3BFLGtCQUFJVSxNQUFNRCxFQUFFRCxLQUFGLENBQVEsR0FBUixFQUFhRyxHQUFiLENBQWlCLFVBQVNDLEVBQVQsRUFBWTtBQUFFLHVCQUFPQSxHQUFHQyxJQUFILEVBQVA7QUFBbUIsZUFBbEQsQ0FBVjtBQUNBLGtCQUFHSCxJQUFJLENBQUosQ0FBSCxFQUFXTCxLQUFLSyxJQUFJLENBQUosQ0FBTCxJQUFlSSxXQUFXSixJQUFJLENBQUosQ0FBWCxDQUFmO0FBQ1osYUFIVyxDQUFaO0FBSUQ7QUFDRCxjQUFHO0FBQ0ROLGdCQUFJeEMsSUFBSixDQUFTLFVBQVQsRUFBcUIsSUFBSWIsTUFBSixDQUFXUixFQUFFLElBQUYsQ0FBWCxFQUFvQjhELElBQXBCLENBQXJCO0FBQ0QsV0FGRCxDQUVDLE9BQU1VLEVBQU4sRUFBUztBQUNSM0Isb0JBQVFDLEtBQVIsQ0FBYzBCLEVBQWQ7QUFDRCxXQUpELFNBSVE7QUFDTjtBQUNEO0FBQ0YsU0F0QkQ7QUF1QkQsT0EvQkQ7QUFnQ0QsS0ExTGM7QUEyTGZDLGVBQVc5RCxZQTNMSTtBQTRMZitELG1CQUFlLHVCQUFTaEIsS0FBVCxFQUFlO0FBQzVCLFVBQUlpQixjQUFjO0FBQ2hCLHNCQUFjLGVBREU7QUFFaEIsNEJBQW9CLHFCQUZKO0FBR2hCLHlCQUFpQixlQUhEO0FBSWhCLHVCQUFlO0FBSkMsT0FBbEI7QUFNQSxVQUFJbkIsT0FBT29CLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBWDtBQUFBLFVBQ0lDLEdBREo7O0FBR0EsV0FBSyxJQUFJQyxDQUFULElBQWNKLFdBQWQsRUFBMEI7QUFDeEIsWUFBSSxPQUFPbkIsS0FBS3dCLEtBQUwsQ0FBV0QsQ0FBWCxDQUFQLEtBQXlCLFdBQTdCLEVBQXlDO0FBQ3ZDRCxnQkFBTUgsWUFBWUksQ0FBWixDQUFOO0FBQ0Q7QUFDRjtBQUNELFVBQUdELEdBQUgsRUFBTztBQUNMLGVBQU9BLEdBQVA7QUFDRCxPQUZELE1BRUs7QUFDSEEsY0FBTUcsV0FBVyxZQUFVO0FBQ3pCdkIsZ0JBQU13QixjQUFOLENBQXFCLGVBQXJCLEVBQXNDLENBQUN4QixLQUFELENBQXRDO0FBQ0QsU0FGSyxFQUVILENBRkcsQ0FBTjtBQUdBLGVBQU8sZUFBUDtBQUNEO0FBQ0Y7QUFuTmMsR0FBakI7O0FBc05BeEQsYUFBV2lGLElBQVgsR0FBa0I7QUFDaEI7Ozs7Ozs7QUFPQUMsY0FBVSxrQkFBVUMsSUFBVixFQUFnQkMsS0FBaEIsRUFBdUI7QUFDL0IsVUFBSUMsUUFBUSxJQUFaOztBQUVBLGFBQU8sWUFBWTtBQUNqQixZQUFJQyxVQUFVLElBQWQ7QUFBQSxZQUFvQkMsT0FBT0MsU0FBM0I7O0FBRUEsWUFBSUgsVUFBVSxJQUFkLEVBQW9CO0FBQ2xCQSxrQkFBUU4sV0FBVyxZQUFZO0FBQzdCSSxpQkFBS00sS0FBTCxDQUFXSCxPQUFYLEVBQW9CQyxJQUFwQjtBQUNBRixvQkFBUSxJQUFSO0FBQ0QsV0FITyxFQUdMRCxLQUhLLENBQVI7QUFJRDtBQUNGLE9BVEQ7QUFVRDtBQXJCZSxHQUFsQjs7QUF3QkE7QUFDQTtBQUNBOzs7O0FBSUEsTUFBSTdDLGFBQWEsU0FBYkEsVUFBYSxDQUFTbUQsTUFBVCxFQUFpQjtBQUNoQyxRQUFJekQsY0FBY3lELE1BQWQseUNBQWNBLE1BQWQsQ0FBSjtBQUFBLFFBQ0lDLFFBQVE3RixFQUFFLG9CQUFGLENBRFo7QUFBQSxRQUVJOEYsUUFBUTlGLEVBQUUsUUFBRixDQUZaOztBQUlBLFFBQUcsQ0FBQzZGLE1BQU05QyxNQUFWLEVBQWlCO0FBQ2YvQyxRQUFFLDhCQUFGLEVBQWtDK0YsUUFBbEMsQ0FBMkNuQixTQUFTb0IsSUFBcEQ7QUFDRDtBQUNELFFBQUdGLE1BQU0vQyxNQUFULEVBQWdCO0FBQ2QrQyxZQUFNRyxXQUFOLENBQWtCLE9BQWxCO0FBQ0Q7O0FBRUQsUUFBRzlELFNBQVMsV0FBWixFQUF3QjtBQUFDO0FBQ3ZCakMsaUJBQVdnRyxVQUFYLENBQXNCaEUsS0FBdEI7QUFDQWhDLGlCQUFXcUQsTUFBWCxDQUFrQixJQUFsQjtBQUNELEtBSEQsTUFHTSxJQUFHcEIsU0FBUyxRQUFaLEVBQXFCO0FBQUM7QUFDMUIsVUFBSXNELE9BQU9VLE1BQU1DLFNBQU4sQ0FBZ0I5QyxLQUFoQixDQUFzQitDLElBQXRCLENBQTJCWCxTQUEzQixFQUFzQyxDQUF0QyxDQUFYLENBRHlCLENBQzJCO0FBQ3BELFVBQUlZLFlBQVksS0FBS2pGLElBQUwsQ0FBVSxVQUFWLENBQWhCLENBRnlCLENBRWE7O0FBRXRDLFVBQUdpRixjQUFjQyxTQUFkLElBQTJCRCxVQUFVVixNQUFWLE1BQXNCVyxTQUFwRCxFQUE4RDtBQUFDO0FBQzdELFlBQUcsS0FBS3hELE1BQUwsS0FBZ0IsQ0FBbkIsRUFBcUI7QUFBQztBQUNsQnVELG9CQUFVVixNQUFWLEVBQWtCRCxLQUFsQixDQUF3QlcsU0FBeEIsRUFBbUNiLElBQW5DO0FBQ0gsU0FGRCxNQUVLO0FBQ0gsZUFBS3hELElBQUwsQ0FBVSxVQUFTd0IsQ0FBVCxFQUFZWSxFQUFaLEVBQWU7QUFBQztBQUN4QmlDLHNCQUFVVixNQUFWLEVBQWtCRCxLQUFsQixDQUF3QjNGLEVBQUVxRSxFQUFGLEVBQU1oRCxJQUFOLENBQVcsVUFBWCxDQUF4QixFQUFnRG9FLElBQWhEO0FBQ0QsV0FGRDtBQUdEO0FBQ0YsT0FSRCxNQVFLO0FBQUM7QUFDSixjQUFNLElBQUllLGNBQUosQ0FBbUIsbUJBQW1CWixNQUFuQixHQUE0QixtQ0FBNUIsSUFBbUVVLFlBQVkzRixhQUFhMkYsU0FBYixDQUFaLEdBQXNDLGNBQXpHLElBQTJILEdBQTlJLENBQU47QUFDRDtBQUNGLEtBZkssTUFlRDtBQUFDO0FBQ0osWUFBTSxJQUFJRyxTQUFKLG9CQUE4QnRFLElBQTlCLGtHQUFOO0FBQ0Q7QUFDRCxXQUFPLElBQVA7QUFDRCxHQWxDRDs7QUFvQ0F1RSxTQUFPeEcsVUFBUCxHQUFvQkEsVUFBcEI7QUFDQUYsSUFBRTJHLEVBQUYsQ0FBS2xFLFVBQUwsR0FBa0JBLFVBQWxCOztBQUVBO0FBQ0EsR0FBQyxZQUFXO0FBQ1YsUUFBSSxDQUFDbUUsS0FBS0MsR0FBTixJQUFhLENBQUNILE9BQU9FLElBQVAsQ0FBWUMsR0FBOUIsRUFDRUgsT0FBT0UsSUFBUCxDQUFZQyxHQUFaLEdBQWtCRCxLQUFLQyxHQUFMLEdBQVcsWUFBVztBQUFFLGFBQU8sSUFBSUQsSUFBSixHQUFXRSxPQUFYLEVBQVA7QUFBOEIsS0FBeEU7O0FBRUYsUUFBSUMsVUFBVSxDQUFDLFFBQUQsRUFBVyxLQUFYLENBQWQ7QUFDQSxTQUFLLElBQUl0RCxJQUFJLENBQWIsRUFBZ0JBLElBQUlzRCxRQUFRaEUsTUFBWixJQUFzQixDQUFDMkQsT0FBT00scUJBQTlDLEVBQXFFLEVBQUV2RCxDQUF2RSxFQUEwRTtBQUN0RSxVQUFJd0QsS0FBS0YsUUFBUXRELENBQVIsQ0FBVDtBQUNBaUQsYUFBT00scUJBQVAsR0FBK0JOLE9BQU9PLEtBQUcsdUJBQVYsQ0FBL0I7QUFDQVAsYUFBT1Esb0JBQVAsR0FBK0JSLE9BQU9PLEtBQUcsc0JBQVYsS0FDRFAsT0FBT08sS0FBRyw2QkFBVixDQUQ5QjtBQUVIO0FBQ0QsUUFBSSx1QkFBdUJFLElBQXZCLENBQTRCVCxPQUFPVSxTQUFQLENBQWlCQyxTQUE3QyxLQUNDLENBQUNYLE9BQU9NLHFCQURULElBQ2tDLENBQUNOLE9BQU9RLG9CQUQ5QyxFQUNvRTtBQUNsRSxVQUFJSSxXQUFXLENBQWY7QUFDQVosYUFBT00scUJBQVAsR0FBK0IsVUFBU08sUUFBVCxFQUFtQjtBQUM5QyxZQUFJVixNQUFNRCxLQUFLQyxHQUFMLEVBQVY7QUFDQSxZQUFJVyxXQUFXdkUsS0FBS3dFLEdBQUwsQ0FBU0gsV0FBVyxFQUFwQixFQUF3QlQsR0FBeEIsQ0FBZjtBQUNBLGVBQU81QixXQUFXLFlBQVc7QUFBRXNDLG1CQUFTRCxXQUFXRSxRQUFwQjtBQUFnQyxTQUF4RCxFQUNXQSxXQUFXWCxHQUR0QixDQUFQO0FBRUgsT0FMRDtBQU1BSCxhQUFPUSxvQkFBUCxHQUE4QlEsWUFBOUI7QUFDRDtBQUNEOzs7QUFHQSxRQUFHLENBQUNoQixPQUFPaUIsV0FBUixJQUF1QixDQUFDakIsT0FBT2lCLFdBQVAsQ0FBbUJkLEdBQTlDLEVBQWtEO0FBQ2hESCxhQUFPaUIsV0FBUCxHQUFxQjtBQUNuQkMsZUFBT2hCLEtBQUtDLEdBQUwsRUFEWTtBQUVuQkEsYUFBSyxlQUFVO0FBQUUsaUJBQU9ELEtBQUtDLEdBQUwsS0FBYSxLQUFLZSxLQUF6QjtBQUFpQztBQUYvQixPQUFyQjtBQUlEO0FBQ0YsR0EvQkQ7QUFnQ0EsTUFBSSxDQUFDQyxTQUFTekIsU0FBVCxDQUFtQjBCLElBQXhCLEVBQThCO0FBQzVCRCxhQUFTekIsU0FBVCxDQUFtQjBCLElBQW5CLEdBQTBCLFVBQVNDLEtBQVQsRUFBZ0I7QUFDeEMsVUFBSSxPQUFPLElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDOUI7QUFDQTtBQUNBLGNBQU0sSUFBSXRCLFNBQUosQ0FBYyxzRUFBZCxDQUFOO0FBQ0Q7O0FBRUQsVUFBSXVCLFFBQVU3QixNQUFNQyxTQUFOLENBQWdCOUMsS0FBaEIsQ0FBc0IrQyxJQUF0QixDQUEyQlgsU0FBM0IsRUFBc0MsQ0FBdEMsQ0FBZDtBQUFBLFVBQ0l1QyxVQUFVLElBRGQ7QUFBQSxVQUVJQyxPQUFVLFNBQVZBLElBQVUsR0FBVyxDQUFFLENBRjNCO0FBQUEsVUFHSUMsU0FBVSxTQUFWQSxNQUFVLEdBQVc7QUFDbkIsZUFBT0YsUUFBUXRDLEtBQVIsQ0FBYyxnQkFBZ0J1QyxJQUFoQixHQUNaLElBRFksR0FFWkgsS0FGRixFQUdBQyxNQUFNSSxNQUFOLENBQWFqQyxNQUFNQyxTQUFOLENBQWdCOUMsS0FBaEIsQ0FBc0IrQyxJQUF0QixDQUEyQlgsU0FBM0IsQ0FBYixDQUhBLENBQVA7QUFJRCxPQVJMOztBQVVBLFVBQUksS0FBS1UsU0FBVCxFQUFvQjtBQUNsQjtBQUNBOEIsYUFBSzlCLFNBQUwsR0FBaUIsS0FBS0EsU0FBdEI7QUFDRDtBQUNEK0IsYUFBTy9CLFNBQVAsR0FBbUIsSUFBSThCLElBQUosRUFBbkI7O0FBRUEsYUFBT0MsTUFBUDtBQUNELEtBeEJEO0FBeUJEO0FBQ0Q7QUFDQSxXQUFTeEgsWUFBVCxDQUFzQmdHLEVBQXRCLEVBQTBCO0FBQ3hCLFFBQUlrQixTQUFTekIsU0FBVCxDQUFtQjNGLElBQW5CLEtBQTRCOEYsU0FBaEMsRUFBMkM7QUFDekMsVUFBSThCLGdCQUFnQix3QkFBcEI7QUFDQSxVQUFJQyxVQUFXRCxhQUFELENBQWdCRSxJQUFoQixDQUFzQjVCLEVBQUQsQ0FBS3RELFFBQUwsRUFBckIsQ0FBZDtBQUNBLGFBQVFpRixXQUFXQSxRQUFRdkYsTUFBUixHQUFpQixDQUE3QixHQUFrQ3VGLFFBQVEsQ0FBUixFQUFXaEUsSUFBWCxFQUFsQyxHQUFzRCxFQUE3RDtBQUNELEtBSkQsTUFLSyxJQUFJcUMsR0FBR1AsU0FBSCxLQUFpQkcsU0FBckIsRUFBZ0M7QUFDbkMsYUFBT0ksR0FBRzNGLFdBQUgsQ0FBZVAsSUFBdEI7QUFDRCxLQUZJLE1BR0E7QUFDSCxhQUFPa0csR0FBR1AsU0FBSCxDQUFhcEYsV0FBYixDQUF5QlAsSUFBaEM7QUFDRDtBQUNGO0FBQ0QsV0FBUzhELFVBQVQsQ0FBb0JpRSxHQUFwQixFQUF3QjtBQUN0QixRQUFJLFdBQVdBLEdBQWYsRUFBb0IsT0FBTyxJQUFQLENBQXBCLEtBQ0ssSUFBSSxZQUFZQSxHQUFoQixFQUFxQixPQUFPLEtBQVAsQ0FBckIsS0FDQSxJQUFJLENBQUNDLE1BQU1ELE1BQU0sQ0FBWixDQUFMLEVBQXFCLE9BQU9FLFdBQVdGLEdBQVgsQ0FBUDtBQUMxQixXQUFPQSxHQUFQO0FBQ0Q7QUFDRDtBQUNBO0FBQ0EsV0FBUzNILFNBQVQsQ0FBbUIySCxHQUFuQixFQUF3QjtBQUN0QixXQUFPQSxJQUFJRyxPQUFKLENBQVksaUJBQVosRUFBK0IsT0FBL0IsRUFBd0MxSCxXQUF4QyxFQUFQO0FBQ0Q7QUFFQSxDQXpYQSxDQXlYQzJILE1BelhELENBQUQ7QUNBQTs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWJFLGFBQVcySSxHQUFYLEdBQWlCO0FBQ2ZDLHNCQUFrQkEsZ0JBREg7QUFFZkMsbUJBQWVBLGFBRkE7QUFHZkMsZ0JBQVlBO0FBSEcsR0FBakI7O0FBTUE7Ozs7Ozs7Ozs7QUFVQSxXQUFTRixnQkFBVCxDQUEwQkcsT0FBMUIsRUFBbUNDLE1BQW5DLEVBQTJDQyxNQUEzQyxFQUFtREMsTUFBbkQsRUFBMkQ7QUFDekQsUUFBSUMsVUFBVU4sY0FBY0UsT0FBZCxDQUFkO0FBQUEsUUFDSUssR0FESjtBQUFBLFFBQ1NDLE1BRFQ7QUFBQSxRQUNpQkMsSUFEakI7QUFBQSxRQUN1QkMsS0FEdkI7O0FBR0EsUUFBSVAsTUFBSixFQUFZO0FBQ1YsVUFBSVEsVUFBVVgsY0FBY0csTUFBZCxDQUFkOztBQUVBSyxlQUFVRixRQUFRTSxNQUFSLENBQWVMLEdBQWYsR0FBcUJELFFBQVFPLE1BQTdCLElBQXVDRixRQUFRRSxNQUFSLEdBQWlCRixRQUFRQyxNQUFSLENBQWVMLEdBQWpGO0FBQ0FBLFlBQVVELFFBQVFNLE1BQVIsQ0FBZUwsR0FBZixJQUFzQkksUUFBUUMsTUFBUixDQUFlTCxHQUEvQztBQUNBRSxhQUFVSCxRQUFRTSxNQUFSLENBQWVILElBQWYsSUFBdUJFLFFBQVFDLE1BQVIsQ0FBZUgsSUFBaEQ7QUFDQUMsY0FBVUosUUFBUU0sTUFBUixDQUFlSCxJQUFmLEdBQXNCSCxRQUFRUSxLQUE5QixJQUF1Q0gsUUFBUUcsS0FBUixHQUFnQkgsUUFBUUMsTUFBUixDQUFlSCxJQUFoRjtBQUNELEtBUEQsTUFRSztBQUNIRCxlQUFVRixRQUFRTSxNQUFSLENBQWVMLEdBQWYsR0FBcUJELFFBQVFPLE1BQTdCLElBQXVDUCxRQUFRUyxVQUFSLENBQW1CRixNQUFuQixHQUE0QlAsUUFBUVMsVUFBUixDQUFtQkgsTUFBbkIsQ0FBMEJMLEdBQXZHO0FBQ0FBLFlBQVVELFFBQVFNLE1BQVIsQ0FBZUwsR0FBZixJQUFzQkQsUUFBUVMsVUFBUixDQUFtQkgsTUFBbkIsQ0FBMEJMLEdBQTFEO0FBQ0FFLGFBQVVILFFBQVFNLE1BQVIsQ0FBZUgsSUFBZixJQUF1QkgsUUFBUVMsVUFBUixDQUFtQkgsTUFBbkIsQ0FBMEJILElBQTNEO0FBQ0FDLGNBQVVKLFFBQVFNLE1BQVIsQ0FBZUgsSUFBZixHQUFzQkgsUUFBUVEsS0FBOUIsSUFBdUNSLFFBQVFTLFVBQVIsQ0FBbUJELEtBQXBFO0FBQ0Q7O0FBRUQsUUFBSUUsVUFBVSxDQUFDUixNQUFELEVBQVNELEdBQVQsRUFBY0UsSUFBZCxFQUFvQkMsS0FBcEIsQ0FBZDs7QUFFQSxRQUFJTixNQUFKLEVBQVk7QUFDVixhQUFPSyxTQUFTQyxLQUFULEtBQW1CLElBQTFCO0FBQ0Q7O0FBRUQsUUFBSUwsTUFBSixFQUFZO0FBQ1YsYUFBT0UsUUFBUUMsTUFBUixLQUFtQixJQUExQjtBQUNEOztBQUVELFdBQU9RLFFBQVFySSxPQUFSLENBQWdCLEtBQWhCLE1BQTJCLENBQUMsQ0FBbkM7QUFDRDs7QUFFRDs7Ozs7OztBQU9BLFdBQVNxSCxhQUFULENBQXVCdkYsSUFBdkIsRUFBNkIyRCxJQUE3QixFQUFrQztBQUNoQzNELFdBQU9BLEtBQUtULE1BQUwsR0FBY1MsS0FBSyxDQUFMLENBQWQsR0FBd0JBLElBQS9COztBQUVBLFFBQUlBLFNBQVNrRCxNQUFULElBQW1CbEQsU0FBU29CLFFBQWhDLEVBQTBDO0FBQ3hDLFlBQU0sSUFBSW9GLEtBQUosQ0FBVSw4Q0FBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBSUMsT0FBT3pHLEtBQUswRyxxQkFBTCxFQUFYO0FBQUEsUUFDSUMsVUFBVTNHLEtBQUs0RyxVQUFMLENBQWdCRixxQkFBaEIsRUFEZDtBQUFBLFFBRUlHLFVBQVV6RixTQUFTMEYsSUFBVCxDQUFjSixxQkFBZCxFQUZkO0FBQUEsUUFHSUssT0FBTzdELE9BQU84RCxXQUhsQjtBQUFBLFFBSUlDLE9BQU8vRCxPQUFPZ0UsV0FKbEI7O0FBTUEsV0FBTztBQUNMYixhQUFPSSxLQUFLSixLQURQO0FBRUxELGNBQVFLLEtBQUtMLE1BRlI7QUFHTEQsY0FBUTtBQUNOTCxhQUFLVyxLQUFLWCxHQUFMLEdBQVdpQixJQURWO0FBRU5mLGNBQU1TLEtBQUtULElBQUwsR0FBWWlCO0FBRlosT0FISDtBQU9MRSxrQkFBWTtBQUNWZCxlQUFPTSxRQUFRTixLQURMO0FBRVZELGdCQUFRTyxRQUFRUCxNQUZOO0FBR1ZELGdCQUFRO0FBQ05MLGVBQUthLFFBQVFiLEdBQVIsR0FBY2lCLElBRGI7QUFFTmYsZ0JBQU1XLFFBQVFYLElBQVIsR0FBZWlCO0FBRmY7QUFIRSxPQVBQO0FBZUxYLGtCQUFZO0FBQ1ZELGVBQU9RLFFBQVFSLEtBREw7QUFFVkQsZ0JBQVFTLFFBQVFULE1BRk47QUFHVkQsZ0JBQVE7QUFDTkwsZUFBS2lCLElBREM7QUFFTmYsZ0JBQU1pQjtBQUZBO0FBSEU7QUFmUCxLQUFQO0FBd0JEOztBQUVEOzs7Ozs7Ozs7Ozs7QUFZQSxXQUFTekIsVUFBVCxDQUFvQkMsT0FBcEIsRUFBNkIyQixNQUE3QixFQUFxQ0MsUUFBckMsRUFBK0NDLE9BQS9DLEVBQXdEQyxPQUF4RCxFQUFpRUMsVUFBakUsRUFBNkU7QUFDM0UsUUFBSUMsV0FBV2xDLGNBQWNFLE9BQWQsQ0FBZjtBQUFBLFFBQ0lpQyxjQUFjTixTQUFTN0IsY0FBYzZCLE1BQWQsQ0FBVCxHQUFpQyxJQURuRDs7QUFHQSxZQUFRQyxRQUFSO0FBQ0UsV0FBSyxLQUFMO0FBQ0UsZUFBTztBQUNMckIsZ0JBQU90SixXQUFXSSxHQUFYLEtBQW1CNEssWUFBWXZCLE1BQVosQ0FBbUJILElBQW5CLEdBQTBCeUIsU0FBU3BCLEtBQW5DLEdBQTJDcUIsWUFBWXJCLEtBQTFFLEdBQWtGcUIsWUFBWXZCLE1BQVosQ0FBbUJILElBRHZHO0FBRUxGLGVBQUs0QixZQUFZdkIsTUFBWixDQUFtQkwsR0FBbkIsSUFBMEIyQixTQUFTckIsTUFBVCxHQUFrQmtCLE9BQTVDO0FBRkEsU0FBUDtBQUlBO0FBQ0YsV0FBSyxNQUFMO0FBQ0UsZUFBTztBQUNMdEIsZ0JBQU0wQixZQUFZdkIsTUFBWixDQUFtQkgsSUFBbkIsSUFBMkJ5QixTQUFTcEIsS0FBVCxHQUFpQmtCLE9BQTVDLENBREQ7QUFFTHpCLGVBQUs0QixZQUFZdkIsTUFBWixDQUFtQkw7QUFGbkIsU0FBUDtBQUlBO0FBQ0YsV0FBSyxPQUFMO0FBQ0UsZUFBTztBQUNMRSxnQkFBTTBCLFlBQVl2QixNQUFaLENBQW1CSCxJQUFuQixHQUEwQjBCLFlBQVlyQixLQUF0QyxHQUE4Q2tCLE9BRC9DO0FBRUx6QixlQUFLNEIsWUFBWXZCLE1BQVosQ0FBbUJMO0FBRm5CLFNBQVA7QUFJQTtBQUNGLFdBQUssWUFBTDtBQUNFLGVBQU87QUFDTEUsZ0JBQU8wQixZQUFZdkIsTUFBWixDQUFtQkgsSUFBbkIsR0FBMkIwQixZQUFZckIsS0FBWixHQUFvQixDQUFoRCxHQUF1RG9CLFNBQVNwQixLQUFULEdBQWlCLENBRHpFO0FBRUxQLGVBQUs0QixZQUFZdkIsTUFBWixDQUFtQkwsR0FBbkIsSUFBMEIyQixTQUFTckIsTUFBVCxHQUFrQmtCLE9BQTVDO0FBRkEsU0FBUDtBQUlBO0FBQ0YsV0FBSyxlQUFMO0FBQ0UsZUFBTztBQUNMdEIsZ0JBQU13QixhQUFhRCxPQUFiLEdBQXlCRyxZQUFZdkIsTUFBWixDQUFtQkgsSUFBbkIsR0FBMkIwQixZQUFZckIsS0FBWixHQUFvQixDQUFoRCxHQUF1RG9CLFNBQVNwQixLQUFULEdBQWlCLENBRGpHO0FBRUxQLGVBQUs0QixZQUFZdkIsTUFBWixDQUFtQkwsR0FBbkIsR0FBeUI0QixZQUFZdEIsTUFBckMsR0FBOENrQjtBQUY5QyxTQUFQO0FBSUE7QUFDRixXQUFLLGFBQUw7QUFDRSxlQUFPO0FBQ0x0QixnQkFBTTBCLFlBQVl2QixNQUFaLENBQW1CSCxJQUFuQixJQUEyQnlCLFNBQVNwQixLQUFULEdBQWlCa0IsT0FBNUMsQ0FERDtBQUVMekIsZUFBTTRCLFlBQVl2QixNQUFaLENBQW1CTCxHQUFuQixHQUEwQjRCLFlBQVl0QixNQUFaLEdBQXFCLENBQWhELEdBQXVEcUIsU0FBU3JCLE1BQVQsR0FBa0I7QUFGekUsU0FBUDtBQUlBO0FBQ0YsV0FBSyxjQUFMO0FBQ0UsZUFBTztBQUNMSixnQkFBTTBCLFlBQVl2QixNQUFaLENBQW1CSCxJQUFuQixHQUEwQjBCLFlBQVlyQixLQUF0QyxHQUE4Q2tCLE9BQTlDLEdBQXdELENBRHpEO0FBRUx6QixlQUFNNEIsWUFBWXZCLE1BQVosQ0FBbUJMLEdBQW5CLEdBQTBCNEIsWUFBWXRCLE1BQVosR0FBcUIsQ0FBaEQsR0FBdURxQixTQUFTckIsTUFBVCxHQUFrQjtBQUZ6RSxTQUFQO0FBSUE7QUFDRixXQUFLLFFBQUw7QUFDRSxlQUFPO0FBQ0xKLGdCQUFPeUIsU0FBU25CLFVBQVQsQ0FBb0JILE1BQXBCLENBQTJCSCxJQUEzQixHQUFtQ3lCLFNBQVNuQixVQUFULENBQW9CRCxLQUFwQixHQUE0QixDQUFoRSxHQUF1RW9CLFNBQVNwQixLQUFULEdBQWlCLENBRHpGO0FBRUxQLGVBQU0yQixTQUFTbkIsVUFBVCxDQUFvQkgsTUFBcEIsQ0FBMkJMLEdBQTNCLEdBQWtDMkIsU0FBU25CLFVBQVQsQ0FBb0JGLE1BQXBCLEdBQTZCLENBQWhFLEdBQXVFcUIsU0FBU3JCLE1BQVQsR0FBa0I7QUFGekYsU0FBUDtBQUlBO0FBQ0YsV0FBSyxRQUFMO0FBQ0UsZUFBTztBQUNMSixnQkFBTSxDQUFDeUIsU0FBU25CLFVBQVQsQ0FBb0JELEtBQXBCLEdBQTRCb0IsU0FBU3BCLEtBQXRDLElBQStDLENBRGhEO0FBRUxQLGVBQUsyQixTQUFTbkIsVUFBVCxDQUFvQkgsTUFBcEIsQ0FBMkJMLEdBQTNCLEdBQWlDd0I7QUFGakMsU0FBUDtBQUlGLFdBQUssYUFBTDtBQUNFLGVBQU87QUFDTHRCLGdCQUFNeUIsU0FBU25CLFVBQVQsQ0FBb0JILE1BQXBCLENBQTJCSCxJQUQ1QjtBQUVMRixlQUFLMkIsU0FBU25CLFVBQVQsQ0FBb0JILE1BQXBCLENBQTJCTDtBQUYzQixTQUFQO0FBSUE7QUFDRixXQUFLLGFBQUw7QUFDRSxlQUFPO0FBQ0xFLGdCQUFNMEIsWUFBWXZCLE1BQVosQ0FBbUJILElBRHBCO0FBRUxGLGVBQUs0QixZQUFZdkIsTUFBWixDQUFtQkwsR0FBbkIsR0FBeUI0QixZQUFZdEIsTUFBckMsR0FBOENrQjtBQUY5QyxTQUFQO0FBSUE7QUFDRixXQUFLLGNBQUw7QUFDRSxlQUFPO0FBQ0x0QixnQkFBTTBCLFlBQVl2QixNQUFaLENBQW1CSCxJQUFuQixHQUEwQjBCLFlBQVlyQixLQUF0QyxHQUE4Q2tCLE9BQTlDLEdBQXdERSxTQUFTcEIsS0FEbEU7QUFFTFAsZUFBSzRCLFlBQVl2QixNQUFaLENBQW1CTCxHQUFuQixHQUF5QjRCLFlBQVl0QixNQUFyQyxHQUE4Q2tCO0FBRjlDLFNBQVA7QUFJQTtBQUNGO0FBQ0UsZUFBTztBQUNMdEIsZ0JBQU90SixXQUFXSSxHQUFYLEtBQW1CNEssWUFBWXZCLE1BQVosQ0FBbUJILElBQW5CLEdBQTBCeUIsU0FBU3BCLEtBQW5DLEdBQTJDcUIsWUFBWXJCLEtBQTFFLEdBQWtGcUIsWUFBWXZCLE1BQVosQ0FBbUJILElBQW5CLEdBQTBCdUIsT0FEOUc7QUFFTHpCLGVBQUs0QixZQUFZdkIsTUFBWixDQUFtQkwsR0FBbkIsR0FBeUI0QixZQUFZdEIsTUFBckMsR0FBOENrQjtBQUY5QyxTQUFQO0FBekVKO0FBOEVEO0FBRUEsQ0FoTUEsQ0FnTUNsQyxNQWhNRCxDQUFEO0FDRkE7Ozs7Ozs7O0FBUUE7O0FBRUEsQ0FBQyxVQUFTNUksQ0FBVCxFQUFZOztBQUViLE1BQU1tTCxXQUFXO0FBQ2YsT0FBRyxLQURZO0FBRWYsUUFBSSxPQUZXO0FBR2YsUUFBSSxRQUhXO0FBSWYsUUFBSSxPQUpXO0FBS2YsUUFBSSxZQUxXO0FBTWYsUUFBSSxVQU5XO0FBT2YsUUFBSSxhQVBXO0FBUWYsUUFBSTtBQVJXLEdBQWpCOztBQVdBLE1BQUlDLFdBQVcsRUFBZjs7QUFFQSxNQUFJQyxXQUFXO0FBQ2IxSSxVQUFNMkksWUFBWUgsUUFBWixDQURPOztBQUdiOzs7Ozs7QUFNQUksWUFUYSxvQkFTSkMsS0FUSSxFQVNHO0FBQ2QsVUFBSUMsTUFBTU4sU0FBU0ssTUFBTUUsS0FBTixJQUFlRixNQUFNRyxPQUE5QixLQUEwQ0MsT0FBT0MsWUFBUCxDQUFvQkwsTUFBTUUsS0FBMUIsRUFBaUNJLFdBQWpDLEVBQXBEOztBQUVBO0FBQ0FMLFlBQU1BLElBQUk5QyxPQUFKLENBQVksS0FBWixFQUFtQixFQUFuQixDQUFOOztBQUVBLFVBQUk2QyxNQUFNTyxRQUFWLEVBQW9CTixpQkFBZUEsR0FBZjtBQUNwQixVQUFJRCxNQUFNUSxPQUFWLEVBQW1CUCxnQkFBY0EsR0FBZDtBQUNuQixVQUFJRCxNQUFNUyxNQUFWLEVBQWtCUixlQUFhQSxHQUFiOztBQUVsQjtBQUNBQSxZQUFNQSxJQUFJOUMsT0FBSixDQUFZLElBQVosRUFBa0IsRUFBbEIsQ0FBTjs7QUFFQSxhQUFPOEMsR0FBUDtBQUNELEtBdkJZOzs7QUF5QmI7Ozs7OztBQU1BUyxhQS9CYSxxQkErQkhWLEtBL0JHLEVBK0JJVyxTQS9CSixFQStCZUMsU0EvQmYsRUErQjBCO0FBQ3JDLFVBQUlDLGNBQWNqQixTQUFTZSxTQUFULENBQWxCO0FBQUEsVUFDRVIsVUFBVSxLQUFLSixRQUFMLENBQWNDLEtBQWQsQ0FEWjtBQUFBLFVBRUVjLElBRkY7QUFBQSxVQUdFQyxPQUhGO0FBQUEsVUFJRTVGLEVBSkY7O0FBTUEsVUFBSSxDQUFDMEYsV0FBTCxFQUFrQixPQUFPeEosUUFBUWtCLElBQVIsQ0FBYSx3QkFBYixDQUFQOztBQUVsQixVQUFJLE9BQU9zSSxZQUFZRyxHQUFuQixLQUEyQixXQUEvQixFQUE0QztBQUFFO0FBQzFDRixlQUFPRCxXQUFQLENBRHdDLENBQ3BCO0FBQ3ZCLE9BRkQsTUFFTztBQUFFO0FBQ0wsWUFBSW5NLFdBQVdJLEdBQVgsRUFBSixFQUFzQmdNLE9BQU90TSxFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYUosWUFBWUcsR0FBekIsRUFBOEJILFlBQVkvTCxHQUExQyxDQUFQLENBQXRCLEtBRUtnTSxPQUFPdE0sRUFBRXlNLE1BQUYsQ0FBUyxFQUFULEVBQWFKLFlBQVkvTCxHQUF6QixFQUE4QitMLFlBQVlHLEdBQTFDLENBQVA7QUFDUjtBQUNERCxnQkFBVUQsS0FBS1gsT0FBTCxDQUFWOztBQUVBaEYsV0FBS3lGLFVBQVVHLE9BQVYsQ0FBTDtBQUNBLFVBQUk1RixNQUFNLE9BQU9BLEVBQVAsS0FBYyxVQUF4QixFQUFvQztBQUFFO0FBQ3BDLFlBQUkrRixjQUFjL0YsR0FBR2hCLEtBQUgsRUFBbEI7QUFDQSxZQUFJeUcsVUFBVU8sT0FBVixJQUFxQixPQUFPUCxVQUFVTyxPQUFqQixLQUE2QixVQUF0RCxFQUFrRTtBQUFFO0FBQ2hFUCxvQkFBVU8sT0FBVixDQUFrQkQsV0FBbEI7QUFDSDtBQUNGLE9BTEQsTUFLTztBQUNMLFlBQUlOLFVBQVVRLFNBQVYsSUFBdUIsT0FBT1IsVUFBVVEsU0FBakIsS0FBK0IsVUFBMUQsRUFBc0U7QUFBRTtBQUNwRVIsb0JBQVVRLFNBQVY7QUFDSDtBQUNGO0FBQ0YsS0E1RFk7OztBQThEYjs7Ozs7QUFLQUMsaUJBbkVhLHlCQW1FQ3pMLFFBbkVELEVBbUVXO0FBQ3RCLFVBQUcsQ0FBQ0EsUUFBSixFQUFjO0FBQUMsZUFBTyxLQUFQO0FBQWU7QUFDOUIsYUFBT0EsU0FBU3VDLElBQVQsQ0FBYyw4S0FBZCxFQUE4TG1KLE1BQTlMLENBQXFNLFlBQVc7QUFDck4sWUFBSSxDQUFDOU0sRUFBRSxJQUFGLEVBQVErTSxFQUFSLENBQVcsVUFBWCxDQUFELElBQTJCL00sRUFBRSxJQUFGLEVBQVFPLElBQVIsQ0FBYSxVQUFiLElBQTJCLENBQTFELEVBQTZEO0FBQUUsaUJBQU8sS0FBUDtBQUFlLFNBRHVJLENBQ3RJO0FBQy9FLGVBQU8sSUFBUDtBQUNELE9BSE0sQ0FBUDtBQUlELEtBekVZOzs7QUEyRWI7Ozs7OztBQU1BeU0sWUFqRmEsb0JBaUZKQyxhQWpGSSxFQWlGV1gsSUFqRlgsRUFpRmlCO0FBQzVCbEIsZUFBUzZCLGFBQVQsSUFBMEJYLElBQTFCO0FBQ0QsS0FuRlk7OztBQXFGYjs7OztBQUlBWSxhQXpGYSxxQkF5Rkg5TCxRQXpGRyxFQXlGTztBQUNsQixVQUFJK0wsYUFBYWpOLFdBQVdtTCxRQUFYLENBQW9Cd0IsYUFBcEIsQ0FBa0N6TCxRQUFsQyxDQUFqQjtBQUFBLFVBQ0lnTSxrQkFBa0JELFdBQVdFLEVBQVgsQ0FBYyxDQUFkLENBRHRCO0FBQUEsVUFFSUMsaUJBQWlCSCxXQUFXRSxFQUFYLENBQWMsQ0FBQyxDQUFmLENBRnJCOztBQUlBak0sZUFBU21NLEVBQVQsQ0FBWSxzQkFBWixFQUFvQyxVQUFTL0IsS0FBVCxFQUFnQjtBQUNsRCxZQUFJQSxNQUFNZ0MsTUFBTixLQUFpQkYsZUFBZSxDQUFmLENBQWpCLElBQXNDcE4sV0FBV21MLFFBQVgsQ0FBb0JFLFFBQXBCLENBQTZCQyxLQUE3QixNQUF3QyxLQUFsRixFQUF5RjtBQUN2RkEsZ0JBQU1pQyxjQUFOO0FBQ0FMLDBCQUFnQk0sS0FBaEI7QUFDRCxTQUhELE1BSUssSUFBSWxDLE1BQU1nQyxNQUFOLEtBQWlCSixnQkFBZ0IsQ0FBaEIsQ0FBakIsSUFBdUNsTixXQUFXbUwsUUFBWCxDQUFvQkUsUUFBcEIsQ0FBNkJDLEtBQTdCLE1BQXdDLFdBQW5GLEVBQWdHO0FBQ25HQSxnQkFBTWlDLGNBQU47QUFDQUgseUJBQWVJLEtBQWY7QUFDRDtBQUNGLE9BVEQ7QUFVRCxLQXhHWTs7QUF5R2I7Ozs7QUFJQUMsZ0JBN0dhLHdCQTZHQXZNLFFBN0dBLEVBNkdVO0FBQ3JCQSxlQUFTd00sR0FBVCxDQUFhLHNCQUFiO0FBQ0Q7QUEvR1ksR0FBZjs7QUFrSEE7Ozs7QUFJQSxXQUFTdEMsV0FBVCxDQUFxQnVDLEdBQXJCLEVBQTBCO0FBQ3hCLFFBQUlDLElBQUksRUFBUjtBQUNBLFNBQUssSUFBSUMsRUFBVCxJQUFlRixHQUFmO0FBQW9CQyxRQUFFRCxJQUFJRSxFQUFKLENBQUYsSUFBYUYsSUFBSUUsRUFBSixDQUFiO0FBQXBCLEtBQ0EsT0FBT0QsQ0FBUDtBQUNEOztBQUVENU4sYUFBV21MLFFBQVgsR0FBc0JBLFFBQXRCO0FBRUMsQ0E3SUEsQ0E2SUN6QyxNQTdJRCxDQUFEO0FDVkE7Ozs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWI7QUFDQSxNQUFNZ08saUJBQWlCO0FBQ3JCLGVBQVksYUFEUztBQUVyQkMsZUFBWSwwQ0FGUztBQUdyQkMsY0FBVyx5Q0FIVTtBQUlyQkMsWUFBUyx5REFDUCxtREFETyxHQUVQLG1EQUZPLEdBR1AsOENBSE8sR0FJUCwyQ0FKTyxHQUtQO0FBVG1CLEdBQXZCOztBQVlBLE1BQUlqSSxhQUFhO0FBQ2ZrSSxhQUFTLEVBRE07O0FBR2ZDLGFBQVMsRUFITTs7QUFLZjs7Ozs7QUFLQW5NLFNBVmUsbUJBVVA7QUFDTixVQUFJb00sT0FBTyxJQUFYO0FBQ0EsVUFBSUMsa0JBQWtCdk8sRUFBRSxnQkFBRixFQUFvQndPLEdBQXBCLENBQXdCLGFBQXhCLENBQXRCO0FBQ0EsVUFBSUMsWUFBSjs7QUFFQUEscUJBQWVDLG1CQUFtQkgsZUFBbkIsQ0FBZjs7QUFFQSxXQUFLLElBQUk5QyxHQUFULElBQWdCZ0QsWUFBaEIsRUFBOEI7QUFDNUIsWUFBR0EsYUFBYUUsY0FBYixDQUE0QmxELEdBQTVCLENBQUgsRUFBcUM7QUFDbkM2QyxlQUFLRixPQUFMLENBQWE3TSxJQUFiLENBQWtCO0FBQ2hCZCxrQkFBTWdMLEdBRFU7QUFFaEJtRCxvREFBc0NILGFBQWFoRCxHQUFiLENBQXRDO0FBRmdCLFdBQWxCO0FBSUQ7QUFDRjs7QUFFRCxXQUFLNEMsT0FBTCxHQUFlLEtBQUtRLGVBQUwsRUFBZjs7QUFFQSxXQUFLQyxRQUFMO0FBQ0QsS0E3QmM7OztBQStCZjs7Ozs7O0FBTUFDLFdBckNlLG1CQXFDUEMsSUFyQ08sRUFxQ0Q7QUFDWixVQUFJQyxRQUFRLEtBQUtDLEdBQUwsQ0FBU0YsSUFBVCxDQUFaOztBQUVBLFVBQUlDLEtBQUosRUFBVztBQUNULGVBQU92SSxPQUFPeUksVUFBUCxDQUFrQkYsS0FBbEIsRUFBeUJHLE9BQWhDO0FBQ0Q7O0FBRUQsYUFBTyxLQUFQO0FBQ0QsS0E3Q2M7OztBQStDZjs7Ozs7O0FBTUFyQyxNQXJEZSxjQXFEWmlDLElBckRZLEVBcUROO0FBQ1BBLGFBQU9BLEtBQUsxSyxJQUFMLEdBQVlMLEtBQVosQ0FBa0IsR0FBbEIsQ0FBUDtBQUNBLFVBQUcrSyxLQUFLak0sTUFBTCxHQUFjLENBQWQsSUFBbUJpTSxLQUFLLENBQUwsTUFBWSxNQUFsQyxFQUEwQztBQUN4QyxZQUFHQSxLQUFLLENBQUwsTUFBWSxLQUFLSCxlQUFMLEVBQWYsRUFBdUMsT0FBTyxJQUFQO0FBQ3hDLE9BRkQsTUFFTztBQUNMLGVBQU8sS0FBS0UsT0FBTCxDQUFhQyxLQUFLLENBQUwsQ0FBYixDQUFQO0FBQ0Q7QUFDRCxhQUFPLEtBQVA7QUFDRCxLQTdEYzs7O0FBK0RmOzs7Ozs7QUFNQUUsT0FyRWUsZUFxRVhGLElBckVXLEVBcUVMO0FBQ1IsV0FBSyxJQUFJdkwsQ0FBVCxJQUFjLEtBQUsySyxPQUFuQixFQUE0QjtBQUMxQixZQUFHLEtBQUtBLE9BQUwsQ0FBYU8sY0FBYixDQUE0QmxMLENBQTVCLENBQUgsRUFBbUM7QUFDakMsY0FBSXdMLFFBQVEsS0FBS2IsT0FBTCxDQUFhM0ssQ0FBYixDQUFaO0FBQ0EsY0FBSXVMLFNBQVNDLE1BQU14TyxJQUFuQixFQUF5QixPQUFPd08sTUFBTUwsS0FBYjtBQUMxQjtBQUNGOztBQUVELGFBQU8sSUFBUDtBQUNELEtBOUVjOzs7QUFnRmY7Ozs7OztBQU1BQyxtQkF0RmUsNkJBc0ZHO0FBQ2hCLFVBQUlRLE9BQUo7O0FBRUEsV0FBSyxJQUFJNUwsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUsySyxPQUFMLENBQWFyTCxNQUFqQyxFQUF5Q1UsR0FBekMsRUFBOEM7QUFDNUMsWUFBSXdMLFFBQVEsS0FBS2IsT0FBTCxDQUFhM0ssQ0FBYixDQUFaOztBQUVBLFlBQUlpRCxPQUFPeUksVUFBUCxDQUFrQkYsTUFBTUwsS0FBeEIsRUFBK0JRLE9BQW5DLEVBQTRDO0FBQzFDQyxvQkFBVUosS0FBVjtBQUNEO0FBQ0Y7O0FBRUQsVUFBSSxRQUFPSSxPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQy9CLGVBQU9BLFFBQVE1TyxJQUFmO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBTzRPLE9BQVA7QUFDRDtBQUNGLEtBdEdjOzs7QUF3R2Y7Ozs7O0FBS0FQLFlBN0dlLHNCQTZHSjtBQUFBOztBQUNUOU8sUUFBRTBHLE1BQUYsRUFBVTZHLEVBQVYsQ0FBYSxzQkFBYixFQUFxQyxZQUFNO0FBQ3pDLFlBQUkrQixVQUFVLE1BQUtULGVBQUwsRUFBZDtBQUFBLFlBQXNDVSxjQUFjLE1BQUtsQixPQUF6RDs7QUFFQSxZQUFJaUIsWUFBWUMsV0FBaEIsRUFBNkI7QUFDM0I7QUFDQSxnQkFBS2xCLE9BQUwsR0FBZWlCLE9BQWY7O0FBRUE7QUFDQXRQLFlBQUUwRyxNQUFGLEVBQVVwRixPQUFWLENBQWtCLHVCQUFsQixFQUEyQyxDQUFDZ08sT0FBRCxFQUFVQyxXQUFWLENBQTNDO0FBQ0Q7QUFDRixPQVZEO0FBV0Q7QUF6SGMsR0FBakI7O0FBNEhBclAsYUFBV2dHLFVBQVgsR0FBd0JBLFVBQXhCOztBQUVBO0FBQ0E7QUFDQVEsU0FBT3lJLFVBQVAsS0FBc0J6SSxPQUFPeUksVUFBUCxHQUFvQixZQUFXO0FBQ25EOztBQUVBOztBQUNBLFFBQUlLLGFBQWM5SSxPQUFPOEksVUFBUCxJQUFxQjlJLE9BQU8rSSxLQUE5Qzs7QUFFQTtBQUNBLFFBQUksQ0FBQ0QsVUFBTCxFQUFpQjtBQUNmLFVBQUl4SyxRQUFVSixTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQWQ7QUFBQSxVQUNBNkssU0FBYzlLLFNBQVMrSyxvQkFBVCxDQUE4QixRQUE5QixFQUF3QyxDQUF4QyxDQURkO0FBQUEsVUFFQUMsT0FBYyxJQUZkOztBQUlBNUssWUFBTTdDLElBQU4sR0FBYyxVQUFkO0FBQ0E2QyxZQUFNNkssRUFBTixHQUFjLG1CQUFkOztBQUVBSCxnQkFBVUEsT0FBT3RGLFVBQWpCLElBQStCc0YsT0FBT3RGLFVBQVAsQ0FBa0IwRixZQUFsQixDQUErQjlLLEtBQS9CLEVBQXNDMEssTUFBdEMsQ0FBL0I7O0FBRUE7QUFDQUUsYUFBUSxzQkFBc0JsSixNQUF2QixJQUFrQ0EsT0FBT3FKLGdCQUFQLENBQXdCL0ssS0FBeEIsRUFBK0IsSUFBL0IsQ0FBbEMsSUFBMEVBLE1BQU1nTCxZQUF2Rjs7QUFFQVIsbUJBQWE7QUFDWFMsbUJBRFcsdUJBQ0NSLEtBREQsRUFDUTtBQUNqQixjQUFJUyxtQkFBaUJULEtBQWpCLDJDQUFKOztBQUVBO0FBQ0EsY0FBSXpLLE1BQU1tTCxVQUFWLEVBQXNCO0FBQ3BCbkwsa0JBQU1tTCxVQUFOLENBQWlCQyxPQUFqQixHQUEyQkYsSUFBM0I7QUFDRCxXQUZELE1BRU87QUFDTGxMLGtCQUFNcUwsV0FBTixHQUFvQkgsSUFBcEI7QUFDRDs7QUFFRDtBQUNBLGlCQUFPTixLQUFLL0YsS0FBTCxLQUFlLEtBQXRCO0FBQ0Q7QUFiVSxPQUFiO0FBZUQ7O0FBRUQsV0FBTyxVQUFTNEYsS0FBVCxFQUFnQjtBQUNyQixhQUFPO0FBQ0xMLGlCQUFTSSxXQUFXUyxXQUFYLENBQXVCUixTQUFTLEtBQWhDLENBREo7QUFFTEEsZUFBT0EsU0FBUztBQUZYLE9BQVA7QUFJRCxLQUxEO0FBTUQsR0EzQ3lDLEVBQTFDOztBQTZDQTtBQUNBLFdBQVNmLGtCQUFULENBQTRCbEcsR0FBNUIsRUFBaUM7QUFDL0IsUUFBSThILGNBQWMsRUFBbEI7O0FBRUEsUUFBSSxPQUFPOUgsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzNCLGFBQU84SCxXQUFQO0FBQ0Q7O0FBRUQ5SCxVQUFNQSxJQUFJbEUsSUFBSixHQUFXaEIsS0FBWCxDQUFpQixDQUFqQixFQUFvQixDQUFDLENBQXJCLENBQU4sQ0FQK0IsQ0FPQTs7QUFFL0IsUUFBSSxDQUFDa0YsR0FBTCxFQUFVO0FBQ1IsYUFBTzhILFdBQVA7QUFDRDs7QUFFREEsa0JBQWM5SCxJQUFJdkUsS0FBSixDQUFVLEdBQVYsRUFBZXNNLE1BQWYsQ0FBc0IsVUFBU0MsR0FBVCxFQUFjQyxLQUFkLEVBQXFCO0FBQ3ZELFVBQUlDLFFBQVFELE1BQU05SCxPQUFOLENBQWMsS0FBZCxFQUFxQixHQUFyQixFQUEwQjFFLEtBQTFCLENBQWdDLEdBQWhDLENBQVo7QUFDQSxVQUFJd0gsTUFBTWlGLE1BQU0sQ0FBTixDQUFWO0FBQ0EsVUFBSUMsTUFBTUQsTUFBTSxDQUFOLENBQVY7QUFDQWpGLFlBQU1tRixtQkFBbUJuRixHQUFuQixDQUFOOztBQUVBO0FBQ0E7QUFDQWtGLFlBQU1BLFFBQVFwSyxTQUFSLEdBQW9CLElBQXBCLEdBQTJCcUssbUJBQW1CRCxHQUFuQixDQUFqQzs7QUFFQSxVQUFJLENBQUNILElBQUk3QixjQUFKLENBQW1CbEQsR0FBbkIsQ0FBTCxFQUE4QjtBQUM1QitFLFlBQUkvRSxHQUFKLElBQVdrRixHQUFYO0FBQ0QsT0FGRCxNQUVPLElBQUl4SyxNQUFNMEssT0FBTixDQUFjTCxJQUFJL0UsR0FBSixDQUFkLENBQUosRUFBNkI7QUFDbEMrRSxZQUFJL0UsR0FBSixFQUFTbEssSUFBVCxDQUFjb1AsR0FBZDtBQUNELE9BRk0sTUFFQTtBQUNMSCxZQUFJL0UsR0FBSixJQUFXLENBQUMrRSxJQUFJL0UsR0FBSixDQUFELEVBQVdrRixHQUFYLENBQVg7QUFDRDtBQUNELGFBQU9ILEdBQVA7QUFDRCxLQWxCYSxFQWtCWCxFQWxCVyxDQUFkOztBQW9CQSxXQUFPRixXQUFQO0FBQ0Q7O0FBRURwUSxhQUFXZ0csVUFBWCxHQUF3QkEsVUFBeEI7QUFFQyxDQW5PQSxDQW1PQzBDLE1Bbk9ELENBQUQ7QUNGQTs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWI7Ozs7O0FBS0EsTUFBTThRLGNBQWdCLENBQUMsV0FBRCxFQUFjLFdBQWQsQ0FBdEI7QUFDQSxNQUFNQyxnQkFBZ0IsQ0FBQyxrQkFBRCxFQUFxQixrQkFBckIsQ0FBdEI7O0FBRUEsTUFBTUMsU0FBUztBQUNiQyxlQUFXLG1CQUFTaEksT0FBVCxFQUFrQmlJLFNBQWxCLEVBQTZCQyxFQUE3QixFQUFpQztBQUMxQ0MsY0FBUSxJQUFSLEVBQWNuSSxPQUFkLEVBQXVCaUksU0FBdkIsRUFBa0NDLEVBQWxDO0FBQ0QsS0FIWTs7QUFLYkUsZ0JBQVksb0JBQVNwSSxPQUFULEVBQWtCaUksU0FBbEIsRUFBNkJDLEVBQTdCLEVBQWlDO0FBQzNDQyxjQUFRLEtBQVIsRUFBZW5JLE9BQWYsRUFBd0JpSSxTQUF4QixFQUFtQ0MsRUFBbkM7QUFDRDtBQVBZLEdBQWY7O0FBVUEsV0FBU0csSUFBVCxDQUFjQyxRQUFkLEVBQXdCL04sSUFBeEIsRUFBOEJtRCxFQUE5QixFQUFpQztBQUMvQixRQUFJNkssSUFBSjtBQUFBLFFBQVVDLElBQVY7QUFBQSxRQUFnQjdKLFFBQVEsSUFBeEI7QUFDQTs7QUFFQSxRQUFJMkosYUFBYSxDQUFqQixFQUFvQjtBQUNsQjVLLFNBQUdoQixLQUFILENBQVNuQyxJQUFUO0FBQ0FBLFdBQUtsQyxPQUFMLENBQWEscUJBQWIsRUFBb0MsQ0FBQ2tDLElBQUQsQ0FBcEMsRUFBNEMwQixjQUE1QyxDQUEyRCxxQkFBM0QsRUFBa0YsQ0FBQzFCLElBQUQsQ0FBbEY7QUFDQTtBQUNEOztBQUVELGFBQVNrTyxJQUFULENBQWNDLEVBQWQsRUFBaUI7QUFDZixVQUFHLENBQUMvSixLQUFKLEVBQVdBLFFBQVErSixFQUFSO0FBQ1g7QUFDQUYsYUFBT0UsS0FBSy9KLEtBQVo7QUFDQWpCLFNBQUdoQixLQUFILENBQVNuQyxJQUFUOztBQUVBLFVBQUdpTyxPQUFPRixRQUFWLEVBQW1CO0FBQUVDLGVBQU85SyxPQUFPTSxxQkFBUCxDQUE2QjBLLElBQTdCLEVBQW1DbE8sSUFBbkMsQ0FBUDtBQUFrRCxPQUF2RSxNQUNJO0FBQ0ZrRCxlQUFPUSxvQkFBUCxDQUE0QnNLLElBQTVCO0FBQ0FoTyxhQUFLbEMsT0FBTCxDQUFhLHFCQUFiLEVBQW9DLENBQUNrQyxJQUFELENBQXBDLEVBQTRDMEIsY0FBNUMsQ0FBMkQscUJBQTNELEVBQWtGLENBQUMxQixJQUFELENBQWxGO0FBQ0Q7QUFDRjtBQUNEZ08sV0FBTzlLLE9BQU9NLHFCQUFQLENBQTZCMEssSUFBN0IsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7Ozs7QUFTQSxXQUFTTixPQUFULENBQWlCUSxJQUFqQixFQUF1QjNJLE9BQXZCLEVBQWdDaUksU0FBaEMsRUFBMkNDLEVBQTNDLEVBQStDO0FBQzdDbEksY0FBVWpKLEVBQUVpSixPQUFGLEVBQVdvRSxFQUFYLENBQWMsQ0FBZCxDQUFWOztBQUVBLFFBQUksQ0FBQ3BFLFFBQVFsRyxNQUFiLEVBQXFCOztBQUVyQixRQUFJOE8sWUFBWUQsT0FBT2QsWUFBWSxDQUFaLENBQVAsR0FBd0JBLFlBQVksQ0FBWixDQUF4QztBQUNBLFFBQUlnQixjQUFjRixPQUFPYixjQUFjLENBQWQsQ0FBUCxHQUEwQkEsY0FBYyxDQUFkLENBQTVDOztBQUVBO0FBQ0FnQjs7QUFFQTlJLFlBQ0crSSxRQURILENBQ1lkLFNBRFosRUFFRzFDLEdBRkgsQ0FFTyxZQUZQLEVBRXFCLE1BRnJCOztBQUlBeEgsMEJBQXNCLFlBQU07QUFDMUJpQyxjQUFRK0ksUUFBUixDQUFpQkgsU0FBakI7QUFDQSxVQUFJRCxJQUFKLEVBQVUzSSxRQUFRZ0osSUFBUjtBQUNYLEtBSEQ7O0FBS0E7QUFDQWpMLDBCQUFzQixZQUFNO0FBQzFCaUMsY0FBUSxDQUFSLEVBQVdpSixXQUFYO0FBQ0FqSixjQUNHdUYsR0FESCxDQUNPLFlBRFAsRUFDcUIsRUFEckIsRUFFR3dELFFBRkgsQ0FFWUYsV0FGWjtBQUdELEtBTEQ7O0FBT0E7QUFDQTdJLFlBQVFrSixHQUFSLENBQVlqUyxXQUFXd0UsYUFBWCxDQUF5QnVFLE9BQXpCLENBQVosRUFBK0NtSixNQUEvQzs7QUFFQTtBQUNBLGFBQVNBLE1BQVQsR0FBa0I7QUFDaEIsVUFBSSxDQUFDUixJQUFMLEVBQVczSSxRQUFRb0osSUFBUjtBQUNYTjtBQUNBLFVBQUlaLEVBQUosRUFBUUEsR0FBR3hMLEtBQUgsQ0FBU3NELE9BQVQ7QUFDVDs7QUFFRDtBQUNBLGFBQVM4SSxLQUFULEdBQWlCO0FBQ2Y5SSxjQUFRLENBQVIsRUFBV2pFLEtBQVgsQ0FBaUJzTixrQkFBakIsR0FBc0MsQ0FBdEM7QUFDQXJKLGNBQVFoRCxXQUFSLENBQXVCNEwsU0FBdkIsU0FBb0NDLFdBQXBDLFNBQW1EWixTQUFuRDtBQUNEO0FBQ0Y7O0FBRURoUixhQUFXb1IsSUFBWCxHQUFrQkEsSUFBbEI7QUFDQXBSLGFBQVc4USxNQUFYLEdBQW9CQSxNQUFwQjtBQUVDLENBdEdBLENBc0dDcEksTUF0R0QsQ0FBRDtBQ0ZBOztBQUVBLENBQUMsVUFBUzVJLENBQVQsRUFBWTs7QUFFVCxRQUFNdVMsT0FBTztBQUNUQyxlQURTLG1CQUNEQyxJQURDLEVBQ2tCO0FBQUEsZ0JBQWJ0USxJQUFhLHVFQUFOLElBQU07O0FBQ3ZCc1EsaUJBQUtsUyxJQUFMLENBQVUsTUFBVixFQUFrQixTQUFsQjs7QUFFQSxnQkFBSW1TLFFBQVFELEtBQUs5TyxJQUFMLENBQVUsSUFBVixFQUFnQnBELElBQWhCLENBQXFCLEVBQUMsUUFBUSxVQUFULEVBQXJCLENBQVo7QUFBQSxnQkFDSW9TLHVCQUFxQnhRLElBQXJCLGFBREo7QUFBQSxnQkFFSXlRLGVBQWtCRCxZQUFsQixVQUZKO0FBQUEsZ0JBR0lFLHNCQUFvQjFRLElBQXBCLG9CQUhKO0FBQUEsZ0JBSUkyUSxZQUFhM1EsU0FBUyxXQUoxQixDQUh1QixDQU9pQjs7QUFFeENzUSxpQkFBSzlPLElBQUwsQ0FBVSxTQUFWLEVBQXFCcEQsSUFBckIsQ0FBMEIsVUFBMUIsRUFBc0MsQ0FBdEM7O0FBRUFtUyxrQkFBTXpRLElBQU4sQ0FBVyxZQUFXO0FBQ2xCLG9CQUFJOFEsUUFBUS9TLEVBQUUsSUFBRixDQUFaO0FBQUEsb0JBQ0lnVCxPQUFPRCxNQUFNRSxRQUFOLENBQWUsSUFBZixDQURYOztBQUdBLG9CQUFJRCxLQUFLalEsTUFBVCxFQUFpQjtBQUNiZ1EsMEJBQU1mLFFBQU4sQ0FBZWEsV0FBZjtBQUNBRyx5QkFBS2hCLFFBQUwsY0FBeUJXLFlBQXpCLEVBQXlDcFMsSUFBekMsQ0FBOEMsRUFBQyxnQkFBZ0IsRUFBakIsRUFBOUM7QUFDQSx3QkFBR3VTLFNBQUgsRUFBYztBQUNWQyw4QkFBTXhTLElBQU4sQ0FBVztBQUNQLDZDQUFpQixJQURWO0FBRVAsNkNBQWlCLEtBRlY7QUFHUCwwQ0FBY3dTLE1BQU1FLFFBQU4sQ0FBZSxTQUFmLEVBQTBCL0MsSUFBMUI7QUFIUCx5QkFBWDs7QUFNQThDLDZCQUFLelMsSUFBTCxDQUFVO0FBQ04sMkNBQWUsSUFEVDtBQUVOLG9DQUFRO0FBRkYseUJBQVY7QUFJSDtBQUNKOztBQUVELG9CQUFJd1MsTUFBTTdKLE1BQU4sQ0FBYSxnQkFBYixFQUErQm5HLE1BQW5DLEVBQTJDO0FBQ3ZDZ1EsMEJBQU1mLFFBQU4sc0JBQWtDWSxZQUFsQztBQUNIO0FBQ0osYUF4QkQ7O0FBMEJBO0FBQ0gsU0F2Q1E7QUF5Q1RNLFlBekNTLGdCQXlDSlQsSUF6Q0ksRUF5Q0V0USxJQXpDRixFQXlDUTtBQUNiLGdCQUFJdVEsUUFBUUQsS0FBSzlPLElBQUwsQ0FBVSxJQUFWLEVBQWdCaEMsVUFBaEIsQ0FBMkIsVUFBM0IsQ0FBWjtBQUFBLGdCQUNJZ1IsdUJBQXFCeFEsSUFBckIsYUFESjtBQUFBLGdCQUVJeVEsZUFBa0JELFlBQWxCLFVBRko7QUFBQSxnQkFHSUUsc0JBQW9CMVEsSUFBcEIsb0JBSEo7O0FBS0FzUSxpQkFDSzlPLElBREwsQ0FDVSx3QkFEVixFQUVLc0MsV0FGTCxDQUVvQjBNLFlBRnBCLFNBRW9DQyxZQUZwQyxTQUVvREMsV0FGcEQseUNBR0tsUixVQUhMLENBR2dCLGNBSGhCLEVBR2dDNk0sR0FIaEMsQ0FHb0MsU0FIcEMsRUFHK0MsRUFIL0M7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNIO0FBbEVRLEtBQWI7O0FBcUVBdE8sZUFBV3FTLElBQVgsR0FBa0JBLElBQWxCO0FBRUgsQ0F6RUEsQ0F5RUMzSixNQXpFRCxDQUFEO0FDRkE7O0FBRUEsQ0FBQyxVQUFTNUksQ0FBVCxFQUFZOztBQUViLFdBQVNtVCxLQUFULENBQWUzUCxJQUFmLEVBQXFCNFAsT0FBckIsRUFBOEJqQyxFQUE5QixFQUFrQztBQUNoQyxRQUFJL08sUUFBUSxJQUFaO0FBQUEsUUFDSW1QLFdBQVc2QixRQUFRN0IsUUFEdkI7QUFBQSxRQUNnQztBQUM1QjhCLGdCQUFZM1EsT0FBT0MsSUFBUCxDQUFZYSxLQUFLbkMsSUFBTCxFQUFaLEVBQXlCLENBQXpCLEtBQStCLE9BRi9DO0FBQUEsUUFHSWlTLFNBQVMsQ0FBQyxDQUhkO0FBQUEsUUFJSTFMLEtBSko7QUFBQSxRQUtJckMsS0FMSjs7QUFPQSxTQUFLZ08sUUFBTCxHQUFnQixLQUFoQjs7QUFFQSxTQUFLQyxPQUFMLEdBQWUsWUFBVztBQUN4QkYsZUFBUyxDQUFDLENBQVY7QUFDQTVMLG1CQUFhbkMsS0FBYjtBQUNBLFdBQUtxQyxLQUFMO0FBQ0QsS0FKRDs7QUFNQSxTQUFLQSxLQUFMLEdBQWEsWUFBVztBQUN0QixXQUFLMkwsUUFBTCxHQUFnQixLQUFoQjtBQUNBO0FBQ0E3TCxtQkFBYW5DLEtBQWI7QUFDQStOLGVBQVNBLFVBQVUsQ0FBVixHQUFjL0IsUUFBZCxHQUF5QitCLE1BQWxDO0FBQ0E5UCxXQUFLbkMsSUFBTCxDQUFVLFFBQVYsRUFBb0IsS0FBcEI7QUFDQXVHLGNBQVFoQixLQUFLQyxHQUFMLEVBQVI7QUFDQXRCLGNBQVFOLFdBQVcsWUFBVTtBQUMzQixZQUFHbU8sUUFBUUssUUFBWCxFQUFvQjtBQUNsQnJSLGdCQUFNb1IsT0FBTixHQURrQixDQUNGO0FBQ2pCO0FBQ0QsWUFBSXJDLE1BQU0sT0FBT0EsRUFBUCxLQUFjLFVBQXhCLEVBQW9DO0FBQUVBO0FBQU87QUFDOUMsT0FMTyxFQUtMbUMsTUFMSyxDQUFSO0FBTUE5UCxXQUFLbEMsT0FBTCxvQkFBOEIrUixTQUE5QjtBQUNELEtBZEQ7O0FBZ0JBLFNBQUtLLEtBQUwsR0FBYSxZQUFXO0FBQ3RCLFdBQUtILFFBQUwsR0FBZ0IsSUFBaEI7QUFDQTtBQUNBN0wsbUJBQWFuQyxLQUFiO0FBQ0EvQixXQUFLbkMsSUFBTCxDQUFVLFFBQVYsRUFBb0IsSUFBcEI7QUFDQSxVQUFJeUQsTUFBTThCLEtBQUtDLEdBQUwsRUFBVjtBQUNBeU0sZUFBU0EsVUFBVXhPLE1BQU04QyxLQUFoQixDQUFUO0FBQ0FwRSxXQUFLbEMsT0FBTCxxQkFBK0IrUixTQUEvQjtBQUNELEtBUkQ7QUFTRDs7QUFFRDs7Ozs7QUFLQSxXQUFTTSxjQUFULENBQXdCQyxNQUF4QixFQUFnQ3JNLFFBQWhDLEVBQXlDO0FBQ3ZDLFFBQUkrRyxPQUFPLElBQVg7QUFBQSxRQUNJdUYsV0FBV0QsT0FBTzdRLE1BRHRCOztBQUdBLFFBQUk4USxhQUFhLENBQWpCLEVBQW9CO0FBQ2xCdE07QUFDRDs7QUFFRHFNLFdBQU8zUixJQUFQLENBQVksWUFBVztBQUNyQjtBQUNBLFVBQUksS0FBSzZSLFFBQUwsSUFBa0IsS0FBS0MsVUFBTCxLQUFvQixDQUF0QyxJQUE2QyxLQUFLQSxVQUFMLEtBQW9CLFVBQXJFLEVBQWtGO0FBQ2hGQztBQUNEO0FBQ0Q7QUFIQSxXQUlLO0FBQ0g7QUFDQSxjQUFJQyxNQUFNalUsRUFBRSxJQUFGLEVBQVFPLElBQVIsQ0FBYSxLQUFiLENBQVY7QUFDQVAsWUFBRSxJQUFGLEVBQVFPLElBQVIsQ0FBYSxLQUFiLEVBQW9CMFQsT0FBT0EsSUFBSXZTLE9BQUosQ0FBWSxHQUFaLEtBQW9CLENBQXBCLEdBQXdCLEdBQXhCLEdBQThCLEdBQXJDLElBQTZDLElBQUlrRixJQUFKLEdBQVdFLE9BQVgsRUFBakU7QUFDQTlHLFlBQUUsSUFBRixFQUFRbVMsR0FBUixDQUFZLE1BQVosRUFBb0IsWUFBVztBQUM3QjZCO0FBQ0QsV0FGRDtBQUdEO0FBQ0YsS0FkRDs7QUFnQkEsYUFBU0EsaUJBQVQsR0FBNkI7QUFDM0JIO0FBQ0EsVUFBSUEsYUFBYSxDQUFqQixFQUFvQjtBQUNsQnRNO0FBQ0Q7QUFDRjtBQUNGOztBQUVEckgsYUFBV2lULEtBQVgsR0FBbUJBLEtBQW5CO0FBQ0FqVCxhQUFXeVQsY0FBWCxHQUE0QkEsY0FBNUI7QUFFQyxDQXJGQSxDQXFGQy9LLE1BckZELENBQUQ7OztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxVQUFTNUksQ0FBVCxFQUFZOztBQUVYQSxHQUFFa1UsU0FBRixHQUFjO0FBQ1ovVCxXQUFTLE9BREc7QUFFWmdVLFdBQVMsa0JBQWtCdlAsU0FBU3dQLGVBRnhCO0FBR1ozRyxrQkFBZ0IsS0FISjtBQUlaNEcsaUJBQWUsRUFKSDtBQUtaQyxpQkFBZTtBQUxILEVBQWQ7O0FBUUEsS0FBTUMsU0FBTjtBQUFBLEtBQ01DLFNBRE47QUFBQSxLQUVNQyxTQUZOO0FBQUEsS0FHTUMsV0FITjtBQUFBLEtBSU1DLFdBQVcsS0FKakI7O0FBTUEsVUFBU0MsVUFBVCxHQUFzQjtBQUNwQjtBQUNBLE9BQUtDLG1CQUFMLENBQXlCLFdBQXpCLEVBQXNDQyxXQUF0QztBQUNBLE9BQUtELG1CQUFMLENBQXlCLFVBQXpCLEVBQXFDRCxVQUFyQztBQUNBRCxhQUFXLEtBQVg7QUFDRDs7QUFFRCxVQUFTRyxXQUFULENBQXFCNVEsQ0FBckIsRUFBd0I7QUFDdEIsTUFBSWxFLEVBQUVrVSxTQUFGLENBQVl6RyxjQUFoQixFQUFnQztBQUFFdkosS0FBRXVKLGNBQUY7QUFBcUI7QUFDdkQsTUFBR2tILFFBQUgsRUFBYTtBQUNYLE9BQUlJLElBQUk3USxFQUFFOFEsT0FBRixDQUFVLENBQVYsRUFBYUMsS0FBckI7QUFDQSxPQUFJQyxJQUFJaFIsRUFBRThRLE9BQUYsQ0FBVSxDQUFWLEVBQWFHLEtBQXJCO0FBQ0EsT0FBSUMsS0FBS2IsWUFBWVEsQ0FBckI7QUFDQSxPQUFJTSxLQUFLYixZQUFZVSxDQUFyQjtBQUNBLE9BQUlJLEdBQUo7QUFDQVosaUJBQWMsSUFBSTlOLElBQUosR0FBV0UsT0FBWCxLQUF1QjJOLFNBQXJDO0FBQ0EsT0FBR3hSLEtBQUtzUyxHQUFMLENBQVNILEVBQVQsS0FBZ0JwVixFQUFFa1UsU0FBRixDQUFZRyxhQUE1QixJQUE2Q0ssZUFBZTFVLEVBQUVrVSxTQUFGLENBQVlJLGFBQTNFLEVBQTBGO0FBQ3hGZ0IsVUFBTUYsS0FBSyxDQUFMLEdBQVMsTUFBVCxHQUFrQixPQUF4QjtBQUNEO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsT0FBR0UsR0FBSCxFQUFRO0FBQ05wUixNQUFFdUosY0FBRjtBQUNBbUgsZUFBV3ZPLElBQVgsQ0FBZ0IsSUFBaEI7QUFDQXJHLE1BQUUsSUFBRixFQUFRc0IsT0FBUixDQUFnQixPQUFoQixFQUF5QmdVLEdBQXpCLEVBQThCaFUsT0FBOUIsV0FBOENnVSxHQUE5QztBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxVQUFTRSxZQUFULENBQXNCdFIsQ0FBdEIsRUFBeUI7QUFDdkIsTUFBSUEsRUFBRThRLE9BQUYsQ0FBVWpTLE1BQVYsSUFBb0IsQ0FBeEIsRUFBMkI7QUFDekJ3UixlQUFZclEsRUFBRThRLE9BQUYsQ0FBVSxDQUFWLEVBQWFDLEtBQXpCO0FBQ0FULGVBQVl0USxFQUFFOFEsT0FBRixDQUFVLENBQVYsRUFBYUcsS0FBekI7QUFDQVIsY0FBVyxJQUFYO0FBQ0FGLGVBQVksSUFBSTdOLElBQUosR0FBV0UsT0FBWCxFQUFaO0FBQ0EsUUFBSzJPLGdCQUFMLENBQXNCLFdBQXRCLEVBQW1DWCxXQUFuQyxFQUFnRCxLQUFoRDtBQUNBLFFBQUtXLGdCQUFMLENBQXNCLFVBQXRCLEVBQWtDYixVQUFsQyxFQUE4QyxLQUE5QztBQUNEO0FBQ0Y7O0FBRUQsVUFBU2MsSUFBVCxHQUFnQjtBQUNkLE9BQUtELGdCQUFMLElBQXlCLEtBQUtBLGdCQUFMLENBQXNCLFlBQXRCLEVBQW9DRCxZQUFwQyxFQUFrRCxLQUFsRCxDQUF6QjtBQUNEOztBQUVELFVBQVNHLFFBQVQsR0FBb0I7QUFDbEIsT0FBS2QsbUJBQUwsQ0FBeUIsWUFBekIsRUFBdUNXLFlBQXZDO0FBQ0Q7O0FBRUR4VixHQUFFd0wsS0FBRixDQUFRb0ssT0FBUixDQUFnQkMsS0FBaEIsR0FBd0IsRUFBRUMsT0FBT0osSUFBVCxFQUF4Qjs7QUFFQTFWLEdBQUVpQyxJQUFGLENBQU8sQ0FBQyxNQUFELEVBQVMsSUFBVCxFQUFlLE1BQWYsRUFBdUIsT0FBdkIsQ0FBUCxFQUF3QyxZQUFZO0FBQ2xEakMsSUFBRXdMLEtBQUYsQ0FBUW9LLE9BQVIsV0FBd0IsSUFBeEIsSUFBa0MsRUFBRUUsT0FBTyxpQkFBVTtBQUNuRDlWLE1BQUUsSUFBRixFQUFRdU4sRUFBUixDQUFXLE9BQVgsRUFBb0J2TixFQUFFK1YsSUFBdEI7QUFDRCxJQUZpQyxFQUFsQztBQUdELEVBSkQ7QUFLRCxDQXhFRCxFQXdFR25OLE1BeEVIO0FBeUVBOzs7QUFHQSxDQUFDLFVBQVM1SSxDQUFULEVBQVc7QUFDVkEsR0FBRTJHLEVBQUYsQ0FBS3FQLFFBQUwsR0FBZ0IsWUFBVTtBQUN4QixPQUFLL1QsSUFBTCxDQUFVLFVBQVN3QixDQUFULEVBQVdZLEVBQVgsRUFBYztBQUN0QnJFLEtBQUVxRSxFQUFGLEVBQU15RCxJQUFOLENBQVcsMkNBQVgsRUFBdUQsWUFBVTtBQUMvRDtBQUNBO0FBQ0FtTyxnQkFBWXpLLEtBQVo7QUFDRCxJQUpEO0FBS0QsR0FORDs7QUFRQSxNQUFJeUssY0FBYyxTQUFkQSxXQUFjLENBQVN6SyxLQUFULEVBQWU7QUFDL0IsT0FBSXdKLFVBQVV4SixNQUFNMEssY0FBcEI7QUFBQSxPQUNJQyxRQUFRbkIsUUFBUSxDQUFSLENBRFo7QUFBQSxPQUVJb0IsYUFBYTtBQUNYQyxnQkFBWSxXQUREO0FBRVhDLGVBQVcsV0FGQTtBQUdYQyxjQUFVO0FBSEMsSUFGakI7QUFBQSxPQU9JcFUsT0FBT2lVLFdBQVc1SyxNQUFNckosSUFBakIsQ0FQWDtBQUFBLE9BUUlxVSxjQVJKOztBQVdBLE9BQUcsZ0JBQWdCOVAsTUFBaEIsSUFBMEIsT0FBT0EsT0FBTytQLFVBQWQsS0FBNkIsVUFBMUQsRUFBc0U7QUFDcEVELHFCQUFpQixJQUFJOVAsT0FBTytQLFVBQVgsQ0FBc0J0VSxJQUF0QixFQUE0QjtBQUMzQyxnQkFBVyxJQURnQztBQUUzQyxtQkFBYyxJQUY2QjtBQUczQyxnQkFBV2dVLE1BQU1PLE9BSDBCO0FBSTNDLGdCQUFXUCxNQUFNUSxPQUowQjtBQUszQyxnQkFBV1IsTUFBTVMsT0FMMEI7QUFNM0MsZ0JBQVdULE1BQU1VO0FBTjBCLEtBQTVCLENBQWpCO0FBUUQsSUFURCxNQVNPO0FBQ0xMLHFCQUFpQjVSLFNBQVNrUyxXQUFULENBQXFCLFlBQXJCLENBQWpCO0FBQ0FOLG1CQUFlTyxjQUFmLENBQThCNVUsSUFBOUIsRUFBb0MsSUFBcEMsRUFBMEMsSUFBMUMsRUFBZ0R1RSxNQUFoRCxFQUF3RCxDQUF4RCxFQUEyRHlQLE1BQU1PLE9BQWpFLEVBQTBFUCxNQUFNUSxPQUFoRixFQUF5RlIsTUFBTVMsT0FBL0YsRUFBd0dULE1BQU1VLE9BQTlHLEVBQXVILEtBQXZILEVBQThILEtBQTlILEVBQXFJLEtBQXJJLEVBQTRJLEtBQTVJLEVBQW1KLENBQW5KLENBQW9KLFFBQXBKLEVBQThKLElBQTlKO0FBQ0Q7QUFDRFYsU0FBTTNJLE1BQU4sQ0FBYXdKLGFBQWIsQ0FBMkJSLGNBQTNCO0FBQ0QsR0ExQkQ7QUEyQkQsRUFwQ0Q7QUFxQ0QsQ0F0Q0EsQ0FzQ0M1TixNQXRDRCxDQUFEOztBQXlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMvSEE7Ozs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWIsTUFBTWlYLG1CQUFvQixZQUFZO0FBQ3BDLFFBQUlDLFdBQVcsQ0FBQyxRQUFELEVBQVcsS0FBWCxFQUFrQixHQUFsQixFQUF1QixJQUF2QixFQUE2QixFQUE3QixDQUFmO0FBQ0EsU0FBSyxJQUFJelQsSUFBRSxDQUFYLEVBQWNBLElBQUl5VCxTQUFTblUsTUFBM0IsRUFBbUNVLEdBQW5DLEVBQXdDO0FBQ3RDLFVBQU95VCxTQUFTelQsQ0FBVCxDQUFILHlCQUFvQ2lELE1BQXhDLEVBQWdEO0FBQzlDLGVBQU9BLE9BQVV3USxTQUFTelQsQ0FBVCxDQUFWLHNCQUFQO0FBQ0Q7QUFDRjtBQUNELFdBQU8sS0FBUDtBQUNELEdBUnlCLEVBQTFCOztBQVVBLE1BQU0wVCxXQUFXLFNBQVhBLFFBQVcsQ0FBQzlTLEVBQUQsRUFBS2xDLElBQUwsRUFBYztBQUM3QmtDLE9BQUdoRCxJQUFILENBQVFjLElBQVIsRUFBYzhCLEtBQWQsQ0FBb0IsR0FBcEIsRUFBeUIxQixPQUF6QixDQUFpQyxjQUFNO0FBQ3JDdkMsY0FBTTZQLEVBQU4sRUFBYTFOLFNBQVMsT0FBVCxHQUFtQixTQUFuQixHQUErQixnQkFBNUMsRUFBaUVBLElBQWpFLGtCQUFvRixDQUFDa0MsRUFBRCxDQUFwRjtBQUNELEtBRkQ7QUFHRCxHQUpEO0FBS0E7QUFDQXJFLElBQUU0RSxRQUFGLEVBQVkySSxFQUFaLENBQWUsa0JBQWYsRUFBbUMsYUFBbkMsRUFBa0QsWUFBVztBQUMzRDRKLGFBQVNuWCxFQUFFLElBQUYsQ0FBVCxFQUFrQixNQUFsQjtBQUNELEdBRkQ7O0FBSUE7QUFDQTtBQUNBQSxJQUFFNEUsUUFBRixFQUFZMkksRUFBWixDQUFlLGtCQUFmLEVBQW1DLGNBQW5DLEVBQW1ELFlBQVc7QUFDNUQsUUFBSXNDLEtBQUs3UCxFQUFFLElBQUYsRUFBUXFCLElBQVIsQ0FBYSxPQUFiLENBQVQ7QUFDQSxRQUFJd08sRUFBSixFQUFRO0FBQ05zSCxlQUFTblgsRUFBRSxJQUFGLENBQVQsRUFBa0IsT0FBbEI7QUFDRCxLQUZELE1BR0s7QUFDSEEsUUFBRSxJQUFGLEVBQVFzQixPQUFSLENBQWdCLGtCQUFoQjtBQUNEO0FBQ0YsR0FSRDs7QUFVQTtBQUNBdEIsSUFBRTRFLFFBQUYsRUFBWTJJLEVBQVosQ0FBZSxrQkFBZixFQUFtQyxlQUFuQyxFQUFvRCxZQUFXO0FBQzdELFFBQUlzQyxLQUFLN1AsRUFBRSxJQUFGLEVBQVFxQixJQUFSLENBQWEsUUFBYixDQUFUO0FBQ0EsUUFBSXdPLEVBQUosRUFBUTtBQUNOc0gsZUFBU25YLEVBQUUsSUFBRixDQUFULEVBQWtCLFFBQWxCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBLFFBQUUsSUFBRixFQUFRc0IsT0FBUixDQUFnQixtQkFBaEI7QUFDRDtBQUNGLEdBUEQ7O0FBU0E7QUFDQXRCLElBQUU0RSxRQUFGLEVBQVkySSxFQUFaLENBQWUsa0JBQWYsRUFBbUMsaUJBQW5DLEVBQXNELFVBQVNySixDQUFULEVBQVc7QUFDL0RBLE1BQUVrVCxlQUFGO0FBQ0EsUUFBSWxHLFlBQVlsUixFQUFFLElBQUYsRUFBUXFCLElBQVIsQ0FBYSxVQUFiLENBQWhCOztBQUVBLFFBQUc2UCxjQUFjLEVBQWpCLEVBQW9CO0FBQ2xCaFIsaUJBQVc4USxNQUFYLENBQWtCSyxVQUFsQixDQUE2QnJSLEVBQUUsSUFBRixDQUE3QixFQUFzQ2tSLFNBQXRDLEVBQWlELFlBQVc7QUFDMURsUixVQUFFLElBQUYsRUFBUXNCLE9BQVIsQ0FBZ0IsV0FBaEI7QUFDRCxPQUZEO0FBR0QsS0FKRCxNQUlLO0FBQ0h0QixRQUFFLElBQUYsRUFBUXFYLE9BQVIsR0FBa0IvVixPQUFsQixDQUEwQixXQUExQjtBQUNEO0FBQ0YsR0FYRDs7QUFhQXRCLElBQUU0RSxRQUFGLEVBQVkySSxFQUFaLENBQWUsa0NBQWYsRUFBbUQscUJBQW5ELEVBQTBFLFlBQVc7QUFDbkYsUUFBSXNDLEtBQUs3UCxFQUFFLElBQUYsRUFBUXFCLElBQVIsQ0FBYSxjQUFiLENBQVQ7QUFDQXJCLFlBQU02UCxFQUFOLEVBQVkzSyxjQUFaLENBQTJCLG1CQUEzQixFQUFnRCxDQUFDbEYsRUFBRSxJQUFGLENBQUQsQ0FBaEQ7QUFDRCxHQUhEOztBQUtBOzs7OztBQUtBQSxJQUFFMEcsTUFBRixFQUFVNkcsRUFBVixDQUFhLE1BQWIsRUFBcUIsWUFBTTtBQUN6QitKO0FBQ0QsR0FGRDs7QUFJQSxXQUFTQSxjQUFULEdBQTBCO0FBQ3hCQztBQUNBQztBQUNBQztBQUNBQztBQUNEOztBQUVEO0FBQ0EsV0FBU0EsZUFBVCxDQUF5QjNXLFVBQXpCLEVBQXFDO0FBQ25DLFFBQUk0VyxZQUFZM1gsRUFBRSxpQkFBRixDQUFoQjtBQUFBLFFBQ0k0WCxZQUFZLENBQUMsVUFBRCxFQUFhLFNBQWIsRUFBd0IsUUFBeEIsQ0FEaEI7O0FBR0EsUUFBRzdXLFVBQUgsRUFBYztBQUNaLFVBQUcsT0FBT0EsVUFBUCxLQUFzQixRQUF6QixFQUFrQztBQUNoQzZXLGtCQUFVclcsSUFBVixDQUFlUixVQUFmO0FBQ0QsT0FGRCxNQUVNLElBQUcsUUFBT0EsVUFBUCx5Q0FBT0EsVUFBUCxPQUFzQixRQUF0QixJQUFrQyxPQUFPQSxXQUFXLENBQVgsQ0FBUCxLQUF5QixRQUE5RCxFQUF1RTtBQUMzRTZXLGtCQUFVeFAsTUFBVixDQUFpQnJILFVBQWpCO0FBQ0QsT0FGSyxNQUVEO0FBQ0g4QixnQkFBUUMsS0FBUixDQUFjLDhCQUFkO0FBQ0Q7QUFDRjtBQUNELFFBQUc2VSxVQUFVNVUsTUFBYixFQUFvQjtBQUNsQixVQUFJOFUsWUFBWUQsVUFBVXhULEdBQVYsQ0FBYyxVQUFDM0QsSUFBRCxFQUFVO0FBQ3RDLCtCQUFxQkEsSUFBckI7QUFDRCxPQUZlLEVBRWJxWCxJQUZhLENBRVIsR0FGUSxDQUFoQjs7QUFJQTlYLFFBQUUwRyxNQUFGLEVBQVVrSCxHQUFWLENBQWNpSyxTQUFkLEVBQXlCdEssRUFBekIsQ0FBNEJzSyxTQUE1QixFQUF1QyxVQUFTM1QsQ0FBVCxFQUFZNlQsUUFBWixFQUFxQjtBQUMxRCxZQUFJdlgsU0FBUzBELEVBQUVsQixTQUFGLENBQVlpQixLQUFaLENBQWtCLEdBQWxCLEVBQXVCLENBQXZCLENBQWI7QUFDQSxZQUFJbEMsVUFBVS9CLGFBQVdRLE1BQVgsUUFBc0J3WCxHQUF0QixzQkFBNkNELFFBQTdDLFFBQWQ7O0FBRUFoVyxnQkFBUUUsSUFBUixDQUFhLFlBQVU7QUFDckIsY0FBSUcsUUFBUXBDLEVBQUUsSUFBRixDQUFaOztBQUVBb0MsZ0JBQU04QyxjQUFOLENBQXFCLGtCQUFyQixFQUF5QyxDQUFDOUMsS0FBRCxDQUF6QztBQUNELFNBSkQ7QUFLRCxPQVREO0FBVUQ7QUFDRjs7QUFFRCxXQUFTb1YsY0FBVCxDQUF3QlMsUUFBeEIsRUFBaUM7QUFDL0IsUUFBSTFTLGNBQUo7QUFBQSxRQUNJMlMsU0FBU2xZLEVBQUUsZUFBRixDQURiO0FBRUEsUUFBR2tZLE9BQU9uVixNQUFWLEVBQWlCO0FBQ2YvQyxRQUFFMEcsTUFBRixFQUFVa0gsR0FBVixDQUFjLG1CQUFkLEVBQ0NMLEVBREQsQ0FDSSxtQkFESixFQUN5QixVQUFTckosQ0FBVCxFQUFZO0FBQ25DLFlBQUlxQixLQUFKLEVBQVc7QUFBRW1DLHVCQUFhbkMsS0FBYjtBQUFzQjs7QUFFbkNBLGdCQUFRTixXQUFXLFlBQVU7O0FBRTNCLGNBQUcsQ0FBQ2dTLGdCQUFKLEVBQXFCO0FBQUM7QUFDcEJpQixtQkFBT2pXLElBQVAsQ0FBWSxZQUFVO0FBQ3BCakMsZ0JBQUUsSUFBRixFQUFRa0YsY0FBUixDQUF1QixxQkFBdkI7QUFDRCxhQUZEO0FBR0Q7QUFDRDtBQUNBZ1QsaUJBQU8zWCxJQUFQLENBQVksYUFBWixFQUEyQixRQUEzQjtBQUNELFNBVE8sRUFTTDBYLFlBQVksRUFUUCxDQUFSLENBSG1DLENBWWhCO0FBQ3BCLE9BZEQ7QUFlRDtBQUNGOztBQUVELFdBQVNSLGNBQVQsQ0FBd0JRLFFBQXhCLEVBQWlDO0FBQy9CLFFBQUkxUyxjQUFKO0FBQUEsUUFDSTJTLFNBQVNsWSxFQUFFLGVBQUYsQ0FEYjtBQUVBLFFBQUdrWSxPQUFPblYsTUFBVixFQUFpQjtBQUNmL0MsUUFBRTBHLE1BQUYsRUFBVWtILEdBQVYsQ0FBYyxtQkFBZCxFQUNDTCxFQURELENBQ0ksbUJBREosRUFDeUIsVUFBU3JKLENBQVQsRUFBVztBQUNsQyxZQUFHcUIsS0FBSCxFQUFTO0FBQUVtQyx1QkFBYW5DLEtBQWI7QUFBc0I7O0FBRWpDQSxnQkFBUU4sV0FBVyxZQUFVOztBQUUzQixjQUFHLENBQUNnUyxnQkFBSixFQUFxQjtBQUFDO0FBQ3BCaUIsbUJBQU9qVyxJQUFQLENBQVksWUFBVTtBQUNwQmpDLGdCQUFFLElBQUYsRUFBUWtGLGNBQVIsQ0FBdUIscUJBQXZCO0FBQ0QsYUFGRDtBQUdEO0FBQ0Q7QUFDQWdULGlCQUFPM1gsSUFBUCxDQUFZLGFBQVosRUFBMkIsUUFBM0I7QUFDRCxTQVRPLEVBU0wwWCxZQUFZLEVBVFAsQ0FBUixDQUhrQyxDQVlmO0FBQ3BCLE9BZEQ7QUFlRDtBQUNGOztBQUVELFdBQVNWLGNBQVQsR0FBMEI7QUFDeEIsUUFBRyxDQUFDTixnQkFBSixFQUFxQjtBQUFFLGFBQU8sS0FBUDtBQUFlO0FBQ3RDLFFBQUlrQixRQUFRdlQsU0FBU3dULGdCQUFULENBQTBCLDZDQUExQixDQUFaOztBQUVBO0FBQ0EsUUFBSUMsNEJBQTRCLFNBQTVCQSx5QkFBNEIsQ0FBVUMsbUJBQVYsRUFBK0I7QUFDM0QsVUFBSUMsVUFBVXZZLEVBQUVzWSxvQkFBb0IsQ0FBcEIsRUFBdUI5SyxNQUF6QixDQUFkOztBQUVIO0FBQ0csY0FBUThLLG9CQUFvQixDQUFwQixFQUF1Qm5XLElBQS9COztBQUVFLGFBQUssWUFBTDtBQUNFLGNBQUlvVyxRQUFRaFksSUFBUixDQUFhLGFBQWIsTUFBZ0MsUUFBaEMsSUFBNEMrWCxvQkFBb0IsQ0FBcEIsRUFBdUJFLGFBQXZCLEtBQXlDLGFBQXpGLEVBQXdHO0FBQzdHRCxvQkFBUXJULGNBQVIsQ0FBdUIscUJBQXZCLEVBQThDLENBQUNxVCxPQUFELEVBQVU3UixPQUFPOEQsV0FBakIsQ0FBOUM7QUFDQTtBQUNELGNBQUkrTixRQUFRaFksSUFBUixDQUFhLGFBQWIsTUFBZ0MsUUFBaEMsSUFBNEMrWCxvQkFBb0IsQ0FBcEIsRUFBdUJFLGFBQXZCLEtBQXlDLGFBQXpGLEVBQXdHO0FBQ3ZHRCxvQkFBUXJULGNBQVIsQ0FBdUIscUJBQXZCLEVBQThDLENBQUNxVCxPQUFELENBQTlDO0FBQ0M7QUFDRixjQUFJRCxvQkFBb0IsQ0FBcEIsRUFBdUJFLGFBQXZCLEtBQXlDLE9BQTdDLEVBQXNEO0FBQ3JERCxvQkFBUUUsT0FBUixDQUFnQixlQUFoQixFQUFpQ2xZLElBQWpDLENBQXNDLGFBQXRDLEVBQW9ELFFBQXBEO0FBQ0FnWSxvQkFBUUUsT0FBUixDQUFnQixlQUFoQixFQUFpQ3ZULGNBQWpDLENBQWdELHFCQUFoRCxFQUF1RSxDQUFDcVQsUUFBUUUsT0FBUixDQUFnQixlQUFoQixDQUFELENBQXZFO0FBQ0E7QUFDRDs7QUFFSSxhQUFLLFdBQUw7QUFDSkYsa0JBQVFFLE9BQVIsQ0FBZ0IsZUFBaEIsRUFBaUNsWSxJQUFqQyxDQUFzQyxhQUF0QyxFQUFvRCxRQUFwRDtBQUNBZ1ksa0JBQVFFLE9BQVIsQ0FBZ0IsZUFBaEIsRUFBaUN2VCxjQUFqQyxDQUFnRCxxQkFBaEQsRUFBdUUsQ0FBQ3FULFFBQVFFLE9BQVIsQ0FBZ0IsZUFBaEIsQ0FBRCxDQUF2RTtBQUNNOztBQUVGO0FBQ0UsaUJBQU8sS0FBUDtBQUNGO0FBdEJGO0FBd0JELEtBNUJIOztBQThCRSxRQUFJTixNQUFNcFYsTUFBVixFQUFrQjtBQUNoQjtBQUNBLFdBQUssSUFBSVUsSUFBSSxDQUFiLEVBQWdCQSxLQUFLMFUsTUFBTXBWLE1BQU4sR0FBZSxDQUFwQyxFQUF1Q1UsR0FBdkMsRUFBNEM7QUFDMUMsWUFBSWlWLGtCQUFrQixJQUFJekIsZ0JBQUosQ0FBcUJvQix5QkFBckIsQ0FBdEI7QUFDQUssd0JBQWdCQyxPQUFoQixDQUF3QlIsTUFBTTFVLENBQU4sQ0FBeEIsRUFBa0MsRUFBRW1WLFlBQVksSUFBZCxFQUFvQkMsV0FBVyxJQUEvQixFQUFxQ0MsZUFBZSxLQUFwRCxFQUEyREMsU0FBUyxJQUFwRSxFQUEwRUMsaUJBQWlCLENBQUMsYUFBRCxFQUFnQixPQUFoQixDQUEzRixFQUFsQztBQUNEO0FBQ0Y7QUFDRjs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E5WSxhQUFXK1ksUUFBWCxHQUFzQjNCLGNBQXRCO0FBQ0E7QUFDQTtBQUVDLENBL01BLENBK01DMU8sTUEvTUQsQ0FBRDtBQ0ZBOzs7Ozs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWI7Ozs7O0FBRmEsTUFPUGtaLEtBUE87QUFRWDs7Ozs7OztBQU9BLG1CQUFZalEsT0FBWixFQUFtQztBQUFBLFVBQWRtSyxPQUFjLHVFQUFKLEVBQUk7O0FBQUE7O0FBQ2pDLFdBQUtoUyxRQUFMLEdBQWdCNkgsT0FBaEI7QUFDQSxXQUFLbUssT0FBTCxHQUFnQnBULEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFheU0sTUFBTUMsUUFBbkIsRUFBNkIsS0FBSy9YLFFBQUwsQ0FBY0MsSUFBZCxFQUE3QixFQUFtRCtSLE9BQW5ELENBQWhCOztBQUVBLFdBQUtsUixLQUFMOztBQUVBaEMsaUJBQVdZLGNBQVgsQ0FBMEIsSUFBMUIsRUFBZ0MsT0FBaEM7QUFDRDs7QUFFRDs7Ozs7O0FBeEJXO0FBQUE7QUFBQSw4QkE0Qkg7QUFDTixhQUFLc1ksT0FBTCxHQUFlLEtBQUtoWSxRQUFMLENBQWN1QyxJQUFkLENBQW1CLHlCQUFuQixDQUFmOztBQUVBLGFBQUswVixPQUFMO0FBQ0Q7O0FBRUQ7Ozs7O0FBbENXO0FBQUE7QUFBQSxnQ0FzQ0Q7QUFBQTs7QUFDUixhQUFLalksUUFBTCxDQUFjd00sR0FBZCxDQUFrQixRQUFsQixFQUNHTCxFQURILENBQ00sZ0JBRE4sRUFDd0IsWUFBTTtBQUMxQixpQkFBSytMLFNBQUw7QUFDRCxTQUhILEVBSUcvTCxFQUpILENBSU0saUJBSk4sRUFJeUIsWUFBTTtBQUMzQixpQkFBTyxPQUFLZ00sWUFBTCxFQUFQO0FBQ0QsU0FOSDs7QUFRQSxZQUFJLEtBQUtuRyxPQUFMLENBQWFvRyxVQUFiLEtBQTRCLGFBQWhDLEVBQStDO0FBQzdDLGVBQUtKLE9BQUwsQ0FDR3hMLEdBREgsQ0FDTyxpQkFEUCxFQUVHTCxFQUZILENBRU0saUJBRk4sRUFFeUIsVUFBQ3JKLENBQUQsRUFBTztBQUM1QixtQkFBS3VWLGFBQUwsQ0FBbUJ6WixFQUFFa0UsRUFBRXNKLE1BQUosQ0FBbkI7QUFDRCxXQUpIO0FBS0Q7O0FBRUQsWUFBSSxLQUFLNEYsT0FBTCxDQUFhc0csWUFBakIsRUFBK0I7QUFDN0IsZUFBS04sT0FBTCxDQUNHeEwsR0FESCxDQUNPLGdCQURQLEVBRUdMLEVBRkgsQ0FFTSxnQkFGTixFQUV3QixVQUFDckosQ0FBRCxFQUFPO0FBQzNCLG1CQUFLdVYsYUFBTCxDQUFtQnpaLEVBQUVrRSxFQUFFc0osTUFBSixDQUFuQjtBQUNELFdBSkg7QUFLRDs7QUFFRCxZQUFJLEtBQUs0RixPQUFMLENBQWF1RyxjQUFqQixFQUFpQztBQUMvQixlQUFLUCxPQUFMLENBQ0d4TCxHQURILENBQ08sZUFEUCxFQUVHTCxFQUZILENBRU0sZUFGTixFQUV1QixVQUFDckosQ0FBRCxFQUFPO0FBQzFCLG1CQUFLdVYsYUFBTCxDQUFtQnpaLEVBQUVrRSxFQUFFc0osTUFBSixDQUFuQjtBQUNELFdBSkg7QUFLRDtBQUNGOztBQUVEOzs7OztBQXhFVztBQUFBO0FBQUEsZ0NBNEVEO0FBQ1IsYUFBS3RMLEtBQUw7QUFDRDs7QUFFRDs7Ozs7O0FBaEZXO0FBQUE7QUFBQSxvQ0FxRkcyQixHQXJGSCxFQXFGUTtBQUNqQixZQUFJLENBQUNBLElBQUl0RCxJQUFKLENBQVMsVUFBVCxDQUFMLEVBQTJCLE9BQU8sSUFBUDs7QUFFM0IsWUFBSXFaLFNBQVMsSUFBYjs7QUFFQSxnQkFBUS9WLElBQUksQ0FBSixFQUFPMUIsSUFBZjtBQUNFLGVBQUssVUFBTDtBQUNFeVgscUJBQVMvVixJQUFJLENBQUosRUFBT2dXLE9BQWhCO0FBQ0E7O0FBRUYsZUFBSyxRQUFMO0FBQ0EsZUFBSyxZQUFMO0FBQ0EsZUFBSyxpQkFBTDtBQUNFLGdCQUFJMVYsTUFBTU4sSUFBSUYsSUFBSixDQUFTLGlCQUFULENBQVY7QUFDQSxnQkFBSSxDQUFDUSxJQUFJcEIsTUFBTCxJQUFlLENBQUNvQixJQUFJd00sR0FBSixFQUFwQixFQUErQmlKLFNBQVMsS0FBVDtBQUMvQjs7QUFFRjtBQUNFLGdCQUFHLENBQUMvVixJQUFJOE0sR0FBSixFQUFELElBQWMsQ0FBQzlNLElBQUk4TSxHQUFKLEdBQVU1TixNQUE1QixFQUFvQzZXLFNBQVMsS0FBVDtBQWJ4Qzs7QUFnQkEsZUFBT0EsTUFBUDtBQUNEOztBQUVEOzs7Ozs7Ozs7Ozs7O0FBN0dXO0FBQUE7QUFBQSxvQ0F5SEcvVixHQXpISCxFQXlIUTtBQUNqQixZQUFJZ00sS0FBS2hNLElBQUksQ0FBSixFQUFPZ00sRUFBaEI7QUFDQSxZQUFJaUssU0FBU2pXLElBQUlrVyxRQUFKLENBQWEsS0FBSzNHLE9BQUwsQ0FBYTRHLGlCQUExQixDQUFiOztBQUVBLFlBQUksQ0FBQ0YsT0FBTy9XLE1BQVosRUFBb0I7QUFDbEIrVyxtQkFBU2pXLElBQUlxRixNQUFKLEdBQWF2RixJQUFiLENBQWtCLEtBQUt5UCxPQUFMLENBQWE0RyxpQkFBL0IsQ0FBVDtBQUNEOztBQUVERixpQkFBU0EsT0FBT0csR0FBUCxDQUFXLEtBQUs3WSxRQUFMLENBQWN1QyxJQUFkLDRCQUE0Q2tNLEVBQTVDLFFBQVgsQ0FBVDs7QUFFQSxlQUFPaUssTUFBUDtBQUNEOztBQUVEOzs7Ozs7Ozs7QUF0SVc7QUFBQTtBQUFBLGdDQThJRGpXLEdBOUlDLEVBOElJO0FBQ2IsWUFBSWdNLEtBQUtoTSxJQUFJLENBQUosRUFBT2dNLEVBQWhCO0FBQ0EsWUFBSXFLLFNBQVMsS0FBSzlZLFFBQUwsQ0FBY3VDLElBQWQsaUJBQWlDa00sRUFBakMsUUFBYjs7QUFFQSxZQUFJLENBQUNxSyxPQUFPblgsTUFBWixFQUFvQjtBQUNsQixpQkFBT2MsSUFBSTRVLE9BQUosQ0FBWSxPQUFaLENBQVA7QUFDRDs7QUFFRCxlQUFPeUIsTUFBUDtBQUNEOztBQUVEOzs7Ozs7Ozs7QUF6Slc7QUFBQTtBQUFBLHNDQWlLS0MsSUFqS0wsRUFpS1c7QUFBQTs7QUFDcEIsWUFBSUMsU0FBU0QsS0FBSy9WLEdBQUwsQ0FBUyxVQUFDWCxDQUFELEVBQUlZLEVBQUosRUFBVztBQUMvQixjQUFJd0wsS0FBS3hMLEdBQUd3TCxFQUFaO0FBQ0EsY0FBSXFLLFNBQVMsT0FBSzlZLFFBQUwsQ0FBY3VDLElBQWQsaUJBQWlDa00sRUFBakMsUUFBYjs7QUFFQSxjQUFJLENBQUNxSyxPQUFPblgsTUFBWixFQUFvQjtBQUNsQm1YLHFCQUFTbGEsRUFBRXFFLEVBQUYsRUFBTW9VLE9BQU4sQ0FBYyxPQUFkLENBQVQ7QUFDRDtBQUNELGlCQUFPeUIsT0FBTyxDQUFQLENBQVA7QUFDRCxTQVJZLENBQWI7O0FBVUEsZUFBT2xhLEVBQUVvYSxNQUFGLENBQVA7QUFDRDs7QUFFRDs7Ozs7QUEvS1c7QUFBQTtBQUFBLHNDQW1MS3ZXLEdBbkxMLEVBbUxVO0FBQ25CLFlBQUlxVyxTQUFTLEtBQUtHLFNBQUwsQ0FBZXhXLEdBQWYsQ0FBYjtBQUNBLFlBQUl5VyxhQUFhLEtBQUtDLGFBQUwsQ0FBbUIxVyxHQUFuQixDQUFqQjs7QUFFQSxZQUFJcVcsT0FBT25YLE1BQVgsRUFBbUI7QUFDakJtWCxpQkFBT2xJLFFBQVAsQ0FBZ0IsS0FBS29CLE9BQUwsQ0FBYW9ILGVBQTdCO0FBQ0Q7O0FBRUQsWUFBSUYsV0FBV3ZYLE1BQWYsRUFBdUI7QUFDckJ1WCxxQkFBV3RJLFFBQVgsQ0FBb0IsS0FBS29CLE9BQUwsQ0FBYXFILGNBQWpDO0FBQ0Q7O0FBRUQ1VyxZQUFJbU8sUUFBSixDQUFhLEtBQUtvQixPQUFMLENBQWFzSCxlQUExQixFQUEyQ25hLElBQTNDLENBQWdELGNBQWhELEVBQWdFLEVBQWhFO0FBQ0Q7O0FBRUQ7Ozs7OztBQWxNVztBQUFBO0FBQUEsOENBd01hb2EsU0F4TWIsRUF3TXdCO0FBQ2pDLFlBQUlSLE9BQU8sS0FBSy9ZLFFBQUwsQ0FBY3VDLElBQWQsbUJBQW1DZ1gsU0FBbkMsUUFBWDtBQUNBLFlBQUlDLFVBQVUsS0FBS0MsZUFBTCxDQUFxQlYsSUFBckIsQ0FBZDtBQUNBLFlBQUlXLGNBQWMsS0FBS1AsYUFBTCxDQUFtQkosSUFBbkIsQ0FBbEI7O0FBRUEsWUFBSVMsUUFBUTdYLE1BQVosRUFBb0I7QUFDbEI2WCxrQkFBUTNVLFdBQVIsQ0FBb0IsS0FBS21OLE9BQUwsQ0FBYW9ILGVBQWpDO0FBQ0Q7O0FBRUQsWUFBSU0sWUFBWS9YLE1BQWhCLEVBQXdCO0FBQ3RCK1gsc0JBQVk3VSxXQUFaLENBQXdCLEtBQUttTixPQUFMLENBQWFxSCxjQUFyQztBQUNEOztBQUVETixhQUFLbFUsV0FBTCxDQUFpQixLQUFLbU4sT0FBTCxDQUFhc0gsZUFBOUIsRUFBK0MvWSxVQUEvQyxDQUEwRCxjQUExRDtBQUVEOztBQUVEOzs7OztBQXpOVztBQUFBO0FBQUEseUNBNk5Ra0MsR0E3TlIsRUE2TmE7QUFDdEI7QUFDQSxZQUFHQSxJQUFJLENBQUosRUFBTzFCLElBQVAsSUFBZSxPQUFsQixFQUEyQjtBQUN6QixpQkFBTyxLQUFLNFksdUJBQUwsQ0FBNkJsWCxJQUFJdEQsSUFBSixDQUFTLE1BQVQsQ0FBN0IsQ0FBUDtBQUNEOztBQUVELFlBQUkyWixTQUFTLEtBQUtHLFNBQUwsQ0FBZXhXLEdBQWYsQ0FBYjtBQUNBLFlBQUl5VyxhQUFhLEtBQUtDLGFBQUwsQ0FBbUIxVyxHQUFuQixDQUFqQjs7QUFFQSxZQUFJcVcsT0FBT25YLE1BQVgsRUFBbUI7QUFDakJtWCxpQkFBT2pVLFdBQVAsQ0FBbUIsS0FBS21OLE9BQUwsQ0FBYW9ILGVBQWhDO0FBQ0Q7O0FBRUQsWUFBSUYsV0FBV3ZYLE1BQWYsRUFBdUI7QUFDckJ1WCxxQkFBV3JVLFdBQVgsQ0FBdUIsS0FBS21OLE9BQUwsQ0FBYXFILGNBQXBDO0FBQ0Q7O0FBRUQ1VyxZQUFJb0MsV0FBSixDQUFnQixLQUFLbU4sT0FBTCxDQUFhc0gsZUFBN0IsRUFBOEMvWSxVQUE5QyxDQUF5RCxjQUF6RDtBQUNEOztBQUVEOzs7Ozs7Ozs7QUFqUFc7QUFBQTtBQUFBLG9DQXlQR2tDLEdBelBILEVBeVBRO0FBQUE7O0FBQ2pCLFlBQUltWCxlQUFlLEtBQUtDLGFBQUwsQ0FBbUJwWCxHQUFuQixDQUFuQjtBQUFBLFlBQ0lxWCxZQUFZLEtBRGhCO0FBQUEsWUFFSUMsa0JBQWtCLElBRnRCO0FBQUEsWUFHSUMsWUFBWXZYLElBQUl0RCxJQUFKLENBQVMsZ0JBQVQsQ0FIaEI7QUFBQSxZQUlJOGEsVUFBVSxJQUpkOztBQU1BO0FBQ0EsWUFBSXhYLElBQUlrSixFQUFKLENBQU8scUJBQVAsS0FBaUNsSixJQUFJa0osRUFBSixDQUFPLGlCQUFQLENBQWpDLElBQThEbEosSUFBSWtKLEVBQUosQ0FBTyxZQUFQLENBQWxFLEVBQXdGO0FBQ3RGLGlCQUFPLElBQVA7QUFDRDs7QUFFRCxnQkFBUWxKLElBQUksQ0FBSixFQUFPMUIsSUFBZjtBQUNFLGVBQUssT0FBTDtBQUNFK1ksd0JBQVksS0FBS0ksYUFBTCxDQUFtQnpYLElBQUl0RCxJQUFKLENBQVMsTUFBVCxDQUFuQixDQUFaO0FBQ0E7O0FBRUYsZUFBSyxVQUFMO0FBQ0UyYSx3QkFBWUYsWUFBWjtBQUNBOztBQUVGLGVBQUssUUFBTDtBQUNBLGVBQUssWUFBTDtBQUNBLGVBQUssaUJBQUw7QUFDRUUsd0JBQVlGLFlBQVo7QUFDQTs7QUFFRjtBQUNFRSx3QkFBWSxLQUFLSyxZQUFMLENBQWtCMVgsR0FBbEIsQ0FBWjtBQWhCSjs7QUFtQkEsWUFBSXVYLFNBQUosRUFBZTtBQUNiRCw0QkFBa0IsS0FBS0ssZUFBTCxDQUFxQjNYLEdBQXJCLEVBQTBCdVgsU0FBMUIsRUFBcUN2WCxJQUFJdEQsSUFBSixDQUFTLFVBQVQsQ0FBckMsQ0FBbEI7QUFDRDs7QUFFRCxZQUFJc0QsSUFBSXRELElBQUosQ0FBUyxjQUFULENBQUosRUFBOEI7QUFDNUI4YSxvQkFBVSxLQUFLakksT0FBTCxDQUFhcUksVUFBYixDQUF3QkosT0FBeEIsQ0FBZ0N4WCxHQUFoQyxDQUFWO0FBQ0Q7O0FBR0QsWUFBSTZYLFdBQVcsQ0FBQ1YsWUFBRCxFQUFlRSxTQUFmLEVBQTBCQyxlQUExQixFQUEyQ0UsT0FBM0MsRUFBb0QzWixPQUFwRCxDQUE0RCxLQUE1RCxNQUF1RSxDQUFDLENBQXZGO0FBQ0EsWUFBSWlhLFVBQVUsQ0FBQ0QsV0FBVyxPQUFYLEdBQXFCLFNBQXRCLElBQW1DLFdBQWpEOztBQUVBLFlBQUlBLFFBQUosRUFBYztBQUNaO0FBQ0EsY0FBTUUsb0JBQW9CLEtBQUt4YSxRQUFMLENBQWN1QyxJQUFkLHFCQUFxQ0UsSUFBSXRELElBQUosQ0FBUyxJQUFULENBQXJDLFFBQTFCO0FBQ0EsY0FBSXFiLGtCQUFrQjdZLE1BQXRCLEVBQThCO0FBQUE7QUFDNUIsa0JBQUlYLGNBQUo7QUFDQXdaLGdDQUFrQjNaLElBQWxCLENBQXVCLFlBQVc7QUFDaEMsb0JBQUlqQyxFQUFFLElBQUYsRUFBUTJRLEdBQVIsRUFBSixFQUFtQjtBQUNqQnZPLHdCQUFNcVgsYUFBTixDQUFvQnpaLEVBQUUsSUFBRixDQUFwQjtBQUNEO0FBQ0YsZUFKRDtBQUY0QjtBQU83QjtBQUNGOztBQUVELGFBQUswYixXQUFXLG9CQUFYLEdBQWtDLGlCQUF2QyxFQUEwRDdYLEdBQTFEOztBQUVBOzs7Ozs7QUFNQUEsWUFBSXZDLE9BQUosQ0FBWXFhLE9BQVosRUFBcUIsQ0FBQzlYLEdBQUQsQ0FBckI7O0FBRUEsZUFBTzZYLFFBQVA7QUFDRDs7QUFFRDs7Ozs7OztBQTlUVztBQUFBO0FBQUEscUNBb1VJO0FBQ2IsWUFBSUcsTUFBTSxFQUFWO0FBQ0EsWUFBSXpaLFFBQVEsSUFBWjs7QUFFQSxhQUFLZ1gsT0FBTCxDQUFhblgsSUFBYixDQUFrQixZQUFXO0FBQzNCNFosY0FBSXRhLElBQUosQ0FBU2EsTUFBTXFYLGFBQU4sQ0FBb0J6WixFQUFFLElBQUYsQ0FBcEIsQ0FBVDtBQUNELFNBRkQ7O0FBSUEsWUFBSThiLFVBQVVELElBQUluYSxPQUFKLENBQVksS0FBWixNQUF1QixDQUFDLENBQXRDOztBQUVBLGFBQUtOLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsb0JBQW5CLEVBQXlDNkssR0FBekMsQ0FBNkMsU0FBN0MsRUFBeURzTixVQUFVLE1BQVYsR0FBbUIsT0FBNUU7O0FBRUE7Ozs7OztBQU1BLGFBQUsxYSxRQUFMLENBQWNFLE9BQWQsQ0FBc0IsQ0FBQ3dhLFVBQVUsV0FBVixHQUF3QixhQUF6QixJQUEwQyxXQUFoRSxFQUE2RSxDQUFDLEtBQUsxYSxRQUFOLENBQTdFOztBQUVBLGVBQU8wYSxPQUFQO0FBQ0Q7O0FBRUQ7Ozs7Ozs7QUEzVlc7QUFBQTtBQUFBLG1DQWlXRWpZLEdBaldGLEVBaVdPa1ksT0FqV1AsRUFpV2dCO0FBQ3pCO0FBQ0FBLGtCQUFXQSxXQUFXbFksSUFBSXRELElBQUosQ0FBUyxTQUFULENBQVgsSUFBa0NzRCxJQUFJdEQsSUFBSixDQUFTLE1BQVQsQ0FBN0M7QUFDQSxZQUFJeWIsWUFBWW5ZLElBQUk4TSxHQUFKLEVBQWhCO0FBQ0EsWUFBSXNMLFFBQVEsS0FBWjs7QUFFQSxZQUFJRCxVQUFValosTUFBZCxFQUFzQjtBQUNwQjtBQUNBLGNBQUksS0FBS3FRLE9BQUwsQ0FBYThJLFFBQWIsQ0FBc0J2TixjQUF0QixDQUFxQ29OLE9BQXJDLENBQUosRUFBbUQ7QUFDakRFLG9CQUFRLEtBQUs3SSxPQUFMLENBQWE4SSxRQUFiLENBQXNCSCxPQUF0QixFQUErQjVVLElBQS9CLENBQW9DNlUsU0FBcEMsQ0FBUjtBQUNEO0FBQ0Q7QUFIQSxlQUlLLElBQUlELFlBQVlsWSxJQUFJdEQsSUFBSixDQUFTLE1BQVQsQ0FBaEIsRUFBa0M7QUFDckMwYixzQkFBUSxJQUFJRSxNQUFKLENBQVdKLE9BQVgsRUFBb0I1VSxJQUFwQixDQUF5QjZVLFNBQXpCLENBQVI7QUFDRCxhQUZJLE1BR0E7QUFDSEMsc0JBQVEsSUFBUjtBQUNEO0FBQ0Y7QUFDRDtBQWJBLGFBY0ssSUFBSSxDQUFDcFksSUFBSWhDLElBQUosQ0FBUyxVQUFULENBQUwsRUFBMkI7QUFDOUJvYSxvQkFBUSxJQUFSO0FBQ0Q7O0FBRUQsZUFBT0EsS0FBUDtBQUNBOztBQUVGOzs7Ozs7QUE1WFc7QUFBQTtBQUFBLG9DQWlZR3RCLFNBallILEVBaVljO0FBQ3ZCO0FBQ0E7QUFDQSxZQUFJeUIsU0FBUyxLQUFLaGIsUUFBTCxDQUFjdUMsSUFBZCxtQkFBbUNnWCxTQUFuQyxRQUFiO0FBQ0EsWUFBSXNCLFFBQVEsS0FBWjtBQUFBLFlBQW1CSSxXQUFXLEtBQTlCOztBQUVBO0FBQ0FELGVBQU9uYSxJQUFQLENBQVksVUFBQ3dCLENBQUQsRUFBSVMsQ0FBSixFQUFVO0FBQ3BCLGNBQUlsRSxFQUFFa0UsQ0FBRixFQUFLM0QsSUFBTCxDQUFVLFVBQVYsQ0FBSixFQUEyQjtBQUN6QjhiLHVCQUFXLElBQVg7QUFDRDtBQUNGLFNBSkQ7QUFLQSxZQUFHLENBQUNBLFFBQUosRUFBY0osUUFBTSxJQUFOOztBQUVkLFlBQUksQ0FBQ0EsS0FBTCxFQUFZO0FBQ1Y7QUFDQUcsaUJBQU9uYSxJQUFQLENBQVksVUFBQ3dCLENBQUQsRUFBSVMsQ0FBSixFQUFVO0FBQ3BCLGdCQUFJbEUsRUFBRWtFLENBQUYsRUFBS3JDLElBQUwsQ0FBVSxTQUFWLENBQUosRUFBMEI7QUFDeEJvYSxzQkFBUSxJQUFSO0FBQ0Q7QUFDRixXQUpEO0FBS0Q7O0FBRUQsZUFBT0EsS0FBUDtBQUNEOztBQUVEOzs7Ozs7OztBQTNaVztBQUFBO0FBQUEsc0NBa2FLcFksR0FsYUwsRUFrYVU0WCxVQWxhVixFQWthc0JZLFFBbGF0QixFQWthZ0M7QUFBQTs7QUFDekNBLG1CQUFXQSxXQUFXLElBQVgsR0FBa0IsS0FBN0I7O0FBRUEsWUFBSUMsUUFBUWIsV0FBV3hYLEtBQVgsQ0FBaUIsR0FBakIsRUFBc0JHLEdBQXRCLENBQTBCLFVBQUNtWSxDQUFELEVBQU87QUFDM0MsaUJBQU8sT0FBS25KLE9BQUwsQ0FBYXFJLFVBQWIsQ0FBd0JjLENBQXhCLEVBQTJCMVksR0FBM0IsRUFBZ0N3WSxRQUFoQyxFQUEwQ3hZLElBQUlxRixNQUFKLEVBQTFDLENBQVA7QUFDRCxTQUZXLENBQVo7QUFHQSxlQUFPb1QsTUFBTTVhLE9BQU4sQ0FBYyxLQUFkLE1BQXlCLENBQUMsQ0FBakM7QUFDRDs7QUFFRDs7Ozs7QUEzYVc7QUFBQTtBQUFBLGtDQSthQztBQUNWLFlBQUk4YSxRQUFRLEtBQUtwYixRQUFqQjtBQUFBLFlBQ0kwQyxPQUFPLEtBQUtzUCxPQURoQjs7QUFHQXBULGdCQUFNOEQsS0FBSzBXLGVBQVgsRUFBOEJnQyxLQUE5QixFQUFxQ3hFLEdBQXJDLENBQXlDLE9BQXpDLEVBQWtEL1IsV0FBbEQsQ0FBOERuQyxLQUFLMFcsZUFBbkU7QUFDQXhhLGdCQUFNOEQsS0FBSzRXLGVBQVgsRUFBOEI4QixLQUE5QixFQUFxQ3hFLEdBQXJDLENBQXlDLE9BQXpDLEVBQWtEL1IsV0FBbEQsQ0FBOERuQyxLQUFLNFcsZUFBbkU7QUFDQTFhLFVBQUs4RCxLQUFLa1csaUJBQVYsU0FBK0JsVyxLQUFLMlcsY0FBcEMsRUFBc0R4VSxXQUF0RCxDQUFrRW5DLEtBQUsyVyxjQUF2RTtBQUNBK0IsY0FBTTdZLElBQU4sQ0FBVyxvQkFBWCxFQUFpQzZLLEdBQWpDLENBQXFDLFNBQXJDLEVBQWdELE1BQWhEO0FBQ0F4TyxVQUFFLFFBQUYsRUFBWXdjLEtBQVosRUFBbUJ4RSxHQUFuQixDQUF1QiwyRUFBdkIsRUFBb0dySCxHQUFwRyxDQUF3RyxFQUF4RyxFQUE0R2hQLFVBQTVHLENBQXVILGNBQXZIO0FBQ0EzQixVQUFFLGNBQUYsRUFBa0J3YyxLQUFsQixFQUF5QnhFLEdBQXpCLENBQTZCLHFCQUE3QixFQUFvRG5XLElBQXBELENBQXlELFNBQXpELEVBQW1FLEtBQW5FLEVBQTBFRixVQUExRSxDQUFxRixjQUFyRjtBQUNBM0IsVUFBRSxpQkFBRixFQUFxQndjLEtBQXJCLEVBQTRCeEUsR0FBNUIsQ0FBZ0MscUJBQWhDLEVBQXVEblcsSUFBdkQsQ0FBNEQsU0FBNUQsRUFBc0UsS0FBdEUsRUFBNkVGLFVBQTdFLENBQXdGLGNBQXhGO0FBQ0E7Ozs7QUFJQTZhLGNBQU1sYixPQUFOLENBQWMsb0JBQWQsRUFBb0MsQ0FBQ2tiLEtBQUQsQ0FBcEM7QUFDRDs7QUFFRDs7Ozs7QUFqY1c7QUFBQTtBQUFBLGdDQXFjRDtBQUNSLFlBQUlwYSxRQUFRLElBQVo7QUFDQSxhQUFLaEIsUUFBTCxDQUNHd00sR0FESCxDQUNPLFFBRFAsRUFFR2pLLElBRkgsQ0FFUSxvQkFGUixFQUdLNkssR0FITCxDQUdTLFNBSFQsRUFHb0IsTUFIcEI7O0FBS0EsYUFBSzRLLE9BQUwsQ0FDR3hMLEdBREgsQ0FDTyxRQURQLEVBRUczTCxJQUZILENBRVEsWUFBVztBQUNmRyxnQkFBTXFhLGtCQUFOLENBQXlCemMsRUFBRSxJQUFGLENBQXpCO0FBQ0QsU0FKSDs7QUFNQUUsbUJBQVdzQixnQkFBWCxDQUE0QixJQUE1QjtBQUNEO0FBbmRVOztBQUFBO0FBQUE7O0FBc2RiOzs7OztBQUdBMFgsUUFBTUMsUUFBTixHQUFpQjtBQUNmOzs7Ozs7O0FBT0FLLGdCQUFZLGFBUkc7O0FBVWY7Ozs7OztBQU1BZ0IscUJBQWlCLGtCQWhCRjs7QUFrQmY7Ozs7OztBQU1BRSxxQkFBaUIsa0JBeEJGOztBQTBCZjs7Ozs7O0FBTUFWLHVCQUFtQixhQWhDSjs7QUFrQ2Y7Ozs7OztBQU1BUyxvQkFBZ0IsWUF4Q0Q7O0FBMENmOzs7Ozs7QUFNQWYsa0JBQWMsS0FoREM7O0FBa0RmOzs7Ozs7QUFNQUMsb0JBQWdCLEtBeEREOztBQTBEZnVDLGNBQVU7QUFDUlEsYUFBUSxhQURBO0FBRVJDLHFCQUFnQixnQkFGUjtBQUdSQyxlQUFVLFlBSEY7QUFJUkMsY0FBUywwQkFKRDs7QUFNUjtBQUNBQyxZQUFPLHVKQVBDO0FBUVJDLFdBQU0sZ0JBUkU7O0FBVVI7QUFDQUMsYUFBUSx1SUFYQTs7QUFhUkMsV0FBTSxvdENBYkU7QUFjUjtBQUNBQyxjQUFTLGtFQWZEOztBQWlCUkMsZ0JBQVcsb0hBakJIO0FBa0JSO0FBQ0FDLFlBQU8sZ0lBbkJDO0FBb0JSO0FBQ0FDLFlBQU8sMENBckJDO0FBc0JSQyxlQUFVLG1DQXRCRjtBQXVCUjtBQUNBQyxzQkFBaUIsOERBeEJUO0FBeUJSO0FBQ0FDLHNCQUFpQiw4REExQlQ7O0FBNEJSO0FBQ0FDLGFBQVE7QUE3QkEsS0ExREs7O0FBMEZmOzs7Ozs7OztBQVFBaEMsZ0JBQVk7QUFDVkosZUFBUyxpQkFBVWhYLEVBQVYsRUFBY2dZLFFBQWQsRUFBd0JuVCxNQUF4QixFQUFnQztBQUN2QyxlQUFPbEosUUFBTXFFLEdBQUc5RCxJQUFILENBQVEsY0FBUixDQUFOLEVBQWlDb1EsR0FBakMsT0FBMkN0TSxHQUFHc00sR0FBSCxFQUFsRDtBQUNEO0FBSFM7QUFsR0csR0FBakI7O0FBeUdBO0FBQ0F6USxhQUFXTSxNQUFYLENBQWtCMFksS0FBbEIsRUFBeUIsT0FBekI7QUFFQyxDQXJrQkEsQ0Fxa0JDdFEsTUFya0JELENBQUQ7QUNGQTs7Ozs7O0FBRUEsQ0FBQyxVQUFTNUksQ0FBVCxFQUFZOztBQUViOzs7Ozs7O0FBRmEsTUFTUDBkLFNBVE87QUFVWDs7Ozs7OztBQU9BLHVCQUFZelUsT0FBWixFQUFxQm1LLE9BQXJCLEVBQThCO0FBQUE7O0FBQzVCLFdBQUtoUyxRQUFMLEdBQWdCNkgsT0FBaEI7QUFDQSxXQUFLbUssT0FBTCxHQUFlcFQsRUFBRXlNLE1BQUYsQ0FBUyxFQUFULEVBQWFpUixVQUFVdkUsUUFBdkIsRUFBaUMsS0FBSy9YLFFBQUwsQ0FBY0MsSUFBZCxFQUFqQyxFQUF1RCtSLE9BQXZELENBQWY7O0FBRUEsV0FBS2xSLEtBQUw7O0FBRUFoQyxpQkFBV1ksY0FBWCxDQUEwQixJQUExQixFQUFnQyxXQUFoQztBQUNBWixpQkFBV21MLFFBQVgsQ0FBb0IyQixRQUFwQixDQUE2QixXQUE3QixFQUEwQztBQUN4QyxpQkFBUyxRQUQrQjtBQUV4QyxpQkFBUyxRQUYrQjtBQUd4QyxzQkFBYyxNQUgwQjtBQUl4QyxvQkFBWTtBQUo0QixPQUExQztBQU1EOztBQUVEOzs7Ozs7QUFoQ1c7QUFBQTtBQUFBLDhCQW9DSDtBQUFBOztBQUNOLGFBQUs1TCxRQUFMLENBQWNiLElBQWQsQ0FBbUIsTUFBbkIsRUFBMkIsU0FBM0I7QUFDQSxhQUFLb2QsS0FBTCxHQUFhLEtBQUt2YyxRQUFMLENBQWM2UixRQUFkLENBQXVCLHVCQUF2QixDQUFiOztBQUVBLGFBQUswSyxLQUFMLENBQVcxYixJQUFYLENBQWdCLFVBQVMyYixHQUFULEVBQWN2WixFQUFkLEVBQWtCO0FBQ2hDLGNBQUlSLE1BQU03RCxFQUFFcUUsRUFBRixDQUFWO0FBQUEsY0FDSXdaLFdBQVdoYSxJQUFJb1AsUUFBSixDQUFhLG9CQUFiLENBRGY7QUFBQSxjQUVJcEQsS0FBS2dPLFNBQVMsQ0FBVCxFQUFZaE8sRUFBWixJQUFrQjNQLFdBQVdpQixXQUFYLENBQXVCLENBQXZCLEVBQTBCLFdBQTFCLENBRjNCO0FBQUEsY0FHSTJjLFNBQVN6WixHQUFHd0wsRUFBSCxJQUFZQSxFQUFaLFdBSGI7O0FBS0FoTSxjQUFJRixJQUFKLENBQVMsU0FBVCxFQUFvQnBELElBQXBCLENBQXlCO0FBQ3ZCLDZCQUFpQnNQLEVBRE07QUFFdkIsb0JBQVEsS0FGZTtBQUd2QixrQkFBTWlPLE1BSGlCO0FBSXZCLDZCQUFpQixLQUpNO0FBS3ZCLDZCQUFpQjtBQUxNLFdBQXpCOztBQVFBRCxtQkFBU3RkLElBQVQsQ0FBYyxFQUFDLFFBQVEsVUFBVCxFQUFxQixtQkFBbUJ1ZCxNQUF4QyxFQUFnRCxlQUFlLElBQS9ELEVBQXFFLE1BQU1qTyxFQUEzRSxFQUFkO0FBQ0QsU0FmRDtBQWdCQSxZQUFJa08sY0FBYyxLQUFLM2MsUUFBTCxDQUFjdUMsSUFBZCxDQUFtQixZQUFuQixFQUFpQ3NQLFFBQWpDLENBQTBDLG9CQUExQyxDQUFsQjtBQUNBLGFBQUsrSyxhQUFMLEdBQXFCLElBQXJCO0FBQ0EsWUFBR0QsWUFBWWhiLE1BQWYsRUFBc0I7QUFDcEIsZUFBS2tiLElBQUwsQ0FBVUYsV0FBVixFQUF1QixLQUFLQyxhQUE1QjtBQUNBLGVBQUtBLGFBQUwsR0FBcUIsS0FBckI7QUFDRDs7QUFFRCxhQUFLRSxjQUFMLEdBQXNCLFlBQU07QUFDMUIsY0FBSXRULFNBQVNsRSxPQUFPeVgsUUFBUCxDQUFnQkMsSUFBN0I7QUFDQTtBQUNBLGNBQUd4VCxPQUFPN0gsTUFBVixFQUFrQjtBQUNoQixnQkFBSXNiLFFBQVEsT0FBS2pkLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsYUFBV2lILE1BQVgsR0FBa0IsSUFBckMsQ0FBWjtBQUFBLGdCQUNBMFQsVUFBVXRlLEVBQUU0SyxNQUFGLENBRFY7O0FBR0EsZ0JBQUl5VCxNQUFNdGIsTUFBTixJQUFnQnViLE9BQXBCLEVBQTZCO0FBQzNCLGtCQUFJLENBQUNELE1BQU1uVixNQUFOLENBQWEsdUJBQWIsRUFBc0NxVixRQUF0QyxDQUErQyxXQUEvQyxDQUFMLEVBQWtFO0FBQ2hFLHVCQUFLTixJQUFMLENBQVVLLE9BQVYsRUFBbUIsT0FBS04sYUFBeEI7QUFDQSx1QkFBS0EsYUFBTCxHQUFxQixLQUFyQjtBQUNEOztBQUVEO0FBQ0Esa0JBQUksT0FBSzVLLE9BQUwsQ0FBYW9MLGNBQWpCLEVBQWlDO0FBQy9CLG9CQUFJcGMsY0FBSjtBQUNBcEMsa0JBQUUwRyxNQUFGLEVBQVUrWCxJQUFWLENBQWUsWUFBVztBQUN4QixzQkFBSTlVLFNBQVN2SCxNQUFNaEIsUUFBTixDQUFldUksTUFBZixFQUFiO0FBQ0EzSixvQkFBRSxZQUFGLEVBQWdCb1IsT0FBaEIsQ0FBd0IsRUFBRXNOLFdBQVcvVSxPQUFPTCxHQUFwQixFQUF4QixFQUFtRGxILE1BQU1nUixPQUFOLENBQWN1TCxtQkFBakU7QUFDRCxpQkFIRDtBQUlEOztBQUVEOzs7O0FBSUEscUJBQUt2ZCxRQUFMLENBQWNFLE9BQWQsQ0FBc0IsdUJBQXRCLEVBQStDLENBQUMrYyxLQUFELEVBQVFDLE9BQVIsQ0FBL0M7QUFDRDtBQUNGO0FBQ0YsU0E3QkQ7O0FBK0JBO0FBQ0EsWUFBSSxLQUFLbEwsT0FBTCxDQUFhd0wsUUFBakIsRUFBMkI7QUFDekIsZUFBS1YsY0FBTDtBQUNEOztBQUVELGFBQUs3RSxPQUFMO0FBQ0Q7O0FBRUQ7Ozs7O0FBdEdXO0FBQUE7QUFBQSxnQ0EwR0Q7QUFDUixZQUFJalgsUUFBUSxJQUFaOztBQUVBLGFBQUt1YixLQUFMLENBQVcxYixJQUFYLENBQWdCLFlBQVc7QUFDekIsY0FBSXlCLFFBQVExRCxFQUFFLElBQUYsQ0FBWjtBQUNBLGNBQUk2ZSxjQUFjbmIsTUFBTXVQLFFBQU4sQ0FBZSxvQkFBZixDQUFsQjtBQUNBLGNBQUk0TCxZQUFZOWIsTUFBaEIsRUFBd0I7QUFDdEJXLGtCQUFNdVAsUUFBTixDQUFlLEdBQWYsRUFBb0JyRixHQUFwQixDQUF3Qix5Q0FBeEIsRUFDUUwsRUFEUixDQUNXLG9CQURYLEVBQ2lDLFVBQVNySixDQUFULEVBQVk7QUFDM0NBLGdCQUFFdUosY0FBRjtBQUNBckwsb0JBQU0wYyxNQUFOLENBQWFELFdBQWI7QUFDRCxhQUpELEVBSUd0UixFQUpILENBSU0sc0JBSk4sRUFJOEIsVUFBU3JKLENBQVQsRUFBVztBQUN2Q2hFLHlCQUFXbUwsUUFBWCxDQUFvQmEsU0FBcEIsQ0FBOEJoSSxDQUE5QixFQUFpQyxXQUFqQyxFQUE4QztBQUM1QzRhLHdCQUFRLGtCQUFXO0FBQ2pCMWMsd0JBQU0wYyxNQUFOLENBQWFELFdBQWI7QUFDRCxpQkFIMkM7QUFJNUNFLHNCQUFNLGdCQUFXO0FBQ2Ysc0JBQUlDLEtBQUt0YixNQUFNcWIsSUFBTixHQUFhcGIsSUFBYixDQUFrQixHQUFsQixFQUF1QitKLEtBQXZCLEVBQVQ7QUFDQSxzQkFBSSxDQUFDdEwsTUFBTWdSLE9BQU4sQ0FBYzZMLFdBQW5CLEVBQWdDO0FBQzlCRCx1QkFBRzFkLE9BQUgsQ0FBVyxvQkFBWDtBQUNEO0FBQ0YsaUJBVDJDO0FBVTVDNGQsMEJBQVUsb0JBQVc7QUFDbkIsc0JBQUlGLEtBQUt0YixNQUFNeWIsSUFBTixHQUFheGIsSUFBYixDQUFrQixHQUFsQixFQUF1QitKLEtBQXZCLEVBQVQ7QUFDQSxzQkFBSSxDQUFDdEwsTUFBTWdSLE9BQU4sQ0FBYzZMLFdBQW5CLEVBQWdDO0FBQzlCRCx1QkFBRzFkLE9BQUgsQ0FBVyxvQkFBWDtBQUNEO0FBQ0YsaUJBZjJDO0FBZ0I1Q3FMLHlCQUFTLG1CQUFXO0FBQ2xCekksb0JBQUV1SixjQUFGO0FBQ0F2SixvQkFBRWtULGVBQUY7QUFDRDtBQW5CMkMsZUFBOUM7QUFxQkQsYUExQkQ7QUEyQkQ7QUFDRixTQWhDRDtBQWlDQSxZQUFHLEtBQUtoRSxPQUFMLENBQWF3TCxRQUFoQixFQUEwQjtBQUN4QjVlLFlBQUUwRyxNQUFGLEVBQVU2RyxFQUFWLENBQWEsVUFBYixFQUF5QixLQUFLMlEsY0FBOUI7QUFDRDtBQUNGOztBQUVEOzs7Ozs7QUFuSlc7QUFBQTtBQUFBLDZCQXdKSjNGLE9BeEpJLEVBd0pLO0FBQ2QsWUFBR0EsUUFBUXJQLE1BQVIsR0FBaUJxVixRQUFqQixDQUEwQixXQUExQixDQUFILEVBQTJDO0FBQ3pDLGVBQUthLEVBQUwsQ0FBUTdHLE9BQVI7QUFDRCxTQUZELE1BRU87QUFDTCxlQUFLMEYsSUFBTCxDQUFVMUYsT0FBVjtBQUNEO0FBQ0Q7QUFDQSxZQUFJLEtBQUtuRixPQUFMLENBQWF3TCxRQUFqQixFQUEyQjtBQUN6QixjQUFJaFUsU0FBUzJOLFFBQVE0RyxJQUFSLENBQWEsR0FBYixFQUFrQjVlLElBQWxCLENBQXVCLE1BQXZCLENBQWI7O0FBRUEsY0FBSSxLQUFLNlMsT0FBTCxDQUFhaU0sYUFBakIsRUFBZ0M7QUFDOUJDLG9CQUFRQyxTQUFSLENBQWtCLEVBQWxCLEVBQXNCLEVBQXRCLEVBQTBCM1UsTUFBMUI7QUFDRCxXQUZELE1BRU87QUFDTDBVLG9CQUFRRSxZQUFSLENBQXFCLEVBQXJCLEVBQXlCLEVBQXpCLEVBQTZCNVUsTUFBN0I7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQ7Ozs7Ozs7O0FBMUtXO0FBQUE7QUFBQSwyQkFpTE4yTixPQWpMTSxFQWlMR2tILFNBakxILEVBaUxjO0FBQUE7O0FBQ3ZCbEgsZ0JBQ0doWSxJQURILENBQ1EsYUFEUixFQUN1QixLQUR2QixFQUVHMkksTUFGSCxDQUVVLG9CQUZWLEVBR0d0RixPQUhILEdBSUdzRixNQUpILEdBSVk4SSxRQUpaLENBSXFCLFdBSnJCOztBQU1BLFlBQUksQ0FBQyxLQUFLb0IsT0FBTCxDQUFhNkwsV0FBZCxJQUE2QixDQUFDUSxTQUFsQyxFQUE2QztBQUMzQyxjQUFJQyxpQkFBaUIsS0FBS3RlLFFBQUwsQ0FBYzZSLFFBQWQsQ0FBdUIsWUFBdkIsRUFBcUNBLFFBQXJDLENBQThDLG9CQUE5QyxDQUFyQjtBQUNBLGNBQUl5TSxlQUFlM2MsTUFBbkIsRUFBMkI7QUFDekIsaUJBQUtxYyxFQUFMLENBQVFNLGVBQWUxSCxHQUFmLENBQW1CTyxPQUFuQixDQUFSO0FBQ0Q7QUFDRjs7QUFFREEsZ0JBQVFvSCxTQUFSLENBQWtCLEtBQUt2TSxPQUFMLENBQWF3TSxVQUEvQixFQUEyQyxZQUFNO0FBQy9DOzs7O0FBSUEsaUJBQUt4ZSxRQUFMLENBQWNFLE9BQWQsQ0FBc0IsbUJBQXRCLEVBQTJDLENBQUNpWCxPQUFELENBQTNDO0FBQ0QsU0FORDs7QUFRQXZZLGdCQUFNdVksUUFBUWhZLElBQVIsQ0FBYSxpQkFBYixDQUFOLEVBQXlDQSxJQUF6QyxDQUE4QztBQUM1QywyQkFBaUIsSUFEMkI7QUFFNUMsMkJBQWlCO0FBRjJCLFNBQTlDO0FBSUQ7O0FBRUQ7Ozs7Ozs7QUE3TVc7QUFBQTtBQUFBLHlCQW1OUmdZLE9Bbk5RLEVBbU5DO0FBQ1YsWUFBSXNILFNBQVN0SCxRQUFRclAsTUFBUixHQUFpQjZRLFFBQWpCLEVBQWI7QUFBQSxZQUNJM1gsUUFBUSxJQURaOztBQUdBLFlBQUksQ0FBQyxLQUFLZ1IsT0FBTCxDQUFhME0sY0FBZCxJQUFnQyxDQUFDRCxPQUFPdEIsUUFBUCxDQUFnQixXQUFoQixDQUFsQyxJQUFtRSxDQUFDaEcsUUFBUXJQLE1BQVIsR0FBaUJxVixRQUFqQixDQUEwQixXQUExQixDQUF2RSxFQUErRztBQUM3RztBQUNEOztBQUVEO0FBQ0VoRyxnQkFBUXdILE9BQVIsQ0FBZ0IzZCxNQUFNZ1IsT0FBTixDQUFjd00sVUFBOUIsRUFBMEMsWUFBWTtBQUNwRDs7OztBQUlBeGQsZ0JBQU1oQixRQUFOLENBQWVFLE9BQWYsQ0FBdUIsaUJBQXZCLEVBQTBDLENBQUNpWCxPQUFELENBQTFDO0FBQ0QsU0FORDtBQU9GOztBQUVBQSxnQkFBUWhZLElBQVIsQ0FBYSxhQUFiLEVBQTRCLElBQTVCLEVBQ1EySSxNQURSLEdBQ2lCakQsV0FEakIsQ0FDNkIsV0FEN0I7O0FBR0FqRyxnQkFBTXVZLFFBQVFoWSxJQUFSLENBQWEsaUJBQWIsQ0FBTixFQUF5Q0EsSUFBekMsQ0FBOEM7QUFDN0MsMkJBQWlCLEtBRDRCO0FBRTdDLDJCQUFpQjtBQUY0QixTQUE5QztBQUlEOztBQUVEOzs7Ozs7QUE5T1c7QUFBQTtBQUFBLGdDQW1QRDtBQUNSLGFBQUthLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsb0JBQW5CLEVBQXlDcWMsSUFBekMsQ0FBOEMsSUFBOUMsRUFBb0RELE9BQXBELENBQTRELENBQTVELEVBQStEdlIsR0FBL0QsQ0FBbUUsU0FBbkUsRUFBOEUsRUFBOUU7QUFDQSxhQUFLcE4sUUFBTCxDQUFjdUMsSUFBZCxDQUFtQixHQUFuQixFQUF3QmlLLEdBQXhCLENBQTRCLGVBQTVCO0FBQ0EsWUFBRyxLQUFLd0YsT0FBTCxDQUFhd0wsUUFBaEIsRUFBMEI7QUFDeEI1ZSxZQUFFMEcsTUFBRixFQUFVa0gsR0FBVixDQUFjLFVBQWQsRUFBMEIsS0FBS3NRLGNBQS9CO0FBQ0Q7O0FBRURoZSxtQkFBV3NCLGdCQUFYLENBQTRCLElBQTVCO0FBQ0Q7QUEzUFU7O0FBQUE7QUFBQTs7QUE4UGJrYyxZQUFVdkUsUUFBVixHQUFxQjtBQUNuQjs7Ozs7O0FBTUF5RyxnQkFBWSxHQVBPO0FBUW5COzs7Ozs7QUFNQVgsaUJBQWEsS0FkTTtBQWVuQjs7Ozs7O0FBTUFhLG9CQUFnQixLQXJCRztBQXNCbkI7Ozs7OztBQU1BbEIsY0FBVSxLQTVCUzs7QUE4Qm5COzs7Ozs7QUFNQUosb0JBQWdCLEtBcENHOztBQXNDbkI7Ozs7OztBQU1BRyx5QkFBcUIsR0E1Q0Y7O0FBOENuQjs7Ozs7O0FBTUFVLG1CQUFlO0FBcERJLEdBQXJCOztBQXVEQTtBQUNBbmYsYUFBV00sTUFBWCxDQUFrQmtkLFNBQWxCLEVBQTZCLFdBQTdCO0FBRUMsQ0F4VEEsQ0F3VEM5VSxNQXhURCxDQUFEO0FDRkE7Ozs7OztBQUVBLENBQUMsVUFBUzVJLENBQVQsRUFBWTs7QUFFVDs7Ozs7Ozs7QUFGUyxRQVVIaWdCLGFBVkc7QUFXTDs7Ozs7OztBQU9BLCtCQUFZaFgsT0FBWixFQUFxQm1LLE9BQXJCLEVBQThCO0FBQUE7O0FBQzFCLGlCQUFLaFMsUUFBTCxHQUFnQjZILE9BQWhCO0FBQ0EsaUJBQUttSyxPQUFMLEdBQWVwVCxFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYXdULGNBQWM5RyxRQUEzQixFQUFxQyxLQUFLL1gsUUFBTCxDQUFjQyxJQUFkLEVBQXJDLEVBQTJEK1IsT0FBM0QsQ0FBZjs7QUFFQWxULHVCQUFXcVMsSUFBWCxDQUFnQkMsT0FBaEIsQ0FBd0IsS0FBS3BSLFFBQTdCLEVBQXVDLFdBQXZDOztBQUVBLGlCQUFLYyxLQUFMOztBQUVBaEMsdUJBQVdZLGNBQVgsQ0FBMEIsSUFBMUIsRUFBZ0MsZUFBaEM7QUFDQVosdUJBQVdtTCxRQUFYLENBQW9CMkIsUUFBcEIsQ0FBNkIsZUFBN0IsRUFBOEM7QUFDMUMseUJBQVMsUUFEaUM7QUFFMUMseUJBQVMsUUFGaUM7QUFHMUMsK0JBQWUsTUFIMkI7QUFJMUMsNEJBQVksSUFKOEI7QUFLMUMsOEJBQWMsTUFMNEI7QUFNMUMsOEJBQWMsT0FONEI7QUFPMUMsMEJBQVU7QUFQZ0MsYUFBOUM7QUFTSDs7QUFJRDs7Ozs7O0FBeENLO0FBQUE7QUFBQSxvQ0E0Q0c7QUFDSixvQkFBSTVLLFFBQVEsSUFBWjs7QUFFQSxxQkFBS2hCLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsZ0JBQW5CLEVBQXFDcVUsR0FBckMsQ0FBeUMsWUFBekMsRUFBdUQrSCxPQUF2RCxDQUErRCxDQUEvRCxFQUhJLENBRzhEO0FBQ2xFLHFCQUFLM2UsUUFBTCxDQUFjYixJQUFkLENBQW1CO0FBQ2YsNEJBQVEsTUFETztBQUVmLDRDQUF3QixLQUFLNlMsT0FBTCxDQUFhOE07QUFGdEIsaUJBQW5COztBQUtBLHFCQUFLQyxVQUFMLEdBQWtCLEtBQUsvZSxRQUFMLENBQWN1QyxJQUFkLENBQW1CLDhCQUFuQixDQUFsQjtBQUNBLHFCQUFLd2MsVUFBTCxDQUFnQmxlLElBQWhCLENBQXFCLFlBQVU7QUFDM0Isd0JBQUk2YixTQUFTLEtBQUtqTyxFQUFMLElBQVczUCxXQUFXaUIsV0FBWCxDQUF1QixDQUF2QixFQUEwQixlQUExQixDQUF4QjtBQUFBLHdCQUNJdUMsUUFBUTFELEVBQUUsSUFBRixDQURaO0FBQUEsd0JBRUlnVCxPQUFPdFAsTUFBTXVQLFFBQU4sQ0FBZSxnQkFBZixDQUZYO0FBQUEsd0JBR0ltTixRQUFRcE4sS0FBSyxDQUFMLEVBQVFuRCxFQUFSLElBQWMzUCxXQUFXaUIsV0FBWCxDQUF1QixDQUF2QixFQUEwQixVQUExQixDQUgxQjtBQUFBLHdCQUlJa2YsV0FBV3JOLEtBQUt1TCxRQUFMLENBQWMsV0FBZCxDQUpmOztBQU9BLHdCQUFHbmMsTUFBTWdSLE9BQU4sQ0FBY2tOLGFBQWpCLEVBQWdDO0FBQzVCNWMsOEJBQU1zTyxRQUFOLENBQWUsb0JBQWY7QUFDQXRPLDhCQUFNdVAsUUFBTixDQUFlLEdBQWYsRUFBb0JzTixLQUFwQixDQUEwQixpQkFBaUJ6QyxNQUFqQixHQUEwQiwwQ0FBMUIsR0FBdUVzQyxLQUF2RSxHQUErRSxtQkFBL0UsR0FBcUdDLFFBQXJHLEdBQWdILHNDQUFoSCxHQUF5SmplLE1BQU1nUixPQUFOLENBQWNvTixpQkFBdkssR0FBMkwsa0JBQXJOO0FBQ0gscUJBSEQsTUFHTztBQUNIOWMsOEJBQU1uRCxJQUFOLENBQVc7QUFDUCw2Q0FBaUI2ZixLQURWO0FBRVAsNkNBQWlCQyxRQUZWO0FBR1Asb0NBQVEsVUFIRDtBQUlQLGtDQUFNdkM7QUFKQyx5QkFBWDtBQU1IO0FBQ0Q5Syx5QkFBS3pTLElBQUwsQ0FBVTtBQUNOLDJDQUFtQnVkLE1BRGI7QUFFTix1Q0FBZSxDQUFDdUMsUUFGVjtBQUdOLGdDQUFRLE1BSEY7QUFJTiw4QkFBTUQ7QUFKQSxxQkFBVjtBQU1ILGlCQXpCRDtBQTBCQSxvQkFBSUssWUFBWSxLQUFLcmYsUUFBTCxDQUFjdUMsSUFBZCxDQUFtQixZQUFuQixDQUFoQjtBQUNBLG9CQUFHOGMsVUFBVTFkLE1BQWIsRUFBb0I7QUFDaEIsd0JBQUlYLFFBQVEsSUFBWjtBQUNBcWUsOEJBQVV4ZSxJQUFWLENBQWUsWUFBVTtBQUNyQkcsOEJBQU02YixJQUFOLENBQVdqZSxFQUFFLElBQUYsQ0FBWDtBQUNILHFCQUZEO0FBR0g7QUFDRCxxQkFBS3FaLE9BQUw7QUFDSDs7QUFFRDs7Ozs7QUExRks7QUFBQTtBQUFBLHNDQThGSztBQUNOLG9CQUFJalgsUUFBUSxJQUFaOztBQUVBLHFCQUFLaEIsUUFBTCxDQUFjdUMsSUFBZCxDQUFtQixJQUFuQixFQUF5QjFCLElBQXpCLENBQThCLFlBQVc7QUFDckMsd0JBQUl5ZSxXQUFXMWdCLEVBQUUsSUFBRixFQUFRaVQsUUFBUixDQUFpQixnQkFBakIsQ0FBZjs7QUFFQSx3QkFBSXlOLFNBQVMzZCxNQUFiLEVBQXFCO0FBQ2pCLDRCQUFHWCxNQUFNZ1IsT0FBTixDQUFja04sYUFBakIsRUFBZ0M7QUFDNUJ0Z0IsOEJBQUUsSUFBRixFQUFRaVQsUUFBUixDQUFpQixpQkFBakIsRUFBb0NyRixHQUFwQyxDQUF3Qyx3QkFBeEMsRUFBa0VMLEVBQWxFLENBQXFFLHdCQUFyRSxFQUErRixVQUFTckosQ0FBVCxFQUFZO0FBQ3ZHOUIsc0NBQU0wYyxNQUFOLENBQWE0QixRQUFiO0FBQ0gsNkJBRkQ7QUFHSCx5QkFKRCxNQUlPO0FBQ0gxZ0IsOEJBQUUsSUFBRixFQUFRaVQsUUFBUixDQUFpQixHQUFqQixFQUFzQnJGLEdBQXRCLENBQTBCLHdCQUExQixFQUFvREwsRUFBcEQsQ0FBdUQsd0JBQXZELEVBQWlGLFVBQVNySixDQUFULEVBQVk7QUFDekZBLGtDQUFFdUosY0FBRjtBQUNBckwsc0NBQU0wYyxNQUFOLENBQWE0QixRQUFiO0FBQ0gsNkJBSEQ7QUFJSDtBQUNKO0FBQ0osaUJBZkQsRUFlR25ULEVBZkgsQ0FlTSwwQkFmTixFQWVrQyxVQUFTckosQ0FBVCxFQUFXO0FBQ3pDLHdCQUFJOUMsV0FBV3BCLEVBQUUsSUFBRixDQUFmO0FBQUEsd0JBQ0kyZ0IsWUFBWXZmLFNBQVM4SCxNQUFULENBQWdCLElBQWhCLEVBQXNCK0osUUFBdEIsQ0FBK0IsSUFBL0IsQ0FEaEI7QUFBQSx3QkFFSTJOLFlBRko7QUFBQSx3QkFHSUMsWUFISjtBQUFBLHdCQUlJdEksVUFBVW5YLFNBQVM2UixRQUFULENBQWtCLGdCQUFsQixDQUpkOztBQU1BME4sOEJBQVUxZSxJQUFWLENBQWUsVUFBU3dCLENBQVQsRUFBWTtBQUN2Qiw0QkFBSXpELEVBQUUsSUFBRixFQUFRK00sRUFBUixDQUFXM0wsUUFBWCxDQUFKLEVBQTBCO0FBQ3RCd2YsMkNBQWVELFVBQVV0VCxFQUFWLENBQWFwSyxLQUFLd0UsR0FBTCxDQUFTLENBQVQsRUFBWWhFLElBQUUsQ0FBZCxDQUFiLEVBQStCRSxJQUEvQixDQUFvQyxHQUFwQyxFQUF5Q3dTLEtBQXpDLEVBQWY7QUFDQTBLLDJDQUFlRixVQUFVdFQsRUFBVixDQUFhcEssS0FBSzZkLEdBQUwsQ0FBU3JkLElBQUUsQ0FBWCxFQUFja2QsVUFBVTVkLE1BQVYsR0FBaUIsQ0FBL0IsQ0FBYixFQUFnRFksSUFBaEQsQ0FBcUQsR0FBckQsRUFBMER3UyxLQUExRCxFQUFmOztBQUVBLGdDQUFJblcsRUFBRSxJQUFGLEVBQVFpVCxRQUFSLENBQWlCLHdCQUFqQixFQUEyQ2xRLE1BQS9DLEVBQXVEO0FBQUU7QUFDckQ4ZCwrQ0FBZXpmLFNBQVN1QyxJQUFULENBQWMsZ0JBQWQsRUFBZ0NBLElBQWhDLENBQXFDLEdBQXJDLEVBQTBDd1MsS0FBMUMsRUFBZjtBQUNIO0FBQ0QsZ0NBQUluVyxFQUFFLElBQUYsRUFBUStNLEVBQVIsQ0FBVyxjQUFYLENBQUosRUFBZ0M7QUFBRTtBQUM5QjZULCtDQUFleGYsU0FBUzJmLE9BQVQsQ0FBaUIsSUFBakIsRUFBdUI1SyxLQUF2QixHQUErQnhTLElBQS9CLENBQW9DLEdBQXBDLEVBQXlDd1MsS0FBekMsRUFBZjtBQUNILDZCQUZELE1BRU8sSUFBSXlLLGFBQWFHLE9BQWIsQ0FBcUIsSUFBckIsRUFBMkI1SyxLQUEzQixHQUFtQ2xELFFBQW5DLENBQTRDLHdCQUE1QyxFQUFzRWxRLE1BQTFFLEVBQWtGO0FBQUU7QUFDdkY2ZCwrQ0FBZUEsYUFBYUcsT0FBYixDQUFxQixJQUFyQixFQUEyQnBkLElBQTNCLENBQWdDLGVBQWhDLEVBQWlEQSxJQUFqRCxDQUFzRCxHQUF0RCxFQUEyRHdTLEtBQTNELEVBQWY7QUFDSDtBQUNELGdDQUFJblcsRUFBRSxJQUFGLEVBQVErTSxFQUFSLENBQVcsYUFBWCxDQUFKLEVBQStCO0FBQUU7QUFDN0I4VCwrQ0FBZXpmLFNBQVMyZixPQUFULENBQWlCLElBQWpCLEVBQXVCNUssS0FBdkIsR0FBK0I0SSxJQUEvQixDQUFvQyxJQUFwQyxFQUEwQ3BiLElBQTFDLENBQStDLEdBQS9DLEVBQW9Ed1MsS0FBcEQsRUFBZjtBQUNIOztBQUVEO0FBQ0g7QUFDSixxQkFuQkQ7O0FBcUJBalcsK0JBQVdtTCxRQUFYLENBQW9CYSxTQUFwQixDQUE4QmhJLENBQTlCLEVBQWlDLGVBQWpDLEVBQWtEO0FBQzlDOGMsOEJBQU0sZ0JBQVc7QUFDYixnQ0FBSXpJLFFBQVF4TCxFQUFSLENBQVcsU0FBWCxDQUFKLEVBQTJCO0FBQ3ZCM0ssc0NBQU02YixJQUFOLENBQVcxRixPQUFYO0FBQ0FBLHdDQUFRNVUsSUFBUixDQUFhLElBQWIsRUFBbUJ3UyxLQUFuQixHQUEyQnhTLElBQTNCLENBQWdDLEdBQWhDLEVBQXFDd1MsS0FBckMsR0FBNkN6SSxLQUE3QztBQUNIO0FBQ0oseUJBTjZDO0FBTzlDdVQsK0JBQU8saUJBQVc7QUFDZCxnQ0FBSTFJLFFBQVF4VixNQUFSLElBQWtCLENBQUN3VixRQUFReEwsRUFBUixDQUFXLFNBQVgsQ0FBdkIsRUFBOEM7QUFBRTtBQUM1QzNLLHNDQUFNZ2QsRUFBTixDQUFTN0csT0FBVDtBQUNILDZCQUZELE1BRU8sSUFBSW5YLFNBQVM4SCxNQUFULENBQWdCLGdCQUFoQixFQUFrQ25HLE1BQXRDLEVBQThDO0FBQUU7QUFDbkRYLHNDQUFNZ2QsRUFBTixDQUFTaGUsU0FBUzhILE1BQVQsQ0FBZ0IsZ0JBQWhCLENBQVQ7QUFDQTlILHlDQUFTMmYsT0FBVCxDQUFpQixJQUFqQixFQUF1QjVLLEtBQXZCLEdBQStCeFMsSUFBL0IsQ0FBb0MsR0FBcEMsRUFBeUN3UyxLQUF6QyxHQUFpRHpJLEtBQWpEO0FBQ0g7QUFDSix5QkFkNkM7QUFlOUMwUiw0QkFBSSxjQUFXO0FBQ1h3Qix5Q0FBYWxULEtBQWI7QUFDQSxtQ0FBTyxJQUFQO0FBQ0gseUJBbEI2QztBQW1COUN1USw4QkFBTSxnQkFBVztBQUNiNEMseUNBQWFuVCxLQUFiO0FBQ0EsbUNBQU8sSUFBUDtBQUNILHlCQXRCNkM7QUF1QjlDb1IsZ0NBQVEsa0JBQVc7QUFDZixnQ0FBSTFkLFNBQVM2UixRQUFULENBQWtCLGdCQUFsQixFQUFvQ2xRLE1BQXhDLEVBQWdEO0FBQzVDWCxzQ0FBTTBjLE1BQU4sQ0FBYTFkLFNBQVM2UixRQUFULENBQWtCLGdCQUFsQixDQUFiO0FBQ0g7QUFDSix5QkEzQjZDO0FBNEI5Q2lPLGtDQUFVLG9CQUFXO0FBQ2pCOWUsa0NBQU0rZSxPQUFOO0FBQ0gseUJBOUI2QztBQStCOUN4VSxpQ0FBUyxpQkFBU2MsY0FBVCxFQUF5QjtBQUM5QixnQ0FBSUEsY0FBSixFQUFvQjtBQUNoQnZKLGtDQUFFdUosY0FBRjtBQUNIO0FBQ0R2Siw4QkFBRWtkLHdCQUFGO0FBQ0g7QUFwQzZDLHFCQUFsRDtBQXNDSCxpQkFqRkQsRUFITSxDQW9GSDtBQUNOOztBQUVEOzs7OztBQXJMSztBQUFBO0FBQUEsc0NBeUxLO0FBQ04scUJBQUtoQyxFQUFMLENBQVEsS0FBS2hlLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsZ0JBQW5CLENBQVI7QUFDSDs7QUFFRDs7Ozs7QUE3TEs7QUFBQTtBQUFBLHNDQWlNSztBQUNOLHFCQUFLc2EsSUFBTCxDQUFVLEtBQUs3YyxRQUFMLENBQWN1QyxJQUFkLENBQW1CLGdCQUFuQixDQUFWO0FBQ0g7O0FBRUQ7Ozs7OztBQXJNSztBQUFBO0FBQUEsbUNBME1FNFUsT0ExTUYsRUEwTVU7QUFDWCxvQkFBRyxDQUFDQSxRQUFReEwsRUFBUixDQUFXLFdBQVgsQ0FBSixFQUE2QjtBQUN6Qix3QkFBSSxDQUFDd0wsUUFBUXhMLEVBQVIsQ0FBVyxTQUFYLENBQUwsRUFBNEI7QUFDeEIsNkJBQUtxUyxFQUFMLENBQVE3RyxPQUFSO0FBQ0gscUJBRkQsTUFHSztBQUNELDZCQUFLMEYsSUFBTCxDQUFVMUYsT0FBVjtBQUNIO0FBQ0o7QUFDSjs7QUFFRDs7Ozs7O0FBck5LO0FBQUE7QUFBQSxpQ0EwTkFBLE9BMU5BLEVBME5TO0FBQ1Ysb0JBQUluVyxRQUFRLElBQVo7O0FBRUEsb0JBQUcsQ0FBQyxLQUFLZ1IsT0FBTCxDQUFhOE0sU0FBakIsRUFBNEI7QUFDeEIseUJBQUtkLEVBQUwsQ0FBUSxLQUFLaGUsUUFBTCxDQUFjdUMsSUFBZCxDQUFtQixZQUFuQixFQUFpQ3FVLEdBQWpDLENBQXFDTyxRQUFROEksWUFBUixDQUFxQixLQUFLamdCLFFBQTFCLEVBQW9DNlksR0FBcEMsQ0FBd0MxQixPQUF4QyxDQUFyQyxDQUFSO0FBQ0g7O0FBRURBLHdCQUFRdkcsUUFBUixDQUFpQixXQUFqQixFQUE4QnpSLElBQTlCLENBQW1DLEVBQUMsZUFBZSxLQUFoQixFQUFuQzs7QUFFQSxvQkFBRyxLQUFLNlMsT0FBTCxDQUFha04sYUFBaEIsRUFBK0I7QUFDM0IvSCw0QkFBUTRHLElBQVIsQ0FBYSxpQkFBYixFQUFnQzVlLElBQWhDLENBQXFDLEVBQUMsaUJBQWlCLElBQWxCLEVBQXJDO0FBQ0gsaUJBRkQsTUFHSztBQUNEZ1ksNEJBQVFyUCxNQUFSLENBQWUsOEJBQWYsRUFBK0MzSSxJQUEvQyxDQUFvRCxFQUFDLGlCQUFpQixJQUFsQixFQUFwRDtBQUNIOztBQUVEO0FBQ0FnWSx3QkFBUW9ILFNBQVIsQ0FBa0J2ZCxNQUFNZ1IsT0FBTixDQUFjd00sVUFBaEMsRUFBNEMsWUFBWTtBQUNwRDs7OztBQUlBeGQsMEJBQU1oQixRQUFOLENBQWVFLE9BQWYsQ0FBdUIsdUJBQXZCLEVBQWdELENBQUNpWCxPQUFELENBQWhEO0FBQ0gsaUJBTkQ7QUFPQTtBQUNIOztBQUVEOzs7Ozs7QUFyUEs7QUFBQTtBQUFBLCtCQTBQRkEsT0ExUEUsRUEwUE87QUFDUixvQkFBSW5XLFFBQVEsSUFBWjtBQUNBO0FBQ0FtVyx3QkFBUXdILE9BQVIsQ0FBZ0IzZCxNQUFNZ1IsT0FBTixDQUFjd00sVUFBOUIsRUFBMEMsWUFBWTtBQUNsRDs7OztBQUlBeGQsMEJBQU1oQixRQUFOLENBQWVFLE9BQWYsQ0FBdUIscUJBQXZCLEVBQThDLENBQUNpWCxPQUFELENBQTlDO0FBQ0gsaUJBTkQ7QUFPQTs7QUFFQSxvQkFBSStJLFNBQVMvSSxRQUFRNVUsSUFBUixDQUFhLGdCQUFiLEVBQStCb2MsT0FBL0IsQ0FBdUMsQ0FBdkMsRUFBMENuYyxPQUExQyxHQUFvRHJELElBQXBELENBQXlELGFBQXpELEVBQXdFLElBQXhFLENBQWI7O0FBRUEsb0JBQUcsS0FBSzZTLE9BQUwsQ0FBYWtOLGFBQWhCLEVBQStCO0FBQzNCZ0IsMkJBQU9uQyxJQUFQLENBQVksaUJBQVosRUFBK0I1ZSxJQUEvQixDQUFvQyxlQUFwQyxFQUFxRCxLQUFyRDtBQUNILGlCQUZELE1BR0s7QUFDRCtnQiwyQkFBT3BZLE1BQVAsQ0FBYyw4QkFBZCxFQUE4QzNJLElBQTlDLENBQW1ELGVBQW5ELEVBQW9FLEtBQXBFO0FBQ0g7QUFDSjs7QUFFRDs7Ozs7QUFoUks7QUFBQTtBQUFBLHNDQW9SSztBQUNOLHFCQUFLYSxRQUFMLENBQWN1QyxJQUFkLENBQW1CLGdCQUFuQixFQUFxQ2djLFNBQXJDLENBQStDLENBQS9DLEVBQWtEblIsR0FBbEQsQ0FBc0QsU0FBdEQsRUFBaUUsRUFBakU7QUFDQSxxQkFBS3BOLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsR0FBbkIsRUFBd0JpSyxHQUF4QixDQUE0Qix3QkFBNUI7O0FBRUEsb0JBQUcsS0FBS3dGLE9BQUwsQ0FBYWtOLGFBQWhCLEVBQStCO0FBQzNCLHlCQUFLbGYsUUFBTCxDQUFjdUMsSUFBZCxDQUFtQixxQkFBbkIsRUFBMENzQyxXQUExQyxDQUFzRCxvQkFBdEQ7QUFDQSx5QkFBSzdFLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsaUJBQW5CLEVBQXNDNGQsTUFBdEM7QUFDSDs7QUFFRHJoQiwyQkFBV3FTLElBQVgsQ0FBZ0JXLElBQWhCLENBQXFCLEtBQUs5UixRQUExQixFQUFvQyxXQUFwQztBQUNBbEIsMkJBQVdzQixnQkFBWCxDQUE0QixJQUE1QjtBQUNIO0FBL1JJOztBQUFBO0FBQUE7O0FBa1NUeWUsa0JBQWM5RyxRQUFkLEdBQXlCO0FBQ3JCOzs7OztBQUtBeUcsb0JBQVksR0FOUztBQU9yQjs7Ozs7QUFLQVUsdUJBQWUsS0FaTTtBQWFyQjs7Ozs7QUFLQUUsMkJBQW1CLGFBbEJFO0FBbUJyQjs7Ozs7QUFLQU4sbUJBQVc7QUF4QlUsS0FBekI7O0FBMkJKO0FBQ0loZ0IsZUFBV00sTUFBWCxDQUFrQnlmLGFBQWxCLEVBQWlDLGVBQWpDO0FBRUgsQ0FoVUEsQ0FnVUNyWCxNQWhVRCxDQUFEO0FDRkE7Ozs7OztBQUVBLENBQUMsVUFBUzVJLENBQVQsRUFBWTs7QUFFYjs7Ozs7OztBQUZhLE1BU1B3aEIsU0FUTztBQVVYOzs7Ozs7O0FBT0EsdUJBQVl2WSxPQUFaLEVBQXFCbUssT0FBckIsRUFBNkI7QUFBQTs7QUFDM0IsV0FBS2hTLFFBQUwsR0FBZ0I2SCxPQUFoQjtBQUNBLFdBQUttSyxPQUFMLEdBQWdCcFQsRUFBRXlNLE1BQUYsQ0FBUyxFQUFULEVBQWErVSxVQUFVckksUUFBdkIsRUFBaUMsS0FBSy9YLFFBQUwsQ0FBY0MsSUFBZCxFQUFqQyxFQUF1RCtSLE9BQXZELENBQWhCOztBQUVBLFdBQUtsUixLQUFMOztBQUVBaEMsaUJBQVdZLGNBQVgsQ0FBMEIsSUFBMUIsRUFBZ0MsV0FBaEM7QUFDRDs7QUFFRDs7Ozs7O0FBMUJXO0FBQUE7QUFBQSw4QkE4Qkg7QUFDTixZQUFJMmdCLE9BQU8sS0FBS3JnQixRQUFMLENBQWNiLElBQWQsQ0FBbUIsZ0JBQW5CLEtBQXdDLEVBQW5EO0FBQ0EsWUFBSW1oQixXQUFXLEtBQUt0Z0IsUUFBTCxDQUFjdUMsSUFBZCw2QkFBNkM4ZCxJQUE3QyxRQUFmOztBQUVBLGFBQUtDLFFBQUwsR0FBZ0JBLFNBQVMzZSxNQUFULEdBQWtCMmUsUUFBbEIsR0FBNkIsS0FBS3RnQixRQUFMLENBQWN1QyxJQUFkLENBQW1CLHdCQUFuQixDQUE3QztBQUNBLGFBQUt2QyxRQUFMLENBQWNiLElBQWQsQ0FBbUIsYUFBbkIsRUFBbUNraEIsUUFBUXZoQixXQUFXaUIsV0FBWCxDQUF1QixDQUF2QixFQUEwQixJQUExQixDQUEzQztBQUNILGFBQUtDLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixhQUFuQixFQUFtQ2toQixRQUFRdmhCLFdBQVdpQixXQUFYLENBQXVCLENBQXZCLEVBQTBCLElBQTFCLENBQTNDOztBQUVHLGFBQUt3Z0IsU0FBTCxHQUFpQixLQUFLdmdCLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsa0JBQW5CLEVBQXVDWixNQUF2QyxHQUFnRCxDQUFqRTtBQUNBLGFBQUs2ZSxRQUFMLEdBQWdCLEtBQUt4Z0IsUUFBTCxDQUFjaWdCLFlBQWQsQ0FBMkJ6YyxTQUFTMEYsSUFBcEMsRUFBMEMsa0JBQTFDLEVBQThEdkgsTUFBOUQsR0FBdUUsQ0FBdkY7QUFDQSxhQUFLOGUsSUFBTCxHQUFZLEtBQVo7QUFDQSxhQUFLQyxZQUFMLEdBQW9CO0FBQ2xCQywyQkFBaUIsS0FBS0MsV0FBTCxDQUFpQmxhLElBQWpCLENBQXNCLElBQXRCLENBREM7QUFFbEJtYSxnQ0FBc0IsS0FBS0MsZ0JBQUwsQ0FBc0JwYSxJQUF0QixDQUEyQixJQUEzQjtBQUZKLFNBQXBCOztBQUtBLFlBQUlxYSxPQUFPLEtBQUsvZ0IsUUFBTCxDQUFjdUMsSUFBZCxDQUFtQixLQUFuQixDQUFYO0FBQ0EsWUFBSXllLFFBQUo7QUFDQSxZQUFHLEtBQUtoUCxPQUFMLENBQWFpUCxVQUFoQixFQUEyQjtBQUN6QkQscUJBQVcsS0FBS0UsUUFBTCxFQUFYO0FBQ0F0aUIsWUFBRTBHLE1BQUYsRUFBVTZHLEVBQVYsQ0FBYSx1QkFBYixFQUFzQyxLQUFLK1UsUUFBTCxDQUFjeGEsSUFBZCxDQUFtQixJQUFuQixDQUF0QztBQUNELFNBSEQsTUFHSztBQUNILGVBQUt1UixPQUFMO0FBQ0Q7QUFDRCxZQUFJK0ksYUFBYTdiLFNBQWIsSUFBMEI2YixhQUFhLEtBQXhDLElBQWtEQSxhQUFhN2IsU0FBbEUsRUFBNEU7QUFDMUUsY0FBRzRiLEtBQUtwZixNQUFSLEVBQWU7QUFDYjdDLHVCQUFXeVQsY0FBWCxDQUEwQndPLElBQTFCLEVBQWdDLEtBQUtJLE9BQUwsQ0FBYXphLElBQWIsQ0FBa0IsSUFBbEIsQ0FBaEM7QUFDRCxXQUZELE1BRUs7QUFDSCxpQkFBS3lhLE9BQUw7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQ7Ozs7O0FBL0RXO0FBQUE7QUFBQSxxQ0FtRUk7QUFDYixhQUFLVixJQUFMLEdBQVksS0FBWjtBQUNBLGFBQUt6Z0IsUUFBTCxDQUFjd00sR0FBZCxDQUFrQjtBQUNoQiwyQkFBaUIsS0FBS2tVLFlBQUwsQ0FBa0JHLG9CQURuQjtBQUVoQixpQ0FBdUIsS0FBS0gsWUFBTCxDQUFrQkMsZUFGekI7QUFHbkIsaUNBQXVCLEtBQUtELFlBQUwsQ0FBa0JDO0FBSHRCLFNBQWxCO0FBS0Q7O0FBRUQ7Ozs7O0FBNUVXO0FBQUE7QUFBQSxrQ0FnRkM3ZCxDQWhGRCxFQWdGSTtBQUNiLGFBQUtxZSxPQUFMO0FBQ0Q7O0FBRUQ7Ozs7O0FBcEZXO0FBQUE7QUFBQSx1Q0F3Rk1yZSxDQXhGTixFQXdGUztBQUNsQixZQUFHQSxFQUFFc0osTUFBRixLQUFhLEtBQUtwTSxRQUFMLENBQWMsQ0FBZCxDQUFoQixFQUFpQztBQUFFLGVBQUttaEIsT0FBTDtBQUFpQjtBQUNyRDs7QUFFRDs7Ozs7QUE1Rlc7QUFBQTtBQUFBLGdDQWdHRDtBQUNSLFlBQUluZ0IsUUFBUSxJQUFaO0FBQ0EsYUFBS29nQixZQUFMO0FBQ0EsWUFBRyxLQUFLYixTQUFSLEVBQWtCO0FBQ2hCLGVBQUt2Z0IsUUFBTCxDQUFjbU0sRUFBZCxDQUFpQiw0QkFBakIsRUFBK0MsS0FBS3VVLFlBQUwsQ0FBa0JHLG9CQUFqRTtBQUNELFNBRkQsTUFFSztBQUNILGVBQUs3Z0IsUUFBTCxDQUFjbU0sRUFBZCxDQUFpQixxQkFBakIsRUFBd0MsS0FBS3VVLFlBQUwsQ0FBa0JDLGVBQTFEO0FBQ0gsZUFBSzNnQixRQUFMLENBQWNtTSxFQUFkLENBQWlCLHFCQUFqQixFQUF3QyxLQUFLdVUsWUFBTCxDQUFrQkMsZUFBMUQ7QUFDRTtBQUNELGFBQUtGLElBQUwsR0FBWSxJQUFaO0FBQ0Q7O0FBRUQ7Ozs7O0FBNUdXO0FBQUE7QUFBQSxpQ0FnSEE7QUFDVCxZQUFJTyxXQUFXLENBQUNsaUIsV0FBV2dHLFVBQVgsQ0FBc0I2RyxFQUF0QixDQUF5QixLQUFLcUcsT0FBTCxDQUFhaVAsVUFBdEMsQ0FBaEI7QUFDQSxZQUFHRCxRQUFILEVBQVk7QUFDVixjQUFHLEtBQUtQLElBQVIsRUFBYTtBQUNYLGlCQUFLVyxZQUFMO0FBQ0EsaUJBQUtkLFFBQUwsQ0FBY2xULEdBQWQsQ0FBa0IsUUFBbEIsRUFBNEIsTUFBNUI7QUFDRDtBQUNGLFNBTEQsTUFLSztBQUNILGNBQUcsQ0FBQyxLQUFLcVQsSUFBVCxFQUFjO0FBQ1osaUJBQUt4SSxPQUFMO0FBQ0Q7QUFDRjtBQUNELGVBQU8rSSxRQUFQO0FBQ0Q7O0FBRUQ7Ozs7O0FBL0hXO0FBQUE7QUFBQSxvQ0FtSUc7QUFDWjtBQUNEOztBQUVEOzs7OztBQXZJVztBQUFBO0FBQUEsZ0NBMklEO0FBQ1IsWUFBRyxDQUFDLEtBQUtoUCxPQUFMLENBQWFxUCxlQUFqQixFQUFpQztBQUMvQixjQUFHLEtBQUtDLFVBQUwsRUFBSCxFQUFxQjtBQUNuQixpQkFBS2hCLFFBQUwsQ0FBY2xULEdBQWQsQ0FBa0IsUUFBbEIsRUFBNEIsTUFBNUI7QUFDQSxtQkFBTyxLQUFQO0FBQ0Q7QUFDRjtBQUNELFlBQUksS0FBSzRFLE9BQUwsQ0FBYXVQLGFBQWpCLEVBQWdDO0FBQzlCLGVBQUtDLGVBQUwsQ0FBcUIsS0FBS0MsZ0JBQUwsQ0FBc0IvYSxJQUF0QixDQUEyQixJQUEzQixDQUFyQjtBQUNELFNBRkQsTUFFSztBQUNILGVBQUtnYixVQUFMLENBQWdCLEtBQUtDLFdBQUwsQ0FBaUJqYixJQUFqQixDQUFzQixJQUF0QixDQUFoQjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7O0FBekpXO0FBQUE7QUFBQSxtQ0E2SkU7QUFDWCxZQUFJLENBQUMsS0FBSzRaLFFBQUwsQ0FBYyxDQUFkLENBQUQsSUFBcUIsQ0FBQyxLQUFLQSxRQUFMLENBQWMsQ0FBZCxDQUExQixFQUE0QztBQUMxQyxpQkFBTyxJQUFQO0FBQ0Q7QUFDRCxlQUFPLEtBQUtBLFFBQUwsQ0FBYyxDQUFkLEVBQWlCeFgscUJBQWpCLEdBQXlDWixHQUF6QyxLQUFpRCxLQUFLb1ksUUFBTCxDQUFjLENBQWQsRUFBaUJ4WCxxQkFBakIsR0FBeUNaLEdBQWpHO0FBQ0Q7O0FBRUQ7Ozs7OztBQXBLVztBQUFBO0FBQUEsaUNBeUtBNkgsRUF6S0EsRUF5S0k7QUFDYixZQUFJNlIsVUFBVSxFQUFkO0FBQ0EsYUFBSSxJQUFJdmYsSUFBSSxDQUFSLEVBQVd3ZixNQUFNLEtBQUt2QixRQUFMLENBQWMzZSxNQUFuQyxFQUEyQ1UsSUFBSXdmLEdBQS9DLEVBQW9EeGYsR0FBcEQsRUFBd0Q7QUFDdEQsZUFBS2llLFFBQUwsQ0FBY2plLENBQWQsRUFBaUJ1QixLQUFqQixDQUF1QjRFLE1BQXZCLEdBQWdDLE1BQWhDO0FBQ0FvWixrQkFBUXpoQixJQUFSLENBQWEsS0FBS21nQixRQUFMLENBQWNqZSxDQUFkLEVBQWlCeWYsWUFBOUI7QUFDRDtBQUNEL1IsV0FBRzZSLE9BQUg7QUFDRDs7QUFFRDs7Ozs7O0FBbExXO0FBQUE7QUFBQSxzQ0F1TEs3UixFQXZMTCxFQXVMUztBQUNsQixZQUFJZ1Msa0JBQW1CLEtBQUt6QixRQUFMLENBQWMzZSxNQUFkLEdBQXVCLEtBQUsyZSxRQUFMLENBQWN2TCxLQUFkLEdBQXNCeE0sTUFBdEIsR0FBK0JMLEdBQXRELEdBQTRELENBQW5GO0FBQUEsWUFDSThaLFNBQVMsRUFEYjtBQUFBLFlBRUlDLFFBQVEsQ0FGWjtBQUdBO0FBQ0FELGVBQU9DLEtBQVAsSUFBZ0IsRUFBaEI7QUFDQSxhQUFJLElBQUk1ZixJQUFJLENBQVIsRUFBV3dmLE1BQU0sS0FBS3ZCLFFBQUwsQ0FBYzNlLE1BQW5DLEVBQTJDVSxJQUFJd2YsR0FBL0MsRUFBb0R4ZixHQUFwRCxFQUF3RDtBQUN0RCxlQUFLaWUsUUFBTCxDQUFjamUsQ0FBZCxFQUFpQnVCLEtBQWpCLENBQXVCNEUsTUFBdkIsR0FBZ0MsTUFBaEM7QUFDQTtBQUNBLGNBQUkwWixjQUFjdGpCLEVBQUUsS0FBSzBoQixRQUFMLENBQWNqZSxDQUFkLENBQUYsRUFBb0JrRyxNQUFwQixHQUE2QkwsR0FBL0M7QUFDQSxjQUFJZ2EsZUFBYUgsZUFBakIsRUFBa0M7QUFDaENFO0FBQ0FELG1CQUFPQyxLQUFQLElBQWdCLEVBQWhCO0FBQ0FGLDhCQUFnQkcsV0FBaEI7QUFDRDtBQUNERixpQkFBT0MsS0FBUCxFQUFjOWhCLElBQWQsQ0FBbUIsQ0FBQyxLQUFLbWdCLFFBQUwsQ0FBY2plLENBQWQsQ0FBRCxFQUFrQixLQUFLaWUsUUFBTCxDQUFjamUsQ0FBZCxFQUFpQnlmLFlBQW5DLENBQW5CO0FBQ0Q7O0FBRUQsYUFBSyxJQUFJSyxJQUFJLENBQVIsRUFBV0MsS0FBS0osT0FBT3JnQixNQUE1QixFQUFvQ3dnQixJQUFJQyxFQUF4QyxFQUE0Q0QsR0FBNUMsRUFBaUQ7QUFDL0MsY0FBSVAsVUFBVWhqQixFQUFFb2pCLE9BQU9HLENBQVAsQ0FBRixFQUFhbmYsR0FBYixDQUFpQixZQUFVO0FBQUUsbUJBQU8sS0FBSyxDQUFMLENBQVA7QUFBaUIsV0FBOUMsRUFBZ0Q4SyxHQUFoRCxFQUFkO0FBQ0EsY0FBSXpILE1BQWN4RSxLQUFLd0UsR0FBTCxDQUFTOUIsS0FBVCxDQUFlLElBQWYsRUFBcUJxZCxPQUFyQixDQUFsQjtBQUNBSSxpQkFBT0csQ0FBUCxFQUFVaGlCLElBQVYsQ0FBZWtHLEdBQWY7QUFDRDtBQUNEMEosV0FBR2lTLE1BQUg7QUFDRDs7QUFFRDs7Ozs7OztBQWpOVztBQUFBO0FBQUEsa0NBdU5DSixPQXZORCxFQXVOVTtBQUNuQixZQUFJdmIsTUFBTXhFLEtBQUt3RSxHQUFMLENBQVM5QixLQUFULENBQWUsSUFBZixFQUFxQnFkLE9BQXJCLENBQVY7QUFDQTs7OztBQUlBLGFBQUs1aEIsUUFBTCxDQUFjRSxPQUFkLENBQXNCLDJCQUF0Qjs7QUFFQSxhQUFLb2dCLFFBQUwsQ0FBY2xULEdBQWQsQ0FBa0IsUUFBbEIsRUFBNEIvRyxHQUE1Qjs7QUFFQTs7OztBQUlDLGFBQUtyRyxRQUFMLENBQWNFLE9BQWQsQ0FBc0IsNEJBQXRCO0FBQ0Y7O0FBRUQ7Ozs7Ozs7OztBQXhPVztBQUFBO0FBQUEsdUNBZ1BNOGhCLE1BaFBOLEVBZ1BjO0FBQ3ZCOzs7QUFHQSxhQUFLaGlCLFFBQUwsQ0FBY0UsT0FBZCxDQUFzQiwyQkFBdEI7QUFDQSxhQUFLLElBQUltQyxJQUFJLENBQVIsRUFBV3dmLE1BQU1HLE9BQU9yZ0IsTUFBN0IsRUFBcUNVLElBQUl3ZixHQUF6QyxFQUErQ3hmLEdBQS9DLEVBQW9EO0FBQ2xELGNBQUlnZ0IsZ0JBQWdCTCxPQUFPM2YsQ0FBUCxFQUFVVixNQUE5QjtBQUFBLGNBQ0kwRSxNQUFNMmIsT0FBTzNmLENBQVAsRUFBVWdnQixnQkFBZ0IsQ0FBMUIsQ0FEVjtBQUVBLGNBQUlBLGlCQUFlLENBQW5CLEVBQXNCO0FBQ3BCempCLGNBQUVvakIsT0FBTzNmLENBQVAsRUFBVSxDQUFWLEVBQWEsQ0FBYixDQUFGLEVBQW1CK0ssR0FBbkIsQ0FBdUIsRUFBQyxVQUFTLE1BQVYsRUFBdkI7QUFDQTtBQUNEO0FBQ0Q7Ozs7QUFJQSxlQUFLcE4sUUFBTCxDQUFjRSxPQUFkLENBQXNCLDhCQUF0QjtBQUNBLGVBQUssSUFBSWlpQixJQUFJLENBQVIsRUFBV0csT0FBUUQsZ0JBQWMsQ0FBdEMsRUFBMENGLElBQUlHLElBQTlDLEVBQXFESCxHQUFyRCxFQUEwRDtBQUN4RHZqQixjQUFFb2pCLE9BQU8zZixDQUFQLEVBQVU4ZixDQUFWLEVBQWEsQ0FBYixDQUFGLEVBQW1CL1UsR0FBbkIsQ0FBdUIsRUFBQyxVQUFTL0csR0FBVixFQUF2QjtBQUNEO0FBQ0Q7Ozs7QUFJQSxlQUFLckcsUUFBTCxDQUFjRSxPQUFkLENBQXNCLCtCQUF0QjtBQUNEO0FBQ0Q7OztBQUdDLGFBQUtGLFFBQUwsQ0FBY0UsT0FBZCxDQUFzQiw0QkFBdEI7QUFDRjs7QUFFRDs7Ozs7QUFoUlc7QUFBQTtBQUFBLGdDQW9SRDtBQUNSLGFBQUtraEIsWUFBTDtBQUNBLGFBQUtkLFFBQUwsQ0FBY2xULEdBQWQsQ0FBa0IsUUFBbEIsRUFBNEIsTUFBNUI7O0FBRUF0TyxtQkFBV3NCLGdCQUFYLENBQTRCLElBQTVCO0FBQ0Q7QUF6UlU7O0FBQUE7QUFBQTs7QUE0UmI7Ozs7O0FBR0FnZ0IsWUFBVXJJLFFBQVYsR0FBcUI7QUFDbkI7Ozs7OztBQU1Bc0oscUJBQWlCLEtBUEU7QUFRbkI7Ozs7OztBQU1BRSxtQkFBZSxLQWRJO0FBZW5COzs7Ozs7QUFNQU4sZ0JBQVk7QUFyQk8sR0FBckI7O0FBd0JBO0FBQ0FuaUIsYUFBV00sTUFBWCxDQUFrQmdoQixTQUFsQixFQUE2QixXQUE3QjtBQUVDLENBMVRBLENBMFRDNVksTUExVEQsQ0FBRDtBQ0ZBOzs7Ozs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWI7Ozs7Ozs7QUFGYSxNQVNQMmpCLFdBVE87QUFVWDs7Ozs7OztBQU9BLHlCQUFZMWEsT0FBWixFQUFxQm1LLE9BQXJCLEVBQThCO0FBQUE7O0FBQzVCLFdBQUtoUyxRQUFMLEdBQWdCNkgsT0FBaEI7QUFDQSxXQUFLbUssT0FBTCxHQUFlcFQsRUFBRXlNLE1BQUYsQ0FBUyxFQUFULEVBQWFrWCxZQUFZeEssUUFBekIsRUFBbUMvRixPQUFuQyxDQUFmO0FBQ0EsV0FBS3dRLEtBQUwsR0FBYSxFQUFiO0FBQ0EsV0FBS0MsV0FBTCxHQUFtQixFQUFuQjs7QUFFQSxXQUFLM2hCLEtBQUw7QUFDQSxXQUFLbVgsT0FBTDs7QUFFQW5aLGlCQUFXWSxjQUFYLENBQTBCLElBQTFCLEVBQWdDLGFBQWhDO0FBQ0Q7O0FBRUQ7Ozs7Ozs7QUE3Qlc7QUFBQTtBQUFBLDhCQWtDSDtBQUNOLGFBQUtnakIsZUFBTDtBQUNBLGFBQUtDLGNBQUw7QUFDQSxhQUFLeEIsT0FBTDtBQUNEOztBQUVEOzs7Ozs7QUF4Q1c7QUFBQTtBQUFBLGdDQTZDRDtBQUFBOztBQUNSdmlCLFVBQUUwRyxNQUFGLEVBQVU2RyxFQUFWLENBQWEsdUJBQWIsRUFBc0NyTixXQUFXaUYsSUFBWCxDQUFnQkMsUUFBaEIsQ0FBeUIsWUFBTTtBQUNuRSxpQkFBS21kLE9BQUw7QUFDRCxTQUZxQyxFQUVuQyxFQUZtQyxDQUF0QztBQUdEOztBQUVEOzs7Ozs7QUFuRFc7QUFBQTtBQUFBLGdDQXdERDtBQUNSLFlBQUl5QixLQUFKOztBQUVBO0FBQ0EsYUFBSyxJQUFJdmdCLENBQVQsSUFBYyxLQUFLbWdCLEtBQW5CLEVBQTBCO0FBQ3hCLGNBQUcsS0FBS0EsS0FBTCxDQUFXalYsY0FBWCxDQUEwQmxMLENBQTFCLENBQUgsRUFBaUM7QUFDL0IsZ0JBQUl3Z0IsT0FBTyxLQUFLTCxLQUFMLENBQVduZ0IsQ0FBWCxDQUFYO0FBQ0EsZ0JBQUlpRCxPQUFPeUksVUFBUCxDQUFrQjhVLEtBQUtoVixLQUF2QixFQUE4QkcsT0FBbEMsRUFBMkM7QUFDekM0VSxzQkFBUUMsSUFBUjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxZQUFJRCxLQUFKLEVBQVc7QUFDVCxlQUFLcmIsT0FBTCxDQUFhcWIsTUFBTUUsSUFBbkI7QUFDRDtBQUNGOztBQUVEOzs7Ozs7QUExRVc7QUFBQTtBQUFBLHdDQStFTztBQUNoQixhQUFLLElBQUl6Z0IsQ0FBVCxJQUFjdkQsV0FBV2dHLFVBQVgsQ0FBc0JrSSxPQUFwQyxFQUE2QztBQUMzQyxjQUFJbE8sV0FBV2dHLFVBQVgsQ0FBc0JrSSxPQUF0QixDQUE4Qk8sY0FBOUIsQ0FBNkNsTCxDQUE3QyxDQUFKLEVBQXFEO0FBQ25ELGdCQUFJd0wsUUFBUS9PLFdBQVdnRyxVQUFYLENBQXNCa0ksT0FBdEIsQ0FBOEIzSyxDQUE5QixDQUFaO0FBQ0FrZ0Isd0JBQVlRLGVBQVosQ0FBNEJsVixNQUFNeE8sSUFBbEMsSUFBMEN3TyxNQUFNTCxLQUFoRDtBQUNEO0FBQ0Y7QUFDRjs7QUFFRDs7Ozs7Ozs7QUF4Rlc7QUFBQTtBQUFBLHFDQStGSTNGLE9BL0ZKLEVBK0ZhO0FBQ3RCLFlBQUltYixZQUFZLEVBQWhCO0FBQ0EsWUFBSVIsS0FBSjs7QUFFQSxZQUFJLEtBQUt4USxPQUFMLENBQWF3USxLQUFqQixFQUF3QjtBQUN0QkEsa0JBQVEsS0FBS3hRLE9BQUwsQ0FBYXdRLEtBQXJCO0FBQ0QsU0FGRCxNQUdLO0FBQ0hBLGtCQUFRLEtBQUt4aUIsUUFBTCxDQUFjQyxJQUFkLENBQW1CLGFBQW5CLENBQVI7QUFDRDs7QUFFRHVpQixnQkFBUyxPQUFPQSxLQUFQLEtBQWlCLFFBQWpCLEdBQTRCQSxNQUFNSSxLQUFOLENBQVksVUFBWixDQUE1QixHQUFzREosS0FBL0Q7O0FBRUEsYUFBSyxJQUFJbmdCLENBQVQsSUFBY21nQixLQUFkLEVBQXFCO0FBQ25CLGNBQUdBLE1BQU1qVixjQUFOLENBQXFCbEwsQ0FBckIsQ0FBSCxFQUE0QjtBQUMxQixnQkFBSXdnQixPQUFPTCxNQUFNbmdCLENBQU4sRUFBU0gsS0FBVCxDQUFlLENBQWYsRUFBa0IsQ0FBQyxDQUFuQixFQUFzQlcsS0FBdEIsQ0FBNEIsSUFBNUIsQ0FBWDtBQUNBLGdCQUFJaWdCLE9BQU9ELEtBQUszZ0IsS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFDLENBQWYsRUFBa0J3VSxJQUFsQixDQUF1QixFQUF2QixDQUFYO0FBQ0EsZ0JBQUk3SSxRQUFRZ1YsS0FBS0EsS0FBS2xoQixNQUFMLEdBQWMsQ0FBbkIsQ0FBWjs7QUFFQSxnQkFBSTRnQixZQUFZUSxlQUFaLENBQTRCbFYsS0FBNUIsQ0FBSixFQUF3QztBQUN0Q0Esc0JBQVEwVSxZQUFZUSxlQUFaLENBQTRCbFYsS0FBNUIsQ0FBUjtBQUNEOztBQUVEbVYsc0JBQVU3aUIsSUFBVixDQUFlO0FBQ2IyaUIsb0JBQU1BLElBRE87QUFFYmpWLHFCQUFPQTtBQUZNLGFBQWY7QUFJRDtBQUNGOztBQUVELGFBQUsyVSxLQUFMLEdBQWFRLFNBQWI7QUFDRDs7QUFFRDs7Ozs7OztBQWhJVztBQUFBO0FBQUEsOEJBc0lIRixJQXRJRyxFQXNJRztBQUNaLFlBQUksS0FBS0wsV0FBTCxLQUFxQkssSUFBekIsRUFBK0I7O0FBRS9CLFlBQUk5aEIsUUFBUSxJQUFaO0FBQUEsWUFDSWQsVUFBVSx5QkFEZDs7QUFHQTtBQUNBLFlBQUksS0FBS0YsUUFBTCxDQUFjLENBQWQsRUFBaUJpakIsUUFBakIsS0FBOEIsS0FBbEMsRUFBeUM7QUFDdkMsZUFBS2pqQixRQUFMLENBQWNiLElBQWQsQ0FBbUIsS0FBbkIsRUFBMEIyakIsSUFBMUIsRUFBZ0MzVyxFQUFoQyxDQUFtQyxNQUFuQyxFQUEyQyxZQUFXO0FBQ3BEbkwsa0JBQU15aEIsV0FBTixHQUFvQkssSUFBcEI7QUFDRCxXQUZELEVBR0M1aUIsT0FIRCxDQUdTQSxPQUhUO0FBSUQ7QUFDRDtBQU5BLGFBT0ssSUFBSTRpQixLQUFLRixLQUFMLENBQVcseUNBQVgsQ0FBSixFQUEyRDtBQUM5RCxpQkFBSzVpQixRQUFMLENBQWNvTixHQUFkLENBQWtCLEVBQUUsb0JBQW9CLFNBQU8wVixJQUFQLEdBQVksR0FBbEMsRUFBbEIsRUFDSzVpQixPQURMLENBQ2FBLE9BRGI7QUFFRDtBQUNEO0FBSkssZUFLQTtBQUNIdEIsZ0JBQUVrUCxHQUFGLENBQU1nVixJQUFOLEVBQVksVUFBU0ksUUFBVCxFQUFtQjtBQUM3QmxpQixzQkFBTWhCLFFBQU4sQ0FBZW1qQixJQUFmLENBQW9CRCxRQUFwQixFQUNNaGpCLE9BRE4sQ0FDY0EsT0FEZDtBQUVBdEIsa0JBQUVza0IsUUFBRixFQUFZN2hCLFVBQVo7QUFDQUwsc0JBQU15aEIsV0FBTixHQUFvQkssSUFBcEI7QUFDRCxlQUxEO0FBTUQ7O0FBRUQ7Ozs7QUFJQTtBQUNEOztBQUVEOzs7OztBQXpLVztBQUFBO0FBQUEsZ0NBNktEO0FBQ1I7QUFDRDtBQS9LVTs7QUFBQTtBQUFBOztBQWtMYjs7Ozs7QUFHQVAsY0FBWXhLLFFBQVosR0FBdUI7QUFDckI7Ozs7OztBQU1BeUssV0FBTztBQVBjLEdBQXZCOztBQVVBRCxjQUFZUSxlQUFaLEdBQThCO0FBQzVCLGlCQUFhLHFDQURlO0FBRTVCLGdCQUFZLG9DQUZnQjtBQUc1QixjQUFVO0FBSGtCLEdBQTlCOztBQU1BO0FBQ0Fqa0IsYUFBV00sTUFBWCxDQUFrQm1qQixXQUFsQixFQUErQixhQUEvQjtBQUVDLENBeE1BLENBd01DL2EsTUF4TUQsQ0FBRDtBQ0ZBOzs7Ozs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWI7Ozs7O0FBRmEsTUFPUHdrQixRQVBPO0FBUVg7Ozs7Ozs7QUFPQSxzQkFBWXZiLE9BQVosRUFBcUJtSyxPQUFyQixFQUE4QjtBQUFBOztBQUM1QixXQUFLaFMsUUFBTCxHQUFnQjZILE9BQWhCO0FBQ0EsV0FBS21LLE9BQUwsR0FBZ0JwVCxFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYStYLFNBQVNyTCxRQUF0QixFQUFnQyxLQUFLL1gsUUFBTCxDQUFjQyxJQUFkLEVBQWhDLEVBQXNEK1IsT0FBdEQsQ0FBaEI7O0FBRUEsV0FBS2xSLEtBQUw7QUFDQSxXQUFLdWlCLFVBQUw7O0FBRUF2a0IsaUJBQVdZLGNBQVgsQ0FBMEIsSUFBMUIsRUFBZ0MsVUFBaEM7QUFDRDs7QUFFRDs7Ozs7O0FBekJXO0FBQUE7QUFBQSw4QkE2Qkg7QUFDTixZQUFJK08sS0FBSyxLQUFLek8sUUFBTCxDQUFjLENBQWQsRUFBaUJ5TyxFQUFqQixJQUF1QjNQLFdBQVdpQixXQUFYLENBQXVCLENBQXZCLEVBQTBCLFVBQTFCLENBQWhDO0FBQ0EsWUFBSWlCLFFBQVEsSUFBWjtBQUNBLGFBQUtzaUIsUUFBTCxHQUFnQjFrQixFQUFFLHdCQUFGLENBQWhCO0FBQ0EsYUFBSzJrQixNQUFMLEdBQWMsS0FBS3ZqQixRQUFMLENBQWN1QyxJQUFkLENBQW1CLEdBQW5CLENBQWQ7QUFDQSxhQUFLdkMsUUFBTCxDQUFjYixJQUFkLENBQW1CO0FBQ2pCLHlCQUFlc1AsRUFERTtBQUVqQix5QkFBZUEsRUFGRTtBQUdqQixnQkFBTUE7QUFIVyxTQUFuQjtBQUtBLGFBQUsrVSxPQUFMLEdBQWU1a0IsR0FBZjtBQUNBLGFBQUs2a0IsU0FBTCxHQUFpQkMsU0FBU3BlLE9BQU84RCxXQUFoQixFQUE2QixFQUE3QixDQUFqQjs7QUFFQSxhQUFLNk8sT0FBTDtBQUNEOztBQUVEOzs7Ozs7QUE3Q1c7QUFBQTtBQUFBLG1DQWtERTtBQUNYLFlBQUlqWCxRQUFRLElBQVo7QUFBQSxZQUNJa0ksT0FBTzFGLFNBQVMwRixJQURwQjtBQUFBLFlBRUlpYSxPQUFPM2YsU0FBU3dQLGVBRnBCOztBQUlBLGFBQUsyUSxNQUFMLEdBQWMsRUFBZDtBQUNBLGFBQUtDLFNBQUwsR0FBaUIvaEIsS0FBS0MsS0FBTCxDQUFXRCxLQUFLd0UsR0FBTCxDQUFTZixPQUFPdWUsV0FBaEIsRUFBNkJWLEtBQUtXLFlBQWxDLENBQVgsQ0FBakI7QUFDQSxhQUFLQyxTQUFMLEdBQWlCbGlCLEtBQUtDLEtBQUwsQ0FBV0QsS0FBS3dFLEdBQUwsQ0FBUzZDLEtBQUs4YSxZQUFkLEVBQTRCOWEsS0FBSzRZLFlBQWpDLEVBQStDcUIsS0FBS1csWUFBcEQsRUFBa0VYLEtBQUthLFlBQXZFLEVBQXFGYixLQUFLckIsWUFBMUYsQ0FBWCxDQUFqQjs7QUFFQSxhQUFLd0IsUUFBTCxDQUFjemlCLElBQWQsQ0FBbUIsWUFBVTtBQUMzQixjQUFJb2pCLE9BQU9ybEIsRUFBRSxJQUFGLENBQVg7QUFBQSxjQUNJc2xCLEtBQUtyaUIsS0FBS0MsS0FBTCxDQUFXbWlCLEtBQUsxYixNQUFMLEdBQWNMLEdBQWQsR0FBb0JsSCxNQUFNZ1IsT0FBTixDQUFjbVMsU0FBN0MsQ0FEVDtBQUVBRixlQUFLRyxXQUFMLEdBQW1CRixFQUFuQjtBQUNBbGpCLGdCQUFNMmlCLE1BQU4sQ0FBYXhqQixJQUFiLENBQWtCK2pCLEVBQWxCO0FBQ0QsU0FMRDtBQU1EOztBQUVEOzs7OztBQW5FVztBQUFBO0FBQUEsZ0NBdUVEO0FBQ1IsWUFBSWxqQixRQUFRLElBQVo7QUFBQSxZQUNJcWpCLFFBQVF6bEIsRUFBRSxZQUFGLENBRFo7QUFBQSxZQUVJOEQsT0FBTztBQUNMeU4sb0JBQVVuUCxNQUFNZ1IsT0FBTixDQUFjc1MsaUJBRG5CO0FBRUxDLGtCQUFVdmpCLE1BQU1nUixPQUFOLENBQWN3UztBQUZuQixTQUZYO0FBTUE1bEIsVUFBRTBHLE1BQUYsRUFBVXlMLEdBQVYsQ0FBYyxNQUFkLEVBQXNCLFlBQVU7QUFDOUIsY0FBRy9QLE1BQU1nUixPQUFOLENBQWN5UyxXQUFqQixFQUE2QjtBQUMzQixnQkFBRzFILFNBQVNDLElBQVosRUFBaUI7QUFDZmhjLG9CQUFNMGpCLFdBQU4sQ0FBa0IzSCxTQUFTQyxJQUEzQjtBQUNEO0FBQ0Y7QUFDRGhjLGdCQUFNcWlCLFVBQU47QUFDQXJpQixnQkFBTTJqQixhQUFOO0FBQ0QsU0FSRDs7QUFVQSxhQUFLM2tCLFFBQUwsQ0FBY21NLEVBQWQsQ0FBaUI7QUFDZixpQ0FBdUIsS0FBS2hLLE1BQUwsQ0FBWXVFLElBQVosQ0FBaUIsSUFBakIsQ0FEUjtBQUVmLGlDQUF1QixLQUFLaWUsYUFBTCxDQUFtQmplLElBQW5CLENBQXdCLElBQXhCO0FBRlIsU0FBakIsRUFHR3lGLEVBSEgsQ0FHTSxtQkFITixFQUcyQixjQUgzQixFQUcyQyxVQUFTckosQ0FBVCxFQUFZO0FBQ25EQSxZQUFFdUosY0FBRjtBQUNBLGNBQUl1WSxVQUFZLEtBQUtDLFlBQUwsQ0FBa0IsTUFBbEIsQ0FBaEI7QUFDQTdqQixnQkFBTTBqQixXQUFOLENBQWtCRSxPQUFsQjtBQUNELFNBUEg7QUFRQWhtQixVQUFFMEcsTUFBRixFQUFVNkcsRUFBVixDQUFhLFVBQWIsRUFBeUIsVUFBU3JKLENBQVQsRUFBWTtBQUNuQyxjQUFHOUIsTUFBTWdSLE9BQU4sQ0FBY3lTLFdBQWpCLEVBQThCO0FBQzVCempCLGtCQUFNMGpCLFdBQU4sQ0FBa0JwZixPQUFPeVgsUUFBUCxDQUFnQkMsSUFBbEM7QUFDRDtBQUNGLFNBSkQ7QUFLRDs7QUFFRDs7Ozs7O0FBdkdXO0FBQUE7QUFBQSxrQ0E0R0M4SCxHQTVHRCxFQTRHTTtBQUNmO0FBQ0EsWUFBSSxDQUFDbG1CLEVBQUVrbUIsR0FBRixFQUFPbmpCLE1BQVosRUFBb0I7QUFBQyxpQkFBTyxLQUFQO0FBQWM7QUFDbkMsYUFBS29qQixhQUFMLEdBQXFCLElBQXJCO0FBQ0EsWUFBSS9qQixRQUFRLElBQVo7QUFBQSxZQUNJeWlCLFlBQVk1aEIsS0FBS0MsS0FBTCxDQUFXbEQsRUFBRWttQixHQUFGLEVBQU92YyxNQUFQLEdBQWdCTCxHQUFoQixHQUFzQixLQUFLOEosT0FBTCxDQUFhbVMsU0FBYixHQUF5QixDQUEvQyxHQUFtRCxLQUFLblMsT0FBTCxDQUFhZ1QsU0FBM0UsQ0FEaEI7O0FBR0FwbUIsVUFBRSxZQUFGLEVBQWdCZ2dCLElBQWhCLENBQXFCLElBQXJCLEVBQTJCNU8sT0FBM0IsQ0FDRSxFQUFFc04sV0FBV21HLFNBQWIsRUFERixFQUVFLEtBQUt6UixPQUFMLENBQWFzUyxpQkFGZixFQUdFLEtBQUt0UyxPQUFMLENBQWF3UyxlQUhmLEVBSUUsWUFBVztBQUFDeGpCLGdCQUFNK2pCLGFBQU4sR0FBc0IsS0FBdEIsQ0FBNkIvakIsTUFBTTJqQixhQUFOO0FBQXNCLFNBSmpFO0FBTUQ7O0FBRUQ7Ozs7O0FBM0hXO0FBQUE7QUFBQSwrQkErSEY7QUFDUCxhQUFLdEIsVUFBTDtBQUNBLGFBQUtzQixhQUFMO0FBQ0Q7O0FBRUQ7Ozs7Ozs7QUFwSVc7QUFBQTtBQUFBLHNDQTBJRyx3QkFBMEI7QUFDdEMsWUFBRyxLQUFLSSxhQUFSLEVBQXVCO0FBQUM7QUFBUTtBQUNoQyxZQUFJRSxTQUFTLGdCQUFpQnZCLFNBQVNwZSxPQUFPOEQsV0FBaEIsRUFBNkIsRUFBN0IsQ0FBOUI7QUFBQSxZQUNJOGIsTUFESjs7QUFHQSxZQUFHRCxTQUFTLEtBQUtyQixTQUFkLEtBQTRCLEtBQUtHLFNBQXBDLEVBQThDO0FBQUVtQixtQkFBUyxLQUFLdkIsTUFBTCxDQUFZaGlCLE1BQVosR0FBcUIsQ0FBOUI7QUFBa0MsU0FBbEYsTUFDSyxJQUFHc2pCLFNBQVMsS0FBS3RCLE1BQUwsQ0FBWSxDQUFaLENBQVosRUFBMkI7QUFBRXVCLG1CQUFTL2YsU0FBVDtBQUFxQixTQUFsRCxNQUNEO0FBQ0YsY0FBSWdnQixTQUFTLEtBQUsxQixTQUFMLEdBQWlCd0IsTUFBOUI7QUFBQSxjQUNJamtCLFFBQVEsSUFEWjtBQUFBLGNBRUlva0IsYUFBYSxLQUFLekIsTUFBTCxDQUFZalksTUFBWixDQUFtQixVQUFTdEssQ0FBVCxFQUFZaUIsQ0FBWixFQUFjO0FBQzVDLG1CQUFPOGlCLFNBQVMvakIsSUFBSUosTUFBTWdSLE9BQU4sQ0FBY2dULFNBQWxCLElBQStCQyxNQUF4QyxHQUFpRDdqQixJQUFJSixNQUFNZ1IsT0FBTixDQUFjZ1QsU0FBbEIsR0FBOEJoa0IsTUFBTWdSLE9BQU4sQ0FBY21TLFNBQTVDLElBQXlEYyxNQUFqSDtBQUNELFdBRlksQ0FGakI7QUFLQUMsbUJBQVNFLFdBQVd6akIsTUFBWCxHQUFvQnlqQixXQUFXempCLE1BQVgsR0FBb0IsQ0FBeEMsR0FBNEMsQ0FBckQ7QUFDRDs7QUFFRCxhQUFLNmhCLE9BQUwsQ0FBYTNlLFdBQWIsQ0FBeUIsS0FBS21OLE9BQUwsQ0FBYXRCLFdBQXRDO0FBQ0EsYUFBSzhTLE9BQUwsR0FBZSxLQUFLRCxNQUFMLENBQVk3WCxNQUFaLENBQW1CLGFBQWEsS0FBSzRYLFFBQUwsQ0FBY3JYLEVBQWQsQ0FBaUJpWixNQUFqQixFQUF5QmpsQixJQUF6QixDQUE4QixpQkFBOUIsQ0FBYixHQUFnRSxJQUFuRixFQUF5RjJRLFFBQXpGLENBQWtHLEtBQUtvQixPQUFMLENBQWF0QixXQUEvRyxDQUFmOztBQUVBLFlBQUcsS0FBS3NCLE9BQUwsQ0FBYXlTLFdBQWhCLEVBQTRCO0FBQzFCLGNBQUl6SCxPQUFPLEVBQVg7QUFDQSxjQUFHa0ksVUFBVS9mLFNBQWIsRUFBdUI7QUFDckI2WCxtQkFBTyxLQUFLd0csT0FBTCxDQUFhLENBQWIsRUFBZ0JxQixZQUFoQixDQUE2QixNQUE3QixDQUFQO0FBQ0Q7QUFDRCxjQUFHN0gsU0FBUzFYLE9BQU95WCxRQUFQLENBQWdCQyxJQUE1QixFQUFrQztBQUNoQyxnQkFBRzFYLE9BQU80WSxPQUFQLENBQWVDLFNBQWxCLEVBQTRCO0FBQzFCN1kscUJBQU80WSxPQUFQLENBQWVDLFNBQWYsQ0FBeUIsSUFBekIsRUFBK0IsSUFBL0IsRUFBcUNuQixJQUFyQztBQUNELGFBRkQsTUFFSztBQUNIMVgscUJBQU95WCxRQUFQLENBQWdCQyxJQUFoQixHQUF1QkEsSUFBdkI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsYUFBS3lHLFNBQUwsR0FBaUJ3QixNQUFqQjtBQUNBOzs7O0FBSUEsYUFBS2psQixRQUFMLENBQWNFLE9BQWQsQ0FBc0Isb0JBQXRCLEVBQTRDLENBQUMsS0FBS3NqQixPQUFOLENBQTVDO0FBQ0Q7O0FBRUQ7Ozs7O0FBbkxXO0FBQUE7QUFBQSxnQ0F1TEQ7QUFDUixhQUFLeGpCLFFBQUwsQ0FBY3dNLEdBQWQsQ0FBa0IsMEJBQWxCLEVBQ0tqSyxJQURMLE9BQ2MsS0FBS3lQLE9BQUwsQ0FBYXRCLFdBRDNCLEVBQzBDN0wsV0FEMUMsQ0FDc0QsS0FBS21OLE9BQUwsQ0FBYXRCLFdBRG5FOztBQUdBLFlBQUcsS0FBS3NCLE9BQUwsQ0FBYXlTLFdBQWhCLEVBQTRCO0FBQzFCLGNBQUl6SCxPQUFPLEtBQUt3RyxPQUFMLENBQWEsQ0FBYixFQUFnQnFCLFlBQWhCLENBQTZCLE1BQTdCLENBQVg7QUFDQXZmLGlCQUFPeVgsUUFBUCxDQUFnQkMsSUFBaEIsQ0FBcUJ6VixPQUFyQixDQUE2QnlWLElBQTdCLEVBQW1DLEVBQW5DO0FBQ0Q7O0FBRURsZSxtQkFBV3NCLGdCQUFYLENBQTRCLElBQTVCO0FBQ0Q7QUFqTVU7O0FBQUE7QUFBQTs7QUFvTWI7Ozs7O0FBR0FnakIsV0FBU3JMLFFBQVQsR0FBb0I7QUFDbEI7Ozs7OztBQU1BdU0sdUJBQW1CLEdBUEQ7QUFRbEI7Ozs7Ozs7QUFPQUUscUJBQWlCLFFBZkM7QUFnQmxCOzs7Ozs7QUFNQUwsZUFBVyxFQXRCTztBQXVCbEI7Ozs7OztBQU1BelQsaUJBQWEsUUE3Qks7QUE4QmxCOzs7Ozs7QUFNQStULGlCQUFhLEtBcENLO0FBcUNsQjs7Ozs7O0FBTUFPLGVBQVc7QUEzQ08sR0FBcEI7O0FBOENBO0FBQ0FsbUIsYUFBV00sTUFBWCxDQUFrQmdrQixRQUFsQixFQUE0QixVQUE1QjtBQUVDLENBeFBBLENBd1BDNWIsTUF4UEQsQ0FBRDtBQ0ZBOzs7Ozs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWI7Ozs7Ozs7OztBQUZhLE1BV1B5bUIsU0FYTztBQVlYOzs7Ozs7O0FBT0EsdUJBQVl4ZCxPQUFaLEVBQXFCbUssT0FBckIsRUFBOEI7QUFBQTs7QUFDNUIsV0FBS2hTLFFBQUwsR0FBZ0I2SCxPQUFoQjtBQUNBLFdBQUttSyxPQUFMLEdBQWVwVCxFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYWdhLFVBQVV0TixRQUF2QixFQUFpQyxLQUFLL1gsUUFBTCxDQUFjQyxJQUFkLEVBQWpDLEVBQXVEK1IsT0FBdkQsQ0FBZjtBQUNBLFdBQUtzVCxZQUFMLEdBQW9CMW1CLEdBQXBCO0FBQ0EsV0FBSzJtQixTQUFMLEdBQWlCM21CLEdBQWpCOztBQUVBLFdBQUtrQyxLQUFMO0FBQ0EsV0FBS21YLE9BQUw7O0FBRUFuWixpQkFBV1ksY0FBWCxDQUEwQixJQUExQixFQUFnQyxXQUFoQztBQUNBWixpQkFBV21MLFFBQVgsQ0FBb0IyQixRQUFwQixDQUE2QixXQUE3QixFQUEwQztBQUN4QyxrQkFBVTtBQUQ4QixPQUExQztBQUlEOztBQUVEOzs7Ozs7O0FBbkNXO0FBQUE7QUFBQSw4QkF3Q0g7QUFDTixZQUFJNkMsS0FBSyxLQUFLek8sUUFBTCxDQUFjYixJQUFkLENBQW1CLElBQW5CLENBQVQ7O0FBRUEsYUFBS2EsUUFBTCxDQUFjYixJQUFkLENBQW1CLGFBQW5CLEVBQWtDLE1BQWxDOztBQUVBLGFBQUthLFFBQUwsQ0FBYzRRLFFBQWQsb0JBQXdDLEtBQUtvQixPQUFMLENBQWF3VCxVQUFyRDs7QUFFQTtBQUNBLGFBQUtELFNBQUwsR0FBaUIzbUIsRUFBRTRFLFFBQUYsRUFDZGpCLElBRGMsQ0FDVCxpQkFBZWtNLEVBQWYsR0FBa0IsbUJBQWxCLEdBQXNDQSxFQUF0QyxHQUF5QyxvQkFBekMsR0FBOERBLEVBQTlELEdBQWlFLElBRHhELEVBRWR0UCxJQUZjLENBRVQsZUFGUyxFQUVRLE9BRlIsRUFHZEEsSUFIYyxDQUdULGVBSFMsRUFHUXNQLEVBSFIsQ0FBakI7O0FBS0E7QUFDQSxZQUFJLEtBQUt1RCxPQUFMLENBQWF5VCxjQUFiLEtBQWdDLElBQXBDLEVBQTBDO0FBQ3hDLGNBQUlDLFVBQVVsaUIsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFkO0FBQ0EsY0FBSWtpQixrQkFBa0IvbUIsRUFBRSxLQUFLb0IsUUFBUCxFQUFpQm9OLEdBQWpCLENBQXFCLFVBQXJCLE1BQXFDLE9BQXJDLEdBQStDLGtCQUEvQyxHQUFvRSxxQkFBMUY7QUFDQXNZLGtCQUFRRSxZQUFSLENBQXFCLE9BQXJCLEVBQThCLDJCQUEyQkQsZUFBekQ7QUFDQSxlQUFLRSxRQUFMLEdBQWdCam5CLEVBQUU4bUIsT0FBRixDQUFoQjtBQUNBLGNBQUdDLG9CQUFvQixrQkFBdkIsRUFBMkM7QUFDekMvbUIsY0FBRSxNQUFGLEVBQVVrbkIsTUFBVixDQUFpQixLQUFLRCxRQUF0QjtBQUNELFdBRkQsTUFFTztBQUNMLGlCQUFLN2xCLFFBQUwsQ0FBYzJZLFFBQWQsQ0FBdUIsMkJBQXZCLEVBQW9EbU4sTUFBcEQsQ0FBMkQsS0FBS0QsUUFBaEU7QUFDRDtBQUNGOztBQUVELGFBQUs3VCxPQUFMLENBQWErVCxVQUFiLEdBQTBCLEtBQUsvVCxPQUFMLENBQWErVCxVQUFiLElBQTJCLElBQUloTCxNQUFKLENBQVcsS0FBSy9JLE9BQUwsQ0FBYWdVLFdBQXhCLEVBQXFDLEdBQXJDLEVBQTBDamdCLElBQTFDLENBQStDLEtBQUsvRixRQUFMLENBQWMsQ0FBZCxFQUFpQlYsU0FBaEUsQ0FBckQ7O0FBRUEsWUFBSSxLQUFLMFMsT0FBTCxDQUFhK1QsVUFBYixLQUE0QixJQUFoQyxFQUFzQztBQUNwQyxlQUFLL1QsT0FBTCxDQUFhaVUsUUFBYixHQUF3QixLQUFLalUsT0FBTCxDQUFhaVUsUUFBYixJQUF5QixLQUFLam1CLFFBQUwsQ0FBYyxDQUFkLEVBQWlCVixTQUFqQixDQUEyQnNqQixLQUEzQixDQUFpQyx1Q0FBakMsRUFBMEUsQ0FBMUUsRUFBNkUvZixLQUE3RSxDQUFtRixHQUFuRixFQUF3RixDQUF4RixDQUFqRDtBQUNBLGVBQUtxakIsYUFBTDtBQUNEO0FBQ0QsWUFBSSxDQUFDLEtBQUtsVSxPQUFMLENBQWFtVSxjQUFkLEtBQWlDLElBQXJDLEVBQTJDO0FBQ3pDLGVBQUtuVSxPQUFMLENBQWFtVSxjQUFiLEdBQThCN2UsV0FBV2hDLE9BQU9xSixnQkFBUCxDQUF3Qi9QLEVBQUUsbUJBQUYsRUFBdUIsQ0FBdkIsQ0FBeEIsRUFBbURzUyxrQkFBOUQsSUFBb0YsSUFBbEg7QUFDRDtBQUNGOztBQUVEOzs7Ozs7QUE3RVc7QUFBQTtBQUFBLGdDQWtGRDtBQUNSLGFBQUtsUixRQUFMLENBQWN3TSxHQUFkLENBQWtCLDJCQUFsQixFQUErQ0wsRUFBL0MsQ0FBa0Q7QUFDaEQsNkJBQW1CLEtBQUt5VCxJQUFMLENBQVVsWixJQUFWLENBQWUsSUFBZixDQUQ2QjtBQUVoRCw4QkFBb0IsS0FBS21aLEtBQUwsQ0FBV25aLElBQVgsQ0FBZ0IsSUFBaEIsQ0FGNEI7QUFHaEQsK0JBQXFCLEtBQUtnWCxNQUFMLENBQVloWCxJQUFaLENBQWlCLElBQWpCLENBSDJCO0FBSWhELGtDQUF3QixLQUFLMGYsZUFBTCxDQUFxQjFmLElBQXJCLENBQTBCLElBQTFCO0FBSndCLFNBQWxEOztBQU9BLFlBQUksS0FBS3NMLE9BQUwsQ0FBYXFVLFlBQWIsS0FBOEIsSUFBbEMsRUFBd0M7QUFDdEMsY0FBSWxQLFVBQVUsS0FBS25GLE9BQUwsQ0FBYXlULGNBQWIsR0FBOEIsS0FBS0ksUUFBbkMsR0FBOENqbkIsRUFBRSwyQkFBRixDQUE1RDtBQUNBdVksa0JBQVFoTCxFQUFSLENBQVcsRUFBQyxzQkFBc0IsS0FBSzBULEtBQUwsQ0FBV25aLElBQVgsQ0FBZ0IsSUFBaEIsQ0FBdkIsRUFBWDtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7O0FBaEdXO0FBQUE7QUFBQSxzQ0FvR0s7QUFDZCxZQUFJMUYsUUFBUSxJQUFaOztBQUVBcEMsVUFBRTBHLE1BQUYsRUFBVTZHLEVBQVYsQ0FBYSx1QkFBYixFQUFzQyxZQUFXO0FBQy9DLGNBQUlyTixXQUFXZ0csVUFBWCxDQUFzQjZJLE9BQXRCLENBQThCM00sTUFBTWdSLE9BQU4sQ0FBY2lVLFFBQTVDLENBQUosRUFBMkQ7QUFDekRqbEIsa0JBQU1zbEIsTUFBTixDQUFhLElBQWI7QUFDRCxXQUZELE1BRU87QUFDTHRsQixrQkFBTXNsQixNQUFOLENBQWEsS0FBYjtBQUNEO0FBQ0YsU0FORCxFQU1HdlYsR0FOSCxDQU1PLG1CQU5QLEVBTTRCLFlBQVc7QUFDckMsY0FBSWpTLFdBQVdnRyxVQUFYLENBQXNCNkksT0FBdEIsQ0FBOEIzTSxNQUFNZ1IsT0FBTixDQUFjaVUsUUFBNUMsQ0FBSixFQUEyRDtBQUN6RGpsQixrQkFBTXNsQixNQUFOLENBQWEsSUFBYjtBQUNEO0FBQ0YsU0FWRDtBQVdEOztBQUVEOzs7Ozs7QUFwSFc7QUFBQTtBQUFBLDZCQXlISlAsVUF6SEksRUF5SFE7QUFDakIsWUFBSVEsVUFBVSxLQUFLdm1CLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsY0FBbkIsQ0FBZDtBQUNBLFlBQUl3akIsVUFBSixFQUFnQjtBQUNkLGVBQUtsRyxLQUFMO0FBQ0EsZUFBS2tHLFVBQUwsR0FBa0IsSUFBbEI7QUFDQSxlQUFLL2xCLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixhQUFuQixFQUFrQyxPQUFsQztBQUNBLGVBQUthLFFBQUwsQ0FBY3dNLEdBQWQsQ0FBa0IsbUNBQWxCO0FBQ0EsY0FBSStaLFFBQVE1a0IsTUFBWixFQUFvQjtBQUFFNGtCLG9CQUFRdFYsSUFBUjtBQUFpQjtBQUN4QyxTQU5ELE1BTU87QUFDTCxlQUFLOFUsVUFBTCxHQUFrQixLQUFsQjtBQUNBLGVBQUsvbEIsUUFBTCxDQUFjYixJQUFkLENBQW1CLGFBQW5CLEVBQWtDLE1BQWxDO0FBQ0EsZUFBS2EsUUFBTCxDQUFjd00sR0FBZCxDQUFrQixtQ0FBbEIsRUFBdURMLEVBQXZELENBQTBEO0FBQ3hELCtCQUFtQixLQUFLeVQsSUFBTCxDQUFVbFosSUFBVixDQUFlLElBQWYsQ0FEcUM7QUFFeEQsaUNBQXFCLEtBQUtnWCxNQUFMLENBQVloWCxJQUFaLENBQWlCLElBQWpCO0FBRm1DLFdBQTFEO0FBSUEsY0FBSTZmLFFBQVE1a0IsTUFBWixFQUFvQjtBQUNsQjRrQixvQkFBUTFWLElBQVI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQ7Ozs7O0FBOUlXO0FBQUE7QUFBQSxxQ0FrSkl6RyxLQWxKSixFQWtKVztBQUNwQixlQUFPLEtBQVA7QUFDRDs7QUFFRDtBQUNBOztBQXZKVztBQUFBO0FBQUEsd0NBd0pPQSxLQXhKUCxFQXdKYztBQUN2QixZQUFJaEksT0FBTyxJQUFYLENBRHVCLENBQ047O0FBRWhCO0FBQ0QsWUFBSUEsS0FBSzRoQixZQUFMLEtBQXNCNWhCLEtBQUswaEIsWUFBL0IsRUFBNkM7QUFDM0M7QUFDQSxjQUFJMWhCLEtBQUtrYixTQUFMLEtBQW1CLENBQXZCLEVBQTBCO0FBQ3hCbGIsaUJBQUtrYixTQUFMLEdBQWlCLENBQWpCO0FBQ0Q7QUFDRDtBQUNBLGNBQUlsYixLQUFLa2IsU0FBTCxLQUFtQmxiLEtBQUs0aEIsWUFBTCxHQUFvQjVoQixLQUFLMGhCLFlBQWhELEVBQThEO0FBQzVEMWhCLGlCQUFLa2IsU0FBTCxHQUFpQmxiLEtBQUs0aEIsWUFBTCxHQUFvQjVoQixLQUFLMGhCLFlBQXpCLEdBQXdDLENBQXpEO0FBQ0Q7QUFDRjtBQUNEMWhCLGFBQUtva0IsT0FBTCxHQUFlcGtCLEtBQUtrYixTQUFMLEdBQWlCLENBQWhDO0FBQ0FsYixhQUFLcWtCLFNBQUwsR0FBaUJya0IsS0FBS2tiLFNBQUwsR0FBa0JsYixLQUFLNGhCLFlBQUwsR0FBb0I1aEIsS0FBSzBoQixZQUE1RDtBQUNBMWhCLGFBQUtza0IsS0FBTCxHQUFhdGMsTUFBTXVjLGFBQU4sQ0FBb0I1UyxLQUFqQztBQUNEO0FBektVO0FBQUE7QUFBQSw2Q0EyS1kzSixLQTNLWixFQTJLbUI7QUFDNUIsWUFBSWhJLE9BQU8sSUFBWCxDQUQ0QixDQUNYO0FBQ2pCLFlBQUk0YixLQUFLNVQsTUFBTTJKLEtBQU4sR0FBYzNSLEtBQUtza0IsS0FBNUI7QUFDQSxZQUFJN0osT0FBTyxDQUFDbUIsRUFBWjtBQUNBNWIsYUFBS3NrQixLQUFMLEdBQWF0YyxNQUFNMkosS0FBbkI7O0FBRUEsWUFBSWlLLE1BQU01YixLQUFLb2tCLE9BQVosSUFBeUIzSixRQUFRemEsS0FBS3FrQixTQUF6QyxFQUFxRDtBQUNuRHJjLGdCQUFNNEwsZUFBTjtBQUNELFNBRkQsTUFFTztBQUNMNUwsZ0JBQU1pQyxjQUFOO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7Ozs7QUF4TFc7QUFBQTtBQUFBLDJCQStMTmpDLEtBL0xNLEVBK0xDbEssT0EvTEQsRUErTFU7QUFDbkIsWUFBSSxLQUFLRixRQUFMLENBQWNtZCxRQUFkLENBQXVCLFNBQXZCLEtBQXFDLEtBQUs0SSxVQUE5QyxFQUEwRDtBQUFFO0FBQVM7QUFDckUsWUFBSS9rQixRQUFRLElBQVo7O0FBRUEsWUFBSWQsT0FBSixFQUFhO0FBQ1gsZUFBS29sQixZQUFMLEdBQW9CcGxCLE9BQXBCO0FBQ0Q7O0FBRUQsWUFBSSxLQUFLOFIsT0FBTCxDQUFhNFUsT0FBYixLQUF5QixLQUE3QixFQUFvQztBQUNsQ3RoQixpQkFBT3VoQixRQUFQLENBQWdCLENBQWhCLEVBQW1CLENBQW5CO0FBQ0QsU0FGRCxNQUVPLElBQUksS0FBSzdVLE9BQUwsQ0FBYTRVLE9BQWIsS0FBeUIsUUFBN0IsRUFBdUM7QUFDNUN0aEIsaUJBQU91aEIsUUFBUCxDQUFnQixDQUFoQixFQUFrQnJqQixTQUFTMEYsSUFBVCxDQUFjOGEsWUFBaEM7QUFDRDs7QUFFRDs7OztBQUlBaGpCLGNBQU1oQixRQUFOLENBQWU0USxRQUFmLENBQXdCLFNBQXhCOztBQUVBLGFBQUsyVSxTQUFMLENBQWVwbUIsSUFBZixDQUFvQixlQUFwQixFQUFxQyxNQUFyQztBQUNBLGFBQUthLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixhQUFuQixFQUFrQyxPQUFsQyxFQUNLZSxPQURMLENBQ2EscUJBRGI7O0FBR0E7QUFDQSxZQUFJLEtBQUs4UixPQUFMLENBQWE4VSxhQUFiLEtBQStCLEtBQW5DLEVBQTBDO0FBQ3hDbG9CLFlBQUUsTUFBRixFQUFVZ1MsUUFBVixDQUFtQixvQkFBbkIsRUFBeUN6RSxFQUF6QyxDQUE0QyxXQUE1QyxFQUF5RCxLQUFLNGEsY0FBOUQ7QUFDQSxlQUFLL21CLFFBQUwsQ0FBY21NLEVBQWQsQ0FBaUIsWUFBakIsRUFBK0IsS0FBSzZhLGlCQUFwQztBQUNBLGVBQUtobkIsUUFBTCxDQUFjbU0sRUFBZCxDQUFpQixXQUFqQixFQUE4QixLQUFLOGEsc0JBQW5DO0FBQ0Q7O0FBRUQsWUFBSSxLQUFLalYsT0FBTCxDQUFheVQsY0FBYixLQUFnQyxJQUFwQyxFQUEwQztBQUN4QyxlQUFLSSxRQUFMLENBQWNqVixRQUFkLENBQXVCLFlBQXZCO0FBQ0Q7O0FBRUQsWUFBSSxLQUFLb0IsT0FBTCxDQUFhcVUsWUFBYixLQUE4QixJQUE5QixJQUFzQyxLQUFLclUsT0FBTCxDQUFheVQsY0FBYixLQUFnQyxJQUExRSxFQUFnRjtBQUM5RSxlQUFLSSxRQUFMLENBQWNqVixRQUFkLENBQXVCLGFBQXZCO0FBQ0Q7O0FBRUQsWUFBSSxLQUFLb0IsT0FBTCxDQUFha1YsU0FBYixLQUEyQixJQUEvQixFQUFxQztBQUNuQyxlQUFLbG5CLFFBQUwsQ0FBYytRLEdBQWQsQ0FBa0JqUyxXQUFXd0UsYUFBWCxDQUF5QixLQUFLdEQsUUFBOUIsQ0FBbEIsRUFBMkQsWUFBVztBQUNwRSxnQkFBSW1uQixjQUFjbm1CLE1BQU1oQixRQUFOLENBQWV1QyxJQUFmLENBQW9CLGtCQUFwQixDQUFsQjtBQUNBLGdCQUFJNGtCLFlBQVl4bEIsTUFBaEIsRUFBd0I7QUFDcEJ3bEIsMEJBQVlsYixFQUFaLENBQWUsQ0FBZixFQUFrQkssS0FBbEI7QUFDSCxhQUZELE1BRU87QUFDSHRMLG9CQUFNaEIsUUFBTixDQUFldUMsSUFBZixDQUFvQixXQUFwQixFQUFpQzBKLEVBQWpDLENBQW9DLENBQXBDLEVBQXVDSyxLQUF2QztBQUNIO0FBQ0YsV0FQRDtBQVFEOztBQUVELFlBQUksS0FBSzBGLE9BQUwsQ0FBYWxHLFNBQWIsS0FBMkIsSUFBL0IsRUFBcUM7QUFDbkMsZUFBSzlMLFFBQUwsQ0FBYzJZLFFBQWQsQ0FBdUIsMkJBQXZCLEVBQW9EeFosSUFBcEQsQ0FBeUQsVUFBekQsRUFBcUUsSUFBckU7QUFDQUwscUJBQVdtTCxRQUFYLENBQW9CNkIsU0FBcEIsQ0FBOEIsS0FBSzlMLFFBQW5DO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7OztBQXZQVztBQUFBO0FBQUEsNEJBNlBMK1AsRUE3UEssRUE2UEQ7QUFDUixZQUFJLENBQUMsS0FBSy9QLFFBQUwsQ0FBY21kLFFBQWQsQ0FBdUIsU0FBdkIsQ0FBRCxJQUFzQyxLQUFLNEksVUFBL0MsRUFBMkQ7QUFBRTtBQUFTOztBQUV0RSxZQUFJL2tCLFFBQVEsSUFBWjs7QUFFQUEsY0FBTWhCLFFBQU4sQ0FBZTZFLFdBQWYsQ0FBMkIsU0FBM0I7O0FBRUEsYUFBSzdFLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixhQUFuQixFQUFrQyxNQUFsQztBQUNFOzs7O0FBREYsU0FLS2UsT0FMTCxDQUthLHFCQUxiOztBQU9BO0FBQ0EsWUFBSSxLQUFLOFIsT0FBTCxDQUFhOFUsYUFBYixLQUErQixLQUFuQyxFQUEwQztBQUN4Q2xvQixZQUFFLE1BQUYsRUFBVWlHLFdBQVYsQ0FBc0Isb0JBQXRCLEVBQTRDMkgsR0FBNUMsQ0FBZ0QsV0FBaEQsRUFBNkQsS0FBS3VhLGNBQWxFO0FBQ0EsZUFBSy9tQixRQUFMLENBQWN3TSxHQUFkLENBQWtCLFlBQWxCLEVBQWdDLEtBQUt3YSxpQkFBckM7QUFDQSxlQUFLaG5CLFFBQUwsQ0FBY3dNLEdBQWQsQ0FBa0IsV0FBbEIsRUFBK0IsS0FBS3lhLHNCQUFwQztBQUNEOztBQUVELFlBQUksS0FBS2pWLE9BQUwsQ0FBYXlULGNBQWIsS0FBZ0MsSUFBcEMsRUFBMEM7QUFDeEMsZUFBS0ksUUFBTCxDQUFjaGhCLFdBQWQsQ0FBMEIsWUFBMUI7QUFDRDs7QUFFRCxZQUFJLEtBQUttTixPQUFMLENBQWFxVSxZQUFiLEtBQThCLElBQTlCLElBQXNDLEtBQUtyVSxPQUFMLENBQWF5VCxjQUFiLEtBQWdDLElBQTFFLEVBQWdGO0FBQzlFLGVBQUtJLFFBQUwsQ0FBY2hoQixXQUFkLENBQTBCLGFBQTFCO0FBQ0Q7O0FBRUQsYUFBSzBnQixTQUFMLENBQWVwbUIsSUFBZixDQUFvQixlQUFwQixFQUFxQyxPQUFyQzs7QUFFQSxZQUFJLEtBQUs2UyxPQUFMLENBQWFsRyxTQUFiLEtBQTJCLElBQS9CLEVBQXFDO0FBQ25DLGVBQUs5TCxRQUFMLENBQWMyWSxRQUFkLENBQXVCLDJCQUF2QixFQUFvRHBZLFVBQXBELENBQStELFVBQS9EO0FBQ0F6QixxQkFBV21MLFFBQVgsQ0FBb0JzQyxZQUFwQixDQUFpQyxLQUFLdk0sUUFBdEM7QUFDRDtBQUNGOztBQUVEOzs7Ozs7O0FBbFNXO0FBQUE7QUFBQSw2QkF3U0pvSyxLQXhTSSxFQXdTR2xLLE9BeFNILEVBd1NZO0FBQ3JCLFlBQUksS0FBS0YsUUFBTCxDQUFjbWQsUUFBZCxDQUF1QixTQUF2QixDQUFKLEVBQXVDO0FBQ3JDLGVBQUswQyxLQUFMLENBQVd6VixLQUFYLEVBQWtCbEssT0FBbEI7QUFDRCxTQUZELE1BR0s7QUFDSCxlQUFLMGYsSUFBTCxDQUFVeFYsS0FBVixFQUFpQmxLLE9BQWpCO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7O0FBalRXO0FBQUE7QUFBQSxzQ0FzVEs0QyxDQXRUTCxFQXNUUTtBQUFBOztBQUNqQmhFLG1CQUFXbUwsUUFBWCxDQUFvQmEsU0FBcEIsQ0FBOEJoSSxDQUE5QixFQUFpQyxXQUFqQyxFQUE4QztBQUM1QytjLGlCQUFPLGlCQUFNO0FBQ1gsbUJBQUtBLEtBQUw7QUFDQSxtQkFBS3lGLFlBQUwsQ0FBa0JoWixLQUFsQjtBQUNBLG1CQUFPLElBQVA7QUFDRCxXQUwyQztBQU01Q2YsbUJBQVMsbUJBQU07QUFDYnpJLGNBQUVrVCxlQUFGO0FBQ0FsVCxjQUFFdUosY0FBRjtBQUNEO0FBVDJDLFNBQTlDO0FBV0Q7O0FBRUQ7Ozs7O0FBcFVXO0FBQUE7QUFBQSxnQ0F3VUQ7QUFDUixhQUFLd1QsS0FBTDtBQUNBLGFBQUs3ZixRQUFMLENBQWN3TSxHQUFkLENBQWtCLDJCQUFsQjtBQUNBLGFBQUtxWixRQUFMLENBQWNyWixHQUFkLENBQWtCLGVBQWxCOztBQUVBMU4sbUJBQVdzQixnQkFBWCxDQUE0QixJQUE1QjtBQUNEO0FBOVVVOztBQUFBO0FBQUE7O0FBaVZiaWxCLFlBQVV0TixRQUFWLEdBQXFCO0FBQ25COzs7Ozs7QUFNQXNPLGtCQUFjLElBUEs7O0FBU25COzs7Ozs7QUFNQVosb0JBQWdCLElBZkc7O0FBaUJuQjs7Ozs7O0FBTUFxQixtQkFBZSxJQXZCSTs7QUF5Qm5COzs7Ozs7QUFNQVgsb0JBQWdCLENBL0JHOztBQWlDbkI7Ozs7OztBQU1BWCxnQkFBWSxNQXZDTzs7QUF5Q25COzs7Ozs7QUFNQW9CLGFBQVMsSUEvQ1U7O0FBaURuQjs7Ozs7O0FBTUFiLGdCQUFZLEtBdkRPOztBQXlEbkI7Ozs7OztBQU1BRSxjQUFVLElBL0RTOztBQWlFbkI7Ozs7OztBQU1BaUIsZUFBVyxJQXZFUTs7QUF5RW5COzs7Ozs7O0FBT0FsQixpQkFBYSxhQWhGTTs7QUFrRm5COzs7Ozs7QUFNQWxhLGVBQVc7QUF4RlEsR0FBckI7O0FBMkZBO0FBQ0FoTixhQUFXTSxNQUFYLENBQWtCaW1CLFNBQWxCLEVBQTZCLFdBQTdCO0FBRUMsQ0EvYUEsQ0ErYUM3ZCxNQS9hRCxDQUFEO0FDRkE7Ozs7OztBQUVBLENBQUMsVUFBUzVJLENBQVQsRUFBWTs7QUFFYjs7Ozs7OztBQUZhLE1BU1B3b0IsY0FUTztBQVVYOzs7Ozs7O0FBT0EsNEJBQVl2ZixPQUFaLEVBQXFCbUssT0FBckIsRUFBOEI7QUFBQTs7QUFDNUIsV0FBS2hTLFFBQUwsR0FBZ0JwQixFQUFFaUosT0FBRixDQUFoQjtBQUNBLFdBQUsyYSxLQUFMLEdBQWEsS0FBS3hpQixRQUFMLENBQWNDLElBQWQsQ0FBbUIsaUJBQW5CLENBQWI7QUFDQSxXQUFLb25CLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxXQUFLQyxhQUFMLEdBQXFCLElBQXJCOztBQUVBLFdBQUt4bUIsS0FBTDtBQUNBLFdBQUttWCxPQUFMOztBQUVBblosaUJBQVdZLGNBQVgsQ0FBMEIsSUFBMUIsRUFBZ0MsZ0JBQWhDO0FBQ0Q7O0FBRUQ7Ozs7Ozs7QUE3Qlc7QUFBQTtBQUFBLDhCQWtDSDtBQUNOO0FBQ0EsWUFBSSxPQUFPLEtBQUs4aUIsS0FBWixLQUFzQixRQUExQixFQUFvQztBQUNsQyxjQUFJK0UsWUFBWSxFQUFoQjs7QUFFQTtBQUNBLGNBQUkvRSxRQUFRLEtBQUtBLEtBQUwsQ0FBVzNmLEtBQVgsQ0FBaUIsR0FBakIsQ0FBWjs7QUFFQTtBQUNBLGVBQUssSUFBSVIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJbWdCLE1BQU03Z0IsTUFBMUIsRUFBa0NVLEdBQWxDLEVBQXVDO0FBQ3JDLGdCQUFJd2dCLE9BQU9MLE1BQU1uZ0IsQ0FBTixFQUFTUSxLQUFULENBQWUsR0FBZixDQUFYO0FBQ0EsZ0JBQUkya0IsV0FBVzNFLEtBQUtsaEIsTUFBTCxHQUFjLENBQWQsR0FBa0JraEIsS0FBSyxDQUFMLENBQWxCLEdBQTRCLE9BQTNDO0FBQ0EsZ0JBQUk0RSxhQUFhNUUsS0FBS2xoQixNQUFMLEdBQWMsQ0FBZCxHQUFrQmtoQixLQUFLLENBQUwsQ0FBbEIsR0FBNEJBLEtBQUssQ0FBTCxDQUE3Qzs7QUFFQSxnQkFBSTZFLFlBQVlELFVBQVosTUFBNEIsSUFBaEMsRUFBc0M7QUFDcENGLHdCQUFVQyxRQUFWLElBQXNCRSxZQUFZRCxVQUFaLENBQXRCO0FBQ0Q7QUFDRjs7QUFFRCxlQUFLakYsS0FBTCxHQUFhK0UsU0FBYjtBQUNEOztBQUVELFlBQUksQ0FBQzNvQixFQUFFK29CLGFBQUYsQ0FBZ0IsS0FBS25GLEtBQXJCLENBQUwsRUFBa0M7QUFDaEMsZUFBS29GLGtCQUFMO0FBQ0Q7QUFDRDtBQUNBLGFBQUs1bkIsUUFBTCxDQUFjYixJQUFkLENBQW1CLGFBQW5CLEVBQW1DLEtBQUthLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixhQUFuQixLQUFxQ0wsV0FBV2lCLFdBQVgsQ0FBdUIsQ0FBdkIsRUFBMEIsaUJBQTFCLENBQXhFO0FBQ0Q7O0FBRUQ7Ozs7OztBQS9EVztBQUFBO0FBQUEsZ0NBb0VEO0FBQ1IsWUFBSWlCLFFBQVEsSUFBWjs7QUFFQXBDLFVBQUUwRyxNQUFGLEVBQVU2RyxFQUFWLENBQWEsdUJBQWIsRUFBc0MsWUFBVztBQUMvQ25MLGdCQUFNNG1CLGtCQUFOO0FBQ0QsU0FGRDtBQUdBO0FBQ0E7QUFDQTtBQUNEOztBQUVEOzs7Ozs7QUEvRVc7QUFBQTtBQUFBLDJDQW9GVTtBQUNuQixZQUFJQyxTQUFKO0FBQUEsWUFBZTdtQixRQUFRLElBQXZCO0FBQ0E7QUFDQXBDLFVBQUVpQyxJQUFGLENBQU8sS0FBSzJoQixLQUFaLEVBQW1CLFVBQVNuWSxHQUFULEVBQWM7QUFDL0IsY0FBSXZMLFdBQVdnRyxVQUFYLENBQXNCNkksT0FBdEIsQ0FBOEJ0RCxHQUE5QixDQUFKLEVBQXdDO0FBQ3RDd2Qsd0JBQVl4ZCxHQUFaO0FBQ0Q7QUFDRixTQUpEOztBQU1BO0FBQ0EsWUFBSSxDQUFDd2QsU0FBTCxFQUFnQjs7QUFFaEI7QUFDQSxZQUFJLEtBQUtQLGFBQUwsWUFBOEIsS0FBSzlFLEtBQUwsQ0FBV3FGLFNBQVgsRUFBc0J6b0IsTUFBeEQsRUFBZ0U7O0FBRWhFO0FBQ0FSLFVBQUVpQyxJQUFGLENBQU82bUIsV0FBUCxFQUFvQixVQUFTcmQsR0FBVCxFQUFjbUQsS0FBZCxFQUFxQjtBQUN2Q3hNLGdCQUFNaEIsUUFBTixDQUFlNkUsV0FBZixDQUEyQjJJLE1BQU1zYSxRQUFqQztBQUNELFNBRkQ7O0FBSUE7QUFDQSxhQUFLOW5CLFFBQUwsQ0FBYzRRLFFBQWQsQ0FBdUIsS0FBSzRSLEtBQUwsQ0FBV3FGLFNBQVgsRUFBc0JDLFFBQTdDOztBQUVBO0FBQ0EsWUFBSSxLQUFLUixhQUFULEVBQXdCLEtBQUtBLGFBQUwsQ0FBbUJTLE9BQW5CO0FBQ3hCLGFBQUtULGFBQUwsR0FBcUIsSUFBSSxLQUFLOUUsS0FBTCxDQUFXcUYsU0FBWCxFQUFzQnpvQixNQUExQixDQUFpQyxLQUFLWSxRQUF0QyxFQUFnRCxFQUFoRCxDQUFyQjtBQUNEOztBQUVEOzs7OztBQWhIVztBQUFBO0FBQUEsZ0NBb0hEO0FBQ1IsYUFBS3NuQixhQUFMLENBQW1CUyxPQUFuQjtBQUNBbnBCLFVBQUUwRyxNQUFGLEVBQVVrSCxHQUFWLENBQWMsb0JBQWQ7QUFDQTFOLG1CQUFXc0IsZ0JBQVgsQ0FBNEIsSUFBNUI7QUFDRDtBQXhIVTs7QUFBQTtBQUFBOztBQTJIYmduQixpQkFBZXJQLFFBQWYsR0FBMEIsRUFBMUI7O0FBRUE7QUFDQSxNQUFJMlAsY0FBYztBQUNoQk0sY0FBVTtBQUNSRixnQkFBVSxVQURGO0FBRVIxb0IsY0FBUU4sV0FBV0UsUUFBWCxDQUFvQixlQUFwQixLQUF3QztBQUZ4QyxLQURNO0FBS2pCaXBCLGVBQVc7QUFDUkgsZ0JBQVUsV0FERjtBQUVSMW9CLGNBQVFOLFdBQVdFLFFBQVgsQ0FBb0IsV0FBcEIsS0FBb0M7QUFGcEMsS0FMTTtBQVNoQmtwQixlQUFXO0FBQ1RKLGdCQUFVLGdCQUREO0FBRVQxb0IsY0FBUU4sV0FBV0UsUUFBWCxDQUFvQixnQkFBcEIsS0FBeUM7QUFGeEM7QUFUSyxHQUFsQjs7QUFlQTtBQUNBRixhQUFXTSxNQUFYLENBQWtCZ29CLGNBQWxCLEVBQWtDLGdCQUFsQztBQUVDLENBaEpBLENBZ0pDNWYsTUFoSkQsQ0FBRDtBQ0ZBOzs7Ozs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWI7Ozs7OztBQUZhLE1BUVB1cEIsZ0JBUk87QUFTWDs7Ozs7OztBQU9BLDhCQUFZdGdCLE9BQVosRUFBcUJtSyxPQUFyQixFQUE4QjtBQUFBOztBQUM1QixXQUFLaFMsUUFBTCxHQUFnQnBCLEVBQUVpSixPQUFGLENBQWhCO0FBQ0EsV0FBS21LLE9BQUwsR0FBZXBULEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFhOGMsaUJBQWlCcFEsUUFBOUIsRUFBd0MsS0FBSy9YLFFBQUwsQ0FBY0MsSUFBZCxFQUF4QyxFQUE4RCtSLE9BQTlELENBQWY7O0FBRUEsV0FBS2xSLEtBQUw7QUFDQSxXQUFLbVgsT0FBTDs7QUFFQW5aLGlCQUFXWSxjQUFYLENBQTBCLElBQTFCLEVBQWdDLGtCQUFoQztBQUNEOztBQUVEOzs7Ozs7O0FBMUJXO0FBQUE7QUFBQSw4QkErQkg7QUFDTixZQUFJMG9CLFdBQVcsS0FBS3BvQixRQUFMLENBQWNDLElBQWQsQ0FBbUIsbUJBQW5CLENBQWY7QUFDQSxZQUFJLENBQUNtb0IsUUFBTCxFQUFlO0FBQ2IzbUIsa0JBQVFDLEtBQVIsQ0FBYyxrRUFBZDtBQUNEOztBQUVELGFBQUsybUIsV0FBTCxHQUFtQnpwQixRQUFNd3BCLFFBQU4sQ0FBbkI7QUFDQSxhQUFLRSxRQUFMLEdBQWdCLEtBQUt0b0IsUUFBTCxDQUFjdUMsSUFBZCxDQUFtQixlQUFuQixFQUFvQ21KLE1BQXBDLENBQTJDLFlBQVc7QUFDcEUsY0FBSVUsU0FBU3hOLEVBQUUsSUFBRixFQUFRcUIsSUFBUixDQUFhLFFBQWIsQ0FBYjtBQUNBLGlCQUFRbU0sV0FBV2djLFFBQVgsSUFBdUJoYyxXQUFXLEVBQTFDO0FBQ0QsU0FIZSxDQUFoQjtBQUlBLGFBQUs0RixPQUFMLEdBQWVwVCxFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYSxLQUFLMkcsT0FBbEIsRUFBMkIsS0FBS3FXLFdBQUwsQ0FBaUJwb0IsSUFBakIsRUFBM0IsQ0FBZjs7QUFFQTtBQUNBLFlBQUcsS0FBSytSLE9BQUwsQ0FBYWhDLE9BQWhCLEVBQXlCO0FBQ3ZCLGNBQUl1WSxRQUFRLEtBQUt2VyxPQUFMLENBQWFoQyxPQUFiLENBQXFCbk4sS0FBckIsQ0FBMkIsR0FBM0IsQ0FBWjs7QUFFQSxlQUFLMmxCLFdBQUwsR0FBbUJELE1BQU0sQ0FBTixDQUFuQjtBQUNBLGVBQUtFLFlBQUwsR0FBb0JGLE1BQU0sQ0FBTixLQUFZLElBQWhDO0FBQ0Q7O0FBRUQsYUFBS0csT0FBTDtBQUNEOztBQUVEOzs7Ozs7QUF2RFc7QUFBQTtBQUFBLGdDQTRERDtBQUNSLFlBQUkxbkIsUUFBUSxJQUFaOztBQUVBLGFBQUsybkIsZ0JBQUwsR0FBd0IsS0FBS0QsT0FBTCxDQUFhaGlCLElBQWIsQ0FBa0IsSUFBbEIsQ0FBeEI7O0FBRUE5SCxVQUFFMEcsTUFBRixFQUFVNkcsRUFBVixDQUFhLHVCQUFiLEVBQXNDLEtBQUt3YyxnQkFBM0M7O0FBRUEsYUFBS0wsUUFBTCxDQUFjbmMsRUFBZCxDQUFpQiwyQkFBakIsRUFBOEMsS0FBS3ljLFVBQUwsQ0FBZ0JsaUIsSUFBaEIsQ0FBcUIsSUFBckIsQ0FBOUM7QUFDRDs7QUFFRDs7Ozs7O0FBdEVXO0FBQUE7QUFBQSxnQ0EyRUQ7QUFDUjtBQUNBLFlBQUksQ0FBQzVILFdBQVdnRyxVQUFYLENBQXNCNkksT0FBdEIsQ0FBOEIsS0FBS3FFLE9BQUwsQ0FBYTZXLE9BQTNDLENBQUwsRUFBMEQ7QUFDeEQsZUFBSzdvQixRQUFMLENBQWM2USxJQUFkO0FBQ0EsZUFBS3dYLFdBQUwsQ0FBaUJwWCxJQUFqQjtBQUNEOztBQUVEO0FBTEEsYUFNSztBQUNILGlCQUFLalIsUUFBTCxDQUFjaVIsSUFBZDtBQUNBLGlCQUFLb1gsV0FBTCxDQUFpQnhYLElBQWpCO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7O0FBekZXO0FBQUE7QUFBQSxtQ0E4RkU7QUFBQTs7QUFDWCxZQUFJLENBQUMvUixXQUFXZ0csVUFBWCxDQUFzQjZJLE9BQXRCLENBQThCLEtBQUtxRSxPQUFMLENBQWE2VyxPQUEzQyxDQUFMLEVBQTBEO0FBQ3hEOzs7O0FBSUEsY0FBRyxLQUFLN1csT0FBTCxDQUFhaEMsT0FBaEIsRUFBeUI7QUFDdkIsZ0JBQUksS0FBS3FZLFdBQUwsQ0FBaUIxYyxFQUFqQixDQUFvQixTQUFwQixDQUFKLEVBQW9DO0FBQ2xDN00seUJBQVc4USxNQUFYLENBQWtCQyxTQUFsQixDQUE0QixLQUFLd1ksV0FBakMsRUFBOEMsS0FBS0csV0FBbkQsRUFBZ0UsWUFBTTtBQUNwRSx1QkFBS3hvQixRQUFMLENBQWNFLE9BQWQsQ0FBc0IsNkJBQXRCO0FBQ0EsdUJBQUttb0IsV0FBTCxDQUFpQjlsQixJQUFqQixDQUFzQixlQUF0QixFQUF1Q3VCLGNBQXZDLENBQXNELHFCQUF0RDtBQUNELGVBSEQ7QUFJRCxhQUxELE1BTUs7QUFDSGhGLHlCQUFXOFEsTUFBWCxDQUFrQkssVUFBbEIsQ0FBNkIsS0FBS29ZLFdBQWxDLEVBQStDLEtBQUtJLFlBQXBELEVBQWtFLFlBQU07QUFDdEUsdUJBQUt6b0IsUUFBTCxDQUFjRSxPQUFkLENBQXNCLDZCQUF0QjtBQUNELGVBRkQ7QUFHRDtBQUNGLFdBWkQsTUFhSztBQUNILGlCQUFLbW9CLFdBQUwsQ0FBaUIzSyxNQUFqQixDQUF3QixDQUF4QjtBQUNBLGlCQUFLMkssV0FBTCxDQUFpQjlsQixJQUFqQixDQUFzQixlQUF0QixFQUF1Q3JDLE9BQXZDLENBQStDLHFCQUEvQztBQUNBLGlCQUFLRixRQUFMLENBQWNFLE9BQWQsQ0FBc0IsNkJBQXRCO0FBQ0Q7QUFDRjtBQUNGO0FBdkhVO0FBQUE7QUFBQSxnQ0F5SEQ7QUFDUixhQUFLRixRQUFMLENBQWN3TSxHQUFkLENBQWtCLHNCQUFsQjtBQUNBLGFBQUs4YixRQUFMLENBQWM5YixHQUFkLENBQWtCLHNCQUFsQjs7QUFFQTVOLFVBQUUwRyxNQUFGLEVBQVVrSCxHQUFWLENBQWMsdUJBQWQsRUFBdUMsS0FBS21jLGdCQUE1Qzs7QUFFQTdwQixtQkFBV3NCLGdCQUFYLENBQTRCLElBQTVCO0FBQ0Q7QUFoSVU7O0FBQUE7QUFBQTs7QUFtSWIrbkIsbUJBQWlCcFEsUUFBakIsR0FBNEI7QUFDMUI7Ozs7OztBQU1BOFEsYUFBUyxRQVBpQjs7QUFTMUI7Ozs7OztBQU1BN1ksYUFBUztBQWZpQixHQUE1Qjs7QUFrQkE7QUFDQWxSLGFBQVdNLE1BQVgsQ0FBa0Irb0IsZ0JBQWxCLEVBQW9DLGtCQUFwQztBQUVDLENBeEpBLENBd0pDM2dCLE1BeEpELENBQUQ7QUNGQTs7Ozs7O0FBRUEsQ0FBQyxVQUFTNUksQ0FBVCxFQUFZOztBQUViOzs7Ozs7Ozs7O0FBRmEsTUFZUGtxQixNQVpPO0FBYVg7Ozs7OztBQU1BLG9CQUFZamhCLE9BQVosRUFBcUJtSyxPQUFyQixFQUE4QjtBQUFBOztBQUM1QixXQUFLaFMsUUFBTCxHQUFnQjZILE9BQWhCO0FBQ0EsV0FBS21LLE9BQUwsR0FBZXBULEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFheWQsT0FBTy9RLFFBQXBCLEVBQThCLEtBQUsvWCxRQUFMLENBQWNDLElBQWQsRUFBOUIsRUFBb0QrUixPQUFwRCxDQUFmO0FBQ0EsV0FBS2xSLEtBQUw7O0FBRUFoQyxpQkFBV1ksY0FBWCxDQUEwQixJQUExQixFQUFnQyxRQUFoQztBQUNBWixpQkFBV21MLFFBQVgsQ0FBb0IyQixRQUFwQixDQUE2QixRQUE3QixFQUF1QztBQUNyQyxpQkFBUyxNQUQ0QjtBQUVyQyxpQkFBUyxNQUY0QjtBQUdyQyxrQkFBVTtBQUgyQixPQUF2QztBQUtEOztBQUVEOzs7Ozs7QUFoQ1c7QUFBQTtBQUFBLDhCQW9DSDtBQUNOLGFBQUs2QyxFQUFMLEdBQVUsS0FBS3pPLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixJQUFuQixDQUFWO0FBQ0EsYUFBSzhmLFFBQUwsR0FBZ0IsS0FBaEI7QUFDQSxhQUFLOEosTUFBTCxHQUFjLEVBQUNDLElBQUlscUIsV0FBV2dHLFVBQVgsQ0FBc0JtSSxPQUEzQixFQUFkO0FBQ0EsYUFBS2djLFFBQUwsR0FBZ0JDLGFBQWhCOztBQUVBLGFBQUtoTSxPQUFMLEdBQWV0ZSxtQkFBaUIsS0FBSzZQLEVBQXRCLFNBQThCOU0sTUFBOUIsR0FBdUMvQyxtQkFBaUIsS0FBSzZQLEVBQXRCLFFBQXZDLEdBQXVFN1AscUJBQW1CLEtBQUs2UCxFQUF4QixRQUF0RjtBQUNBLGFBQUt5TyxPQUFMLENBQWEvZCxJQUFiLENBQWtCO0FBQ2hCLDJCQUFpQixLQUFLc1AsRUFETjtBQUVoQiwyQkFBaUIsSUFGRDtBQUdoQixzQkFBWTtBQUhJLFNBQWxCOztBQU1BLFlBQUksS0FBS3VELE9BQUwsQ0FBYW1YLFVBQWIsSUFBMkIsS0FBS25wQixRQUFMLENBQWNtZCxRQUFkLENBQXVCLE1BQXZCLENBQS9CLEVBQStEO0FBQzdELGVBQUtuTCxPQUFMLENBQWFtWCxVQUFiLEdBQTBCLElBQTFCO0FBQ0EsZUFBS25YLE9BQUwsQ0FBYTBULE9BQWIsR0FBdUIsS0FBdkI7QUFDRDtBQUNELFlBQUksS0FBSzFULE9BQUwsQ0FBYTBULE9BQWIsSUFBd0IsQ0FBQyxLQUFLRyxRQUFsQyxFQUE0QztBQUMxQyxlQUFLQSxRQUFMLEdBQWdCLEtBQUt1RCxZQUFMLENBQWtCLEtBQUszYSxFQUF2QixDQUFoQjtBQUNEOztBQUVELGFBQUt6TyxRQUFMLENBQWNiLElBQWQsQ0FBbUI7QUFDZixrQkFBUSxRQURPO0FBRWYseUJBQWUsSUFGQTtBQUdmLDJCQUFpQixLQUFLc1AsRUFIUDtBQUlmLHlCQUFlLEtBQUtBO0FBSkwsU0FBbkI7O0FBT0EsWUFBRyxLQUFLb1gsUUFBUixFQUFrQjtBQUNoQixlQUFLN2xCLFFBQUwsQ0FBY3FwQixNQUFkLEdBQXVCMWtCLFFBQXZCLENBQWdDLEtBQUtraEIsUUFBckM7QUFDRCxTQUZELE1BRU87QUFDTCxlQUFLN2xCLFFBQUwsQ0FBY3FwQixNQUFkLEdBQXVCMWtCLFFBQXZCLENBQWdDL0YsRUFBRSxLQUFLb1QsT0FBTCxDQUFhck4sUUFBZixDQUFoQztBQUNBLGVBQUszRSxRQUFMLENBQWM0USxRQUFkLENBQXVCLGlCQUF2QjtBQUNEO0FBQ0QsYUFBS3FILE9BQUw7QUFDQSxZQUFJLEtBQUtqRyxPQUFMLENBQWF3TCxRQUFiLElBQXlCbFksT0FBT3lYLFFBQVAsQ0FBZ0JDLElBQWhCLFdBQStCLEtBQUt2TyxFQUFqRSxFQUF3RTtBQUN0RTdQLFlBQUUwRyxNQUFGLEVBQVV5TCxHQUFWLENBQWMsZ0JBQWQsRUFBZ0MsS0FBSzZPLElBQUwsQ0FBVWxaLElBQVYsQ0FBZSxJQUFmLENBQWhDO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7QUE1RVc7QUFBQTtBQUFBLHFDQWdGSTtBQUNiLGVBQU85SCxFQUFFLGFBQUYsRUFDSmdTLFFBREksQ0FDSyxnQkFETCxFQUVKak0sUUFGSSxDQUVLLEtBQUtxTixPQUFMLENBQWFyTixRQUZsQixDQUFQO0FBR0Q7O0FBRUQ7Ozs7OztBQXRGVztBQUFBO0FBQUEsd0NBMkZPO0FBQ2hCLFlBQUk4RCxRQUFRLEtBQUt6SSxRQUFMLENBQWNzcEIsVUFBZCxFQUFaO0FBQ0EsWUFBSUEsYUFBYTFxQixFQUFFMEcsTUFBRixFQUFVbUQsS0FBVixFQUFqQjtBQUNBLFlBQUlELFNBQVMsS0FBS3hJLFFBQUwsQ0FBY3VwQixXQUFkLEVBQWI7QUFDQSxZQUFJQSxjQUFjM3FCLEVBQUUwRyxNQUFGLEVBQVVrRCxNQUFWLEVBQWxCO0FBQ0EsWUFBSUosSUFBSixFQUFVRixHQUFWO0FBQ0EsWUFBSSxLQUFLOEosT0FBTCxDQUFhckksT0FBYixLQUF5QixNQUE3QixFQUFxQztBQUNuQ3ZCLGlCQUFPc2IsU0FBUyxDQUFDNEYsYUFBYTdnQixLQUFkLElBQXVCLENBQWhDLEVBQW1DLEVBQW5DLENBQVA7QUFDRCxTQUZELE1BRU87QUFDTEwsaUJBQU9zYixTQUFTLEtBQUsxUixPQUFMLENBQWFySSxPQUF0QixFQUErQixFQUEvQixDQUFQO0FBQ0Q7QUFDRCxZQUFJLEtBQUtxSSxPQUFMLENBQWF0SSxPQUFiLEtBQXlCLE1BQTdCLEVBQXFDO0FBQ25DLGNBQUlsQixTQUFTK2dCLFdBQWIsRUFBMEI7QUFDeEJyaEIsa0JBQU13YixTQUFTN2hCLEtBQUs2ZCxHQUFMLENBQVMsR0FBVCxFQUFjNkosY0FBYyxFQUE1QixDQUFULEVBQTBDLEVBQTFDLENBQU47QUFDRCxXQUZELE1BRU87QUFDTHJoQixrQkFBTXdiLFNBQVMsQ0FBQzZGLGNBQWMvZ0IsTUFBZixJQUF5QixDQUFsQyxFQUFxQyxFQUFyQyxDQUFOO0FBQ0Q7QUFDRixTQU5ELE1BTU87QUFDTE4sZ0JBQU13YixTQUFTLEtBQUsxUixPQUFMLENBQWF0SSxPQUF0QixFQUErQixFQUEvQixDQUFOO0FBQ0Q7QUFDRCxhQUFLMUosUUFBTCxDQUFjb04sR0FBZCxDQUFrQixFQUFDbEYsS0FBS0EsTUFBTSxJQUFaLEVBQWxCO0FBQ0E7QUFDQTtBQUNBLFlBQUcsQ0FBQyxLQUFLMmQsUUFBTixJQUFtQixLQUFLN1QsT0FBTCxDQUFhckksT0FBYixLQUF5QixNQUEvQyxFQUF3RDtBQUN0RCxlQUFLM0osUUFBTCxDQUFjb04sR0FBZCxDQUFrQixFQUFDaEYsTUFBTUEsT0FBTyxJQUFkLEVBQWxCO0FBQ0EsZUFBS3BJLFFBQUwsQ0FBY29OLEdBQWQsQ0FBa0IsRUFBQ29jLFFBQVEsS0FBVCxFQUFsQjtBQUNEO0FBRUY7O0FBRUQ7Ozs7O0FBekhXO0FBQUE7QUFBQSxnQ0E2SEQ7QUFBQTs7QUFDUixZQUFJeG9CLFFBQVEsSUFBWjs7QUFFQSxhQUFLaEIsUUFBTCxDQUFjbU0sRUFBZCxDQUFpQjtBQUNmLDZCQUFtQixLQUFLeVQsSUFBTCxDQUFVbFosSUFBVixDQUFlLElBQWYsQ0FESjtBQUVmLDhCQUFvQix3QkFBQzBELEtBQUQsRUFBUXBLLFFBQVIsRUFBcUI7QUFDdkMsZ0JBQUtvSyxNQUFNZ0MsTUFBTixLQUFpQnBMLE1BQU1oQixRQUFOLENBQWUsQ0FBZixDQUFsQixJQUNDcEIsRUFBRXdMLE1BQU1nQyxNQUFSLEVBQWdCdVQsT0FBaEIsQ0FBd0IsaUJBQXhCLEVBQTJDLENBQTNDLE1BQWtEM2YsUUFEdkQsRUFDa0U7QUFBRTtBQUNsRSxxQkFBTyxPQUFLNmYsS0FBTCxDQUFXdGIsS0FBWCxRQUFQO0FBQ0Q7QUFDRixXQVBjO0FBUWYsK0JBQXFCLEtBQUttWixNQUFMLENBQVloWCxJQUFaLENBQWlCLElBQWpCLENBUk47QUFTZixpQ0FBdUIsNkJBQVc7QUFDaEMxRixrQkFBTXlvQixlQUFOO0FBQ0Q7QUFYYyxTQUFqQjs7QUFjQSxZQUFJLEtBQUt2TSxPQUFMLENBQWF2YixNQUFqQixFQUF5QjtBQUN2QixlQUFLdWIsT0FBTCxDQUFhL1EsRUFBYixDQUFnQixtQkFBaEIsRUFBcUMsVUFBU3JKLENBQVQsRUFBWTtBQUMvQyxnQkFBSUEsRUFBRXdILEtBQUYsS0FBWSxFQUFaLElBQWtCeEgsRUFBRXdILEtBQUYsS0FBWSxFQUFsQyxFQUFzQztBQUNwQ3hILGdCQUFFa1QsZUFBRjtBQUNBbFQsZ0JBQUV1SixjQUFGO0FBQ0FyTCxvQkFBTTRlLElBQU47QUFDRDtBQUNGLFdBTkQ7QUFPRDs7QUFFRCxZQUFJLEtBQUs1TixPQUFMLENBQWFxVSxZQUFiLElBQTZCLEtBQUtyVSxPQUFMLENBQWEwVCxPQUE5QyxFQUF1RDtBQUNyRCxlQUFLRyxRQUFMLENBQWNyWixHQUFkLENBQWtCLFlBQWxCLEVBQWdDTCxFQUFoQyxDQUFtQyxpQkFBbkMsRUFBc0QsVUFBU3JKLENBQVQsRUFBWTtBQUNoRSxnQkFBSUEsRUFBRXNKLE1BQUYsS0FBYXBMLE1BQU1oQixRQUFOLENBQWUsQ0FBZixDQUFiLElBQ0ZwQixFQUFFOHFCLFFBQUYsQ0FBVzFvQixNQUFNaEIsUUFBTixDQUFlLENBQWYsQ0FBWCxFQUE4QjhDLEVBQUVzSixNQUFoQyxDQURFLElBRUEsQ0FBQ3hOLEVBQUU4cUIsUUFBRixDQUFXbG1CLFFBQVgsRUFBcUJWLEVBQUVzSixNQUF2QixDQUZMLEVBRXFDO0FBQy9CO0FBQ0w7QUFDRHBMLGtCQUFNNmUsS0FBTjtBQUNELFdBUEQ7QUFRRDtBQUNELFlBQUksS0FBSzdOLE9BQUwsQ0FBYXdMLFFBQWpCLEVBQTJCO0FBQ3pCNWUsWUFBRTBHLE1BQUYsRUFBVTZHLEVBQVYseUJBQW1DLEtBQUtzQyxFQUF4QyxFQUE4QyxLQUFLa2IsWUFBTCxDQUFrQmpqQixJQUFsQixDQUF1QixJQUF2QixDQUE5QztBQUNEO0FBQ0Y7O0FBRUQ7Ozs7O0FBdktXO0FBQUE7QUFBQSxtQ0EyS0U1RCxDQTNLRixFQTJLSztBQUNkLFlBQUd3QyxPQUFPeVgsUUFBUCxDQUFnQkMsSUFBaEIsS0FBMkIsTUFBTSxLQUFLdk8sRUFBdEMsSUFBNkMsQ0FBQyxLQUFLd1EsUUFBdEQsRUFBK0Q7QUFBRSxlQUFLVyxJQUFMO0FBQWMsU0FBL0UsTUFDSTtBQUFFLGVBQUtDLEtBQUw7QUFBZTtBQUN0Qjs7QUFHRDs7Ozs7OztBQWpMVztBQUFBO0FBQUEsNkJBdUxKO0FBQUE7O0FBQ0wsWUFBSSxLQUFLN04sT0FBTCxDQUFhd0wsUUFBakIsRUFBMkI7QUFDekIsY0FBSVIsYUFBVyxLQUFLdk8sRUFBcEI7O0FBRUEsY0FBSW5KLE9BQU80WSxPQUFQLENBQWVDLFNBQW5CLEVBQThCO0FBQzVCN1ksbUJBQU80WSxPQUFQLENBQWVDLFNBQWYsQ0FBeUIsSUFBekIsRUFBK0IsSUFBL0IsRUFBcUNuQixJQUFyQztBQUNELFdBRkQsTUFFTztBQUNMMVgsbUJBQU95WCxRQUFQLENBQWdCQyxJQUFoQixHQUF1QkEsSUFBdkI7QUFDRDtBQUNGOztBQUVELGFBQUtpQyxRQUFMLEdBQWdCLElBQWhCOztBQUVBO0FBQ0EsYUFBS2pmLFFBQUwsQ0FDS29OLEdBREwsQ0FDUyxFQUFFLGNBQWMsUUFBaEIsRUFEVCxFQUVLeUQsSUFGTCxHQUdLeU0sU0FITCxDQUdlLENBSGY7QUFJQSxZQUFJLEtBQUt0TCxPQUFMLENBQWEwVCxPQUFqQixFQUEwQjtBQUN4QixlQUFLRyxRQUFMLENBQWN6WSxHQUFkLENBQWtCLEVBQUMsY0FBYyxRQUFmLEVBQWxCLEVBQTRDeUQsSUFBNUM7QUFDRDs7QUFFRCxhQUFLNFksZUFBTDs7QUFFQSxhQUFLenBCLFFBQUwsQ0FDR2lSLElBREgsR0FFRzdELEdBRkgsQ0FFTyxFQUFFLGNBQWMsRUFBaEIsRUFGUDs7QUFJQSxZQUFHLEtBQUt5WSxRQUFSLEVBQWtCO0FBQ2hCLGVBQUtBLFFBQUwsQ0FBY3pZLEdBQWQsQ0FBa0IsRUFBQyxjQUFjLEVBQWYsRUFBbEIsRUFBc0M2RCxJQUF0QztBQUNBLGNBQUcsS0FBS2pSLFFBQUwsQ0FBY21kLFFBQWQsQ0FBdUIsTUFBdkIsQ0FBSCxFQUFtQztBQUNqQyxpQkFBSzBJLFFBQUwsQ0FBY2pWLFFBQWQsQ0FBdUIsTUFBdkI7QUFDRCxXQUZELE1BRU8sSUFBSSxLQUFLNVEsUUFBTCxDQUFjbWQsUUFBZCxDQUF1QixNQUF2QixDQUFKLEVBQW9DO0FBQ3pDLGlCQUFLMEksUUFBTCxDQUFjalYsUUFBZCxDQUF1QixNQUF2QjtBQUNEO0FBQ0Y7O0FBR0QsWUFBSSxDQUFDLEtBQUtvQixPQUFMLENBQWE0WCxjQUFsQixFQUFrQztBQUNoQzs7Ozs7QUFLQSxlQUFLNXBCLFFBQUwsQ0FBY0UsT0FBZCxDQUFzQixtQkFBdEIsRUFBMkMsS0FBS3VPLEVBQWhEO0FBQ0Q7O0FBRUQsWUFBSXpOLFFBQVEsSUFBWjs7QUFFQSxpQkFBUzZvQixvQkFBVCxHQUFnQztBQUM5QixjQUFJN29CLE1BQU1pb0IsUUFBVixFQUFvQjtBQUNsQixnQkFBRyxDQUFDam9CLE1BQU04b0IsaUJBQVYsRUFBNkI7QUFDM0I5b0Isb0JBQU04b0IsaUJBQU4sR0FBMEJ4a0IsT0FBTzhELFdBQWpDO0FBQ0Q7QUFDRHhLLGNBQUUsWUFBRixFQUFnQmdTLFFBQWhCLENBQXlCLGdCQUF6QjtBQUNELFdBTEQsTUFNSztBQUNIaFMsY0FBRSxNQUFGLEVBQVVnUyxRQUFWLENBQW1CLGdCQUFuQjtBQUNEO0FBQ0Y7QUFDRDtBQUNBLFlBQUksS0FBS29CLE9BQUwsQ0FBYXdXLFdBQWpCLEVBQThCO0FBQUE7QUFBQSxnQkFDbkJ1QixjQURtQixHQUM1QixTQUFTQSxjQUFULEdBQXlCO0FBQ3ZCL29CLG9CQUFNaEIsUUFBTixDQUNHYixJQURILENBQ1E7QUFDSiwrQkFBZSxLQURYO0FBRUosNEJBQVksQ0FBQztBQUZULGVBRFIsRUFLR21OLEtBTEg7QUFNQXVkO0FBQ0EvcUIseUJBQVdtTCxRQUFYLENBQW9CNkIsU0FBcEIsQ0FBOEI5SyxNQUFNaEIsUUFBcEM7QUFDRCxhQVYyQjs7QUFXNUIsZ0JBQUksT0FBS2dTLE9BQUwsQ0FBYTBULE9BQWpCLEVBQTBCO0FBQ3hCNW1CLHlCQUFXOFEsTUFBWCxDQUFrQkMsU0FBbEIsQ0FBNEIsT0FBS2dXLFFBQWpDLEVBQTJDLFNBQTNDO0FBQ0Q7QUFDRC9tQix1QkFBVzhRLE1BQVgsQ0FBa0JDLFNBQWxCLENBQTRCLE9BQUs3UCxRQUFqQyxFQUEyQyxPQUFLZ1MsT0FBTCxDQUFhd1csV0FBeEQsRUFBcUUsWUFBTTtBQUN6RSxrQkFBRyxPQUFLeG9CLFFBQVIsRUFBa0I7QUFBRTtBQUNsQix1QkFBS2dxQixpQkFBTCxHQUF5QmxyQixXQUFXbUwsUUFBWCxDQUFvQndCLGFBQXBCLENBQWtDLE9BQUt6TCxRQUF2QyxDQUF6QjtBQUNBK3BCO0FBQ0Q7QUFDRixhQUxEO0FBZDRCO0FBb0I3QjtBQUNEO0FBckJBLGFBc0JLO0FBQ0gsZ0JBQUksS0FBSy9YLE9BQUwsQ0FBYTBULE9BQWpCLEVBQTBCO0FBQ3hCLG1CQUFLRyxRQUFMLENBQWNoVixJQUFkLENBQW1CLENBQW5CO0FBQ0Q7QUFDRCxpQkFBSzdRLFFBQUwsQ0FBYzZRLElBQWQsQ0FBbUIsS0FBS21CLE9BQUwsQ0FBYWlZLFNBQWhDO0FBQ0Q7O0FBRUQ7QUFDQSxhQUFLanFCLFFBQUwsQ0FDR2IsSUFESCxDQUNRO0FBQ0oseUJBQWUsS0FEWDtBQUVKLHNCQUFZLENBQUM7QUFGVCxTQURSLEVBS0dtTixLQUxIO0FBTUF4TixtQkFBV21MLFFBQVgsQ0FBb0I2QixTQUFwQixDQUE4QixLQUFLOUwsUUFBbkM7O0FBRUE7Ozs7QUFJQSxhQUFLQSxRQUFMLENBQWNFLE9BQWQsQ0FBc0IsZ0JBQXRCOztBQUVBMnBCOztBQUVBaG1CLG1CQUFXLFlBQU07QUFDZixpQkFBS3FtQixjQUFMO0FBQ0QsU0FGRCxFQUVHLENBRkg7QUFHRDs7QUFFRDs7Ozs7QUF2U1c7QUFBQTtBQUFBLHVDQTJTTTtBQUNmLFlBQUlscEIsUUFBUSxJQUFaO0FBQ0EsWUFBRyxDQUFDLEtBQUtoQixRQUFULEVBQW1CO0FBQUU7QUFBUyxTQUZmLENBRWdCO0FBQy9CLGFBQUtncUIsaUJBQUwsR0FBeUJsckIsV0FBV21MLFFBQVgsQ0FBb0J3QixhQUFwQixDQUFrQyxLQUFLekwsUUFBdkMsQ0FBekI7O0FBRUEsWUFBSSxDQUFDLEtBQUtnUyxPQUFMLENBQWEwVCxPQUFkLElBQXlCLEtBQUsxVCxPQUFMLENBQWFxVSxZQUF0QyxJQUFzRCxDQUFDLEtBQUtyVSxPQUFMLENBQWFtWCxVQUF4RSxFQUFvRjtBQUNsRnZxQixZQUFFLE1BQUYsRUFBVXVOLEVBQVYsQ0FBYSxpQkFBYixFQUFnQyxVQUFTckosQ0FBVCxFQUFZO0FBQzFDLGdCQUFJQSxFQUFFc0osTUFBRixLQUFhcEwsTUFBTWhCLFFBQU4sQ0FBZSxDQUFmLENBQWIsSUFDRnBCLEVBQUU4cUIsUUFBRixDQUFXMW9CLE1BQU1oQixRQUFOLENBQWUsQ0FBZixDQUFYLEVBQThCOEMsRUFBRXNKLE1BQWhDLENBREUsSUFFQSxDQUFDeE4sRUFBRThxQixRQUFGLENBQVdsbUIsUUFBWCxFQUFxQlYsRUFBRXNKLE1BQXZCLENBRkwsRUFFcUM7QUFBRTtBQUFTO0FBQ2hEcEwsa0JBQU02ZSxLQUFOO0FBQ0QsV0FMRDtBQU1EOztBQUVELFlBQUksS0FBSzdOLE9BQUwsQ0FBYW1ZLFVBQWpCLEVBQTZCO0FBQzNCdnJCLFlBQUUwRyxNQUFGLEVBQVU2RyxFQUFWLENBQWEsbUJBQWIsRUFBa0MsVUFBU3JKLENBQVQsRUFBWTtBQUM1Q2hFLHVCQUFXbUwsUUFBWCxDQUFvQmEsU0FBcEIsQ0FBOEJoSSxDQUE5QixFQUFpQyxRQUFqQyxFQUEyQztBQUN6QytjLHFCQUFPLGlCQUFXO0FBQ2hCLG9CQUFJN2UsTUFBTWdSLE9BQU4sQ0FBY21ZLFVBQWxCLEVBQThCO0FBQzVCbnBCLHdCQUFNNmUsS0FBTjtBQUNBN2Usd0JBQU1rYyxPQUFOLENBQWM1USxLQUFkO0FBQ0Q7QUFDRjtBQU53QyxhQUEzQztBQVFELFdBVEQ7QUFVRDs7QUFFRDtBQUNBLGFBQUt0TSxRQUFMLENBQWNtTSxFQUFkLENBQWlCLG1CQUFqQixFQUFzQyxVQUFTckosQ0FBVCxFQUFZO0FBQ2hELGNBQUlxVSxVQUFVdlksRUFBRSxJQUFGLENBQWQ7QUFDQTtBQUNBRSxxQkFBV21MLFFBQVgsQ0FBb0JhLFNBQXBCLENBQThCaEksQ0FBOUIsRUFBaUMsUUFBakMsRUFBMkM7QUFDekM4YyxrQkFBTSxnQkFBVztBQUNmLGtCQUFJNWUsTUFBTWhCLFFBQU4sQ0FBZXVDLElBQWYsQ0FBb0IsUUFBcEIsRUFBOEJvSixFQUE5QixDQUFpQzNLLE1BQU1oQixRQUFOLENBQWV1QyxJQUFmLENBQW9CLGNBQXBCLENBQWpDLENBQUosRUFBMkU7QUFDekVzQiwyQkFBVyxZQUFXO0FBQUU7QUFDdEI3Qyx3QkFBTWtjLE9BQU4sQ0FBYzVRLEtBQWQ7QUFDRCxpQkFGRCxFQUVHLENBRkg7QUFHRCxlQUpELE1BSU8sSUFBSTZLLFFBQVF4TCxFQUFSLENBQVczSyxNQUFNZ3BCLGlCQUFqQixDQUFKLEVBQXlDO0FBQUU7QUFDaERocEIsc0JBQU00ZSxJQUFOO0FBQ0Q7QUFDRixhQVR3QztBQVV6Q0MsbUJBQU8saUJBQVc7QUFDaEIsa0JBQUk3ZSxNQUFNZ1IsT0FBTixDQUFjbVksVUFBbEIsRUFBOEI7QUFDNUJucEIsc0JBQU02ZSxLQUFOO0FBQ0E3ZSxzQkFBTWtjLE9BQU4sQ0FBYzVRLEtBQWQ7QUFDRDtBQUNGLGFBZndDO0FBZ0J6Q2YscUJBQVMsaUJBQVNjLGNBQVQsRUFBeUI7QUFDaEMsa0JBQUlBLGNBQUosRUFBb0I7QUFDbEJ2SixrQkFBRXVKLGNBQUY7QUFDRDtBQUNGO0FBcEJ3QyxXQUEzQztBQXNCRCxTQXpCRDtBQTBCRDs7QUFFRDs7Ozs7O0FBbldXO0FBQUE7QUFBQSw4QkF3V0g7QUFDTixZQUFJLENBQUMsS0FBSzRTLFFBQU4sSUFBa0IsQ0FBQyxLQUFLamYsUUFBTCxDQUFjMkwsRUFBZCxDQUFpQixVQUFqQixDQUF2QixFQUFxRDtBQUNuRCxpQkFBTyxLQUFQO0FBQ0Q7QUFDRCxZQUFJM0ssUUFBUSxJQUFaOztBQUVBO0FBQ0EsWUFBSSxLQUFLZ1IsT0FBTCxDQUFheVcsWUFBakIsRUFBK0I7QUFDN0IsY0FBSSxLQUFLelcsT0FBTCxDQUFhMFQsT0FBakIsRUFBMEI7QUFDeEI1bUIsdUJBQVc4USxNQUFYLENBQWtCSyxVQUFsQixDQUE2QixLQUFLNFYsUUFBbEMsRUFBNEMsVUFBNUMsRUFBd0R1RSxRQUF4RDtBQUNELFdBRkQsTUFHSztBQUNIQTtBQUNEOztBQUVEdHJCLHFCQUFXOFEsTUFBWCxDQUFrQkssVUFBbEIsQ0FBNkIsS0FBS2pRLFFBQWxDLEVBQTRDLEtBQUtnUyxPQUFMLENBQWF5VyxZQUF6RDtBQUNEO0FBQ0Q7QUFWQSxhQVdLOztBQUVILGlCQUFLem9CLFFBQUwsQ0FBY2lSLElBQWQsQ0FBbUIsS0FBS2UsT0FBTCxDQUFhcVksU0FBaEM7O0FBRUEsZ0JBQUksS0FBS3JZLE9BQUwsQ0FBYTBULE9BQWpCLEVBQTBCO0FBQ3hCLG1CQUFLRyxRQUFMLENBQWM1VSxJQUFkLENBQW1CLENBQW5CLEVBQXNCbVosUUFBdEI7QUFDRCxhQUZELE1BR0s7QUFDSEE7QUFDRDtBQUNGOztBQUVEO0FBQ0EsWUFBSSxLQUFLcFksT0FBTCxDQUFhbVksVUFBakIsRUFBNkI7QUFDM0J2ckIsWUFBRTBHLE1BQUYsRUFBVWtILEdBQVYsQ0FBYyxtQkFBZDtBQUNEOztBQUVELFlBQUksQ0FBQyxLQUFLd0YsT0FBTCxDQUFhMFQsT0FBZCxJQUF5QixLQUFLMVQsT0FBTCxDQUFhcVUsWUFBMUMsRUFBd0Q7QUFDdER6bkIsWUFBRSxNQUFGLEVBQVU0TixHQUFWLENBQWMsaUJBQWQ7QUFDRDs7QUFFRCxhQUFLeE0sUUFBTCxDQUFjd00sR0FBZCxDQUFrQixtQkFBbEI7O0FBRUEsaUJBQVM0ZCxRQUFULEdBQW9CO0FBQ2xCLGNBQUlwcEIsTUFBTWlvQixRQUFWLEVBQW9CO0FBQ2xCLGdCQUFJcnFCLEVBQUUsaUJBQUYsRUFBcUIrQyxNQUFyQixLQUFnQyxDQUFwQyxFQUF1QztBQUNyQy9DLGdCQUFFLFlBQUYsRUFBZ0JpRyxXQUFoQixDQUE0QixnQkFBNUI7QUFDRDtBQUNELGdCQUFHN0QsTUFBTThvQixpQkFBVCxFQUE0QjtBQUMxQmxyQixnQkFBRSxNQUFGLEVBQVUwZSxTQUFWLENBQW9CdGMsTUFBTThvQixpQkFBMUI7QUFDQTlvQixvQkFBTThvQixpQkFBTixHQUEwQixJQUExQjtBQUNEO0FBQ0YsV0FSRCxNQVNLO0FBQ0gsZ0JBQUlsckIsRUFBRSxpQkFBRixFQUFxQitDLE1BQXJCLEtBQWlDLENBQXJDLEVBQXdDO0FBQ3RDL0MsZ0JBQUUsTUFBRixFQUFVaUcsV0FBVixDQUFzQixnQkFBdEI7QUFDRDtBQUNGOztBQUdEL0YscUJBQVdtTCxRQUFYLENBQW9Cc0MsWUFBcEIsQ0FBaUN2TCxNQUFNaEIsUUFBdkM7O0FBRUFnQixnQkFBTWhCLFFBQU4sQ0FBZWIsSUFBZixDQUFvQixhQUFwQixFQUFtQyxJQUFuQzs7QUFFQTs7OztBQUlBNkIsZ0JBQU1oQixRQUFOLENBQWVFLE9BQWYsQ0FBdUIsa0JBQXZCO0FBQ0Q7O0FBRUQ7Ozs7QUFJQSxZQUFJLEtBQUs4UixPQUFMLENBQWFzWSxZQUFqQixFQUErQjtBQUM3QixlQUFLdHFCLFFBQUwsQ0FBY21qQixJQUFkLENBQW1CLEtBQUtuakIsUUFBTCxDQUFjbWpCLElBQWQsRUFBbkI7QUFDRDs7QUFFRCxhQUFLbEUsUUFBTCxHQUFnQixLQUFoQjtBQUNDLFlBQUlqZSxNQUFNZ1IsT0FBTixDQUFjd0wsUUFBbEIsRUFBNEI7QUFDMUIsY0FBSWxZLE9BQU80WSxPQUFQLENBQWVFLFlBQW5CLEVBQWlDO0FBQy9COVksbUJBQU80WSxPQUFQLENBQWVFLFlBQWYsQ0FBNEIsRUFBNUIsRUFBZ0M1YSxTQUFTK21CLEtBQXpDLEVBQWdEamxCLE9BQU95WCxRQUFQLENBQWdCeU4sSUFBaEIsQ0FBcUJqakIsT0FBckIsT0FBaUMsS0FBS2tILEVBQXRDLEVBQTRDLEVBQTVDLENBQWhEO0FBQ0QsV0FGRCxNQUVPO0FBQ0xuSixtQkFBT3lYLFFBQVAsQ0FBZ0JDLElBQWhCLEdBQXVCLEVBQXZCO0FBQ0Q7QUFDRjtBQUNIOztBQUVEOzs7OztBQS9iVztBQUFBO0FBQUEsK0JBbWNGO0FBQ1AsWUFBSSxLQUFLaUMsUUFBVCxFQUFtQjtBQUNqQixlQUFLWSxLQUFMO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZUFBS0QsSUFBTDtBQUNEO0FBQ0Y7QUF6Y1U7QUFBQTs7O0FBMmNYOzs7O0FBM2NXLGdDQStjRDtBQUNSLFlBQUksS0FBSzVOLE9BQUwsQ0FBYTBULE9BQWpCLEVBQTBCO0FBQ3hCLGVBQUsxbEIsUUFBTCxDQUFjMkUsUUFBZCxDQUF1Qi9GLEVBQUUsS0FBS29ULE9BQUwsQ0FBYXJOLFFBQWYsQ0FBdkIsRUFEd0IsQ0FDMEI7QUFDbEQsZUFBS2toQixRQUFMLENBQWM1VSxJQUFkLEdBQXFCekUsR0FBckIsR0FBMkIyVCxNQUEzQjtBQUNEO0FBQ0QsYUFBS25nQixRQUFMLENBQWNpUixJQUFkLEdBQXFCekUsR0FBckI7QUFDQSxhQUFLMFEsT0FBTCxDQUFhMVEsR0FBYixDQUFpQixLQUFqQjtBQUNBNU4sVUFBRTBHLE1BQUYsRUFBVWtILEdBQVYsaUJBQTRCLEtBQUtpQyxFQUFqQzs7QUFFQTNQLG1CQUFXc0IsZ0JBQVgsQ0FBNEIsSUFBNUI7QUFDRDtBQXpkVTs7QUFBQTtBQUFBOztBQTRkYjBvQixTQUFPL1EsUUFBUCxHQUFrQjtBQUNoQjs7Ozs7O0FBTUF5USxpQkFBYSxFQVBHO0FBUWhCOzs7Ozs7QUFNQUMsa0JBQWMsRUFkRTtBQWVoQjs7Ozs7O0FBTUF3QixlQUFXLENBckJLO0FBc0JoQjs7Ozs7O0FBTUFJLGVBQVcsQ0E1Qks7QUE2QmhCOzs7Ozs7QUFNQWhFLGtCQUFjLElBbkNFO0FBb0NoQjs7Ozs7O0FBTUE4RCxnQkFBWSxJQTFDSTtBQTJDaEI7Ozs7OztBQU1BUCxvQkFBZ0IsS0FqREE7QUFrRGhCOzs7Ozs7QUFNQWxnQixhQUFTLE1BeERPO0FBeURoQjs7Ozs7O0FBTUFDLGFBQVMsTUEvRE87QUFnRWhCOzs7Ozs7QUFNQXdmLGdCQUFZLEtBdEVJO0FBdUVoQjs7Ozs7O0FBTUFzQixrQkFBYyxFQTdFRTtBQThFaEI7Ozs7OztBQU1BL0UsYUFBUyxJQXBGTztBQXFGaEI7Ozs7OztBQU1BNEUsa0JBQWMsS0EzRkU7QUE0RmhCOzs7Ozs7QUFNQTlNLGNBQVUsS0FsR007QUFtR2Q7Ozs7OztBQU1GN1ksY0FBVTs7QUF6R00sR0FBbEI7O0FBNkdBO0FBQ0E3RixhQUFXTSxNQUFYLENBQWtCMHBCLE1BQWxCLEVBQTBCLFFBQTFCOztBQUVBLFdBQVM0QixXQUFULEdBQXVCO0FBQ3JCLFdBQU8sc0JBQXFCM2tCLElBQXJCLENBQTBCVCxPQUFPVSxTQUFQLENBQWlCQyxTQUEzQztBQUFQO0FBQ0Q7O0FBRUQsV0FBUzBrQixZQUFULEdBQXdCO0FBQ3RCLFdBQU8sV0FBVTVrQixJQUFWLENBQWVULE9BQU9VLFNBQVAsQ0FBaUJDLFNBQWhDO0FBQVA7QUFDRDs7QUFFRCxXQUFTaWpCLFdBQVQsR0FBdUI7QUFDckIsV0FBT3dCLGlCQUFpQkMsY0FBeEI7QUFDRDtBQUVBLENBeGxCQSxDQXdsQkNuakIsTUF4bEJELENBQUQ7QUNGQTs7Ozs7O0FBRUEsQ0FBQyxVQUFTNUksQ0FBVCxFQUFZOztBQUViOzs7Ozs7O0FBRmEsTUFTUGdzQixNQVRPO0FBVVg7Ozs7OztBQU1BLG9CQUFZL2lCLE9BQVosRUFBcUJtSyxPQUFyQixFQUE4QjtBQUFBOztBQUM1QixXQUFLaFMsUUFBTCxHQUFnQjZILE9BQWhCO0FBQ0EsV0FBS21LLE9BQUwsR0FBZXBULEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFhdWYsT0FBTzdTLFFBQXBCLEVBQThCLEtBQUsvWCxRQUFMLENBQWNDLElBQWQsRUFBOUIsRUFBb0QrUixPQUFwRCxDQUFmOztBQUVBLFdBQUtsUixLQUFMOztBQUVBaEMsaUJBQVdZLGNBQVgsQ0FBMEIsSUFBMUIsRUFBZ0MsUUFBaEM7QUFDRDs7QUFFRDs7Ozs7OztBQXpCVztBQUFBO0FBQUEsOEJBOEJIO0FBQ04sWUFBSW1yQixVQUFVLEtBQUs3cUIsUUFBTCxDQUFjOEgsTUFBZCxDQUFxQix5QkFBckIsQ0FBZDtBQUFBLFlBQ0kyRyxLQUFLLEtBQUt6TyxRQUFMLENBQWMsQ0FBZCxFQUFpQnlPLEVBQWpCLElBQXVCM1AsV0FBV2lCLFdBQVgsQ0FBdUIsQ0FBdkIsRUFBMEIsUUFBMUIsQ0FEaEM7QUFBQSxZQUVJaUIsUUFBUSxJQUZaOztBQUlBLFlBQUksQ0FBQzZwQixRQUFRbHBCLE1BQWIsRUFBcUI7QUFDbkIsZUFBS21wQixVQUFMLEdBQWtCLElBQWxCO0FBQ0Q7QUFDRCxhQUFLQyxVQUFMLEdBQWtCRixRQUFRbHBCLE1BQVIsR0FBaUJrcEIsT0FBakIsR0FBMkJqc0IsRUFBRSxLQUFLb1QsT0FBTCxDQUFhZ1osU0FBZixFQUEwQkMsU0FBMUIsQ0FBb0MsS0FBS2pyQixRQUF6QyxDQUE3QztBQUNBLGFBQUsrcUIsVUFBTCxDQUFnQm5hLFFBQWhCLENBQXlCLEtBQUtvQixPQUFMLENBQWFrWixjQUF0Qzs7QUFFQSxhQUFLbHJCLFFBQUwsQ0FBYzRRLFFBQWQsQ0FBdUIsS0FBS29CLE9BQUwsQ0FBYW1aLFdBQXBDLEVBQWlEaHNCLElBQWpELENBQXNELEVBQUUsZUFBZXNQLEVBQWpCLEVBQXFCLGVBQWVBLEVBQXBDLEVBQXREO0FBQ0EsWUFBSSxLQUFLdUQsT0FBTCxDQUFheEksTUFBYixLQUF3QixFQUE1QixFQUFnQztBQUM1QjVLLFlBQUUsTUFBTW9DLE1BQU1nUixPQUFOLENBQWN4SSxNQUF0QixFQUE4QnJLLElBQTlCLENBQW1DLEVBQUUsZUFBZXNQLEVBQWpCLEVBQW5DO0FBQ0g7O0FBRUQsYUFBSzJjLFdBQUwsR0FBbUIsS0FBS3BaLE9BQUwsQ0FBYXFaLFVBQWhDO0FBQ0EsYUFBS0MsT0FBTCxHQUFlLEtBQWY7QUFDQTFzQixVQUFFMEcsTUFBRixFQUFVeUwsR0FBVixDQUFjLGdCQUFkLEVBQWdDLFlBQVU7QUFDeEM7QUFDQS9QLGdCQUFNdXFCLGVBQU4sR0FBd0J2cUIsTUFBTWhCLFFBQU4sQ0FBZW9OLEdBQWYsQ0FBbUIsU0FBbkIsS0FBaUMsTUFBakMsR0FBMEMsQ0FBMUMsR0FBOENwTSxNQUFNaEIsUUFBTixDQUFlLENBQWYsRUFBa0I4SSxxQkFBbEIsR0FBMENOLE1BQWhIO0FBQ0F4SCxnQkFBTStwQixVQUFOLENBQWlCM2QsR0FBakIsQ0FBcUIsUUFBckIsRUFBK0JwTSxNQUFNdXFCLGVBQXJDO0FBQ0F2cUIsZ0JBQU13cUIsVUFBTixHQUFtQnhxQixNQUFNdXFCLGVBQXpCO0FBQ0EsY0FBR3ZxQixNQUFNZ1IsT0FBTixDQUFjeEksTUFBZCxLQUF5QixFQUE1QixFQUErQjtBQUM3QnhJLGtCQUFNa2MsT0FBTixHQUFnQnRlLEVBQUUsTUFBTW9DLE1BQU1nUixPQUFOLENBQWN4SSxNQUF0QixDQUFoQjtBQUNELFdBRkQsTUFFSztBQUNIeEksa0JBQU15cUIsWUFBTjtBQUNEOztBQUVEenFCLGdCQUFNMHFCLFNBQU4sQ0FBZ0IsWUFBVTtBQUN4QixnQkFBSUMsU0FBU3JtQixPQUFPOEQsV0FBcEI7QUFDQXBJLGtCQUFNNHFCLEtBQU4sQ0FBWSxLQUFaLEVBQW1CRCxNQUFuQjtBQUNBO0FBQ0EsZ0JBQUksQ0FBQzNxQixNQUFNc3FCLE9BQVgsRUFBb0I7QUFDbEJ0cUIsb0JBQU02cUIsYUFBTixDQUFxQkYsVUFBVTNxQixNQUFNOHFCLFFBQWpCLEdBQTZCLEtBQTdCLEdBQXFDLElBQXpEO0FBQ0Q7QUFDRixXQVBEO0FBUUE5cUIsZ0JBQU1pWCxPQUFOLENBQWN4SixHQUFHNUwsS0FBSCxDQUFTLEdBQVQsRUFBY2twQixPQUFkLEdBQXdCclYsSUFBeEIsQ0FBNkIsR0FBN0IsQ0FBZDtBQUNELFNBcEJEO0FBcUJEOztBQUVEOzs7Ozs7QUF2RVc7QUFBQTtBQUFBLHFDQTRFSTtBQUNiLFlBQUl4TyxNQUFNLEtBQUs4SixPQUFMLENBQWFnYSxTQUFiLElBQTBCLEVBQTFCLEdBQStCLENBQS9CLEdBQW1DLEtBQUtoYSxPQUFMLENBQWFnYSxTQUExRDtBQUFBLFlBQ0lDLE1BQU0sS0FBS2phLE9BQUwsQ0FBYWthLFNBQWIsSUFBeUIsRUFBekIsR0FBOEIxb0IsU0FBU3dQLGVBQVQsQ0FBeUJnUixZQUF2RCxHQUFzRSxLQUFLaFMsT0FBTCxDQUFha2EsU0FEN0Y7QUFBQSxZQUVJQyxNQUFNLENBQUNqa0IsR0FBRCxFQUFNK2pCLEdBQU4sQ0FGVjtBQUFBLFlBR0lHLFNBQVMsRUFIYjtBQUlBLGFBQUssSUFBSS9wQixJQUFJLENBQVIsRUFBV3dmLE1BQU1zSyxJQUFJeHFCLE1BQTFCLEVBQWtDVSxJQUFJd2YsR0FBSixJQUFXc0ssSUFBSTlwQixDQUFKLENBQTdDLEVBQXFEQSxHQUFyRCxFQUEwRDtBQUN4RCxjQUFJNmhCLEVBQUo7QUFDQSxjQUFJLE9BQU9pSSxJQUFJOXBCLENBQUosQ0FBUCxLQUFrQixRQUF0QixFQUFnQztBQUM5QjZoQixpQkFBS2lJLElBQUk5cEIsQ0FBSixDQUFMO0FBQ0QsV0FGRCxNQUVPO0FBQ0wsZ0JBQUlncUIsUUFBUUYsSUFBSTlwQixDQUFKLEVBQU9RLEtBQVAsQ0FBYSxHQUFiLENBQVo7QUFBQSxnQkFDSTJHLFNBQVM1SyxRQUFNeXRCLE1BQU0sQ0FBTixDQUFOLENBRGI7O0FBR0FuSSxpQkFBSzFhLE9BQU9qQixNQUFQLEdBQWdCTCxHQUFyQjtBQUNBLGdCQUFJbWtCLE1BQU0sQ0FBTixLQUFZQSxNQUFNLENBQU4sRUFBU3hzQixXQUFULE9BQTJCLFFBQTNDLEVBQXFEO0FBQ25EcWtCLG9CQUFNMWEsT0FBTyxDQUFQLEVBQVVWLHFCQUFWLEdBQWtDTixNQUF4QztBQUNEO0FBQ0Y7QUFDRDRqQixpQkFBTy9wQixDQUFQLElBQVk2aEIsRUFBWjtBQUNEOztBQUdELGFBQUtQLE1BQUwsR0FBY3lJLE1BQWQ7QUFDQTtBQUNEOztBQUVEOzs7Ozs7QUF0R1c7QUFBQTtBQUFBLDhCQTJHSDNkLEVBM0dHLEVBMkdDO0FBQ1YsWUFBSXpOLFFBQVEsSUFBWjtBQUFBLFlBQ0lxVixpQkFBaUIsS0FBS0EsY0FBTCxrQkFBbUM1SCxFQUR4RDtBQUVBLFlBQUksS0FBS2dTLElBQVQsRUFBZTtBQUFFO0FBQVM7QUFDMUIsWUFBSSxLQUFLNkwsUUFBVCxFQUFtQjtBQUNqQixlQUFLN0wsSUFBTCxHQUFZLElBQVo7QUFDQTdoQixZQUFFMEcsTUFBRixFQUFVa0gsR0FBVixDQUFjNkosY0FBZCxFQUNVbEssRUFEVixDQUNha0ssY0FEYixFQUM2QixVQUFTdlQsQ0FBVCxFQUFZO0FBQzlCLGdCQUFJOUIsTUFBTW9xQixXQUFOLEtBQXNCLENBQTFCLEVBQTZCO0FBQzNCcHFCLG9CQUFNb3FCLFdBQU4sR0FBb0JwcUIsTUFBTWdSLE9BQU4sQ0FBY3FaLFVBQWxDO0FBQ0FycUIsb0JBQU0wcUIsU0FBTixDQUFnQixZQUFXO0FBQ3pCMXFCLHNCQUFNNHFCLEtBQU4sQ0FBWSxLQUFaLEVBQW1CdG1CLE9BQU84RCxXQUExQjtBQUNELGVBRkQ7QUFHRCxhQUxELE1BS087QUFDTHBJLG9CQUFNb3FCLFdBQU47QUFDQXBxQixvQkFBTTRxQixLQUFOLENBQVksS0FBWixFQUFtQnRtQixPQUFPOEQsV0FBMUI7QUFDRDtBQUNILFdBWFQ7QUFZRDs7QUFFRCxhQUFLcEosUUFBTCxDQUFjd00sR0FBZCxDQUFrQixxQkFBbEIsRUFDY0wsRUFEZCxDQUNpQixxQkFEakIsRUFDd0MsVUFBU3JKLENBQVQsRUFBWUcsRUFBWixFQUFnQjtBQUN4Q2pDLGdCQUFNdXJCLGNBQU4sQ0FBcUI5ZCxFQUFyQjtBQUNmLFNBSEQ7O0FBS0EsYUFBS3pPLFFBQUwsQ0FBY21NLEVBQWQsQ0FBaUIscUJBQWpCLEVBQXdDLFVBQVVySixDQUFWLEVBQWFHLEVBQWIsRUFBaUI7QUFDckRqQyxnQkFBTXVyQixjQUFOLENBQXFCOWQsRUFBckI7QUFDSCxTQUZEOztBQUlBLFlBQUcsS0FBS3lPLE9BQVIsRUFBaUI7QUFDZixlQUFLQSxPQUFMLENBQWEvUSxFQUFiLENBQWdCLHFCQUFoQixFQUF1QyxVQUFVckosQ0FBVixFQUFhRyxFQUFiLEVBQWlCO0FBQ3BEakMsa0JBQU11ckIsY0FBTixDQUFxQjlkLEVBQXJCO0FBQ0gsV0FGRDtBQUdEO0FBQ0Y7O0FBRUQ7Ozs7OztBQS9JVztBQUFBO0FBQUEscUNBb0pJQSxFQXBKSixFQW9KUTtBQUNkLFlBQUl6TixRQUFRLElBQVo7QUFBQSxZQUNDcVYsaUJBQWlCLEtBQUtBLGNBQUwsa0JBQW1DNUgsRUFEckQ7O0FBR0F6TixjQUFNMHFCLFNBQU4sQ0FBZ0IsWUFBVztBQUMzQjFxQixnQkFBTTRxQixLQUFOLENBQVksS0FBWjtBQUNBLGNBQUk1cUIsTUFBTXNyQixRQUFWLEVBQW9CO0FBQ2xCLGdCQUFJLENBQUN0ckIsTUFBTXlmLElBQVgsRUFBaUI7QUFDZnpmLG9CQUFNaVgsT0FBTixDQUFjeEosRUFBZDtBQUNEO0FBQ0YsV0FKRCxNQUlPLElBQUl6TixNQUFNeWYsSUFBVixFQUFnQjtBQUNyQnpmLGtCQUFNd3JCLGVBQU4sQ0FBc0JuVyxjQUF0QjtBQUNEO0FBQ0YsU0FUQztBQVVKOztBQUVEOzs7Ozs7QUFwS1c7QUFBQTtBQUFBLHNDQXlLS0EsY0F6S0wsRUF5S3FCO0FBQzlCLGFBQUtvSyxJQUFMLEdBQVksS0FBWjtBQUNBN2hCLFVBQUUwRyxNQUFGLEVBQVVrSCxHQUFWLENBQWM2SixjQUFkOztBQUVBOzs7OztBQUtDLGFBQUtyVyxRQUFMLENBQWNFLE9BQWQsQ0FBc0IsaUJBQXRCO0FBQ0Y7O0FBRUQ7Ozs7Ozs7QUFyTFc7QUFBQTtBQUFBLDRCQTJMTHVzQixVQTNMSyxFQTJMT2QsTUEzTFAsRUEyTGU7QUFDeEIsWUFBSWMsVUFBSixFQUFnQjtBQUFFLGVBQUtmLFNBQUw7QUFBbUI7O0FBRXJDLFlBQUksQ0FBQyxLQUFLWSxRQUFWLEVBQW9CO0FBQ2xCLGNBQUksS0FBS2hCLE9BQVQsRUFBa0I7QUFDaEIsaUJBQUtPLGFBQUwsQ0FBbUIsSUFBbkI7QUFDRDtBQUNELGlCQUFPLEtBQVA7QUFDRDs7QUFFRCxZQUFJLENBQUNGLE1BQUwsRUFBYTtBQUFFQSxtQkFBU3JtQixPQUFPOEQsV0FBaEI7QUFBOEI7O0FBRTdDLFlBQUl1aUIsVUFBVSxLQUFLRyxRQUFuQixFQUE2QjtBQUMzQixjQUFJSCxVQUFVLEtBQUtlLFdBQW5CLEVBQWdDO0FBQzlCLGdCQUFJLENBQUMsS0FBS3BCLE9BQVYsRUFBbUI7QUFDakIsbUJBQUtxQixVQUFMO0FBQ0Q7QUFDRixXQUpELE1BSU87QUFDTCxnQkFBSSxLQUFLckIsT0FBVCxFQUFrQjtBQUNoQixtQkFBS08sYUFBTCxDQUFtQixLQUFuQjtBQUNEO0FBQ0Y7QUFDRixTQVZELE1BVU87QUFDTCxjQUFJLEtBQUtQLE9BQVQsRUFBa0I7QUFDaEIsaUJBQUtPLGFBQUwsQ0FBbUIsSUFBbkI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQ7Ozs7Ozs7O0FBeE5XO0FBQUE7QUFBQSxtQ0ErTkU7QUFDWCxZQUFJN3FCLFFBQVEsSUFBWjtBQUFBLFlBQ0k0ckIsVUFBVSxLQUFLNWEsT0FBTCxDQUFhNGEsT0FEM0I7QUFBQSxZQUVJQyxPQUFPRCxZQUFZLEtBQVosR0FBb0IsV0FBcEIsR0FBa0MsY0FGN0M7QUFBQSxZQUdJRSxhQUFhRixZQUFZLEtBQVosR0FBb0IsUUFBcEIsR0FBK0IsS0FIaEQ7QUFBQSxZQUlJeGYsTUFBTSxFQUpWOztBQU1BQSxZQUFJeWYsSUFBSixJQUFlLEtBQUs3YSxPQUFMLENBQWE2YSxJQUFiLENBQWY7QUFDQXpmLFlBQUl3ZixPQUFKLElBQWUsQ0FBZjtBQUNBeGYsWUFBSTBmLFVBQUosSUFBa0IsTUFBbEI7QUFDQSxhQUFLeEIsT0FBTCxHQUFlLElBQWY7QUFDQSxhQUFLdHJCLFFBQUwsQ0FBYzZFLFdBQWQsd0JBQStDaW9CLFVBQS9DLEVBQ2NsYyxRQURkLHFCQUN5Q2djLE9BRHpDLEVBRWN4ZixHQUZkLENBRWtCQSxHQUZsQjtBQUdhOzs7OztBQUhiLFNBUWNsTixPQVJkLHdCQVEyQzBzQixPQVIzQztBQVNBLGFBQUs1c0IsUUFBTCxDQUFjbU0sRUFBZCxDQUFpQixpRkFBakIsRUFBb0csWUFBVztBQUM3R25MLGdCQUFNMHFCLFNBQU47QUFDRCxTQUZEO0FBR0Q7O0FBRUQ7Ozs7Ozs7OztBQXhQVztBQUFBO0FBQUEsb0NBZ1FHcUIsS0FoUUgsRUFnUVU7QUFDbkIsWUFBSUgsVUFBVSxLQUFLNWEsT0FBTCxDQUFhNGEsT0FBM0I7QUFBQSxZQUNJSSxhQUFhSixZQUFZLEtBRDdCO0FBQUEsWUFFSXhmLE1BQU0sRUFGVjtBQUFBLFlBR0k2ZixXQUFXLENBQUMsS0FBS3RKLE1BQUwsR0FBYyxLQUFLQSxNQUFMLENBQVksQ0FBWixJQUFpQixLQUFLQSxNQUFMLENBQVksQ0FBWixDQUEvQixHQUFnRCxLQUFLdUosWUFBdEQsSUFBc0UsS0FBSzFCLFVBSDFGO0FBQUEsWUFJSXFCLE9BQU9HLGFBQWEsV0FBYixHQUEyQixjQUp0QztBQUFBLFlBS0lGLGFBQWFFLGFBQWEsUUFBYixHQUF3QixLQUx6QztBQUFBLFlBTUlHLGNBQWNKLFFBQVEsS0FBUixHQUFnQixRQU5sQzs7QUFRQTNmLFlBQUl5ZixJQUFKLElBQVksQ0FBWjs7QUFFQXpmLFlBQUksUUFBSixJQUFnQixNQUFoQjtBQUNBLFlBQUcyZixLQUFILEVBQVU7QUFDUjNmLGNBQUksS0FBSixJQUFhLENBQWI7QUFDRCxTQUZELE1BRU87QUFDTEEsY0FBSSxLQUFKLElBQWE2ZixRQUFiO0FBQ0Q7O0FBRUQsYUFBSzNCLE9BQUwsR0FBZSxLQUFmO0FBQ0EsYUFBS3RyQixRQUFMLENBQWM2RSxXQUFkLHFCQUE0QytuQixPQUE1QyxFQUNjaGMsUUFEZCx3QkFDNEN1YyxXQUQ1QyxFQUVjL2YsR0FGZCxDQUVrQkEsR0FGbEI7QUFHYTs7Ozs7QUFIYixTQVFjbE4sT0FSZCw0QkFRK0NpdEIsV0FSL0M7QUFTRDs7QUFFRDs7Ozs7OztBQTlSVztBQUFBO0FBQUEsZ0NBb1NEcGQsRUFwU0MsRUFvU0c7QUFDWixhQUFLdWMsUUFBTCxHQUFnQnh0QixXQUFXZ0csVUFBWCxDQUFzQjZHLEVBQXRCLENBQXlCLEtBQUtxRyxPQUFMLENBQWFvYixRQUF0QyxDQUFoQjtBQUNBLFlBQUksQ0FBQyxLQUFLZCxRQUFWLEVBQW9CO0FBQ2xCLGNBQUl2YyxNQUFNLE9BQU9BLEVBQVAsS0FBYyxVQUF4QixFQUFvQztBQUFFQTtBQUFPO0FBQzlDO0FBQ0QsWUFBSS9PLFFBQVEsSUFBWjtBQUFBLFlBQ0lxc0IsZUFBZSxLQUFLdEMsVUFBTCxDQUFnQixDQUFoQixFQUFtQmppQixxQkFBbkIsR0FBMkNMLEtBRDlEO0FBQUEsWUFFSTZrQixPQUFPaG9CLE9BQU9xSixnQkFBUCxDQUF3QixLQUFLb2MsVUFBTCxDQUFnQixDQUFoQixDQUF4QixDQUZYO0FBQUEsWUFHSXdDLFFBQVE3SixTQUFTNEosS0FBSyxjQUFMLENBQVQsRUFBK0IsRUFBL0IsQ0FIWjtBQUFBLFlBSUlFLFFBQVE5SixTQUFTNEosS0FBSyxlQUFMLENBQVQsRUFBZ0MsRUFBaEMsQ0FKWjs7QUFNQSxZQUFJLEtBQUtwUSxPQUFMLElBQWdCLEtBQUtBLE9BQUwsQ0FBYXZiLE1BQWpDLEVBQXlDO0FBQ3ZDLGVBQUt1ckIsWUFBTCxHQUFvQixLQUFLaFEsT0FBTCxDQUFhLENBQWIsRUFBZ0JwVSxxQkFBaEIsR0FBd0NOLE1BQTVEO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZUFBS2lqQixZQUFMO0FBQ0Q7O0FBRUQsYUFBS3pyQixRQUFMLENBQWNvTixHQUFkLENBQWtCO0FBQ2hCLHVCQUFnQmlnQixlQUFlRSxLQUFmLEdBQXVCQyxLQUF2QztBQURnQixTQUFsQjs7QUFJQSxZQUFJQyxxQkFBcUIsS0FBS3p0QixRQUFMLENBQWMsQ0FBZCxFQUFpQjhJLHFCQUFqQixHQUF5Q04sTUFBekMsSUFBbUQsS0FBSytpQixlQUFqRjtBQUNBLFlBQUksS0FBS3ZyQixRQUFMLENBQWNvTixHQUFkLENBQWtCLFNBQWxCLEtBQWdDLE1BQXBDLEVBQTRDO0FBQzFDcWdCLCtCQUFxQixDQUFyQjtBQUNEO0FBQ0QsYUFBS2xDLGVBQUwsR0FBdUJrQyxrQkFBdkI7QUFDQSxhQUFLMUMsVUFBTCxDQUFnQjNkLEdBQWhCLENBQW9CO0FBQ2xCNUUsa0JBQVFpbEI7QUFEVSxTQUFwQjtBQUdBLGFBQUtqQyxVQUFMLEdBQWtCaUMsa0JBQWxCOztBQUVBLFlBQUksQ0FBQyxLQUFLbkMsT0FBVixFQUFtQjtBQUNqQixjQUFJLEtBQUt0ckIsUUFBTCxDQUFjbWQsUUFBZCxDQUF1QixjQUF2QixDQUFKLEVBQTRDO0FBQzFDLGdCQUFJOFAsV0FBVyxDQUFDLEtBQUt0SixNQUFMLEdBQWMsS0FBS0EsTUFBTCxDQUFZLENBQVosSUFBaUIsS0FBS29ILFVBQUwsQ0FBZ0J4aUIsTUFBaEIsR0FBeUJMLEdBQXhELEdBQThELEtBQUtnbEIsWUFBcEUsSUFBb0YsS0FBSzFCLFVBQXhHO0FBQ0EsaUJBQUt4ckIsUUFBTCxDQUFjb04sR0FBZCxDQUFrQixLQUFsQixFQUF5QjZmLFFBQXpCO0FBQ0Q7QUFDRjs7QUFFRCxhQUFLUyxlQUFMLENBQXFCRCxrQkFBckIsRUFBeUMsWUFBVztBQUNsRCxjQUFJMWQsTUFBTSxPQUFPQSxFQUFQLEtBQWMsVUFBeEIsRUFBb0M7QUFBRUE7QUFBTztBQUM5QyxTQUZEO0FBR0Q7O0FBRUQ7Ozs7Ozs7QUEvVVc7QUFBQTtBQUFBLHNDQXFWS3liLFVBclZMLEVBcVZpQnpiLEVBclZqQixFQXFWcUI7QUFDOUIsWUFBSSxDQUFDLEtBQUt1YyxRQUFWLEVBQW9CO0FBQ2xCLGNBQUl2YyxNQUFNLE9BQU9BLEVBQVAsS0FBYyxVQUF4QixFQUFvQztBQUFFQTtBQUFPLFdBQTdDLE1BQ0s7QUFBRSxtQkFBTyxLQUFQO0FBQWU7QUFDdkI7QUFDRCxZQUFJNGQsT0FBT0MsT0FBTyxLQUFLNWIsT0FBTCxDQUFhNmIsU0FBcEIsQ0FBWDtBQUFBLFlBQ0lDLE9BQU9GLE9BQU8sS0FBSzViLE9BQUwsQ0FBYStiLFlBQXBCLENBRFg7QUFBQSxZQUVJakMsV0FBVyxLQUFLbkksTUFBTCxHQUFjLEtBQUtBLE1BQUwsQ0FBWSxDQUFaLENBQWQsR0FBK0IsS0FBS3pHLE9BQUwsQ0FBYTNVLE1BQWIsR0FBc0JMLEdBRnBFO0FBQUEsWUFHSXdrQixjQUFjLEtBQUsvSSxNQUFMLEdBQWMsS0FBS0EsTUFBTCxDQUFZLENBQVosQ0FBZCxHQUErQm1JLFdBQVcsS0FBS29CLFlBSGpFOztBQUlJO0FBQ0E7QUFDQXRKLG9CQUFZdGUsT0FBT3VlLFdBTnZCOztBQVFBLFlBQUksS0FBSzdSLE9BQUwsQ0FBYTRhLE9BQWIsS0FBeUIsS0FBN0IsRUFBb0M7QUFDbENkLHNCQUFZNkIsSUFBWjtBQUNBakIseUJBQWdCbEIsYUFBYW1DLElBQTdCO0FBQ0QsU0FIRCxNQUdPLElBQUksS0FBSzNiLE9BQUwsQ0FBYTRhLE9BQWIsS0FBeUIsUUFBN0IsRUFBdUM7QUFDNUNkLHNCQUFhbEksYUFBYTRILGFBQWFzQyxJQUExQixDQUFiO0FBQ0FwQix5QkFBZ0I5SSxZQUFZa0ssSUFBNUI7QUFDRCxTQUhNLE1BR0E7QUFDTDtBQUNEOztBQUVELGFBQUtoQyxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLGFBQUtZLFdBQUwsR0FBbUJBLFdBQW5COztBQUVBLFlBQUkzYyxNQUFNLE9BQU9BLEVBQVAsS0FBYyxVQUF4QixFQUFvQztBQUFFQTtBQUFPO0FBQzlDOztBQUVEOzs7Ozs7O0FBbFhXO0FBQUE7QUFBQSxnQ0F3WEQ7QUFDUixhQUFLOGIsYUFBTCxDQUFtQixJQUFuQjs7QUFFQSxhQUFLN3JCLFFBQUwsQ0FBYzZFLFdBQWQsQ0FBNkIsS0FBS21OLE9BQUwsQ0FBYW1aLFdBQTFDLDZCQUNjL2QsR0FEZCxDQUNrQjtBQUNINUUsa0JBQVEsRUFETDtBQUVITixlQUFLLEVBRkY7QUFHSEMsa0JBQVEsRUFITDtBQUlILHVCQUFhO0FBSlYsU0FEbEIsRUFPY3FFLEdBUGQsQ0FPa0IscUJBUGxCLEVBUWNBLEdBUmQsQ0FRa0IscUJBUmxCO0FBU0EsWUFBSSxLQUFLMFEsT0FBTCxJQUFnQixLQUFLQSxPQUFMLENBQWF2YixNQUFqQyxFQUF5QztBQUN2QyxlQUFLdWIsT0FBTCxDQUFhMVEsR0FBYixDQUFpQixrQkFBakI7QUFDRDtBQUNENU4sVUFBRTBHLE1BQUYsRUFBVWtILEdBQVYsQ0FBYyxLQUFLNkosY0FBbkI7O0FBRUEsWUFBSSxLQUFLeVUsVUFBVCxFQUFxQjtBQUNuQixlQUFLOXFCLFFBQUwsQ0FBY2d1QixNQUFkO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsZUFBS2pELFVBQUwsQ0FBZ0JsbUIsV0FBaEIsQ0FBNEIsS0FBS21OLE9BQUwsQ0FBYWtaLGNBQXpDLEVBQ2dCOWQsR0FEaEIsQ0FDb0I7QUFDSDVFLG9CQUFRO0FBREwsV0FEcEI7QUFJRDtBQUNEMUosbUJBQVdzQixnQkFBWCxDQUE0QixJQUE1QjtBQUNEO0FBbFpVOztBQUFBO0FBQUE7O0FBcVpid3FCLFNBQU83UyxRQUFQLEdBQWtCO0FBQ2hCOzs7Ozs7QUFNQWlULGVBQVcsbUNBUEs7QUFRaEI7Ozs7OztBQU1BNEIsYUFBUyxLQWRPO0FBZWhCOzs7Ozs7QUFNQXBqQixZQUFRLEVBckJRO0FBc0JoQjs7Ozs7O0FBTUF3aUIsZUFBVyxFQTVCSztBQTZCaEI7Ozs7OztBQU1BRSxlQUFXLEVBbkNLO0FBb0NoQjs7Ozs7O0FBTUEyQixlQUFXLENBMUNLO0FBMkNoQjs7Ozs7O0FBTUFFLGtCQUFjLENBakRFO0FBa0RoQjs7Ozs7O0FBTUFYLGNBQVUsUUF4RE07QUF5RGhCOzs7Ozs7QUFNQWpDLGlCQUFhLFFBL0RHO0FBZ0VoQjs7Ozs7O0FBTUFELG9CQUFnQixrQkF0RUE7QUF1RWhCOzs7Ozs7QUFNQUcsZ0JBQVksQ0FBQztBQTdFRyxHQUFsQjs7QUFnRkE7Ozs7QUFJQSxXQUFTdUMsTUFBVCxDQUFnQkssRUFBaEIsRUFBb0I7QUFDbEIsV0FBT3ZLLFNBQVNwZSxPQUFPcUosZ0JBQVAsQ0FBd0JuTCxTQUFTMEYsSUFBakMsRUFBdUMsSUFBdkMsRUFBNkNnbEIsUUFBdEQsRUFBZ0UsRUFBaEUsSUFBc0VELEVBQTdFO0FBQ0Q7O0FBRUQ7QUFDQW52QixhQUFXTSxNQUFYLENBQWtCd3JCLE1BQWxCLEVBQTBCLFFBQTFCO0FBRUMsQ0FoZkEsQ0FnZkNwakIsTUFoZkQsQ0FBRDtBQ0ZBOzs7Ozs7OztBQUVBLENBQUMsVUFBUzVJLENBQVQsRUFBWTs7QUFFYjs7Ozs7OztBQUZhLE1BU1B1dkIsSUFUTztBQVVYOzs7Ozs7O0FBT0Esa0JBQVl0bUIsT0FBWixFQUFxQm1LLE9BQXJCLEVBQThCO0FBQUE7O0FBQzVCLFdBQUtoUyxRQUFMLEdBQWdCNkgsT0FBaEI7QUFDQSxXQUFLbUssT0FBTCxHQUFlcFQsRUFBRXlNLE1BQUYsQ0FBUyxFQUFULEVBQWE4aUIsS0FBS3BXLFFBQWxCLEVBQTRCLEtBQUsvWCxRQUFMLENBQWNDLElBQWQsRUFBNUIsRUFBa0QrUixPQUFsRCxDQUFmOztBQUVBLFdBQUtsUixLQUFMO0FBQ0FoQyxpQkFBV1ksY0FBWCxDQUEwQixJQUExQixFQUFnQyxNQUFoQztBQUNBWixpQkFBV21MLFFBQVgsQ0FBb0IyQixRQUFwQixDQUE2QixNQUE3QixFQUFxQztBQUNuQyxpQkFBUyxNQUQwQjtBQUVuQyxpQkFBUyxNQUYwQjtBQUduQyx1QkFBZSxNQUhvQjtBQUluQyxvQkFBWSxVQUp1QjtBQUtuQyxzQkFBYyxNQUxxQjtBQU1uQyxzQkFBYztBQUNkO0FBQ0E7QUFSbUMsT0FBckM7QUFVRDs7QUFFRDs7Ozs7O0FBbkNXO0FBQUE7QUFBQSw4QkF1Q0g7QUFBQTs7QUFDTixZQUFJNUssUUFBUSxJQUFaOztBQUVBLGFBQUtoQixRQUFMLENBQWNiLElBQWQsQ0FBbUIsRUFBQyxRQUFRLFNBQVQsRUFBbkI7QUFDQSxhQUFLaXZCLFVBQUwsR0FBa0IsS0FBS3B1QixRQUFMLENBQWN1QyxJQUFkLE9BQXVCLEtBQUt5UCxPQUFMLENBQWFxYyxTQUFwQyxDQUFsQjtBQUNBLGFBQUs1USxXQUFMLEdBQW1CN2UsMkJBQXlCLEtBQUtvQixRQUFMLENBQWMsQ0FBZCxFQUFpQnlPLEVBQTFDLFFBQW5COztBQUVBLGFBQUsyZixVQUFMLENBQWdCdnRCLElBQWhCLENBQXFCLFlBQVU7QUFDN0IsY0FBSXlCLFFBQVExRCxFQUFFLElBQUYsQ0FBWjtBQUFBLGNBQ0lxZSxRQUFRM2EsTUFBTUMsSUFBTixDQUFXLEdBQVgsQ0FEWjtBQUFBLGNBRUkwYyxXQUFXM2MsTUFBTTZhLFFBQU4sTUFBa0JuYyxNQUFNZ1IsT0FBTixDQUFjc2MsZUFBaEMsQ0FGZjtBQUFBLGNBR0l0UixPQUFPQyxNQUFNLENBQU4sRUFBU0QsSUFBVCxDQUFjOWEsS0FBZCxDQUFvQixDQUFwQixDQUhYO0FBQUEsY0FJSXdhLFNBQVNPLE1BQU0sQ0FBTixFQUFTeE8sRUFBVCxHQUFjd08sTUFBTSxDQUFOLEVBQVN4TyxFQUF2QixHQUErQnVPLElBQS9CLFdBSmI7QUFBQSxjQUtJUyxjQUFjN2UsUUFBTW9lLElBQU4sQ0FMbEI7O0FBT0ExYSxnQkFBTW5ELElBQU4sQ0FBVyxFQUFDLFFBQVEsY0FBVCxFQUFYOztBQUVBOGQsZ0JBQU05ZCxJQUFOLENBQVc7QUFDVCxvQkFBUSxLQURDO0FBRVQsNkJBQWlCNmQsSUFGUjtBQUdULDZCQUFpQmlDLFFBSFI7QUFJVCxrQkFBTXZDO0FBSkcsV0FBWDs7QUFPQWUsc0JBQVl0ZSxJQUFaLENBQWlCO0FBQ2Ysb0JBQVEsVUFETztBQUVmLDJCQUFlLENBQUM4ZixRQUZEO0FBR2YsK0JBQW1CdkM7QUFISixXQUFqQjs7QUFNQSxjQUFHdUMsWUFBWWplLE1BQU1nUixPQUFOLENBQWNrVixTQUE3QixFQUF1QztBQUNyQ3RvQixjQUFFMEcsTUFBRixFQUFVK1gsSUFBVixDQUFlLFlBQVc7QUFDeEJ6ZSxnQkFBRSxZQUFGLEVBQWdCb1IsT0FBaEIsQ0FBd0IsRUFBRXNOLFdBQVdoYixNQUFNaUcsTUFBTixHQUFlTCxHQUE1QixFQUF4QixFQUEyRGxILE1BQU1nUixPQUFOLENBQWN1TCxtQkFBekUsRUFBOEYsWUFBTTtBQUNsR04sc0JBQU0zUSxLQUFOO0FBQ0QsZUFGRDtBQUdELGFBSkQ7QUFLRDtBQUNGLFNBOUJEO0FBK0JBLFlBQUcsS0FBSzBGLE9BQUwsQ0FBYXVjLFdBQWhCLEVBQTZCO0FBQzNCLGNBQUlDLFVBQVUsS0FBSy9RLFdBQUwsQ0FBaUJsYixJQUFqQixDQUFzQixLQUF0QixDQUFkOztBQUVBLGNBQUlpc0IsUUFBUTdzQixNQUFaLEVBQW9CO0FBQ2xCN0MsdUJBQVd5VCxjQUFYLENBQTBCaWMsT0FBMUIsRUFBbUMsS0FBS0MsVUFBTCxDQUFnQi9uQixJQUFoQixDQUFxQixJQUFyQixDQUFuQztBQUNELFdBRkQsTUFFTztBQUNMLGlCQUFLK25CLFVBQUw7QUFDRDtBQUNGOztBQUVBO0FBQ0QsYUFBSzNSLGNBQUwsR0FBc0IsWUFBTTtBQUMxQixjQUFJdFQsU0FBU2xFLE9BQU95WCxRQUFQLENBQWdCQyxJQUE3QjtBQUNBO0FBQ0EsY0FBR3hULE9BQU83SCxNQUFWLEVBQWtCO0FBQ2hCLGdCQUFJc2IsUUFBUSxPQUFLamQsUUFBTCxDQUFjdUMsSUFBZCxDQUFtQixhQUFXaUgsTUFBWCxHQUFrQixJQUFyQyxDQUFaO0FBQ0EsZ0JBQUl5VCxNQUFNdGIsTUFBVixFQUFrQjtBQUNoQixxQkFBSytzQixTQUFMLENBQWU5dkIsRUFBRTRLLE1BQUYsQ0FBZixFQUEwQixJQUExQjs7QUFFQTtBQUNBLGtCQUFJLE9BQUt3SSxPQUFMLENBQWFvTCxjQUFqQixFQUFpQztBQUMvQixvQkFBSTdVLFNBQVMsT0FBS3ZJLFFBQUwsQ0FBY3VJLE1BQWQsRUFBYjtBQUNBM0osa0JBQUUsWUFBRixFQUFnQm9SLE9BQWhCLENBQXdCLEVBQUVzTixXQUFXL1UsT0FBT0wsR0FBcEIsRUFBeEIsRUFBbUQsT0FBSzhKLE9BQUwsQ0FBYXVMLG1CQUFoRTtBQUNEOztBQUVEOzs7O0FBSUMscUJBQUt2ZCxRQUFMLENBQWNFLE9BQWQsQ0FBc0Isa0JBQXRCLEVBQTBDLENBQUMrYyxLQUFELEVBQVFyZSxFQUFFNEssTUFBRixDQUFSLENBQTFDO0FBQ0Q7QUFDRjtBQUNGLFNBckJGOztBQXVCQTtBQUNBLFlBQUksS0FBS3dJLE9BQUwsQ0FBYXdMLFFBQWpCLEVBQTJCO0FBQ3pCLGVBQUtWLGNBQUw7QUFDRDs7QUFFRCxhQUFLN0UsT0FBTDtBQUNEOztBQUVEOzs7OztBQXZIVztBQUFBO0FBQUEsZ0NBMkhEO0FBQ1IsYUFBSzBXLGNBQUw7QUFDQSxhQUFLQyxnQkFBTDtBQUNBLGFBQUtDLG1CQUFMLEdBQTJCLElBQTNCOztBQUVBLFlBQUksS0FBSzdjLE9BQUwsQ0FBYXVjLFdBQWpCLEVBQThCO0FBQzVCLGVBQUtNLG1CQUFMLEdBQTJCLEtBQUtKLFVBQUwsQ0FBZ0IvbkIsSUFBaEIsQ0FBcUIsSUFBckIsQ0FBM0I7O0FBRUE5SCxZQUFFMEcsTUFBRixFQUFVNkcsRUFBVixDQUFhLHVCQUFiLEVBQXNDLEtBQUswaUIsbUJBQTNDO0FBQ0Q7O0FBRUQsWUFBRyxLQUFLN2MsT0FBTCxDQUFhd0wsUUFBaEIsRUFBMEI7QUFDeEI1ZSxZQUFFMEcsTUFBRixFQUFVNkcsRUFBVixDQUFhLFVBQWIsRUFBeUIsS0FBSzJRLGNBQTlCO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7QUEzSVc7QUFBQTtBQUFBLHlDQStJUTtBQUNqQixZQUFJOWIsUUFBUSxJQUFaOztBQUVBLGFBQUtoQixRQUFMLENBQ0d3TSxHQURILENBQ08sZUFEUCxFQUVHTCxFQUZILENBRU0sZUFGTixRQUUyQixLQUFLNkYsT0FBTCxDQUFhcWMsU0FGeEMsRUFFcUQsVUFBU3ZyQixDQUFULEVBQVc7QUFDNURBLFlBQUV1SixjQUFGO0FBQ0F2SixZQUFFa1QsZUFBRjtBQUNBaFYsZ0JBQU04dEIsZ0JBQU4sQ0FBdUJsd0IsRUFBRSxJQUFGLENBQXZCO0FBQ0QsU0FOSDtBQU9EOztBQUVEOzs7OztBQTNKVztBQUFBO0FBQUEsdUNBK0pNO0FBQ2YsWUFBSW9DLFFBQVEsSUFBWjs7QUFFQSxhQUFLb3RCLFVBQUwsQ0FBZ0I1aEIsR0FBaEIsQ0FBb0IsaUJBQXBCLEVBQXVDTCxFQUF2QyxDQUEwQyxpQkFBMUMsRUFBNkQsVUFBU3JKLENBQVQsRUFBVztBQUN0RSxjQUFJQSxFQUFFd0gsS0FBRixLQUFZLENBQWhCLEVBQW1COztBQUduQixjQUFJdEssV0FBV3BCLEVBQUUsSUFBRixDQUFmO0FBQUEsY0FDRTJnQixZQUFZdmYsU0FBUzhILE1BQVQsQ0FBZ0IsSUFBaEIsRUFBc0IrSixRQUF0QixDQUErQixJQUEvQixDQURkO0FBQUEsY0FFRTJOLFlBRkY7QUFBQSxjQUdFQyxZQUhGOztBQUtBRixvQkFBVTFlLElBQVYsQ0FBZSxVQUFTd0IsQ0FBVCxFQUFZO0FBQ3pCLGdCQUFJekQsRUFBRSxJQUFGLEVBQVErTSxFQUFSLENBQVczTCxRQUFYLENBQUosRUFBMEI7QUFDeEIsa0JBQUlnQixNQUFNZ1IsT0FBTixDQUFjK2MsVUFBbEIsRUFBOEI7QUFDNUJ2UCwrQkFBZW5kLE1BQU0sQ0FBTixHQUFVa2QsVUFBVXlQLElBQVYsRUFBVixHQUE2QnpQLFVBQVV0VCxFQUFWLENBQWE1SixJQUFFLENBQWYsQ0FBNUM7QUFDQW9kLCtCQUFlcGQsTUFBTWtkLFVBQVU1ZCxNQUFWLEdBQWtCLENBQXhCLEdBQTRCNGQsVUFBVXhLLEtBQVYsRUFBNUIsR0FBZ0R3SyxVQUFVdFQsRUFBVixDQUFhNUosSUFBRSxDQUFmLENBQS9EO0FBQ0QsZUFIRCxNQUdPO0FBQ0xtZCwrQkFBZUQsVUFBVXRULEVBQVYsQ0FBYXBLLEtBQUt3RSxHQUFMLENBQVMsQ0FBVCxFQUFZaEUsSUFBRSxDQUFkLENBQWIsQ0FBZjtBQUNBb2QsK0JBQWVGLFVBQVV0VCxFQUFWLENBQWFwSyxLQUFLNmQsR0FBTCxDQUFTcmQsSUFBRSxDQUFYLEVBQWNrZCxVQUFVNWQsTUFBVixHQUFpQixDQUEvQixDQUFiLENBQWY7QUFDRDtBQUNEO0FBQ0Q7QUFDRixXQVhEOztBQWFBO0FBQ0E3QyxxQkFBV21MLFFBQVgsQ0FBb0JhLFNBQXBCLENBQThCaEksQ0FBOUIsRUFBaUMsTUFBakMsRUFBeUM7QUFDdkM4YyxrQkFBTSxnQkFBVztBQUNmNWYsdUJBQVN1QyxJQUFULENBQWMsY0FBZCxFQUE4QitKLEtBQTlCO0FBQ0F0TCxvQkFBTTh0QixnQkFBTixDQUF1Qjl1QixRQUF2QjtBQUNELGFBSnNDO0FBS3ZDOGQsc0JBQVUsb0JBQVc7QUFDbkIwQiwyQkFBYWpkLElBQWIsQ0FBa0IsY0FBbEIsRUFBa0MrSixLQUFsQztBQUNBdEwsb0JBQU04dEIsZ0JBQU4sQ0FBdUJ0UCxZQUF2QjtBQUNELGFBUnNDO0FBU3ZDN0Isa0JBQU0sZ0JBQVc7QUFDZjhCLDJCQUFhbGQsSUFBYixDQUFrQixjQUFsQixFQUFrQytKLEtBQWxDO0FBQ0F0TCxvQkFBTTh0QixnQkFBTixDQUF1QnJQLFlBQXZCO0FBQ0QsYUFac0M7QUFhdkNsVSxxQkFBUyxtQkFBVztBQUNsQnpJLGdCQUFFa1QsZUFBRjtBQUNBbFQsZ0JBQUV1SixjQUFGO0FBQ0Q7QUFoQnNDLFdBQXpDO0FBa0JELFNBekNEO0FBMENEOztBQUVEOzs7Ozs7OztBQTlNVztBQUFBO0FBQUEsdUNBcU5NOEssT0FyTk4sRUFxTmU4WCxjQXJOZixFQXFOK0I7O0FBRXhDOzs7QUFHQSxZQUFJOVgsUUFBUWdHLFFBQVIsTUFBb0IsS0FBS25MLE9BQUwsQ0FBYXNjLGVBQWpDLENBQUosRUFBeUQ7QUFDckQsY0FBRyxLQUFLdGMsT0FBTCxDQUFha2QsY0FBaEIsRUFBZ0M7QUFDNUIsaUJBQUtDLFlBQUwsQ0FBa0JoWSxPQUFsQjs7QUFFRDs7OztBQUlDLGlCQUFLblgsUUFBTCxDQUFjRSxPQUFkLENBQXNCLGtCQUF0QixFQUEwQyxDQUFDaVgsT0FBRCxDQUExQztBQUNIO0FBQ0Q7QUFDSDs7QUFFRCxZQUFJaVksVUFBVSxLQUFLcHZCLFFBQUwsQ0FDUnVDLElBRFEsT0FDQyxLQUFLeVAsT0FBTCxDQUFhcWMsU0FEZCxTQUMyQixLQUFLcmMsT0FBTCxDQUFhc2MsZUFEeEMsQ0FBZDtBQUFBLFlBRU1lLFdBQVdsWSxRQUFRNVUsSUFBUixDQUFhLGNBQWIsQ0FGakI7QUFBQSxZQUdNeWEsT0FBT3FTLFNBQVMsQ0FBVCxFQUFZclMsSUFIekI7QUFBQSxZQUlNc1MsaUJBQWlCLEtBQUs3UixXQUFMLENBQWlCbGIsSUFBakIsQ0FBc0J5YSxJQUF0QixDQUp2Qjs7QUFNQTtBQUNBLGFBQUttUyxZQUFMLENBQWtCQyxPQUFsQjs7QUFFQTtBQUNBLGFBQUtHLFFBQUwsQ0FBY3BZLE9BQWQ7O0FBRUE7QUFDQSxZQUFJLEtBQUtuRixPQUFMLENBQWF3TCxRQUFiLElBQXlCLENBQUN5UixjQUE5QixFQUE4QztBQUM1QyxjQUFJemxCLFNBQVMyTixRQUFRNVUsSUFBUixDQUFhLEdBQWIsRUFBa0JwRCxJQUFsQixDQUF1QixNQUF2QixDQUFiOztBQUVBLGNBQUksS0FBSzZTLE9BQUwsQ0FBYWlNLGFBQWpCLEVBQWdDO0FBQzlCQyxvQkFBUUMsU0FBUixDQUFrQixFQUFsQixFQUFzQixFQUF0QixFQUEwQjNVLE1BQTFCO0FBQ0QsV0FGRCxNQUVPO0FBQ0wwVSxvQkFBUUUsWUFBUixDQUFxQixFQUFyQixFQUF5QixFQUF6QixFQUE2QjVVLE1BQTdCO0FBQ0Q7QUFDRjs7QUFFRDs7OztBQUlBLGFBQUt4SixRQUFMLENBQWNFLE9BQWQsQ0FBc0IsZ0JBQXRCLEVBQXdDLENBQUNpWCxPQUFELEVBQVVtWSxjQUFWLENBQXhDOztBQUVBO0FBQ0FBLHVCQUFlL3NCLElBQWYsQ0FBb0IsZUFBcEIsRUFBcUNyQyxPQUFyQyxDQUE2QyxxQkFBN0M7QUFDRDs7QUFFRDs7Ozs7O0FBeFFXO0FBQUE7QUFBQSwrQkE2UUZpWCxPQTdRRSxFQTZRTztBQUNkLFlBQUlrWSxXQUFXbFksUUFBUTVVLElBQVIsQ0FBYSxjQUFiLENBQWY7QUFBQSxZQUNJeWEsT0FBT3FTLFNBQVMsQ0FBVCxFQUFZclMsSUFEdkI7QUFBQSxZQUVJc1MsaUJBQWlCLEtBQUs3UixXQUFMLENBQWlCbGIsSUFBakIsQ0FBc0J5YSxJQUF0QixDQUZyQjs7QUFJQTdGLGdCQUFRdkcsUUFBUixNQUFvQixLQUFLb0IsT0FBTCxDQUFhc2MsZUFBakM7O0FBRUFlLGlCQUFTbHdCLElBQVQsQ0FBYyxFQUFDLGlCQUFpQixNQUFsQixFQUFkOztBQUVBbXdCLHVCQUNHMWUsUUFESCxNQUNlLEtBQUtvQixPQUFMLENBQWF3ZCxnQkFENUIsRUFFR3J3QixJQUZILENBRVEsRUFBQyxlQUFlLE9BQWhCLEVBRlI7QUFHSDs7QUFFRDs7Ozs7O0FBM1JXO0FBQUE7QUFBQSxtQ0FnU0VnWSxPQWhTRixFQWdTVztBQUNwQixZQUFJc1ksaUJBQWlCdFksUUFDbEJ0UyxXQURrQixNQUNILEtBQUttTixPQUFMLENBQWFzYyxlQURWLEVBRWxCL3JCLElBRmtCLENBRWIsY0FGYSxFQUdsQnBELElBSGtCLENBR2IsRUFBRSxpQkFBaUIsT0FBbkIsRUFIYSxDQUFyQjs7QUFLQVAsZ0JBQU02d0IsZUFBZXR3QixJQUFmLENBQW9CLGVBQXBCLENBQU4sRUFDRzBGLFdBREgsTUFDa0IsS0FBS21OLE9BQUwsQ0FBYXdkLGdCQUQvQixFQUVHcndCLElBRkgsQ0FFUSxFQUFFLGVBQWUsTUFBakIsRUFGUjtBQUdEOztBQUVEOzs7Ozs7O0FBM1NXO0FBQUE7QUFBQSxnQ0FpVERpRCxJQWpUQyxFQWlUSzZzQixjQWpUTCxFQWlUcUI7QUFDOUIsWUFBSVMsS0FBSjs7QUFFQSxZQUFJLFFBQU90dEIsSUFBUCx5Q0FBT0EsSUFBUCxPQUFnQixRQUFwQixFQUE4QjtBQUM1QnN0QixrQkFBUXR0QixLQUFLLENBQUwsRUFBUXFNLEVBQWhCO0FBQ0QsU0FGRCxNQUVPO0FBQ0xpaEIsa0JBQVF0dEIsSUFBUjtBQUNEOztBQUVELFlBQUlzdEIsTUFBTXB2QixPQUFOLENBQWMsR0FBZCxJQUFxQixDQUF6QixFQUE0QjtBQUMxQm92Qix3QkFBWUEsS0FBWjtBQUNEOztBQUVELFlBQUl2WSxVQUFVLEtBQUtpWCxVQUFMLENBQWdCN3JCLElBQWhCLGNBQWdDbXRCLEtBQWhDLFNBQTJDNW5CLE1BQTNDLE9BQXNELEtBQUtrSyxPQUFMLENBQWFxYyxTQUFuRSxDQUFkOztBQUVBLGFBQUtTLGdCQUFMLENBQXNCM1gsT0FBdEIsRUFBK0I4WCxjQUEvQjtBQUNEO0FBalVVO0FBQUE7O0FBa1VYOzs7Ozs7OztBQWxVVyxtQ0EwVUU7QUFDWCxZQUFJNW9CLE1BQU0sQ0FBVjtBQUFBLFlBQ0lyRixRQUFRLElBRFosQ0FEVyxDQUVPOztBQUVsQixhQUFLeWMsV0FBTCxDQUNHbGIsSUFESCxPQUNZLEtBQUt5UCxPQUFMLENBQWEyZCxVQUR6QixFQUVHdmlCLEdBRkgsQ0FFTyxRQUZQLEVBRWlCLEVBRmpCLEVBR0d2TSxJQUhILENBR1EsWUFBVzs7QUFFZixjQUFJK3VCLFFBQVFoeEIsRUFBRSxJQUFGLENBQVo7QUFBQSxjQUNJcWdCLFdBQVcyUSxNQUFNelMsUUFBTixNQUFrQm5jLE1BQU1nUixPQUFOLENBQWN3ZCxnQkFBaEMsQ0FEZixDQUZlLENBR3FEOztBQUVwRSxjQUFJLENBQUN2USxRQUFMLEVBQWU7QUFDYjJRLGtCQUFNeGlCLEdBQU4sQ0FBVSxFQUFDLGNBQWMsUUFBZixFQUF5QixXQUFXLE9BQXBDLEVBQVY7QUFDRDs7QUFFRCxjQUFJeWlCLE9BQU8sS0FBSy9tQixxQkFBTCxHQUE2Qk4sTUFBeEM7O0FBRUEsY0FBSSxDQUFDeVcsUUFBTCxFQUFlO0FBQ2IyUSxrQkFBTXhpQixHQUFOLENBQVU7QUFDUiw0QkFBYyxFQUROO0FBRVIseUJBQVc7QUFGSCxhQUFWO0FBSUQ7O0FBRUQvRyxnQkFBTXdwQixPQUFPeHBCLEdBQVAsR0FBYXdwQixJQUFiLEdBQW9CeHBCLEdBQTFCO0FBQ0QsU0F0QkgsRUF1QkcrRyxHQXZCSCxDQXVCTyxRQXZCUCxFQXVCb0IvRyxHQXZCcEI7QUF3QkQ7O0FBRUQ7Ozs7O0FBeFdXO0FBQUE7QUFBQSxnQ0E0V0Q7QUFDUixhQUFLckcsUUFBTCxDQUNHdUMsSUFESCxPQUNZLEtBQUt5UCxPQUFMLENBQWFxYyxTQUR6QixFQUVHN2hCLEdBRkgsQ0FFTyxVQUZQLEVBRW1CeUUsSUFGbkIsR0FFMEJ2TixHQUYxQixHQUdHbkIsSUFISCxPQUdZLEtBQUt5UCxPQUFMLENBQWEyZCxVQUh6QixFQUlHMWUsSUFKSDs7QUFNQSxZQUFJLEtBQUtlLE9BQUwsQ0FBYXVjLFdBQWpCLEVBQThCO0FBQzVCLGNBQUksS0FBS00sbUJBQUwsSUFBNEIsSUFBaEMsRUFBc0M7QUFDbkNqd0IsY0FBRTBHLE1BQUYsRUFBVWtILEdBQVYsQ0FBYyx1QkFBZCxFQUF1QyxLQUFLcWlCLG1CQUE1QztBQUNGO0FBQ0Y7O0FBRUQsWUFBSSxLQUFLN2MsT0FBTCxDQUFhd0wsUUFBakIsRUFBMkI7QUFDekI1ZSxZQUFFMEcsTUFBRixFQUFVa0gsR0FBVixDQUFjLFVBQWQsRUFBMEIsS0FBS3NRLGNBQS9CO0FBQ0Q7O0FBRURoZSxtQkFBV3NCLGdCQUFYLENBQTRCLElBQTVCO0FBQ0Q7QUE5WFU7O0FBQUE7QUFBQTs7QUFpWWIrdEIsT0FBS3BXLFFBQUwsR0FBZ0I7QUFDZDs7Ozs7O0FBTUF5RixjQUFVLEtBUEk7O0FBU2Q7Ozs7OztBQU1BSixvQkFBZ0IsS0FmRjs7QUFpQmQ7Ozs7OztBQU1BRyx5QkFBcUIsR0F2QlA7O0FBeUJkOzs7Ozs7QUFNQVUsbUJBQWUsS0EvQkQ7O0FBaUNkOzs7Ozs7O0FBT0FpSixlQUFXLEtBeENHOztBQTBDZDs7Ozs7O0FBTUE2SCxnQkFBWSxJQWhERTs7QUFrRGQ7Ozs7OztBQU1BUixpQkFBYSxLQXhEQzs7QUEwRGQ7Ozs7OztBQU1BVyxvQkFBZ0IsS0FoRUY7O0FBa0VkOzs7Ozs7QUFNQWIsZUFBVyxZQXhFRzs7QUEwRWQ7Ozs7OztBQU1BQyxxQkFBaUIsV0FoRkg7O0FBa0ZkOzs7Ozs7QUFNQXFCLGdCQUFZLFlBeEZFOztBQTBGZDs7Ozs7O0FBTUFILHNCQUFrQjtBQWhHSixHQUFoQjs7QUFtR0E7QUFDQTF3QixhQUFXTSxNQUFYLENBQWtCK3VCLElBQWxCLEVBQXdCLE1BQXhCO0FBRUMsQ0F2ZUEsQ0F1ZUMzbUIsTUF2ZUQsQ0FBRDtBQ0ZBOzs7Ozs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWI7Ozs7Ozs7QUFGYSxNQVNQa3hCLE9BVE87QUFVWDs7Ozs7OztBQU9BLHFCQUFZam9CLE9BQVosRUFBcUJtSyxPQUFyQixFQUE4QjtBQUFBOztBQUM1QixXQUFLaFMsUUFBTCxHQUFnQjZILE9BQWhCO0FBQ0EsV0FBS21LLE9BQUwsR0FBZXBULEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFheWtCLFFBQVEvWCxRQUFyQixFQUErQmxRLFFBQVE1SCxJQUFSLEVBQS9CLEVBQStDK1IsT0FBL0MsQ0FBZjtBQUNBLFdBQUsxUyxTQUFMLEdBQWlCLEVBQWpCOztBQUVBLFdBQUt3QixLQUFMO0FBQ0EsV0FBS21YLE9BQUw7O0FBRUFuWixpQkFBV1ksY0FBWCxDQUEwQixJQUExQixFQUFnQyxTQUFoQztBQUNEOztBQUVEOzs7Ozs7O0FBNUJXO0FBQUE7QUFBQSw4QkFpQ0g7QUFDTixZQUFJNm9CLEtBQUo7QUFDQTtBQUNBLFlBQUksS0FBS3ZXLE9BQUwsQ0FBYWhDLE9BQWpCLEVBQTBCO0FBQ3hCdVksa0JBQVEsS0FBS3ZXLE9BQUwsQ0FBYWhDLE9BQWIsQ0FBcUJuTixLQUFyQixDQUEyQixHQUEzQixDQUFSOztBQUVBLGVBQUsybEIsV0FBTCxHQUFtQkQsTUFBTSxDQUFOLENBQW5CO0FBQ0EsZUFBS0UsWUFBTCxHQUFvQkYsTUFBTSxDQUFOLEtBQVksSUFBaEM7QUFDRDtBQUNEO0FBTkEsYUFPSztBQUNIQSxvQkFBUSxLQUFLdm9CLFFBQUwsQ0FBY0MsSUFBZCxDQUFtQixTQUFuQixDQUFSO0FBQ0E7QUFDQSxpQkFBS1gsU0FBTCxHQUFpQmlwQixNQUFNLENBQU4sTUFBYSxHQUFiLEdBQW1CQSxNQUFNcm1CLEtBQU4sQ0FBWSxDQUFaLENBQW5CLEdBQW9DcW1CLEtBQXJEO0FBQ0Q7O0FBRUQ7QUFDQSxZQUFJOVosS0FBSyxLQUFLek8sUUFBTCxDQUFjLENBQWQsRUFBaUJ5TyxFQUExQjtBQUNBN1AsMkJBQWlCNlAsRUFBakIseUJBQXVDQSxFQUF2QywwQkFBOERBLEVBQTlELFNBQ0d0UCxJQURILENBQ1EsZUFEUixFQUN5QnNQLEVBRHpCO0FBRUE7QUFDQSxhQUFLek8sUUFBTCxDQUFjYixJQUFkLENBQW1CLGVBQW5CLEVBQW9DLEtBQUthLFFBQUwsQ0FBYzJMLEVBQWQsQ0FBaUIsU0FBakIsSUFBOEIsS0FBOUIsR0FBc0MsSUFBMUU7QUFDRDs7QUFFRDs7Ozs7O0FBekRXO0FBQUE7QUFBQSxnQ0E4REQ7QUFDUixhQUFLM0wsUUFBTCxDQUFjd00sR0FBZCxDQUFrQixtQkFBbEIsRUFBdUNMLEVBQXZDLENBQTBDLG1CQUExQyxFQUErRCxLQUFLdVIsTUFBTCxDQUFZaFgsSUFBWixDQUFpQixJQUFqQixDQUEvRDtBQUNEOztBQUVEOzs7Ozs7O0FBbEVXO0FBQUE7QUFBQSwrQkF3RUY7QUFDUCxhQUFNLEtBQUtzTCxPQUFMLENBQWFoQyxPQUFiLEdBQXVCLGdCQUF2QixHQUEwQyxjQUFoRDtBQUNEO0FBMUVVO0FBQUE7QUFBQSxxQ0E0RUk7QUFDYixhQUFLaFEsUUFBTCxDQUFjK3ZCLFdBQWQsQ0FBMEIsS0FBS3p3QixTQUEvQjs7QUFFQSxZQUFJbWhCLE9BQU8sS0FBS3pnQixRQUFMLENBQWNtZCxRQUFkLENBQXVCLEtBQUs3ZCxTQUE1QixDQUFYO0FBQ0EsWUFBSW1oQixJQUFKLEVBQVU7QUFDUjs7OztBQUlBLGVBQUt6Z0IsUUFBTCxDQUFjRSxPQUFkLENBQXNCLGVBQXRCO0FBQ0QsU0FORCxNQU9LO0FBQ0g7Ozs7QUFJQSxlQUFLRixRQUFMLENBQWNFLE9BQWQsQ0FBc0IsZ0JBQXRCO0FBQ0Q7O0FBRUQsYUFBSzh2QixXQUFMLENBQWlCdlAsSUFBakI7QUFDQSxhQUFLemdCLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsZUFBbkIsRUFBb0NyQyxPQUFwQyxDQUE0QyxxQkFBNUM7QUFDRDtBQWpHVTtBQUFBO0FBQUEsdUNBbUdNO0FBQ2YsWUFBSWMsUUFBUSxJQUFaOztBQUVBLFlBQUksS0FBS2hCLFFBQUwsQ0FBYzJMLEVBQWQsQ0FBaUIsU0FBakIsQ0FBSixFQUFpQztBQUMvQjdNLHFCQUFXOFEsTUFBWCxDQUFrQkMsU0FBbEIsQ0FBNEIsS0FBSzdQLFFBQWpDLEVBQTJDLEtBQUt3b0IsV0FBaEQsRUFBNkQsWUFBVztBQUN0RXhuQixrQkFBTWd2QixXQUFOLENBQWtCLElBQWxCO0FBQ0EsaUJBQUs5dkIsT0FBTCxDQUFhLGVBQWI7QUFDQSxpQkFBS3FDLElBQUwsQ0FBVSxlQUFWLEVBQTJCckMsT0FBM0IsQ0FBbUMscUJBQW5DO0FBQ0QsV0FKRDtBQUtELFNBTkQsTUFPSztBQUNIcEIscUJBQVc4USxNQUFYLENBQWtCSyxVQUFsQixDQUE2QixLQUFLalEsUUFBbEMsRUFBNEMsS0FBS3lvQixZQUFqRCxFQUErRCxZQUFXO0FBQ3hFem5CLGtCQUFNZ3ZCLFdBQU4sQ0FBa0IsS0FBbEI7QUFDQSxpQkFBSzl2QixPQUFMLENBQWEsZ0JBQWI7QUFDQSxpQkFBS3FDLElBQUwsQ0FBVSxlQUFWLEVBQTJCckMsT0FBM0IsQ0FBbUMscUJBQW5DO0FBQ0QsV0FKRDtBQUtEO0FBQ0Y7QUFwSFU7QUFBQTtBQUFBLGtDQXNIQ3VnQixJQXRIRCxFQXNITztBQUNoQixhQUFLemdCLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixlQUFuQixFQUFvQ3NoQixPQUFPLElBQVAsR0FBYyxLQUFsRDtBQUNEOztBQUVEOzs7OztBQTFIVztBQUFBO0FBQUEsZ0NBOEhEO0FBQ1IsYUFBS3pnQixRQUFMLENBQWN3TSxHQUFkLENBQWtCLGFBQWxCO0FBQ0ExTixtQkFBV3NCLGdCQUFYLENBQTRCLElBQTVCO0FBQ0Q7QUFqSVU7O0FBQUE7QUFBQTs7QUFvSWIwdkIsVUFBUS9YLFFBQVIsR0FBbUI7QUFDakI7Ozs7OztBQU1BL0gsYUFBUztBQVBRLEdBQW5COztBQVVBO0FBQ0FsUixhQUFXTSxNQUFYLENBQWtCMHdCLE9BQWxCLEVBQTJCLFNBQTNCO0FBRUMsQ0FqSkEsQ0FpSkN0b0IsTUFqSkQsQ0FBRDtBQ0ZBOzs7Ozs7QUFFQSxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRWI7Ozs7Ozs7Ozs7QUFGYSxNQVlQcXhCLHVCQVpPO0FBYVg7Ozs7Ozs7QUFPQSxxQ0FBWXBvQixPQUFaLEVBQXFCbUssT0FBckIsRUFBOEI7QUFBQTs7QUFDNUIsV0FBS2hTLFFBQUwsR0FBZ0JwQixFQUFFaUosT0FBRixDQUFoQjtBQUNBLFdBQUttSyxPQUFMLEdBQWdCcFQsRUFBRXlNLE1BQUYsQ0FBUyxFQUFULEVBQWEsS0FBS3JMLFFBQUwsQ0FBY0MsSUFBZCxFQUFiLEVBQW1DK1IsT0FBbkMsQ0FBaEI7QUFDQSxXQUFLd1EsS0FBTCxHQUFhLEtBQUt4aUIsUUFBTCxDQUFjQyxJQUFkLENBQW1CLDJCQUFuQixDQUFiO0FBQ0EsV0FBS29uQixTQUFMLEdBQWlCLElBQWpCO0FBQ0EsV0FBS0MsYUFBTCxHQUFxQixJQUFyQjtBQUNBLFVBQUksQ0FBQyxLQUFLdG5CLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixJQUFuQixDQUFMLEVBQStCO0FBQzdCLGFBQUthLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixJQUFuQixFQUF3QkwsV0FBV2lCLFdBQVgsQ0FBdUIsQ0FBdkIsRUFBMEIseUJBQTFCLENBQXhCO0FBQ0Q7O0FBRUQsV0FBS2UsS0FBTDtBQUNBLFdBQUttWCxPQUFMOztBQUVBblosaUJBQVdZLGNBQVgsQ0FBMEIsSUFBMUIsRUFBZ0MseUJBQWhDO0FBQ0Q7O0FBRUQ7Ozs7Ozs7QUFwQ1c7QUFBQTtBQUFBLDhCQXlDSDtBQUNOO0FBQ0EsWUFBSSxPQUFPLEtBQUs4aUIsS0FBWixLQUFzQixRQUExQixFQUFvQztBQUNsQyxjQUFJK0UsWUFBWSxFQUFoQjs7QUFFQTtBQUNBLGNBQUkvRSxRQUFRLEtBQUtBLEtBQUwsQ0FBVzNmLEtBQVgsQ0FBaUIsR0FBakIsQ0FBWjs7QUFFQTtBQUNBLGVBQUssSUFBSVIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJbWdCLE1BQU03Z0IsTUFBMUIsRUFBa0NVLEdBQWxDLEVBQXVDO0FBQ3JDLGdCQUFJd2dCLE9BQU9MLE1BQU1uZ0IsQ0FBTixFQUFTUSxLQUFULENBQWUsR0FBZixDQUFYO0FBQ0EsZ0JBQUkya0IsV0FBVzNFLEtBQUtsaEIsTUFBTCxHQUFjLENBQWQsR0FBa0JraEIsS0FBSyxDQUFMLENBQWxCLEdBQTRCLE9BQTNDO0FBQ0EsZ0JBQUk0RSxhQUFhNUUsS0FBS2xoQixNQUFMLEdBQWMsQ0FBZCxHQUFrQmtoQixLQUFLLENBQUwsQ0FBbEIsR0FBNEJBLEtBQUssQ0FBTCxDQUE3Qzs7QUFFQSxnQkFBSTZFLFlBQVlELFVBQVosTUFBNEIsSUFBaEMsRUFBc0M7QUFDcENGLHdCQUFVQyxRQUFWLElBQXNCRSxZQUFZRCxVQUFaLENBQXRCO0FBQ0Q7QUFDRjs7QUFFRCxlQUFLakYsS0FBTCxHQUFhK0UsU0FBYjtBQUNEOztBQUVELGFBQUsySSxjQUFMOztBQUVBLFlBQUksQ0FBQ3R4QixFQUFFK29CLGFBQUYsQ0FBZ0IsS0FBS25GLEtBQXJCLENBQUwsRUFBa0M7QUFDaEMsZUFBS29GLGtCQUFMO0FBQ0Q7QUFDRjtBQXBFVTtBQUFBO0FBQUEsdUNBc0VNO0FBQ2Y7QUFDQSxZQUFJNW1CLFFBQVEsSUFBWjtBQUNBQSxjQUFNbXZCLFVBQU4sR0FBbUIsRUFBbkI7QUFDQSxhQUFLLElBQUk5bEIsR0FBVCxJQUFnQnFkLFdBQWhCLEVBQTZCO0FBQzNCLGNBQUlBLFlBQVluYSxjQUFaLENBQTJCbEQsR0FBM0IsQ0FBSixFQUFxQztBQUNuQyxnQkFBSStsQixNQUFNMUksWUFBWXJkLEdBQVosQ0FBVjtBQUNBLGdCQUFJO0FBQ0Ysa0JBQUlnbUIsY0FBY3p4QixFQUFFLFdBQUYsQ0FBbEI7QUFDQSxrQkFBSTB4QixZQUFZLElBQUlGLElBQUloeEIsTUFBUixDQUFlaXhCLFdBQWYsRUFBMkJydkIsTUFBTWdSLE9BQWpDLENBQWhCO0FBQ0EsbUJBQUssSUFBSXVlLE1BQVQsSUFBbUJELFVBQVV0ZSxPQUE3QixFQUFzQztBQUNwQyxvQkFBSXNlLFVBQVV0ZSxPQUFWLENBQWtCekUsY0FBbEIsQ0FBaUNnakIsTUFBakMsS0FBNENBLFdBQVcsVUFBM0QsRUFBdUU7QUFDckUsc0JBQUlDLFNBQVNGLFVBQVV0ZSxPQUFWLENBQWtCdWUsTUFBbEIsQ0FBYjtBQUNBdnZCLHdCQUFNbXZCLFVBQU4sQ0FBaUJJLE1BQWpCLElBQTJCQyxNQUEzQjtBQUNEO0FBQ0Y7QUFDREYsd0JBQVV2SSxPQUFWO0FBQ0QsYUFWRCxDQVdBLE9BQU1qbEIsQ0FBTixFQUFTLENBQ1I7QUFDRjtBQUNGO0FBQ0Y7O0FBRUQ7Ozs7OztBQTlGVztBQUFBO0FBQUEsZ0NBbUdEO0FBQ1IsWUFBSTlCLFFBQVEsSUFBWjs7QUFFQXBDLFVBQUUwRyxNQUFGLEVBQVU2RyxFQUFWLENBQWEsdUJBQWIsRUFBc0MsWUFBVztBQUMvQ25MLGdCQUFNNG1CLGtCQUFOO0FBQ0QsU0FGRDtBQUdEOztBQUVEOzs7Ozs7QUEzR1c7QUFBQTtBQUFBLDJDQWdIVTtBQUNuQixZQUFJQyxTQUFKO0FBQUEsWUFBZTdtQixRQUFRLElBQXZCO0FBQ0E7QUFDQXBDLFVBQUVpQyxJQUFGLENBQU8sS0FBSzJoQixLQUFaLEVBQW1CLFVBQVNuWSxHQUFULEVBQWM7QUFDL0IsY0FBSXZMLFdBQVdnRyxVQUFYLENBQXNCNkksT0FBdEIsQ0FBOEJ0RCxHQUE5QixDQUFKLEVBQXdDO0FBQ3RDd2Qsd0JBQVl4ZCxHQUFaO0FBQ0Q7QUFDRixTQUpEOztBQU1BO0FBQ0EsWUFBSSxDQUFDd2QsU0FBTCxFQUFnQjs7QUFFaEI7QUFDQSxZQUFJLEtBQUtQLGFBQUwsWUFBOEIsS0FBSzlFLEtBQUwsQ0FBV3FGLFNBQVgsRUFBc0J6b0IsTUFBeEQsRUFBZ0U7O0FBRWhFO0FBQ0FSLFVBQUVpQyxJQUFGLENBQU82bUIsV0FBUCxFQUFvQixVQUFTcmQsR0FBVCxFQUFjbUQsS0FBZCxFQUFxQjtBQUN2Q3hNLGdCQUFNaEIsUUFBTixDQUFlNkUsV0FBZixDQUEyQjJJLE1BQU1zYSxRQUFqQztBQUNELFNBRkQ7O0FBSUE7QUFDQSxhQUFLOW5CLFFBQUwsQ0FBYzRRLFFBQWQsQ0FBdUIsS0FBSzRSLEtBQUwsQ0FBV3FGLFNBQVgsRUFBc0JDLFFBQTdDOztBQUVBO0FBQ0EsWUFBSSxLQUFLUixhQUFULEVBQXdCO0FBQ3RCO0FBQ0EsY0FBSSxDQUFDLEtBQUtBLGFBQUwsQ0FBbUJ0bkIsUUFBbkIsQ0FBNEJDLElBQTVCLENBQWlDLFVBQWpDLENBQUQsSUFBaUQsS0FBS3d3QixXQUExRCxFQUF1RSxLQUFLbkosYUFBTCxDQUFtQnRuQixRQUFuQixDQUE0QkMsSUFBNUIsQ0FBaUMsVUFBakMsRUFBNEMsS0FBS3d3QixXQUFqRDtBQUN2RSxlQUFLbkosYUFBTCxDQUFtQlMsT0FBbkI7QUFDRDtBQUNELGFBQUsySSxhQUFMLENBQW1CLEtBQUtsTyxLQUFMLENBQVdxRixTQUFYLEVBQXNCQyxRQUF6QztBQUNBLGFBQUtSLGFBQUwsR0FBcUIsSUFBSSxLQUFLOUUsS0FBTCxDQUFXcUYsU0FBWCxFQUFzQnpvQixNQUExQixDQUFpQyxLQUFLWSxRQUF0QyxFQUFnRCxFQUFoRCxDQUFyQjtBQUNBLGFBQUt5d0IsV0FBTCxHQUFtQixLQUFLbkosYUFBTCxDQUFtQnRuQixRQUFuQixDQUE0QkMsSUFBNUIsQ0FBaUMsVUFBakMsQ0FBbkI7QUFFRDtBQWpKVTtBQUFBO0FBQUEsb0NBbUpHMHdCLEtBbkpILEVBbUpTO0FBQ2xCLFlBQUkzdkIsUUFBUSxJQUFaO0FBQUEsWUFBa0I0dkIsYUFBYSxXQUEvQjtBQUNBLFlBQUlDLFVBQVVqeUIsRUFBRSx3QkFBc0IsS0FBS29CLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixJQUFuQixDQUF0QixHQUErQyxHQUFqRCxDQUFkO0FBQ0EsWUFBSTB4QixRQUFRbHZCLE1BQVosRUFBb0JpdkIsYUFBYSxNQUFiO0FBQ3BCLFlBQUlBLGVBQWVELEtBQW5CLEVBQTBCO0FBQ3hCO0FBQ0Q7O0FBRUQsWUFBSUcsWUFBWTl2QixNQUFNbXZCLFVBQU4sQ0FBaUI5QixTQUFqQixHQUEyQnJ0QixNQUFNbXZCLFVBQU4sQ0FBaUI5QixTQUE1QyxHQUFzRCxZQUF0RTtBQUNBLFlBQUkwQyxZQUFZL3ZCLE1BQU1tdkIsVUFBTixDQUFpQlIsVUFBakIsR0FBNEIzdUIsTUFBTW12QixVQUFOLENBQWlCUixVQUE3QyxHQUF3RCxZQUF4RTs7QUFFQSxhQUFLM3ZCLFFBQUwsQ0FBY08sVUFBZCxDQUF5QixNQUF6QjtBQUNBLFlBQUl5d0IsV0FBVyxLQUFLaHhCLFFBQUwsQ0FBYzZSLFFBQWQsQ0FBdUIsTUFBSWlmLFNBQUosR0FBYyx3QkFBckMsRUFBK0Rqc0IsV0FBL0QsQ0FBMkVpc0IsU0FBM0UsRUFBc0Zqc0IsV0FBdEYsQ0FBa0csZ0JBQWxHLEVBQW9IdEUsVUFBcEgsQ0FBK0gscUJBQS9ILENBQWY7QUFDQSxZQUFJMHdCLFlBQVlELFNBQVNuZixRQUFULENBQWtCLEdBQWxCLEVBQXVCaE4sV0FBdkIsQ0FBbUMsaUJBQW5DLENBQWhCOztBQUVBLFlBQUkrckIsZUFBZSxNQUFuQixFQUEyQjtBQUN6QkMsb0JBQVVBLFFBQVFoZixRQUFSLENBQWlCLE1BQUlrZixTQUFyQixFQUFnQ2xzQixXQUFoQyxDQUE0Q2tzQixTQUE1QyxFQUF1RHh3QixVQUF2RCxDQUFrRSxNQUFsRSxFQUEwRUEsVUFBMUUsQ0FBcUYsYUFBckYsRUFBb0dBLFVBQXBHLENBQStHLGlCQUEvRyxDQUFWO0FBQ0Fzd0Isa0JBQVFoZixRQUFSLENBQWlCLEdBQWpCLEVBQXNCdFIsVUFBdEIsQ0FBaUMsTUFBakMsRUFBeUNBLFVBQXpDLENBQW9ELGVBQXBELEVBQXFFQSxVQUFyRSxDQUFnRixlQUFoRjtBQUNELFNBSEQsTUFHSztBQUNIc3dCLG9CQUFVRyxTQUFTbmYsUUFBVCxDQUFrQixvQkFBbEIsRUFBd0NoTixXQUF4QyxDQUFvRCxtQkFBcEQsQ0FBVjtBQUNEOztBQUVEZ3NCLGdCQUFRempCLEdBQVIsQ0FBWSxFQUFDOGpCLFNBQVEsRUFBVCxFQUFZQyxZQUFXLEVBQXZCLEVBQVo7QUFDQUgsaUJBQVM1akIsR0FBVCxDQUFhLEVBQUM4akIsU0FBUSxFQUFULEVBQVlDLFlBQVcsRUFBdkIsRUFBYjtBQUNBLFlBQUlSLFVBQVUsV0FBZCxFQUEyQjtBQUN6QkUsa0JBQVFod0IsSUFBUixDQUFhLFVBQVN3SixHQUFULEVBQWFtRCxLQUFiLEVBQW1CO0FBQzlCNU8sY0FBRTRPLEtBQUYsRUFBUzdJLFFBQVQsQ0FBa0Jxc0IsU0FBU2xqQixHQUFULENBQWF6RCxHQUFiLENBQWxCLEVBQXFDdUcsUUFBckMsQ0FBOEMsbUJBQTlDLEVBQW1FelIsSUFBbkUsQ0FBd0Usa0JBQXhFLEVBQTJGLEVBQTNGLEVBQStGMEYsV0FBL0YsQ0FBMkcsV0FBM0csRUFBd0h1SSxHQUF4SCxDQUE0SCxFQUFDNUUsUUFBTyxFQUFSLEVBQTVIO0FBQ0E1SixjQUFFLHdCQUFzQm9DLE1BQU1oQixRQUFOLENBQWViLElBQWYsQ0FBb0IsSUFBcEIsQ0FBdEIsR0FBZ0QsR0FBbEQsRUFBdURnZ0IsS0FBdkQsQ0FBNkQsK0JBQTZCbmUsTUFBTWhCLFFBQU4sQ0FBZWIsSUFBZixDQUFvQixJQUFwQixDQUE3QixHQUF1RCxVQUFwSCxFQUFnSWdoQixNQUFoSTtBQUNBNlEscUJBQVNwZ0IsUUFBVCxDQUFrQixnQkFBbEIsRUFBb0N6UixJQUFwQyxDQUF5QyxxQkFBekMsRUFBK0QsRUFBL0Q7QUFDQTh4QixzQkFBVXJnQixRQUFWLENBQW1CLGlCQUFuQjtBQUNELFdBTEQ7QUFNRCxTQVBELE1BT00sSUFBSStmLFVBQVUsTUFBZCxFQUFxQjtBQUN6QixjQUFJUyxlQUFleHlCLEVBQUUsd0JBQXNCb0MsTUFBTWhCLFFBQU4sQ0FBZWIsSUFBZixDQUFvQixJQUFwQixDQUF0QixHQUFnRCxHQUFsRCxDQUFuQjtBQUNBLGNBQUlreUIsZUFBZXp5QixFQUFFLHVCQUFxQm9DLE1BQU1oQixRQUFOLENBQWViLElBQWYsQ0FBb0IsSUFBcEIsQ0FBdkIsQ0FBbkI7QUFDQSxjQUFJa3lCLGFBQWExdkIsTUFBakIsRUFBeUI7QUFDdkJ5dkIsMkJBQWV4eUIsRUFBRSxrQ0FBRixFQUFzQzB5QixXQUF0QyxDQUFrREQsWUFBbEQsRUFBZ0VseUIsSUFBaEUsQ0FBcUUsbUJBQXJFLEVBQXlGNkIsTUFBTWhCLFFBQU4sQ0FBZWIsSUFBZixDQUFvQixJQUFwQixDQUF6RixDQUFmO0FBQ0FreUIseUJBQWFsUixNQUFiO0FBQ0QsV0FIRCxNQUdLO0FBQ0hpUiwyQkFBZXh5QixFQUFFLGtDQUFGLEVBQXNDMHlCLFdBQXRDLENBQWtEdHdCLE1BQU1oQixRQUF4RCxFQUFrRWIsSUFBbEUsQ0FBdUUsbUJBQXZFLEVBQTJGNkIsTUFBTWhCLFFBQU4sQ0FBZWIsSUFBZixDQUFvQixJQUFwQixDQUEzRixDQUFmO0FBQ0Q7QUFDRDB4QixrQkFBUWh3QixJQUFSLENBQWEsVUFBU3dKLEdBQVQsRUFBYW1ELEtBQWIsRUFBbUI7QUFDOUIsZ0JBQUkrakIsWUFBWTN5QixFQUFFNE8sS0FBRixFQUFTN0ksUUFBVCxDQUFrQnlzQixZQUFsQixFQUFnQ3hnQixRQUFoQyxDQUF5Q21nQixTQUF6QyxDQUFoQjtBQUNBLGdCQUFJL1QsT0FBT2lVLFVBQVVuakIsR0FBVixDQUFjekQsR0FBZCxFQUFtQjJTLElBQW5CLENBQXdCOWEsS0FBeEIsQ0FBOEIsQ0FBOUIsQ0FBWDtBQUNBLGdCQUFJdU0sS0FBSzdQLEVBQUU0TyxLQUFGLEVBQVNyTyxJQUFULENBQWMsSUFBZCxLQUF1QkwsV0FBV2lCLFdBQVgsQ0FBdUIsQ0FBdkIsRUFBMEIsV0FBMUIsQ0FBaEM7QUFDQSxnQkFBSWlkLFNBQVN2TyxFQUFiLEVBQWlCO0FBQ2Ysa0JBQUl1TyxTQUFTLEVBQWIsRUFBaUI7QUFDZnBlLGtCQUFFNE8sS0FBRixFQUFTck8sSUFBVCxDQUFjLElBQWQsRUFBbUI2ZCxJQUFuQjtBQUNELGVBRkQsTUFFSztBQUNIQSx1QkFBT3ZPLEVBQVA7QUFDQTdQLGtCQUFFNE8sS0FBRixFQUFTck8sSUFBVCxDQUFjLElBQWQsRUFBbUI2ZCxJQUFuQjtBQUNBcGUsa0JBQUVxeUIsVUFBVW5qQixHQUFWLENBQWN6RCxHQUFkLENBQUYsRUFBc0JsTCxJQUF0QixDQUEyQixNQUEzQixFQUFrQ1AsRUFBRXF5QixVQUFVbmpCLEdBQVYsQ0FBY3pELEdBQWQsQ0FBRixFQUFzQmxMLElBQXRCLENBQTJCLE1BQTNCLEVBQW1Db0ksT0FBbkMsQ0FBMkMsR0FBM0MsRUFBK0MsRUFBL0MsSUFBbUQsR0FBbkQsR0FBdUR5VixJQUF6RjtBQUNEO0FBQ0Y7QUFDRCxnQkFBSWlDLFdBQVdyZ0IsRUFBRW95QixTQUFTbGpCLEdBQVQsQ0FBYXpELEdBQWIsQ0FBRixFQUFxQjhTLFFBQXJCLENBQThCLFdBQTlCLENBQWY7QUFDQSxnQkFBSThCLFFBQUosRUFBYztBQUNac1Msd0JBQVUzZ0IsUUFBVixDQUFtQixXQUFuQjtBQUNEO0FBQ0YsV0FqQkQ7QUFrQkFvZ0IsbUJBQVNwZ0IsUUFBVCxDQUFrQmtnQixTQUFsQjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7O0FBak5XO0FBQUE7QUFBQSxnQ0FxTkQ7QUFDUixZQUFJLEtBQUt4SixhQUFULEVBQXdCLEtBQUtBLGFBQUwsQ0FBbUJTLE9BQW5CO0FBQ3hCbnBCLFVBQUUwRyxNQUFGLEVBQVVrSCxHQUFWLENBQWMsNkJBQWQ7QUFDQTFOLG1CQUFXc0IsZ0JBQVgsQ0FBNEIsSUFBNUI7QUFDRDtBQXpOVTs7QUFBQTtBQUFBOztBQTROYjZ2QiwwQkFBd0JsWSxRQUF4QixHQUFtQyxFQUFuQzs7QUFFQTtBQUNBLE1BQUkyUCxjQUFjO0FBQ2hCOEosVUFBTTtBQUNKMUosZ0JBQVUsTUFETjtBQUVKMW9CLGNBQVFOLFdBQVdFLFFBQVgsQ0FBb0J3eUIsSUFBcEIsSUFBNEI7QUFGaEMsS0FEVTtBQUtoQnRKLGVBQVc7QUFDVEosZ0JBQVUsV0FERDtBQUVUMW9CLGNBQVFOLFdBQVdFLFFBQVgsQ0FBb0JrcEIsU0FBcEIsSUFBaUM7QUFGaEM7QUFMSyxHQUFsQjs7QUFXQTtBQUNBcHBCLGFBQVdNLE1BQVgsQ0FBa0I2d0IsdUJBQWxCLEVBQTJDLHlCQUEzQztBQUVDLENBN09BLENBNk9Dem9CLE1BN09ELENBQUQ7Ozs7O0FDRkE7Ozs7Ozs7QUFPQyxXQUFVaXFCLE9BQVYsRUFBbUI7QUFDbkIsS0FBSSxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxPQUFPQyxHQUEzQyxFQUFnRDtBQUMvQztBQUNBRCxTQUFPLENBQUMsUUFBRCxDQUFQLEVBQW1CRCxPQUFuQjtBQUNBLEVBSEQsTUFHTyxJQUFJLFFBQU9HLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDdkM7QUFDQUgsVUFBUUksUUFBUSxRQUFSLENBQVI7QUFDQSxFQUhNLE1BR0E7QUFDTjtBQUNBSixVQUFRanFCLE1BQVI7QUFDQTtBQUNELENBWEEsRUFXQyxVQUFVNUksQ0FBVixFQUFhOztBQUVkLEtBQUlrekIsU0FBUyxLQUFiOztBQUVBLFVBQVNDLE1BQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2xCLFNBQU9DLE9BQU9DLEdBQVAsR0FBYUYsQ0FBYixHQUFpQkcsbUJBQW1CSCxDQUFuQixDQUF4QjtBQUNBOztBQUVELFVBQVNJLE1BQVQsQ0FBZ0JKLENBQWhCLEVBQW1CO0FBQ2xCLFNBQU9DLE9BQU9DLEdBQVAsR0FBYUYsQ0FBYixHQUFpQnhpQixtQkFBbUJ3aUIsQ0FBbkIsQ0FBeEI7QUFDQTs7QUFFRCxVQUFTSyxvQkFBVCxDQUE4QjdrQixLQUE5QixFQUFxQztBQUNwQyxTQUFPdWtCLE9BQU9FLE9BQU9LLElBQVAsR0FBY0MsS0FBS0MsU0FBTCxDQUFlaGxCLEtBQWYsQ0FBZCxHQUFzQ2hELE9BQU9nRCxLQUFQLENBQTdDLENBQVA7QUFDQTs7QUFFRCxVQUFTaWxCLGdCQUFULENBQTBCVCxDQUExQixFQUE2QjtBQUM1QixNQUFJQSxFQUFFMXhCLE9BQUYsQ0FBVSxHQUFWLE1BQW1CLENBQXZCLEVBQTBCO0FBQ3pCO0FBQ0EweEIsT0FBSUEsRUFBRTl2QixLQUFGLENBQVEsQ0FBUixFQUFXLENBQUMsQ0FBWixFQUFlcUYsT0FBZixDQUF1QixNQUF2QixFQUErQixHQUEvQixFQUFvQ0EsT0FBcEMsQ0FBNEMsT0FBNUMsRUFBcUQsSUFBckQsQ0FBSjtBQUNBOztBQUVELE1BQUk7QUFDSDtBQUNBO0FBQ0E7QUFDQXlxQixPQUFJeGlCLG1CQUFtQndpQixFQUFFenFCLE9BQUYsQ0FBVXVxQixNQUFWLEVBQWtCLEdBQWxCLENBQW5CLENBQUo7QUFDQSxVQUFPRyxPQUFPSyxJQUFQLEdBQWNDLEtBQUtHLEtBQUwsQ0FBV1YsQ0FBWCxDQUFkLEdBQThCQSxDQUFyQztBQUNBLEdBTkQsQ0FNRSxPQUFNbHZCLENBQU4sRUFBUyxDQUFFO0FBQ2I7O0FBRUQsVUFBUzZ2QixJQUFULENBQWNYLENBQWQsRUFBaUJZLFNBQWpCLEVBQTRCO0FBQzNCLE1BQUlwbEIsUUFBUXlrQixPQUFPQyxHQUFQLEdBQWFGLENBQWIsR0FBaUJTLGlCQUFpQlQsQ0FBakIsQ0FBN0I7QUFDQSxTQUFPcHpCLEVBQUVpMEIsVUFBRixDQUFhRCxTQUFiLElBQTBCQSxVQUFVcGxCLEtBQVYsQ0FBMUIsR0FBNkNBLEtBQXBEO0FBQ0E7O0FBRUQsS0FBSXlrQixTQUFTcnpCLEVBQUVrMEIsTUFBRixHQUFXLFVBQVV6b0IsR0FBVixFQUFlbUQsS0FBZixFQUFzQndFLE9BQXRCLEVBQStCOztBQUV0RDs7QUFFQSxNQUFJeEUsVUFBVXJJLFNBQVYsSUFBdUIsQ0FBQ3ZHLEVBQUVpMEIsVUFBRixDQUFhcmxCLEtBQWIsQ0FBNUIsRUFBaUQ7QUFDaER3RSxhQUFVcFQsRUFBRXlNLE1BQUYsQ0FBUyxFQUFULEVBQWE0bUIsT0FBT2xhLFFBQXBCLEVBQThCL0YsT0FBOUIsQ0FBVjs7QUFFQSxPQUFJLE9BQU9BLFFBQVErZ0IsT0FBZixLQUEyQixRQUEvQixFQUF5QztBQUN4QyxRQUFJQyxPQUFPaGhCLFFBQVErZ0IsT0FBbkI7QUFBQSxRQUE0QnB2QixJQUFJcU8sUUFBUStnQixPQUFSLEdBQWtCLElBQUl2dEIsSUFBSixFQUFsRDtBQUNBN0IsTUFBRXN2QixPQUFGLENBQVUsQ0FBQ3R2QixDQUFELEdBQUtxdkIsT0FBTyxNQUF0QjtBQUNBOztBQUVELFVBQVF4dkIsU0FBU3N2QixNQUFULEdBQWtCLENBQ3pCZixPQUFPMW5CLEdBQVAsQ0FEeUIsRUFDWixHQURZLEVBQ1Bnb0IscUJBQXFCN2tCLEtBQXJCLENBRE8sRUFFekJ3RSxRQUFRK2dCLE9BQVIsR0FBa0IsZUFBZS9nQixRQUFRK2dCLE9BQVIsQ0FBZ0JHLFdBQWhCLEVBQWpDLEdBQWlFLEVBRnhDLEVBRTRDO0FBQ3JFbGhCLFdBQVE4USxJQUFSLEdBQWtCLFlBQVk5USxRQUFROFEsSUFBdEMsR0FBNkMsRUFIcEIsRUFJekI5USxRQUFROEosTUFBUixHQUFrQixjQUFjOUosUUFBUThKLE1BQXhDLEdBQWlELEVBSnhCLEVBS3pCOUosUUFBUW1oQixNQUFSLEdBQWtCLFVBQWxCLEdBQStCLEVBTE4sRUFNeEJ6YyxJQU53QixDQU1uQixFQU5tQixDQUExQjtBQU9BOztBQUVEOztBQUVBLE1BQUkwYyxTQUFTL29CLE1BQU1sRixTQUFOLEdBQWtCLEVBQS9COztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQUlrdUIsVUFBVTd2QixTQUFTc3ZCLE1BQVQsR0FBa0J0dkIsU0FBU3N2QixNQUFULENBQWdCandCLEtBQWhCLENBQXNCLElBQXRCLENBQWxCLEdBQWdELEVBQTlEOztBQUVBLE9BQUssSUFBSVIsSUFBSSxDQUFSLEVBQVdpeEIsSUFBSUQsUUFBUTF4QixNQUE1QixFQUFvQ1UsSUFBSWl4QixDQUF4QyxFQUEyQ2p4QixHQUEzQyxFQUFnRDtBQUMvQyxPQUFJaU4sUUFBUStqQixRQUFRaHhCLENBQVIsRUFBV1EsS0FBWCxDQUFpQixHQUFqQixDQUFaO0FBQ0EsT0FBSXhELE9BQU8reUIsT0FBTzlpQixNQUFNaWtCLEtBQU4sRUFBUCxDQUFYO0FBQ0EsT0FBSVQsU0FBU3hqQixNQUFNb0gsSUFBTixDQUFXLEdBQVgsQ0FBYjs7QUFFQSxPQUFJck0sT0FBT0EsUUFBUWhMLElBQW5CLEVBQXlCO0FBQ3hCO0FBQ0ErekIsYUFBU1QsS0FBS0csTUFBTCxFQUFhdGxCLEtBQWIsQ0FBVDtBQUNBO0FBQ0E7O0FBRUQ7QUFDQSxPQUFJLENBQUNuRCxHQUFELElBQVEsQ0FBQ3lvQixTQUFTSCxLQUFLRyxNQUFMLENBQVYsTUFBNEIzdEIsU0FBeEMsRUFBbUQ7QUFDbERpdUIsV0FBTy96QixJQUFQLElBQWV5ekIsTUFBZjtBQUNBO0FBQ0Q7O0FBRUQsU0FBT00sTUFBUDtBQUNBLEVBaEREOztBQWtEQW5CLFFBQU9sYSxRQUFQLEdBQWtCLEVBQWxCOztBQUVBblosR0FBRTQwQixZQUFGLEdBQWlCLFVBQVVucEIsR0FBVixFQUFlMkgsT0FBZixFQUF3QjtBQUN4QyxNQUFJcFQsRUFBRWswQixNQUFGLENBQVN6b0IsR0FBVCxNQUFrQmxGLFNBQXRCLEVBQWlDO0FBQ2hDLFVBQU8sS0FBUDtBQUNBOztBQUVEO0FBQ0F2RyxJQUFFazBCLE1BQUYsQ0FBU3pvQixHQUFULEVBQWMsRUFBZCxFQUFrQnpMLEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFhMkcsT0FBYixFQUFzQixFQUFFK2dCLFNBQVMsQ0FBQyxDQUFaLEVBQXRCLENBQWxCO0FBQ0EsU0FBTyxDQUFDbjBCLEVBQUVrMEIsTUFBRixDQUFTem9CLEdBQVQsQ0FBUjtBQUNBLEVBUkQ7QUFVQSxDQTdHQSxDQUFEOzs7QUNQQTs7Ozs7Ozs7QUFRQSxDQUFDLFVBQVV6TCxDQUFWLEVBQWE7QUFDWkEsTUFBRTJHLEVBQUYsQ0FBS2t1QixTQUFMLEdBQWlCLFVBQVV6aEIsT0FBVixFQUFvQjtBQUN0QyxZQUFJMGhCLFdBQVc5MEIsRUFBRXlNLE1BQUYsQ0FBVTtBQUNwQiwyQkFBZ0IsTUFESTtBQUV2QixzQkFBVyxLQUZZO0FBR3ZCLG9CQUFTLEdBSGM7QUFJdkIsc0JBQVc7QUFKWSxTQUFWLEVBS1QyRyxPQUxTLENBQWY7O0FBT0csZUFBTyxLQUFLblIsSUFBTCxDQUFVLFlBQVc7QUFDOUIsZ0JBQUk4eUIsWUFBWS8wQixFQUFFLElBQUYsQ0FBaEI7O0FBRUE7QUFDQSswQixzQkFBVTFpQixJQUFWOztBQUVBO0FBQ0EsZ0JBQUd5aUIsU0FBU0UsV0FBVCxJQUF3QixNQUEzQixFQUNBO0FBQ0NELDBCQUFVN04sTUFBVixDQUFpQix5Q0FBakI7QUFDQTROLDJCQUFXOTBCLEVBQUV5TSxNQUFGLENBQVU7QUFDcEIsbUNBQWdCO0FBREksaUJBQVYsRUFFUjJHLE9BRlEsQ0FBWDtBQUdBOztBQUVELGdCQUFJcFQsRUFBRWswQixNQUFGLENBQVMsV0FBVCxLQUF5QixNQUE3QixFQUFxQztBQUNuQ2EsMEJBQVU5aUIsSUFBVjtBQUNEOztBQUVEOGlCLHNCQUFVcHhCLElBQVYsQ0FBZW14QixTQUFTRSxXQUF4QixFQUFxQ0MsS0FBckMsQ0FBMkMsWUFBVztBQUNyREYsMEJBQVUxaUIsSUFBVjtBQUNBclMsa0JBQUVrMEIsTUFBRixDQUFTLFdBQVQsRUFBc0IsTUFBdEIsRUFBOEIsRUFBRWhRLE1BQU00USxTQUFTNVEsSUFBakIsRUFBdUJxUSxRQUFRTyxTQUFTUCxNQUF4QyxFQUFnRHJYLFFBQVE0WCxTQUFTNVgsTUFBakUsRUFBeUVpWCxTQUFTLEVBQWxGLEVBQTlCO0FBQ0EsdUJBQU8sS0FBUDtBQUNBLGFBSkQ7QUFLRyxTQXhCTSxDQUFQO0FBeUJELEtBakNEOztBQW1DQTtBQUNBbjBCLE1BQUU2MEIsU0FBRixHQUFjLFVBQVV6aEIsT0FBVixFQUFvQjtBQUNuQ3BULFVBQUUsTUFBRixFQUFVazFCLE9BQVYsQ0FBa0IsK09BQWxCO0FBQ0FsMUIsVUFBRSxpQkFBRixFQUFxQjYwQixTQUFyQixDQUErQnpoQixPQUEvQjtBQUNFLEtBSEQ7QUFJRCxDQXpDRCxFQXlDSXhLLE1BekNKOztBQTJDQTs7Ozs7Ozs7OztBQVVBLENBQUMsVUFBUzVJLENBQVQsRUFBWTtBQUNUQSxNQUFFazBCLE1BQUYsR0FBVyxVQUFTem9CLEdBQVQsRUFBY21ELEtBQWQsRUFBcUJ3RSxPQUFyQixFQUE4QjtBQUNyQztBQUNBLFlBQUkxTixVQUFVM0MsTUFBVixHQUFtQixDQUFuQixLQUF5QixDQUFDLFNBQVNvRSxJQUFULENBQWN6RSxPQUFPMEQsU0FBUCxDQUFpQi9DLFFBQWpCLENBQTBCZ0QsSUFBMUIsQ0FBK0J1SSxLQUEvQixDQUFkLENBQUQsSUFBeURBLFVBQVUsSUFBbkUsSUFBMkVBLFVBQVVySSxTQUE5RyxDQUFKLEVBQThIO0FBQzFINk0sc0JBQVVwVCxFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYTJHLE9BQWIsQ0FBVjs7QUFFQSxnQkFBSXhFLFVBQVUsSUFBVixJQUFrQkEsVUFBVXJJLFNBQWhDLEVBQTJDO0FBQ3ZDNk0sd0JBQVErZ0IsT0FBUixHQUFrQixDQUFDLENBQW5CO0FBQ0g7O0FBRUQsZ0JBQUksT0FBTy9nQixRQUFRK2dCLE9BQWYsS0FBMkIsUUFBL0IsRUFBeUM7QUFDckMsb0JBQUlDLE9BQU9oaEIsUUFBUStnQixPQUFuQjtBQUFBLG9CQUE0QnB2QixJQUFJcU8sUUFBUStnQixPQUFSLEdBQWtCLElBQUl2dEIsSUFBSixFQUFsRDtBQUNBN0Isa0JBQUVvd0IsT0FBRixDQUFVcHdCLEVBQUVxd0IsT0FBRixLQUFjaEIsSUFBeEI7QUFDSDs7QUFFRHhsQixvQkFBUWhELE9BQU9nRCxLQUFQLENBQVI7O0FBRUEsbUJBQVFoSyxTQUFTc3ZCLE1BQVQsR0FBa0IsQ0FDdEJYLG1CQUFtQjluQixHQUFuQixDQURzQixFQUNHLEdBREgsRUFDUTJILFFBQVFrZ0IsR0FBUixHQUFjMWtCLEtBQWQsR0FBc0Iya0IsbUJBQW1CM2tCLEtBQW5CLENBRDlCLEVBRXRCd0UsUUFBUStnQixPQUFSLEdBQWtCLGVBQWUvZ0IsUUFBUStnQixPQUFSLENBQWdCRyxXQUFoQixFQUFqQyxHQUFpRSxFQUYzQyxFQUUrQztBQUNyRWxoQixvQkFBUThRLElBQVIsR0FBa0IsWUFBWTlRLFFBQVE4USxJQUF0QyxHQUE2QyxFQUh2QixFQUl0QjlRLFFBQVE4SixNQUFSLEdBQWtCLGNBQWM5SixRQUFROEosTUFBeEMsR0FBaUQsRUFKM0IsRUFLdEI5SixRQUFRbWhCLE1BQVIsR0FBa0IsVUFBbEIsR0FBK0IsRUFMVCxFQU14QnpjLElBTndCLENBTW5CLEVBTm1CLENBQTFCO0FBT0g7O0FBRUQ7QUFDQTFFLGtCQUFVeEUsU0FBUyxFQUFuQjtBQUNBLFlBQUk0a0IsU0FBU3BnQixRQUFRa2dCLEdBQVIsR0FBYyxVQUFTRixDQUFULEVBQVk7QUFBRSxtQkFBT0EsQ0FBUDtBQUFXLFNBQXZDLEdBQTBDeGlCLGtCQUF2RDs7QUFFQSxZQUFJeWtCLFFBQVF6d0IsU0FBU3N2QixNQUFULENBQWdCandCLEtBQWhCLENBQXNCLElBQXRCLENBQVo7QUFDQSxhQUFLLElBQUlSLElBQUksQ0FBUixFQUFXNnhCLElBQWhCLEVBQXNCQSxPQUFPRCxNQUFNNXhCLENBQU4sS0FBWTR4QixNQUFNNXhCLENBQU4sRUFBU1EsS0FBVCxDQUFlLEdBQWYsQ0FBekMsRUFBOERSLEdBQTlELEVBQW1FO0FBQy9EO0FBQ0EsZ0JBQUkrdkIsT0FBTzhCLEtBQUssQ0FBTCxDQUFQLE1BQW9CN3BCLEdBQXhCLEVBQTZCLE9BQU8rbkIsT0FBTzhCLEtBQUssQ0FBTCxLQUFXLEVBQWxCLENBQVA7QUFDaEM7QUFDRCxlQUFPLElBQVA7QUFDSCxLQW5DRDtBQW9DSCxDQXJDRCxFQXFDRzFzQixNQXJDSDs7Ozs7QUM3REE7Ozs7Ozs7Ozs7O0FBV0EsQ0FBQyxDQUFDLFVBQVM1SSxDQUFULEVBQVk7O0FBRVosTUFBSXUxQixVQUFVO0FBQ1o3ZixVQUFNLGNBQVNvZixRQUFULEVBQW1CO0FBQ3ZCLGFBQU8sS0FBSzd5QixJQUFMLENBQVUsWUFBVztBQUMxQnN6QixnQkFBUXBNLE9BQVIsQ0FBZ0I5aUIsSUFBaEIsQ0FBcUIsSUFBckI7O0FBRUEsYUFBS2xDLEdBQUwsR0FBV25FLEVBQUV5TSxNQUFGLENBQVMsSUFBVCxFQUFlLEVBQWYsRUFBbUJ6TSxFQUFFMkcsRUFBRixDQUFLNnVCLElBQUwsQ0FBVXJjLFFBQTdCLEVBQXVDMmIsUUFBdkMsQ0FBWDs7QUFFQSxZQUFJVyxPQUFRejFCLEVBQUUsSUFBRixDQUFaO0FBQUEsWUFDSTAxQixRQUFRLENBQUMsUUFBRCxFQUFXLFVBQVgsRUFBdUIsT0FBdkIsRUFBZ0MsV0FBaEMsQ0FEWjs7QUFHQUgsZ0JBQVFJLFNBQVIsQ0FBa0J0dkIsSUFBbEIsQ0FBdUIsSUFBdkIsRUFBNkJxdkIsS0FBN0I7O0FBRUEsWUFBSSxLQUFLdnhCLEdBQUwsQ0FBU3l4QixTQUFiLEVBQXdCO0FBQ3RCTCxrQkFBUU0sZ0JBQVIsQ0FBeUJ4dkIsSUFBekIsQ0FBOEIsSUFBOUI7QUFDRDs7QUFFRCxhQUFLbEMsR0FBTCxDQUFTMFksTUFBVCxHQUFrQjBZLFFBQVFPLFFBQVIsQ0FBaUIsS0FBSzN4QixHQUFMLENBQVMwWSxNQUExQixFQUFrQyxDQUFsQyxFQUFxQyxLQUFLMVksR0FBTCxDQUFTNHhCLFNBQTlDLENBQWxCOztBQUVBLGFBQUtDLEtBQUwsR0FBYVQsUUFBUVUsWUFBUixDQUFxQjV2QixJQUFyQixDQUEwQixJQUExQixDQUFiO0FBQ0EsYUFBSzZ2QixLQUFMLEdBQWFYLFFBQVFZLFlBQVIsQ0FBcUI5dkIsSUFBckIsQ0FBMEIsSUFBMUIsQ0FBYjs7QUFFQWt2QixnQkFBUWEsTUFBUixDQUFlL3ZCLElBQWYsQ0FBb0IsSUFBcEIsRUFBMEIsS0FBS2xDLEdBQUwsQ0FBUyt4QixLQUFuQzs7QUFFQSxZQUFJLEtBQUsveEIsR0FBTCxDQUFTa3lCLE1BQWIsRUFBcUI7QUFDbkIsZUFBS0EsTUFBTCxHQUFjZCxRQUFRZSxhQUFSLENBQXNCandCLElBQXRCLENBQTJCLElBQTNCLENBQWQ7QUFDRDs7QUFFRCxZQUFJLEtBQUtsQyxHQUFMLENBQVMwRixLQUFiLEVBQW9CO0FBQ2xCNHJCLGVBQUtqbkIsR0FBTCxDQUFTLE9BQVQsRUFBa0IsS0FBS3JLLEdBQUwsQ0FBUzBGLEtBQTNCO0FBQ0Q7O0FBRUQsWUFBSSxLQUFLMUYsR0FBTCxDQUFTb3lCLFFBQWIsRUFBdUI7QUFDckJoQixrQkFBUWlCLEtBQVIsQ0FBY253QixJQUFkLENBQW1CLElBQW5CO0FBQ0QsU0FGRCxNQUVPO0FBQ0xvdkIsZUFBS2puQixHQUFMLENBQVMsUUFBVCxFQUFtQixTQUFuQjtBQUNBK21CLGtCQUFRa0IsTUFBUixDQUFlcHdCLElBQWYsQ0FBb0IsSUFBcEI7QUFDRDs7QUFFRGt2QixnQkFBUW1CLE9BQVIsQ0FBZ0Jyd0IsSUFBaEIsQ0FBcUIsSUFBckIsRUFBMkIsS0FBS2xDLEdBQUwsQ0FBUyt4QixLQUFwQzs7QUFFQVQsYUFBS3AwQixJQUFMLENBQVUsRUFBRSxZQUFZLEtBQUs4QyxHQUFuQixFQUF3QixRQUFRLElBQWhDLEVBQVY7QUFDRCxPQXZDTSxDQUFQO0FBd0NELEtBMUNXLEVBMENUMHhCLGtCQUFrQiw0QkFBVztBQUM5QixXQUFLMXhCLEdBQUwsQ0FBU3d5QixVQUFULEdBQXNCLE9BQXRCO0FBQ0EsV0FBS3h5QixHQUFMLENBQVN5eUIsSUFBVCxHQUFzQixJQUF0QjtBQUNELEtBN0NXLEVBNkNUUixRQUFRLGdCQUFTRixLQUFULEVBQWdCO0FBQ3pCLFVBQUlBLFNBQVNBLFFBQVEsQ0FBckIsRUFBd0I7QUFDdEJBLGdCQUFRWCxRQUFRTyxRQUFSLENBQWlCSSxLQUFqQixFQUF3QixDQUF4QixFQUEyQixLQUFLL3hCLEdBQUwsQ0FBUzBZLE1BQXBDLENBQVI7QUFDQSxhQUFLcVosS0FBTCxDQUFXdmxCLEdBQVgsQ0FBZXVsQixLQUFmO0FBQ0Q7O0FBRURYLGNBQVFzQixLQUFSLENBQWN4d0IsSUFBZCxDQUFtQixJQUFuQixFQUF5QjZ2QixLQUF6Qjs7QUFFQSxVQUFJQSxLQUFKLEVBQVc7QUFDVFgsZ0JBQVF1QixXQUFSLENBQW9CendCLElBQXBCLENBQXlCLElBQXpCLEVBQStCNnZCLEtBQS9CO0FBQ0Q7QUFDRixLQXhEVyxFQXdEVEosVUFBVSxrQkFBU2xuQixLQUFULEVBQWdCa1MsR0FBaEIsRUFBcUJyWixHQUFyQixFQUEwQjtBQUNyQyxhQUFPeEUsS0FBSzZkLEdBQUwsQ0FBUzdkLEtBQUt3RSxHQUFMLENBQVNpQixXQUFXa0csS0FBWCxDQUFULEVBQTRCa1MsR0FBNUIsQ0FBVCxFQUEyQ3JaLEdBQTNDLENBQVA7QUFDRCxLQTFEVyxFQTBEVGd2QixRQUFRLGtCQUFXO0FBQ3BCLFVBQUksS0FBS0osTUFBVCxFQUFpQjtBQUNmZCxnQkFBUXdCLFdBQVIsQ0FBb0Ixd0IsSUFBcEIsQ0FBeUIsSUFBekI7QUFDRDs7QUFFRGt2QixjQUFReUIsVUFBUixDQUFtQjN3QixJQUFuQixDQUF3QixJQUF4QjtBQUNBa3ZCLGNBQVEwQixRQUFSLENBQWlCNXdCLElBQWpCLENBQXNCLElBQXRCO0FBQ0FrdkIsY0FBUTJCLFNBQVIsQ0FBa0I3d0IsSUFBbEIsQ0FBdUIsSUFBdkI7QUFDRCxLQWxFVyxFQWtFVDB3QixhQUFhLHVCQUFXO0FBQ3pCeEIsY0FBUTRCLGdCQUFSLENBQXlCOXdCLElBQXpCLENBQThCLElBQTlCO0FBQ0FrdkIsY0FBUTZCLGNBQVIsQ0FBdUIvd0IsSUFBdkIsQ0FBNEIsSUFBNUI7QUFDQWt2QixjQUFROEIsZUFBUixDQUF3Qmh4QixJQUF4QixDQUE2QixJQUE3QjtBQUNELEtBdEVXLEVBc0VUMndCLFlBQVksc0JBQVc7QUFDeEIsVUFBSTFvQixPQUFPLElBQVg7QUFBQSxVQUNJbW5CLE9BQU96MUIsRUFBRXNPLElBQUYsQ0FEWDs7QUFHQUEsV0FBSzBuQixLQUFMLENBQVd6b0IsRUFBWCxDQUFjLFlBQWQsRUFBNEIsVUFBUytwQixHQUFULEVBQWM7QUFDeENocEIsYUFBSzRuQixLQUFMLENBQVd2bEIsR0FBWCxDQUFnQnJDLEtBQUtuSyxHQUFMLENBQVN5eUIsSUFBVCxJQUFpQnRvQixLQUFLbkssR0FBTCxDQUFTeXhCLFNBQTNCLEdBQXdDSCxLQUFLcDBCLElBQUwsQ0FBVSxPQUFWLENBQXhDLEdBQTZEckIsRUFBRSxJQUFGLEVBQVFxQixJQUFSLENBQWEsT0FBYixDQUE1RTs7QUFFQSxZQUFJaU4sS0FBS25LLEdBQUwsQ0FBUzh3QixLQUFiLEVBQW9CO0FBQ2xCM21CLGVBQUtuSyxHQUFMLENBQVM4d0IsS0FBVCxDQUFlNXVCLElBQWYsQ0FBb0JpSSxJQUFwQixFQUEwQjVGLFdBQVc0RixLQUFLNG5CLEtBQUwsQ0FBV3ZsQixHQUFYLEVBQVgsQ0FBMUIsRUFBd0QybUIsR0FBeEQ7QUFDRDtBQUNGLE9BTkQ7QUFPRCxLQWpGVyxFQWlGVEgsa0JBQWtCLDRCQUFXO0FBQzlCLFVBQUk3b0IsT0FBTyxJQUFYOztBQUVBQSxXQUFLK25CLE1BQUwsQ0FBWTlvQixFQUFaLENBQWUsWUFBZixFQUE2QixVQUFTK3BCLEdBQVQsRUFBYztBQUN6Q2hwQixhQUFLNG5CLEtBQUwsQ0FBV3YwQixVQUFYLENBQXNCLE9BQXRCOztBQUVBLFlBQUkyTSxLQUFLbkssR0FBTCxDQUFTOHdCLEtBQWIsRUFBb0I7QUFDbEIzbUIsZUFBS25LLEdBQUwsQ0FBUzh3QixLQUFULENBQWU1dUIsSUFBZixDQUFvQmlJLElBQXBCLEVBQTBCLElBQTFCLEVBQWdDZ3BCLEdBQWhDO0FBQ0Q7QUFDRixPQU5EO0FBT0QsS0EzRlcsRUEyRlRMLFVBQVUsb0JBQVc7QUFDdEIsVUFBSTNvQixPQUFPLElBQVg7O0FBRUF0TyxRQUFFLElBQUYsRUFBUXVOLEVBQVIsQ0FBVyxpQkFBWCxFQUE4QixVQUFTK3BCLEdBQVQsRUFBYztBQUMxQyxZQUFJcEIsUUFBUXh0QixXQUFXNEYsS0FBSzRuQixLQUFMLENBQVd2bEIsR0FBWCxFQUFYLEtBQWdDcEssU0FBNUM7O0FBRUFndkIsZ0JBQVFhLE1BQVIsQ0FBZS92QixJQUFmLENBQW9CaUksSUFBcEIsRUFBMEI0bkIsS0FBMUI7QUFDQVgsZ0JBQVFtQixPQUFSLENBQWdCcndCLElBQWhCLENBQXFCaUksSUFBckIsRUFBMkI0bkIsS0FBM0IsRUFBa0NvQixHQUFsQzs7QUFFQSxZQUFJaHBCLEtBQUtuSyxHQUFMLENBQVNvekIsUUFBYixFQUF1QjtBQUNyQmpwQixlQUFLbkssR0FBTCxDQUFTb3pCLFFBQVQsQ0FBa0JseEIsSUFBbEIsQ0FBdUJpSSxJQUF2QixFQUE2QjRuQixLQUE3QixFQUFvQ29CLEdBQXBDO0FBQ0Q7QUFDRixPQVREO0FBVUQsS0F4R1csRUF3R1RGLGdCQUFnQiwwQkFBVztBQUM1QixVQUFJOW9CLE9BQU8sSUFBWDs7QUFFQUEsV0FBSytuQixNQUFMLENBQVk5b0IsRUFBWixDQUFlLGlCQUFmLEVBQWtDLFVBQVMrcEIsR0FBVCxFQUFjO0FBQzlDdDNCLFVBQUUsSUFBRixFQUFRTyxJQUFSLENBQWEsT0FBYixFQUFzQitOLEtBQUtuSyxHQUFMLENBQVNxekIsU0FBL0I7O0FBRUEsWUFBSWxwQixLQUFLbkssR0FBTCxDQUFTb3pCLFFBQWIsRUFBdUI7QUFDckJqcEIsZUFBS25LLEdBQUwsQ0FBU296QixRQUFULENBQWtCbHhCLElBQWxCLENBQXVCaUksSUFBdkIsRUFBNkJBLEtBQUs0bkIsS0FBTCxDQUFXdmxCLEdBQVgsTUFBb0IsSUFBakQsRUFBdUQybUIsR0FBdkQ7QUFDRDtBQUNGLE9BTkQ7QUFPRCxLQWxIVyxFQWtIVEQsaUJBQWlCLDJCQUFXO0FBQzdCLFVBQUkvb0IsT0FBTyxJQUFYOztBQUVBQSxXQUFLK25CLE1BQUwsQ0FBWTlvQixFQUFaLENBQWUsZ0JBQWYsRUFBaUMsVUFBUytwQixHQUFULEVBQWM7QUFDN0N0M0IsVUFBRSxJQUFGLEVBQVFPLElBQVIsQ0FBYSxPQUFiLEVBQXNCK04sS0FBS25LLEdBQUwsQ0FBU3N6QixRQUEvQjs7QUFFQW5wQixhQUFLMG5CLEtBQUwsQ0FBV3oxQixJQUFYLENBQWdCLE9BQWhCLEVBQXlCK04sS0FBS25LLEdBQUwsQ0FBU3V6QixPQUFsQzs7QUFFQW5DLGdCQUFRbUIsT0FBUixDQUFnQnJ3QixJQUFoQixDQUFxQmlJLElBQXJCLEVBQTJCLElBQTNCLEVBQWlDZ3BCLEdBQWpDOztBQUVBLFlBQUlocEIsS0FBS25LLEdBQUwsQ0FBU3d6QixTQUFiLEVBQXdCO0FBQ3RCcnBCLGVBQUtuSyxHQUFMLENBQVN3ekIsU0FBVCxDQUFtQnR4QixJQUFuQixDQUF3QmlJLElBQXhCLEVBQThCLElBQTlCO0FBQ0Q7QUFDRixPQVZEO0FBV0QsS0FoSVcsRUFnSVQ0b0IsV0FBVyxxQkFBVztBQUN2QixVQUFJNW9CLE9BQVMsSUFBYjtBQUFBLFVBQ0ltbkIsT0FBU3oxQixFQUFFc08sSUFBRixDQURiO0FBQUEsVUFFSXNwQixTQUFTdHBCLEtBQUtuSyxHQUFMLENBQVN5eUIsSUFBVCxHQUFnQixnQkFBaEIsR0FBbUMsZ0JBRmhEOztBQUlBdG9CLFdBQUswbkIsS0FBTCxDQUFXem9CLEVBQVgsQ0FBY3FxQixNQUFkLEVBQXNCLFVBQVNOLEdBQVQsRUFBYztBQUNsQyxZQUFJcEIsUUFBUXBSLFNBQVM5a0IsRUFBRSxJQUFGLEVBQVFxQixJQUFSLENBQWEsT0FBYixDQUFULEVBQWdDLEVBQWhDLENBQVo7O0FBRUEsWUFBSWlOLEtBQUtuSyxHQUFMLENBQVN5eUIsSUFBYixFQUFtQjtBQUNqQixjQUFJL3JCLFdBQVduQyxXQUFXLENBQUM0dUIsSUFBSXJpQixLQUFKLEdBQVlqVixFQUFFLElBQUYsRUFBUTJKLE1BQVIsR0FBaUJILElBQTlCLEtBQXVDOEUsS0FBS25LLEdBQUwsQ0FBUzZLLElBQVQsR0FBZ0JWLEtBQUtuSyxHQUFMLENBQVM2SyxJQUF6QixHQUFnQzhWLFNBQVMyUSxLQUFLam5CLEdBQUwsQ0FBUyxXQUFULENBQVQsQ0FBdkUsQ0FBWCxDQUFmO0FBQUEsY0FDSXFwQixPQUFZaHRCLFdBQVcsRUFBWixHQUFrQixDQUFsQixHQUFzQixFQURyQzs7QUFHQXFyQixrQkFBUUEsUUFBUSxDQUFSLEdBQVkyQixJQUFwQjs7QUFFQXRDLGtCQUFRc0IsS0FBUixDQUFjeHdCLElBQWQsQ0FBbUJpSSxJQUFuQixFQUF5QjRuQixLQUF6Qjs7QUFFQSxjQUFJNW5CLEtBQUtuSyxHQUFMLENBQVN5eEIsU0FBYixFQUF3QjtBQUN0Qk0sb0JBQVFBLFFBQVEyQixJQUFSLEdBQWVodEIsUUFBdkI7QUFDRDs7QUFFRDBxQixrQkFBUXVCLFdBQVIsQ0FBb0J6d0IsSUFBcEIsQ0FBeUJpSSxJQUF6QixFQUErQjRuQixLQUEvQjs7QUFFQVQsZUFBS3AwQixJQUFMLENBQVUsT0FBVixFQUFtQjYwQixLQUFuQjtBQUNELFNBZkQsTUFlTztBQUNMWCxrQkFBUXNCLEtBQVIsQ0FBY3h3QixJQUFkLENBQW1CaUksSUFBbkIsRUFBeUI0bkIsS0FBekI7QUFDRDs7QUFFRFgsZ0JBQVFtQixPQUFSLENBQWdCcndCLElBQWhCLENBQXFCaUksSUFBckIsRUFBMkI0bkIsS0FBM0IsRUFBa0NvQixHQUFsQzs7QUFFQSxZQUFJaHBCLEtBQUtuSyxHQUFMLENBQVN3ekIsU0FBYixFQUF3QjtBQUN0QnJwQixlQUFLbkssR0FBTCxDQUFTd3pCLFNBQVQsQ0FBbUJ0eEIsSUFBbkIsQ0FBd0JpSSxJQUF4QixFQUE4QjRuQixLQUE5QixFQUFxQ29CLEdBQXJDO0FBQ0Q7QUFDRixPQTNCRDtBQTRCRCxLQWpLVyxFQWlLVDNCLFdBQVcsbUJBQVN2aUIsT0FBVCxFQUFrQjtBQUM5QixXQUFLLElBQUkzUCxDQUFULElBQWMyUCxPQUFkLEVBQXVCO0FBQ3JCLFlBQUksT0FBTyxLQUFLalAsR0FBTCxDQUFTaVAsUUFBUTNQLENBQVIsQ0FBVCxDQUFQLEtBQWdDLFVBQXBDLEVBQWdEO0FBQzlDLGVBQUtVLEdBQUwsQ0FBU2lQLFFBQVEzUCxDQUFSLENBQVQsSUFBdUIsS0FBS1UsR0FBTCxDQUFTaVAsUUFBUTNQLENBQVIsQ0FBVCxFQUFxQjRDLElBQXJCLENBQTBCLElBQTFCLENBQXZCO0FBQ0Q7QUFDRjtBQUNGLEtBdktXLEVBdUtUaXdCLGVBQWUseUJBQVc7QUFDM0IsVUFBSWIsT0FBU3oxQixFQUFFLElBQUYsQ0FBYjtBQUFBLFVBQ0k4M0IsT0FBUyxLQUFLM3pCLEdBQUwsQ0FBU3F6QixTQUR0QjtBQUFBLFVBRUluQixTQUFTcjJCLEVBQUUsT0FBRixFQUFXLEVBQUUrM0IsT0FBT0QsSUFBVCxFQUFlbk0sT0FBTyxLQUFLeG5CLEdBQUwsQ0FBUzZ6QixVQUEvQixFQUFYLENBRmI7O0FBSUEsVUFBSSxLQUFLN3pCLEdBQUwsQ0FBUzh6QixXQUFULElBQXdCLE1BQTVCLEVBQW9DO0FBQ2xDeEMsYUFBS1AsT0FBTCxDQUFhLFFBQWIsRUFBdUJBLE9BQXZCLENBQStCbUIsTUFBL0I7QUFDRCxPQUZELE1BRU87QUFDTFosYUFBS3ZPLE1BQUwsQ0FBWSxRQUFaLEVBQXNCQSxNQUF0QixDQUE2Qm1QLE1BQTdCO0FBQ0Q7O0FBRUQsYUFBT0EsTUFBUDtBQUNELEtBbkxXLEVBbUxURixjQUFjLHdCQUFXO0FBQzFCLGFBQU9uMkIsRUFBRSxXQUFGLEVBQWUsRUFBRW1DLE1BQU0sUUFBUixFQUFrQjFCLE1BQU0sS0FBSzBELEdBQUwsQ0FBUyt6QixTQUFqQyxFQUFmLEVBQTZEbnlCLFFBQTdELENBQXNFLElBQXRFLENBQVA7QUFDRCxLQXJMVyxFQXFMVGt3QixjQUFjLHdCQUFXO0FBQzFCLFVBQUlSLE9BQU96MUIsRUFBRSxJQUFGLENBQVg7O0FBRUEsV0FBSyxJQUFJeUQsSUFBSSxDQUFiLEVBQWdCQSxLQUFLLEtBQUtVLEdBQUwsQ0FBUzBZLE1BQTlCLEVBQXNDcFosR0FBdEMsRUFBMkM7QUFDekMsWUFBSWtvQixRQUFRNEosUUFBUTRDLFFBQVIsQ0FBaUI5eEIsSUFBakIsQ0FBc0IsSUFBdEIsRUFBNEI1QyxDQUE1QixDQUFaO0FBQUEsWUFDSXEwQixPQUFTLEtBQUszekIsR0FBTCxDQUFTK3hCLEtBQVQsSUFBa0IsS0FBSy94QixHQUFMLENBQVMreEIsS0FBVCxJQUFrQnp5QixDQUFyQyxHQUEwQyxRQUExQyxHQUFxRCxTQURqRTs7QUFHQXEwQixlQUFPLEtBQUszekIsR0FBTCxDQUFTMnpCLElBQVQsQ0FBUDs7QUFFQTkzQixVQUFFLE9BQUYsRUFBVyxFQUFFKzNCLE9BQVFELElBQVYsRUFBZ0JuTSxPQUFPQSxLQUF2QixFQUE4QixjQUFjbG9CLENBQTVDLEVBQVgsRUFBNERzQyxRQUE1RCxDQUFxRSxJQUFyRTs7QUFFQSxZQUFJLEtBQUs1QixHQUFMLENBQVNpMEIsS0FBYixFQUFvQjtBQUNsQjNDLGVBQUt2TyxNQUFMLENBQWF6akIsSUFBSSxLQUFLVSxHQUFMLENBQVMwWSxNQUFkLEdBQXdCLFFBQXhCLEdBQW1DLEVBQS9DO0FBQ0Q7QUFDRjs7QUFFRCxhQUFPNFksS0FBS3hpQixRQUFMLENBQWMsR0FBZCxDQUFQO0FBQ0QsS0F0TVcsRUFzTVRvbEIsUUFBUSxnQkFBUzFjLE9BQVQsRUFBa0I7QUFDM0IzYixRQUFFLElBQUYsRUFBUXVrQixJQUFSLENBQWE1SSxPQUFiOztBQUVBM2IsUUFBRThDLEtBQUYsQ0FBUTZZLE9BQVI7QUFDRCxLQTFNVyxFQTBNVGtiLE9BQU8sZUFBU1gsS0FBVCxFQUFnQjtBQUN4QixVQUFJNW5CLE9BQVEsSUFBWjtBQUFBLFVBQ0k4UCxPQUFRLENBRFo7O0FBR0EsV0FBSyxJQUFJM2EsSUFBSSxDQUFiLEVBQWdCQSxLQUFLNkssS0FBSzBuQixLQUFMLENBQVdqekIsTUFBaEMsRUFBd0NVLEdBQXhDLEVBQTZDO0FBQzNDLFlBQUk2MEIsT0FBU2hxQixLQUFLMG5CLEtBQUwsQ0FBVzNvQixFQUFYLENBQWM1SixJQUFJLENBQWxCLENBQWI7QUFBQSxZQUNJODBCLFNBQVNqcUIsS0FBS25LLEdBQUwsQ0FBU3EwQixNQUFULEdBQW1CLzBCLEtBQUt5eUIsS0FBeEIsR0FBa0N6eUIsS0FBS3l5QixLQURwRDs7QUFHQSxZQUFJNW5CLEtBQUtuSyxHQUFMLENBQVNzMEIsU0FBVCxJQUFzQm5xQixLQUFLbkssR0FBTCxDQUFTczBCLFNBQVQsQ0FBbUIxMUIsTUFBbkIsR0FBNEJxYixJQUF0RCxFQUE0RDtBQUMxRCxjQUFJc2EsU0FBU3BxQixLQUFLbkssR0FBTCxDQUFTczBCLFNBQVQsQ0FBbUJyYSxJQUFuQixDQUFiO0FBQUEsY0FDSTdRLEtBQVNtckIsT0FBT25yQixFQUFQLElBQWNlLEtBQUtuSyxHQUFMLENBQVN3MEIsTUFEcEM7QUFBQSxjQUVJL3FCLE1BQVM4cUIsT0FBTzlxQixHQUFQLElBQWNVLEtBQUtuSyxHQUFMLENBQVN1ekIsT0FGcEM7QUFBQSxjQUdJSSxPQUFTUyxTQUFTaHJCLEVBQVQsR0FBY0ssR0FIM0I7O0FBS0EsY0FBSW5LLEtBQUtpMUIsT0FBT0UsS0FBaEIsRUFBdUI7QUFDckJOLGlCQUFLLzNCLElBQUwsQ0FBVSxPQUFWLEVBQW1CdTNCLElBQW5CO0FBQ0Q7O0FBRUQsY0FBSXIwQixLQUFLaTFCLE9BQU9FLEtBQWhCLEVBQXVCO0FBQ3JCeGE7QUFDRDtBQUNGLFNBYkQsTUFhTztBQUNMLGNBQUkwWixPQUFPUyxTQUFTLFFBQVQsR0FBb0IsU0FBL0I7O0FBRUFELGVBQUsvM0IsSUFBTCxDQUFVLE9BQVYsRUFBbUIsS0FBSzRELEdBQUwsQ0FBUzJ6QixJQUFULENBQW5CO0FBQ0Q7QUFDRjtBQUNGLEtBck9XLEVBcU9USyxVQUFVLGtCQUFTakMsS0FBVCxFQUFnQjtBQUMzQixVQUFJMkMsT0FBTyxLQUFLMTBCLEdBQUwsQ0FBUzIwQixLQUFULENBQWU1QyxRQUFRLENBQXZCLENBQVg7QUFDQSxhQUFRMkMsU0FBUyxFQUFWLEdBQWdCLEVBQWhCLEdBQXNCQSxRQUFRM0MsS0FBckM7QUFDRCxLQXhPVyxFQXdPVE0sT0FBTyxpQkFBVztBQUNuQixVQUFJTixRQUFRcFIsU0FBUyxLQUFLb1IsS0FBTCxDQUFXdmxCLEdBQVgsRUFBVCxFQUEyQixFQUEzQixDQUFaO0FBQUEsVUFBNEM7QUFDeENrb0IsYUFBUTNDLFFBQVFYLFFBQVE0QyxRQUFSLENBQWlCOXhCLElBQWpCLENBQXNCLElBQXRCLEVBQTRCNnZCLEtBQTVCLENBQVIsR0FBNkMsS0FBSy94QixHQUFMLENBQVM0MEIsVUFEbEU7O0FBR0EvNEIsUUFBRSxJQUFGLEVBQVFxQixJQUFSLENBQWEsVUFBYixFQUF5QixJQUF6QixFQUErQm1OLEdBQS9CLENBQW1DLFFBQW5DLEVBQTZDLEVBQTdDLEVBQWlEak8sSUFBakQsQ0FBc0QsT0FBdEQsRUFBK0RzNEIsSUFBL0Q7O0FBRUEsV0FBSzNDLEtBQUwsQ0FBVzMxQixJQUFYLENBQWdCLFVBQWhCLEVBQTRCLFVBQTVCO0FBQ0EsV0FBS3kxQixLQUFMLENBQVd6MUIsSUFBWCxDQUFnQixPQUFoQixFQUF5QnM0QixJQUF6Qjs7QUFFQSxVQUFJLEtBQUt4QyxNQUFULEVBQWlCO0FBQ2YsYUFBS0EsTUFBTCxDQUFZaGtCLElBQVo7QUFDRDtBQUNGLEtBcFBXLEVBb1BUeWtCLGFBQWEscUJBQVNaLEtBQVQsRUFBZ0I7QUFDOUIsVUFBSThDLE9BQU8sQ0FBQzlDLFFBQVFqekIsS0FBS2cyQixLQUFMLENBQVcvQyxLQUFYLENBQVQsRUFBNEJnRCxPQUE1QixDQUFvQyxDQUFwQyxDQUFYOztBQUVBLFVBQUlGLE9BQU8sS0FBSzcwQixHQUFMLENBQVNqQixLQUFULENBQWUrYSxJQUExQixFQUFnQztBQUM5QixZQUFJNlosT0FBTyxRQUFYLENBRDhCLENBQ3VCOztBQUVyRCxZQUFJLEtBQUszekIsR0FBTCxDQUFTZzFCLFFBQVQsSUFBcUJILE9BQU8sS0FBSzcwQixHQUFMLENBQVNqQixLQUFULENBQWVrYyxFQUEvQyxFQUFtRDtBQUFFO0FBQ25EMFksaUJBQU8sVUFBUDtBQUNELFNBRkQsTUFFTyxJQUFJa0IsT0FBTyxLQUFLNzBCLEdBQUwsQ0FBU2pCLEtBQVQsQ0FBZWsyQixJQUExQixFQUFnQztBQUFjO0FBQ25EdEIsaUJBQU8sU0FBUDtBQUNEOztBQUVELGFBQUs5QixLQUFMLENBQVczb0IsRUFBWCxDQUFjcEssS0FBS28yQixJQUFMLENBQVVuRCxLQUFWLElBQW1CLENBQWpDLEVBQW9DMzFCLElBQXBDLENBQXlDLE9BQXpDLEVBQWtELEtBQUs0RCxHQUFMLENBQVMyekIsSUFBVCxDQUFsRDtBQUNELE9BYjZCLENBYUM7QUFDaEMsS0FsUVcsRUFrUVRwQixTQUFTLGlCQUFTUixLQUFULEVBQWdCb0IsR0FBaEIsRUFBcUI7QUFDL0IsVUFBSSxLQUFLbnpCLEdBQUwsQ0FBU3FKLE1BQWIsRUFBcUI7QUFDbkIsWUFBSUEsU0FBU3hOLEVBQUUsS0FBS21FLEdBQUwsQ0FBU3FKLE1BQVgsQ0FBYjs7QUFFQSxZQUFJQSxPQUFPekssTUFBUCxLQUFrQixDQUF0QixFQUF5QjtBQUN2Qnd5QixrQkFBUThDLE1BQVIsQ0FBZWh5QixJQUFmLENBQW9CLElBQXBCLEVBQTBCLHFDQUExQjtBQUNEOztBQUVELFlBQUksS0FBS2xDLEdBQUwsQ0FBU20xQixZQUFULENBQXNCNTNCLE9BQXRCLENBQThCLFNBQTlCLElBQTJDLENBQS9DLEVBQWtEO0FBQ2hENnpCLGtCQUFROEMsTUFBUixDQUFlaHlCLElBQWYsQ0FBb0IsSUFBcEIsRUFBMEIsNkJBQTFCO0FBQ0Q7O0FBRUQsWUFBSXN4QixZQUFZTCxPQUFPQSxJQUFJbjFCLElBQUosSUFBWSxXQUFuQzs7QUFFQSxZQUFJK3pCLFVBQVUzdkIsU0FBZCxFQUF5QjtBQUN2QjJ2QixrQkFBUSxLQUFLL3hCLEdBQUwsQ0FBU28xQixVQUFqQjtBQUNELFNBRkQsTUFFTyxJQUFJckQsVUFBVSxJQUFkLEVBQW9CO0FBQ3pCQSxrQkFBUXlCLFlBQVksS0FBS3h6QixHQUFMLENBQVM2ekIsVUFBckIsR0FBa0MsS0FBSzd6QixHQUFMLENBQVNvMUIsVUFBbkQ7QUFDRCxTQUZNLE1BRUE7QUFDTCxjQUFJLEtBQUtwMUIsR0FBTCxDQUFTd3lCLFVBQVQsSUFBdUIsTUFBM0IsRUFBbUM7QUFDakNULG9CQUFRWCxRQUFRNEMsUUFBUixDQUFpQjl4QixJQUFqQixDQUFzQixJQUF0QixFQUE0QnBELEtBQUtvMkIsSUFBTCxDQUFVbkQsS0FBVixDQUE1QixDQUFSO0FBQ0QsV0FGRCxNQUVPLElBQUksS0FBSy94QixHQUFMLENBQVN5eEIsU0FBYixFQUF3QjtBQUM3Qk0sb0JBQVF4dEIsV0FBV3d0QixLQUFYLEVBQWtCZ0QsT0FBbEIsQ0FBMEIsQ0FBMUIsQ0FBUjtBQUNEOztBQUVELGNBQUksQ0FBQ3ZCLFNBQUQsSUFBYyxDQUFDLEtBQUt4ekIsR0FBTCxDQUFTcTFCLFVBQTVCLEVBQXdDO0FBQ3RDdEQsb0JBQVEsS0FBSy94QixHQUFMLENBQVNvMUIsVUFBakI7QUFDRDtBQUNGOztBQUVELFlBQUlyRCxLQUFKLEVBQVc7QUFDVEEsa0JBQVEsS0FBSy94QixHQUFMLENBQVNtMUIsWUFBVCxDQUFzQmoyQixRQUF0QixHQUFpQ3NGLE9BQWpDLENBQXlDLFNBQXpDLEVBQW9EdXRCLEtBQXBELENBQVI7QUFDRDs7QUFFRCxZQUFJMW9CLE9BQU9ULEVBQVAsQ0FBVSxRQUFWLENBQUosRUFBeUI7QUFDdkJTLGlCQUFPbUQsR0FBUCxDQUFXdWxCLEtBQVg7QUFDRCxTQUZELE1BRU87QUFDTDFvQixpQkFBTytXLElBQVAsQ0FBWTJSLEtBQVo7QUFDRDtBQUNGO0FBQ0YsS0ExU1csRUEwU1R1RCxTQUFTLG1CQUFXO0FBQ3JCejVCLFFBQUUsSUFBRixFQUFRcUIsSUFBUixDQUFhLFVBQWIsRUFBeUIsS0FBekIsRUFBZ0NtTixHQUFoQyxDQUFvQyxRQUFwQyxFQUE4QyxTQUE5QyxFQUF5RDdNLFVBQXpELENBQW9FLE9BQXBFOztBQUVBLFdBQUt1MEIsS0FBTCxDQUFXdjBCLFVBQVgsQ0FBc0IsVUFBdEIsRUFBa0MsVUFBbEM7O0FBRUEsV0FBSyxJQUFJOEIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUtVLEdBQUwsQ0FBUzBZLE1BQTdCLEVBQXFDcFosR0FBckMsRUFBMEM7QUFDeEMsYUFBS3V5QixLQUFMLENBQVczb0IsRUFBWCxDQUFjNUosQ0FBZCxFQUFpQmxELElBQWpCLENBQXNCLE9BQXRCLEVBQStCZzFCLFFBQVE0QyxRQUFSLENBQWlCOXhCLElBQWpCLENBQXNCLElBQXRCLEVBQTRCNUMsSUFBSSxDQUFoQyxDQUEvQjtBQUNEOztBQUVELFVBQUksS0FBSzR5QixNQUFULEVBQWlCO0FBQ2YsYUFBS0EsTUFBTCxDQUFZN25CLEdBQVosQ0FBZ0IsU0FBaEIsRUFBMkIsRUFBM0I7QUFDRDtBQUNGLEtBdFRXLEVBc1RUNm5CLFFBQVEsZ0JBQVNwQixLQUFULEVBQWdCO0FBQ3pCLGFBQU8sS0FBS2h6QixJQUFMLENBQVUsWUFBVztBQUMxQixZQUFJakMsRUFBRSxJQUFGLEVBQVFxQixJQUFSLENBQWEsVUFBYixNQUE2QixJQUFqQyxFQUF1QztBQUNyQ2swQixrQkFBUU4sUUFBUSxPQUFSLEdBQWtCLE9BQTFCLEVBQW1DNXVCLElBQW5DLENBQXdDLElBQXhDLEVBQThDLElBQTlDO0FBQ0EsZUFBSzZ2QixLQUFMLENBQVd2MEIsVUFBWCxDQUFzQixPQUF0QjtBQUNEO0FBQ0YsT0FMTSxDQUFQO0FBTUQsS0E3VFcsRUE2VFRzekIsT0FBTyxlQUFTaUIsS0FBVCxFQUFnQjtBQUN4QixhQUFPbDJCLEVBQUUsSUFBRixFQUFRaUMsSUFBUixDQUFhLFlBQVc7QUFDN0IsWUFBSWpDLEVBQUUsSUFBRixFQUFRcUIsSUFBUixDQUFhLFVBQWIsTUFBNkIsSUFBakMsRUFBdUM7QUFDckNrMEIsa0JBQVFhLE1BQVIsQ0FBZS92QixJQUFmLENBQW9CLElBQXBCLEVBQTBCNnZCLEtBQTFCOztBQUVBLGNBQUksQ0FBQyxLQUFLL3hCLEdBQUwsQ0FBUzh3QixLQUFkLEVBQXFCO0FBQ25CTSxvQkFBUThDLE1BQVIsQ0FBZWh5QixJQUFmLENBQW9CLElBQXBCLEVBQTBCLDhEQUExQjtBQUNEOztBQUdELGVBQUtsQyxHQUFMLENBQVM4d0IsS0FBVCxDQUFlNXVCLElBQWYsQ0FBb0IsSUFBcEIsRUFBMEI2dkIsS0FBMUIsRUFBaUNsMkIsRUFBRTA1QixLQUFGLENBQVEsT0FBUixDQUFqQzs7QUFFQW5FLGtCQUFRbUIsT0FBUixDQUFnQnJ3QixJQUFoQixDQUFxQixJQUFyQixFQUEyQjZ2QixLQUEzQjtBQUNEO0FBQ0YsT0FiTSxDQUFQO0FBY0QsS0E1VVcsRUE0VVQvTSxTQUFTLG1CQUFXO0FBQ3JCLGFBQU9ucEIsRUFBRSxJQUFGLEVBQVFpQyxJQUFSLENBQWEsWUFBVztBQUM3QixZQUFJd3pCLE9BQU96MUIsRUFBRSxJQUFGLENBQVg7QUFBQSxZQUNJc3pCLE1BQU9tQyxLQUFLcDBCLElBQUwsQ0FBVSxLQUFWLENBRFg7O0FBR0EsWUFBSWl5QixHQUFKLEVBQVM7QUFDUG1DLGVBQUs3bkIsR0FBTCxDQUFTLE9BQVQsRUFBa0IrckIsS0FBbEIsR0FBMEJuckIsR0FBMUIsQ0FBOEIsRUFBRW9yQixRQUFRdEcsSUFBSXR1QixLQUFKLENBQVU0MEIsTUFBcEIsRUFBNEIvdkIsT0FBT3lwQixJQUFJdHVCLEtBQUosQ0FBVTZFLEtBQTdDLEVBQTlCLEVBQW9GakksVUFBcEYsQ0FBK0YsVUFBL0Y7QUFDRCxTQUZELE1BRU87QUFDTDZ6QixlQUFLcDBCLElBQUwsQ0FBVSxLQUFWLEVBQWlCbzBCLEtBQUtvRSxLQUFMLEdBQWEsQ0FBYixDQUFqQjtBQUNEO0FBQ0YsT0FUTSxDQUFQO0FBVUQsS0F2VlcsRUF1VlRDLFVBQVUsb0JBQVc7QUFDdEIsVUFBSTVELFFBQVEsRUFBWjtBQUFBLFVBQ0l0bkIsS0FESjs7QUFHQTVPLFFBQUUsSUFBRixFQUFRaUMsSUFBUixDQUFhLFlBQVc7QUFDdEIyTSxnQkFBUSxLQUFLc25CLEtBQUwsQ0FBV3ZsQixHQUFYLEVBQVI7O0FBRUF1bEIsY0FBTTMwQixJQUFOLENBQVdxTixRQUFRbEcsV0FBV2tHLEtBQVgsQ0FBUixHQUE0QnJJLFNBQXZDO0FBQ0QsT0FKRDs7QUFNQSxhQUFRMnZCLE1BQU1uekIsTUFBTixHQUFlLENBQWhCLEdBQXFCbXpCLEtBQXJCLEdBQTZCQSxNQUFNLENBQU4sQ0FBcEM7QUFDRCxLQWxXVyxFQWtXVEssVUFBVSxrQkFBU3dELFFBQVQsRUFBbUI7QUFDOUIsYUFBTyxLQUFLOTNCLElBQUwsQ0FBVSxZQUFXO0FBQzFCLFlBQUl3ekIsT0FBT3oxQixFQUFFLElBQUYsQ0FBWDs7QUFFQSxZQUFJeTFCLEtBQUtwMEIsSUFBTCxDQUFVLFVBQVYsTUFBMEIwNEIsUUFBOUIsRUFBd0M7QUFDdEMsY0FBSUEsUUFBSixFQUFjO0FBQ1p0RSxpQkFBSzduQixHQUFMLENBQVMsT0FBVCxFQUFrQnFGLFFBQWxCLENBQTJCLEdBQTNCLEVBQWdDckYsR0FBaEMsQ0FBb0MsT0FBcEM7O0FBRUEybkIsb0JBQVFpQixLQUFSLENBQWNud0IsSUFBZCxDQUFtQixJQUFuQjtBQUNELFdBSkQsTUFJTztBQUNMa3ZCLG9CQUFRa0IsTUFBUixDQUFlcHdCLElBQWYsQ0FBb0IsSUFBcEI7QUFDQWt2QixvQkFBUWtFLE9BQVIsQ0FBZ0JwekIsSUFBaEIsQ0FBcUIsSUFBckI7QUFDRDs7QUFFRG92QixlQUFLcDBCLElBQUwsQ0FBVSxVQUFWLEVBQXNCMDRCLFFBQXRCO0FBQ0Q7QUFDRixPQWZNLENBQVA7QUFnQkQsS0FuWFcsRUFtWFRDLFFBQVEsa0JBQVc7QUFDcEIsYUFBT3pFLFFBQVEwRSxHQUFSLENBQVk1ekIsSUFBWixDQUFpQixJQUFqQixFQUF1QixFQUF2QixDQUFQO0FBQ0QsS0FyWFcsRUFxWFQ2dkIsT0FBTyxpQkFBVztBQUNuQixhQUFPeHdCLFVBQVUzQyxNQUFWLEdBQW1Cd3lCLFFBQVEyRSxRQUFSLENBQWlCdjBCLEtBQWpCLENBQXVCLElBQXZCLEVBQTZCRCxTQUE3QixDQUFuQixHQUE2RDZ2QixRQUFRdUUsUUFBUixDQUFpQnp6QixJQUFqQixDQUFzQixJQUF0QixDQUFwRTtBQUNELEtBdlhXLEVBdVhUNHpCLEtBQUssYUFBU25GLFFBQVQsRUFBbUI7QUFDekIsYUFBTyxLQUFLN3lCLElBQUwsQ0FBVSxZQUFXO0FBQzFCLFlBQUl3ekIsT0FBU3oxQixFQUFFLElBQUYsQ0FBYjtBQUFBLFlBQ0ltNkIsU0FBUzFFLEtBQUtwMEIsSUFBTCxDQUFVLFVBQVYsQ0FEYjtBQUFBLFlBRUkrNEIsT0FBU3A2QixFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYTB0QixNQUFiLEVBQXFCckYsUUFBckIsQ0FGYjs7QUFJQVcsYUFBS0QsSUFBTCxDQUFVNEUsSUFBVjtBQUNELE9BTk0sQ0FBUDtBQU9ELEtBL1hXLEVBK1hURixVQUFVLGtCQUFTaEUsS0FBVCxFQUFnQjtBQUMzQixhQUFPbDJCLEVBQUUsSUFBRixFQUFRaUMsSUFBUixDQUFhLFlBQVc7QUFDN0IsWUFBSWpDLEVBQUUsSUFBRixFQUFRcUIsSUFBUixDQUFhLFVBQWIsTUFBNkIsSUFBakMsRUFBdUM7QUFDckNrMEIsa0JBQVFhLE1BQVIsQ0FBZS92QixJQUFmLENBQW9CLElBQXBCLEVBQTBCNnZCLEtBQTFCO0FBQ0FYLGtCQUFRbUIsT0FBUixDQUFnQnJ3QixJQUFoQixDQUFxQixJQUFyQixFQUEyQjZ2QixLQUEzQjtBQUNEO0FBQ0YsT0FMTSxDQUFQO0FBTUQ7QUF0WVcsR0FBZDs7QUF5WUFsMkIsSUFBRTJHLEVBQUYsQ0FBSzZ1QixJQUFMLEdBQVksVUFBUzV2QixNQUFULEVBQWlCO0FBQzNCLFFBQUkydkIsUUFBUTN2QixNQUFSLENBQUosRUFBcUI7QUFDbkIsYUFBTzJ2QixRQUFRM3ZCLE1BQVIsRUFBZ0JELEtBQWhCLENBQXNCLElBQXRCLEVBQTRCUSxNQUFNQyxTQUFOLENBQWdCOUMsS0FBaEIsQ0FBc0IrQyxJQUF0QixDQUEyQlgsU0FBM0IsRUFBc0MsQ0FBdEMsQ0FBNUIsQ0FBUDtBQUNELEtBRkQsTUFFTyxJQUFJLFFBQU9FLE1BQVAseUNBQU9BLE1BQVAsT0FBa0IsUUFBbEIsSUFBOEIsQ0FBQ0EsTUFBbkMsRUFBMkM7QUFDaEQsYUFBTzJ2QixRQUFRN2YsSUFBUixDQUFhL1AsS0FBYixDQUFtQixJQUFuQixFQUF5QkQsU0FBekIsQ0FBUDtBQUNELEtBRk0sTUFFQTtBQUNMMUYsUUFBRThDLEtBQUYsQ0FBUSxZQUFZOEMsTUFBWixHQUFxQixrQkFBN0I7QUFDRDtBQUNGLEdBUkQ7O0FBVUE1RixJQUFFMkcsRUFBRixDQUFLNnVCLElBQUwsQ0FBVXJjLFFBQVYsR0FBcUI7QUFDbkJrZCxZQUFnQixLQURHO0FBRW5CMkIsZ0JBQWdCLHFCQUZHO0FBR25CUixlQUFnQiwwQkFIRztBQUluQkMsY0FBZ0IsMEJBSkc7QUFLbkJRLGlCQUFnQixNQUxHO0FBTW5CaEQsV0FBZ0IxdUIsU0FORztBQU9uQnF3QixVQUFnQixLQVBHO0FBUW5CdUMsY0FBZ0IsSUFSRztBQVNuQkwsV0FBZ0IsQ0FBQyxLQUFELEVBQVEsTUFBUixFQUFnQixTQUFoQixFQUEyQixNQUEzQixFQUFtQyxVQUFuQyxDQVRHO0FBVW5CTCxlQUFnQmx5QixTQVZHO0FBV25CZ3hCLGNBQWdCaHhCLFNBWEc7QUFZbkJveEIsZUFBZ0JweEIsU0FaRztBQWFuQnd5QixnQkFBZ0IsZ0JBYkc7QUFjbkJsYyxZQUFnQixDQWRHO0FBZW5Ca1osZUFBZ0IsRUFmRztBQWdCbkJILGVBQWdCLEtBaEJHO0FBaUJuQlcsY0FBZ0IsS0FqQkc7QUFrQm5CcnpCLFdBQWdCLEVBQUUrYSxNQUFNLEdBQVIsRUFBYW1iLE1BQU0sRUFBbkIsRUFBdUJoYSxJQUFJLEdBQTNCLEVBbEJHO0FBbUJuQjhXLFdBQWdCM3ZCLFNBbkJHO0FBb0JuQjJ4QixlQUFnQixPQXBCRztBQXFCbkJNLFlBQWdCLEtBckJHO0FBc0JuQnhwQixVQUFnQixJQXRCRztBQXVCbkJvcEIsV0FBZ0IsSUF2Qkc7QUF3Qm5CaUMsY0FBZ0IseUJBeEJHO0FBeUJuQjNDLGFBQWdCLG9CQXpCRztBQTBCbkJpQixZQUFnQixrQkExQkc7QUEyQm5CbnJCLFlBQWdCakgsU0EzQkc7QUE0Qm5CK3lCLGtCQUFnQixTQTVCRztBQTZCbkJFLGdCQUFnQixLQTdCRztBQThCbkJELGdCQUFnQixFQTlCRztBQStCbkI1QyxnQkFBZ0IsTUEvQkc7QUFnQ25COXNCLFdBQWdCO0FBaENHLEdBQXJCO0FBbUNELENBeGJBLEVBd2JFakIsTUF4YkY7Ozs7O0FDWEQ7Ozs7Ozs7Ozs7OztBQVlBLENBQUMsQ0FBQyxVQUFTNUksQ0FBVCxFQUFZMEcsTUFBWixFQUFvQjlCLFFBQXBCLEVBQThCMkIsU0FBOUIsRUFBeUM7O0FBRTFDOzs7Ozs7O0FBT0EsVUFBUyt6QixHQUFULENBQWFyeEIsT0FBYixFQUFzQm1LLE9BQXRCLEVBQStCOztBQUU5Qjs7OztBQUlBLE9BQUswaEIsUUFBTCxHQUFnQixJQUFoQjs7QUFFQTs7OztBQUlBLE9BQUsxaEIsT0FBTCxHQUFlcFQsRUFBRXlNLE1BQUYsQ0FBUyxFQUFULEVBQWE2dEIsSUFBSUMsUUFBakIsRUFBMkJubkIsT0FBM0IsQ0FBZjs7QUFFQTs7OztBQUlBLE9BQUtoUyxRQUFMLEdBQWdCcEIsRUFBRWlKLE9BQUYsQ0FBaEI7O0FBRUE7Ozs7QUFJQSxPQUFLdXhCLFNBQUwsR0FBaUIsRUFBakI7O0FBRUE7Ozs7QUFJQSxPQUFLcDZCLFFBQUwsR0FBZ0IsRUFBaEI7O0FBRUE7Ozs7QUFJQSxPQUFLcTZCLFFBQUwsR0FBZ0IsRUFBaEI7O0FBRUE7Ozs7QUFJQSxPQUFLQyxRQUFMLEdBQWdCLElBQWhCOztBQUVBOzs7O0FBSUEsT0FBS0MsTUFBTCxHQUFjLElBQWQ7O0FBRUE7Ozs7O0FBS0EsT0FBS0MsWUFBTCxHQUFvQixFQUFwQjs7QUFFQTs7Ozs7QUFLQSxPQUFLQyxXQUFMLEdBQW1CLElBQW5COztBQUVBOzs7QUFHQSxPQUFLQyxNQUFMLEdBQWMsSUFBZDs7QUFFQTs7OztBQUlBLE9BQUtDLE1BQUwsR0FBYyxFQUFkOztBQUVBOzs7O0FBSUEsT0FBS0MsT0FBTCxHQUFlLEVBQWY7O0FBRUE7Ozs7O0FBS0EsT0FBS0MsUUFBTCxHQUFnQixFQUFoQjs7QUFFQTs7O0FBR0EsT0FBS0MsT0FBTCxHQUFlLEVBQWY7O0FBRUE7Ozs7QUFJQSxPQUFLQyxZQUFMLEdBQW9CLEVBQXBCOztBQUVBOzs7O0FBSUEsT0FBS0MsS0FBTCxHQUFhLEVBQWI7O0FBRUE7Ozs7O0FBS0EsT0FBS0MsS0FBTCxHQUFhO0FBQ1poZSxTQUFNLElBRE07QUFFWjdQLFdBQVEsSUFGSTtBQUdaOHRCLFlBQVMsSUFIRztBQUlaQyxVQUFPO0FBQ04zekIsV0FBTyxJQUREO0FBRU55RyxhQUFTO0FBRkgsSUFKSztBQVFabXRCLGNBQVc7QUFSQyxHQUFiOztBQVdBOzs7OztBQUtBLE9BQUtDLE9BQUwsR0FBZTtBQUNkcHRCLFlBQVMsRUFESztBQUVkcXRCLFNBQU07QUFDTCxvQkFBZ0IsQ0FBRSxNQUFGLENBRFg7QUFFTCxpQkFBYSxDQUFFLE1BQUYsQ0FGUjtBQUdMLGdCQUFZLENBQUUsYUFBRjtBQUhQO0FBRlEsR0FBZjs7QUFTQTE3QixJQUFFaUMsSUFBRixDQUFPLENBQUUsVUFBRixFQUFjLG1CQUFkLENBQVAsRUFBNENqQyxFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTbDRCLENBQVQsRUFBWW00QixPQUFaLEVBQXFCO0FBQ3hFLFFBQUtwQixTQUFMLENBQWVvQixPQUFmLElBQTBCNTdCLEVBQUUyN0IsS0FBRixDQUFRLEtBQUtDLE9BQUwsQ0FBUixFQUF1QixJQUF2QixDQUExQjtBQUNBLEdBRjJDLEVBRXpDLElBRnlDLENBQTVDOztBQUlBNTdCLElBQUVpQyxJQUFGLENBQU9xNEIsSUFBSXVCLE9BQVgsRUFBb0I3N0IsRUFBRTI3QixLQUFGLENBQVEsVUFBU2x3QixHQUFULEVBQWNqTCxNQUFkLEVBQXNCO0FBQ2pELFFBQUtKLFFBQUwsQ0FBY3FMLElBQUlxd0IsTUFBSixDQUFXLENBQVgsRUFBYzc2QixXQUFkLEtBQThCd0ssSUFBSW5JLEtBQUosQ0FBVSxDQUFWLENBQTVDLElBQ0csSUFBSTlDLE1BQUosQ0FBVyxJQUFYLENBREg7QUFFQSxHQUhtQixFQUdqQixJQUhpQixDQUFwQjs7QUFLQVIsSUFBRWlDLElBQUYsQ0FBT3E0QixJQUFJeUIsT0FBWCxFQUFvQi83QixFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTSyxRQUFULEVBQW1CQyxNQUFuQixFQUEyQjtBQUN0RCxRQUFLYixLQUFMLENBQVc3NUIsSUFBWCxDQUFnQjtBQUNmLGNBQVUwNkIsT0FBT252QixNQURGO0FBRWYsV0FBTzlNLEVBQUUyN0IsS0FBRixDQUFRTSxPQUFPQyxHQUFmLEVBQW9CLElBQXBCO0FBRlEsSUFBaEI7QUFJQSxHQUxtQixFQUtqQixJQUxpQixDQUFwQjs7QUFPQSxPQUFLcG1CLEtBQUw7QUFDQSxPQUFLcW1CLFVBQUw7QUFDQTs7QUFFRDs7OztBQUlBN0IsS0FBSUMsUUFBSixHQUFlO0FBQ2Q3bkIsU0FBTyxDQURPO0FBRWQwcEIsUUFBTSxLQUZRO0FBR2RDLFVBQVEsS0FITTtBQUlkQyxVQUFRLEtBSk07O0FBTWRDLGFBQVcsSUFORztBQU9kQyxhQUFXLElBUEc7QUFRZEMsWUFBVSxJQVJJO0FBU2RDLFlBQVUsS0FUSTs7QUFXZDlSLFVBQVEsQ0FYTTtBQVlkK1IsZ0JBQWMsQ0FaQTs7QUFjZEMsU0FBTyxLQWRPO0FBZWRDLFlBQVUsSUFmSTtBQWdCZEMsYUFBVyxLQWhCRzs7QUFrQmRDLGlCQUFlLENBbEJEO0FBbUJkejhCLE9BQUssS0FuQlM7O0FBcUJkMDhCLGNBQVksR0FyQkU7QUFzQmRDLGNBQVksS0F0QkU7QUF1QmRDLGdCQUFjLEtBdkJBOztBQXlCZEMsY0FBWSxFQXpCRTtBQTBCZEMseUJBQXVCLEdBMUJUO0FBMkJkQyx5QkFBdUIzMkIsTUEzQlQ7O0FBNkJkNDJCLGtCQUFnQixPQTdCRjs7QUErQmQxdEIsUUFBTSxLQS9CUTs7QUFpQ2QydEIsc0JBQW9CLEtBakNOO0FBa0NkQyxlQUFhLEtBbENDO0FBbUNkQyxnQkFBYyxLQW5DQTs7QUFxQ2RDLGdCQUFjLGFBckNBO0FBc0NkQyxlQUFhLFlBdENDO0FBdUNkQyxnQkFBYyxhQXZDQTtBQXdDZEMsWUFBVSxTQXhDSTtBQXlDZEMsbUJBQWlCLGdCQXpDSDtBQTBDZEMsYUFBVyxVQTFDRztBQTJDZEMsYUFBVyxVQTNDRztBQTRDZEMsY0FBWSxXQTVDRTtBQTZDZEMsbUJBQWlCLGlCQTdDSDtBQThDZEMsYUFBVztBQTlDRyxFQUFmOztBQWlEQTs7Ozs7O0FBTUE3RCxLQUFJOEQsS0FBSixHQUFZO0FBQ1hDLFdBQVMsU0FERTtBQUVYQyxTQUFPLE9BRkk7QUFHWEMsU0FBTztBQUhJLEVBQVo7O0FBTUE7Ozs7OztBQU1BakUsS0FBSWtFLElBQUosR0FBVztBQUNWOUUsU0FBTyxPQURHO0FBRVYrRSxTQUFPO0FBRkcsRUFBWDs7QUFLQTs7OztBQUlBbkUsS0FBSXVCLE9BQUosR0FBYyxFQUFkOztBQUVBOzs7QUFHQXZCLEtBQUl5QixPQUFKLEdBQWMsQ0FBRTtBQUNmanZCLFVBQVEsQ0FBRSxPQUFGLEVBQVcsVUFBWCxDQURPO0FBRWZvdkIsT0FBSyxlQUFXO0FBQ2YsUUFBS3BCLE1BQUwsR0FBYyxLQUFLMTVCLFFBQUwsQ0FBY3lJLEtBQWQsRUFBZDtBQUNBO0FBSmMsRUFBRixFQUtYO0FBQ0ZpRCxVQUFRLENBQUUsT0FBRixFQUFXLE9BQVgsRUFBb0IsVUFBcEIsQ0FETjtBQUVGb3ZCLE9BQUssYUFBU3dDLEtBQVQsRUFBZ0I7QUFDcEJBLFNBQU1yd0IsT0FBTixHQUFnQixLQUFLMHNCLE1BQUwsSUFBZSxLQUFLQSxNQUFMLENBQVksS0FBSzRELFFBQUwsQ0FBYyxLQUFLakUsUUFBbkIsQ0FBWixDQUEvQjtBQUNBO0FBSkMsRUFMVyxFQVVYO0FBQ0Y1dEIsVUFBUSxDQUFFLE9BQUYsRUFBVyxVQUFYLENBRE47QUFFRm92QixPQUFLLGVBQVc7QUFDZixRQUFLMEMsTUFBTCxDQUFZM3JCLFFBQVosQ0FBcUIsU0FBckIsRUFBZ0NzTyxNQUFoQztBQUNBO0FBSkMsRUFWVyxFQWVYO0FBQ0Z6VSxVQUFRLENBQUUsT0FBRixFQUFXLE9BQVgsRUFBb0IsVUFBcEIsQ0FETjtBQUVGb3ZCLE9BQUssYUFBU3dDLEtBQVQsRUFBZ0I7QUFDcEIsT0FBSTlULFNBQVMsS0FBS2tLLFFBQUwsQ0FBY2xLLE1BQWQsSUFBd0IsRUFBckM7QUFBQSxPQUNDaVUsT0FBTyxDQUFDLEtBQUsvSixRQUFMLENBQWNnSSxTQUR2QjtBQUFBLE9BRUN4OEIsTUFBTSxLQUFLdzBCLFFBQUwsQ0FBY3gwQixHQUZyQjtBQUFBLE9BR0NrTyxNQUFNO0FBQ0wsYUFBUyxNQURKO0FBRUwsbUJBQWVsTyxNQUFNc3FCLE1BQU4sR0FBZSxFQUZ6QjtBQUdMLG9CQUFnQnRxQixNQUFNLEVBQU4sR0FBV3NxQjtBQUh0QixJQUhQOztBQVNBLElBQUNpVSxJQUFELElBQVMsS0FBS0QsTUFBTCxDQUFZM3JCLFFBQVosR0FBdUJ6RSxHQUF2QixDQUEyQkEsR0FBM0IsQ0FBVDs7QUFFQWt3QixTQUFNbHdCLEdBQU4sR0FBWUEsR0FBWjtBQUNBO0FBZkMsRUFmVyxFQStCWDtBQUNGMUIsVUFBUSxDQUFFLE9BQUYsRUFBVyxPQUFYLEVBQW9CLFVBQXBCLENBRE47QUFFRm92QixPQUFLLGFBQVN3QyxLQUFULEVBQWdCO0FBQ3BCLE9BQUk3MEIsUUFBUSxDQUFDLEtBQUtBLEtBQUwsS0FBZSxLQUFLaXJCLFFBQUwsQ0FBY3BpQixLQUE5QixFQUFxQ3dtQixPQUFyQyxDQUE2QyxDQUE3QyxJQUFrRCxLQUFLcEUsUUFBTCxDQUFjbEssTUFBNUU7QUFBQSxPQUNDZ1MsUUFBUSxJQURUO0FBQUEsT0FFQ2tDLFdBQVcsS0FBSy9ELE1BQUwsQ0FBWWg0QixNQUZ4QjtBQUFBLE9BR0M4N0IsT0FBTyxDQUFDLEtBQUsvSixRQUFMLENBQWNnSSxTQUh2QjtBQUFBLE9BSUNpQyxTQUFTLEVBSlY7O0FBTUFMLFNBQU1oc0IsS0FBTixHQUFjO0FBQ2JrcUIsV0FBTyxLQURNO0FBRWIveUIsV0FBT0E7QUFGTSxJQUFkOztBQUtBLFVBQU9pMUIsVUFBUCxFQUFtQjtBQUNsQmxDLFlBQVEsS0FBSzNCLFFBQUwsQ0FBYzZELFFBQWQsQ0FBUjtBQUNBbEMsWUFBUSxLQUFLOUgsUUFBTCxDQUFjK0gsUUFBZCxJQUEwQjU1QixLQUFLNmQsR0FBTCxDQUFTOGIsS0FBVCxFQUFnQixLQUFLOUgsUUFBTCxDQUFjcGlCLEtBQTlCLENBQTFCLElBQWtFa3FCLEtBQTFFOztBQUVBOEIsVUFBTWhzQixLQUFOLENBQVlrcUIsS0FBWixHQUFvQkEsUUFBUSxDQUFSLElBQWE4QixNQUFNaHNCLEtBQU4sQ0FBWWtxQixLQUE3Qzs7QUFFQW1DLFdBQU9ELFFBQVAsSUFBbUIsQ0FBQ0QsSUFBRCxHQUFRLEtBQUs5RCxNQUFMLENBQVkrRCxRQUFaLEVBQXNCajFCLEtBQXRCLEVBQVIsR0FBd0NBLFFBQVEreUIsS0FBbkU7QUFDQTs7QUFFRCxRQUFLMUIsT0FBTCxHQUFlNkQsTUFBZjtBQUNBO0FBeEJDLEVBL0JXLEVBd0RYO0FBQ0ZqeUIsVUFBUSxDQUFFLE9BQUYsRUFBVyxVQUFYLENBRE47QUFFRm92QixPQUFLLGVBQVc7QUFDZixPQUFJOEMsU0FBUyxFQUFiO0FBQUEsT0FDQ3RzQixRQUFRLEtBQUtxb0IsTUFEZDtBQUFBLE9BRUNqRyxXQUFXLEtBQUtBLFFBRmpCOztBQUdDO0FBQ0FtSyxVQUFPaDhCLEtBQUt3RSxHQUFMLENBQVNxdEIsU0FBU3BpQixLQUFULEdBQWlCLENBQTFCLEVBQTZCLENBQTdCLENBSlI7QUFBQSxPQUtDMUQsT0FBTy9MLEtBQUtvMkIsSUFBTCxDQUFVM21CLE1BQU0zUCxNQUFOLEdBQWUsQ0FBekIsSUFBOEIsQ0FMdEM7QUFBQSxPQU1DbThCLFNBQVNwSyxTQUFTc0gsSUFBVCxJQUFpQjFwQixNQUFNM1AsTUFBdkIsR0FBZ0MreEIsU0FBU3dILE1BQVQsR0FBa0IyQyxJQUFsQixHQUF5Qmg4QixLQUFLd0UsR0FBTCxDQUFTdzNCLElBQVQsRUFBZWp3QixJQUFmLENBQXpELEdBQWdGLENBTjFGO0FBQUEsT0FPQ2tZLFNBQVMsRUFQVjtBQUFBLE9BUUNnTyxVQUFVLEVBUlg7O0FBVUFnSyxhQUFVLENBQVY7O0FBRUEsVUFBT0EsUUFBUCxFQUFpQjtBQUNoQjtBQUNBRixXQUFPejlCLElBQVAsQ0FBWSxLQUFLNDlCLFNBQUwsQ0FBZUgsT0FBT2o4QixNQUFQLEdBQWdCLENBQS9CLEVBQWtDLElBQWxDLENBQVo7QUFDQW1rQixhQUFTQSxTQUFTeFUsTUFBTXNzQixPQUFPQSxPQUFPajhCLE1BQVAsR0FBZ0IsQ0FBdkIsQ0FBTixFQUFpQyxDQUFqQyxFQUFvQ3E4QixTQUF0RDtBQUNBSixXQUFPejlCLElBQVAsQ0FBWSxLQUFLNDlCLFNBQUwsQ0FBZXpzQixNQUFNM1AsTUFBTixHQUFlLENBQWYsR0FBbUIsQ0FBQ2k4QixPQUFPajhCLE1BQVAsR0FBZ0IsQ0FBakIsSUFBc0IsQ0FBeEQsRUFBMkQsSUFBM0QsQ0FBWjtBQUNBbXlCLGNBQVV4aUIsTUFBTXNzQixPQUFPQSxPQUFPajhCLE1BQVAsR0FBZ0IsQ0FBdkIsQ0FBTixFQUFpQyxDQUFqQyxFQUFvQ3E4QixTQUFwQyxHQUFnRGxLLE9BQTFEO0FBQ0E7O0FBRUQsUUFBSzhGLE9BQUwsR0FBZWdFLE1BQWY7O0FBRUFoL0IsS0FBRWtuQixNQUFGLEVBQVVsVixRQUFWLENBQW1CLFFBQW5CLEVBQTZCak0sUUFBN0IsQ0FBc0MsS0FBSzY0QixNQUEzQztBQUNBNStCLEtBQUVrMUIsT0FBRixFQUFXbGpCLFFBQVgsQ0FBb0IsUUFBcEIsRUFBOEJxdEIsU0FBOUIsQ0FBd0MsS0FBS1QsTUFBN0M7QUFDQTtBQTNCQyxFQXhEVyxFQW9GWDtBQUNGOXhCLFVBQVEsQ0FBRSxPQUFGLEVBQVcsT0FBWCxFQUFvQixVQUFwQixDQUROO0FBRUZvdkIsT0FBSyxlQUFXO0FBQ2YsT0FBSTU3QixNQUFNLEtBQUt3MEIsUUFBTCxDQUFjeDBCLEdBQWQsR0FBb0IsQ0FBcEIsR0FBd0IsQ0FBQyxDQUFuQztBQUFBLE9BQ0MwTyxPQUFPLEtBQUtnc0IsT0FBTCxDQUFhajRCLE1BQWIsR0FBc0IsS0FBS2c0QixNQUFMLENBQVloNEIsTUFEMUM7QUFBQSxPQUVDKzdCLFdBQVcsQ0FBQyxDQUZiO0FBQUEsT0FHQzVmLFdBQVcsQ0FIWjtBQUFBLE9BSUM3USxVQUFVLENBSlg7QUFBQSxPQUtDaXhCLGNBQWMsRUFMZjs7QUFPQSxVQUFPLEVBQUVSLFFBQUYsR0FBYTl2QixJQUFwQixFQUEwQjtBQUN6QmtRLGVBQVdvZ0IsWUFBWVIsV0FBVyxDQUF2QixLQUE2QixDQUF4QztBQUNBendCLGNBQVUsS0FBSzZzQixPQUFMLENBQWEsS0FBS3lELFFBQUwsQ0FBY0csUUFBZCxDQUFiLElBQXdDLEtBQUtoSyxRQUFMLENBQWNsSyxNQUFoRTtBQUNBMFUsZ0JBQVkvOUIsSUFBWixDQUFpQjJkLFdBQVc3USxVQUFVL04sR0FBdEM7QUFDQTs7QUFFRCxRQUFLczZCLFlBQUwsR0FBb0IwRSxXQUFwQjtBQUNBO0FBakJDLEVBcEZXLEVBc0dYO0FBQ0Z4eUIsVUFBUSxDQUFFLE9BQUYsRUFBVyxPQUFYLEVBQW9CLFVBQXBCLENBRE47QUFFRm92QixPQUFLLGVBQVc7QUFDZixPQUFJcUQsVUFBVSxLQUFLekssUUFBTCxDQUFjNkgsWUFBNUI7QUFBQSxPQUNDMkMsY0FBYyxLQUFLMUUsWUFEcEI7QUFBQSxPQUVDcHNCLE1BQU07QUFDTCxhQUFTdkwsS0FBS28yQixJQUFMLENBQVVwMkIsS0FBS3NTLEdBQUwsQ0FBUytwQixZQUFZQSxZQUFZdjhCLE1BQVosR0FBcUIsQ0FBakMsQ0FBVCxDQUFWLElBQTJEdzhCLFVBQVUsQ0FEekU7QUFFTCxvQkFBZ0JBLFdBQVcsRUFGdEI7QUFHTCxxQkFBaUJBLFdBQVc7QUFIdkIsSUFGUDs7QUFRQSxRQUFLWCxNQUFMLENBQVlwd0IsR0FBWixDQUFnQkEsR0FBaEI7QUFDQTtBQVpDLEVBdEdXLEVBbUhYO0FBQ0YxQixVQUFRLENBQUUsT0FBRixFQUFXLE9BQVgsRUFBb0IsVUFBcEIsQ0FETjtBQUVGb3ZCLE9BQUssYUFBU3dDLEtBQVQsRUFBZ0I7QUFDcEIsT0FBSUksV0FBVyxLQUFLbEUsWUFBTCxDQUFrQjczQixNQUFqQztBQUFBLE9BQ0M4N0IsT0FBTyxDQUFDLEtBQUsvSixRQUFMLENBQWNnSSxTQUR2QjtBQUFBLE9BRUNwcUIsUUFBUSxLQUFLa3NCLE1BQUwsQ0FBWTNyQixRQUFaLEVBRlQ7O0FBSUEsT0FBSTRyQixRQUFRSCxNQUFNaHNCLEtBQU4sQ0FBWWtxQixLQUF4QixFQUErQjtBQUM5QixXQUFPa0MsVUFBUCxFQUFtQjtBQUNsQkosV0FBTWx3QixHQUFOLENBQVUzRSxLQUFWLEdBQWtCLEtBQUtxeEIsT0FBTCxDQUFhLEtBQUt5RCxRQUFMLENBQWNHLFFBQWQsQ0FBYixDQUFsQjtBQUNBcHNCLFdBQU1yRixFQUFOLENBQVN5eEIsUUFBVCxFQUFtQnR3QixHQUFuQixDQUF1Qmt3QixNQUFNbHdCLEdBQTdCO0FBQ0E7QUFDRCxJQUxELE1BS08sSUFBSXF3QixJQUFKLEVBQVU7QUFDaEJILFVBQU1sd0IsR0FBTixDQUFVM0UsS0FBVixHQUFrQjYwQixNQUFNaHNCLEtBQU4sQ0FBWTdJLEtBQTlCO0FBQ0E2SSxVQUFNbEUsR0FBTixDQUFVa3dCLE1BQU1sd0IsR0FBaEI7QUFDQTtBQUNEO0FBaEJDLEVBbkhXLEVBb0lYO0FBQ0YxQixVQUFRLENBQUUsT0FBRixDQUROO0FBRUZvdkIsT0FBSyxlQUFXO0FBQ2YsUUFBS3RCLFlBQUwsQ0FBa0I3M0IsTUFBbEIsR0FBMkIsQ0FBM0IsSUFBZ0MsS0FBSzY3QixNQUFMLENBQVlqOUIsVUFBWixDQUF1QixPQUF2QixDQUFoQztBQUNBO0FBSkMsRUFwSVcsRUF5SVg7QUFDRm1MLFVBQVEsQ0FBRSxPQUFGLEVBQVcsT0FBWCxFQUFvQixVQUFwQixDQUROO0FBRUZvdkIsT0FBSyxhQUFTd0MsS0FBVCxFQUFnQjtBQUNwQkEsU0FBTXJ3QixPQUFOLEdBQWdCcXdCLE1BQU1yd0IsT0FBTixHQUFnQixLQUFLdXdCLE1BQUwsQ0FBWTNyQixRQUFaLEdBQXVCdXNCLEtBQXZCLENBQTZCZCxNQUFNcndCLE9BQW5DLENBQWhCLEdBQThELENBQTlFO0FBQ0Fxd0IsU0FBTXJ3QixPQUFOLEdBQWdCcEwsS0FBS3dFLEdBQUwsQ0FBUyxLQUFLZzRCLE9BQUwsRUFBVCxFQUF5Qng4QixLQUFLNmQsR0FBTCxDQUFTLEtBQUs0ZSxPQUFMLEVBQVQsRUFBeUJoQixNQUFNcndCLE9BQS9CLENBQXpCLENBQWhCO0FBQ0EsUUFBSzBELEtBQUwsQ0FBVzJzQixNQUFNcndCLE9BQWpCO0FBQ0E7QUFOQyxFQXpJVyxFQWdKWDtBQUNGdkIsVUFBUSxDQUFFLFVBQUYsQ0FETjtBQUVGb3ZCLE9BQUssZUFBVztBQUNmLFFBQUs5cUIsT0FBTCxDQUFhLEtBQUtrdUIsV0FBTCxDQUFpQixLQUFLNUUsUUFBdEIsQ0FBYjtBQUNBO0FBSkMsRUFoSlcsRUFxSlg7QUFDRjV0QixVQUFRLENBQUUsT0FBRixFQUFXLFVBQVgsRUFBdUIsT0FBdkIsRUFBZ0MsVUFBaEMsQ0FETjtBQUVGb3ZCLE9BQUssZUFBVztBQUNmLE9BQUk1N0IsTUFBTSxLQUFLdzBCLFFBQUwsQ0FBY3gwQixHQUFkLEdBQW9CLENBQXBCLEdBQXdCLENBQUMsQ0FBbkM7QUFBQSxPQUNDaS9CLFVBQVUsS0FBS3pLLFFBQUwsQ0FBYzZILFlBQWQsR0FBNkIsQ0FEeEM7QUFBQSxPQUVDZ0QsUUFBUSxLQUFLTCxXQUFMLENBQWlCLEtBQUtqeEIsT0FBTCxFQUFqQixJQUFtQ2t4QixPQUY1QztBQUFBLE9BR0N6NkIsTUFBTTY2QixRQUFRLEtBQUs5MUIsS0FBTCxLQUFldkosR0FIOUI7QUFBQSxPQUlDcy9CLEtBSkQ7QUFBQSxPQUlRQyxLQUpSO0FBQUEsT0FJZXp3QixVQUFVLEVBSnpCO0FBQUEsT0FJNkIzTCxDQUo3QjtBQUFBLE9BSWdDcThCLENBSmhDOztBQU1BLFFBQUtyOEIsSUFBSSxDQUFKLEVBQU9xOEIsSUFBSSxLQUFLbEYsWUFBTCxDQUFrQjczQixNQUFsQyxFQUEwQ1UsSUFBSXE4QixDQUE5QyxFQUFpRHI4QixHQUFqRCxFQUFzRDtBQUNyRG04QixZQUFRLEtBQUtoRixZQUFMLENBQWtCbjNCLElBQUksQ0FBdEIsS0FBNEIsQ0FBcEM7QUFDQW84QixZQUFRNThCLEtBQUtzUyxHQUFMLENBQVMsS0FBS3FsQixZQUFMLENBQWtCbjNCLENBQWxCLENBQVQsSUFBaUM4N0IsVUFBVWovQixHQUFuRDs7QUFFQSxRQUFLLEtBQUt5L0IsRUFBTCxDQUFRSCxLQUFSLEVBQWUsSUFBZixFQUFxQkQsS0FBckIsS0FBZ0MsS0FBS0ksRUFBTCxDQUFRSCxLQUFSLEVBQWUsR0FBZixFQUFvQjk2QixHQUFwQixDQUFqQyxJQUNDLEtBQUtpN0IsRUFBTCxDQUFRRixLQUFSLEVBQWUsR0FBZixFQUFvQkYsS0FBcEIsS0FBOEIsS0FBS0ksRUFBTCxDQUFRRixLQUFSLEVBQWUsR0FBZixFQUFvQi82QixHQUFwQixDQURuQyxFQUM4RDtBQUM3RHNLLGFBQVE3TixJQUFSLENBQWFrQyxDQUFiO0FBQ0E7QUFDRDs7QUFFRCxRQUFLbTdCLE1BQUwsQ0FBWTNyQixRQUFaLENBQXFCLFNBQXJCLEVBQWdDaE4sV0FBaEMsQ0FBNEMsUUFBNUM7QUFDQSxRQUFLMjRCLE1BQUwsQ0FBWTNyQixRQUFaLENBQXFCLFNBQVM3RCxRQUFRMEksSUFBUixDQUFhLFNBQWIsQ0FBVCxHQUFtQyxHQUF4RCxFQUE2RDlGLFFBQTdELENBQXNFLFFBQXRFOztBQUVBLE9BQUksS0FBSzhpQixRQUFMLENBQWN1SCxNQUFsQixFQUEwQjtBQUN6QixTQUFLdUMsTUFBTCxDQUFZM3JCLFFBQVosQ0FBcUIsU0FBckIsRUFBZ0NoTixXQUFoQyxDQUE0QyxRQUE1QztBQUNBLFNBQUsyNEIsTUFBTCxDQUFZM3JCLFFBQVosR0FBdUI1RixFQUF2QixDQUEwQixLQUFLZ0IsT0FBTCxFQUExQixFQUEwQzJELFFBQTFDLENBQW1ELFFBQW5EO0FBQ0E7QUFDRDtBQTFCQyxFQXJKVyxDQUFkOztBQWtMQTs7OztBQUlBc29CLEtBQUlsMEIsU0FBSixDQUFjKzFCLFVBQWQsR0FBMkIsWUFBVztBQUNyQyxPQUFLNkQsS0FBTCxDQUFXLGNBQVg7QUFDQSxPQUFLMStCLE9BQUwsQ0FBYSxZQUFiOztBQUVBLE9BQUtGLFFBQUwsQ0FBYyt2QixXQUFkLENBQTBCLEtBQUsyRCxRQUFMLENBQWMrSSxRQUF4QyxFQUFrRCxLQUFLL0ksUUFBTCxDQUFjeDBCLEdBQWhFOztBQUVBLE1BQUksS0FBS3cwQixRQUFMLENBQWNnSSxTQUFkLElBQTJCLENBQUMsS0FBSy92QixFQUFMLENBQVEsYUFBUixDQUFoQyxFQUF3RDtBQUN2RCxPQUFJb1YsSUFBSixFQUFVOGQsY0FBVixFQUEwQnAyQixLQUExQjtBQUNBc1ksVUFBTyxLQUFLL2dCLFFBQUwsQ0FBY3VDLElBQWQsQ0FBbUIsS0FBbkIsQ0FBUDtBQUNBczhCLG9CQUFpQixLQUFLbkwsUUFBTCxDQUFjeUksa0JBQWQsR0FBbUMsTUFBTSxLQUFLekksUUFBTCxDQUFjeUksa0JBQXZELEdBQTRFaDNCLFNBQTdGO0FBQ0FzRCxXQUFRLEtBQUt6SSxRQUFMLENBQWM2UixRQUFkLENBQXVCZ3RCLGNBQXZCLEVBQXVDcDJCLEtBQXZDLEVBQVI7O0FBRUEsT0FBSXNZLEtBQUtwZixNQUFMLElBQWU4RyxTQUFTLENBQTVCLEVBQStCO0FBQzlCLFNBQUtxMkIsc0JBQUwsQ0FBNEIvZCxJQUE1QjtBQUNBO0FBQ0Q7O0FBRUQsT0FBSy9nQixRQUFMLENBQWM0USxRQUFkLENBQXVCLEtBQUtvQixPQUFMLENBQWF3cUIsWUFBcEM7O0FBRUE7QUFDQSxPQUFLZ0IsTUFBTCxHQUFjNStCLEVBQUUsTUFBTSxLQUFLODBCLFFBQUwsQ0FBYzJJLFlBQXBCLEdBQW1DLFVBQW5DLEdBQWdELEtBQUszSSxRQUFMLENBQWNtSixVQUE5RCxHQUEyRSxLQUE3RSxFQUNaa0MsSUFEWSxDQUNQLGlCQUFpQixLQUFLckwsUUFBTCxDQUFjb0osZUFBL0IsR0FBaUQsS0FEMUMsQ0FBZDs7QUFHQTtBQUNBLE9BQUs5OEIsUUFBTCxDQUFjOGxCLE1BQWQsQ0FBcUIsS0FBSzBYLE1BQUwsQ0FBWTExQixNQUFaLEVBQXJCOztBQUVBO0FBQ0EsT0FBS1AsT0FBTCxDQUFhLEtBQUt2SCxRQUFMLENBQWM2UixRQUFkLEdBQXlCK0UsR0FBekIsQ0FBNkIsS0FBSzRtQixNQUFMLENBQVkxMUIsTUFBWixFQUE3QixDQUFiOztBQUVBO0FBQ0EsTUFBSSxLQUFLOUgsUUFBTCxDQUFjMkwsRUFBZCxDQUFpQixVQUFqQixDQUFKLEVBQWtDO0FBQ2pDO0FBQ0EsUUFBS3F6QixPQUFMO0FBQ0EsR0FIRCxNQUdPO0FBQ047QUFDQSxRQUFLQyxVQUFMLENBQWdCLE9BQWhCO0FBQ0E7O0FBRUQsT0FBS2ovQixRQUFMLENBQ0U2RSxXQURGLENBQ2MsS0FBS21OLE9BQUwsQ0FBYXdxQixZQUQzQixFQUVFNXJCLFFBRkYsQ0FFVyxLQUFLb0IsT0FBTCxDQUFhdXFCLFdBRnhCOztBQUlBO0FBQ0EsT0FBSzJDLHFCQUFMOztBQUVBLE9BQUtDLEtBQUwsQ0FBVyxjQUFYO0FBQ0EsT0FBS2ovQixPQUFMLENBQWEsYUFBYjtBQUNBLEVBL0NEOztBQWlEQTs7Ozs7O0FBTUFnNUIsS0FBSWwwQixTQUFKLENBQWMwUCxLQUFkLEdBQXNCLFlBQVc7QUFDaEMsTUFBSTBxQixXQUFXLEtBQUtBLFFBQUwsRUFBZjtBQUFBLE1BQ0NDLGFBQWEsS0FBS3J0QixPQUFMLENBQWErcEIsVUFEM0I7QUFBQSxNQUVDblosUUFBUSxDQUFDLENBRlY7QUFBQSxNQUdDOFEsV0FBVyxJQUhaOztBQUtBLE1BQUksQ0FBQzJMLFVBQUwsRUFBaUI7QUFDaEIzTCxjQUFXOTBCLEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFhLEtBQUsyRyxPQUFsQixDQUFYO0FBQ0EsR0FGRCxNQUVPO0FBQ05wVCxLQUFFaUMsSUFBRixDQUFPdytCLFVBQVAsRUFBbUIsVUFBU0MsVUFBVCxFQUFxQjtBQUN2QyxRQUFJQSxjQUFjRixRQUFkLElBQTBCRSxhQUFhMWMsS0FBM0MsRUFBa0Q7QUFDakRBLGFBQVEyYyxPQUFPRCxVQUFQLENBQVI7QUFDQTtBQUNELElBSkQ7O0FBTUE1TCxjQUFXOTBCLEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFhLEtBQUsyRyxPQUFsQixFQUEyQnF0QixXQUFXemMsS0FBWCxDQUEzQixDQUFYO0FBQ0EsT0FBSSxPQUFPOFEsU0FBUzZILFlBQWhCLEtBQWlDLFVBQXJDLEVBQWlEO0FBQ2hEN0gsYUFBUzZILFlBQVQsR0FBd0I3SCxTQUFTNkgsWUFBVCxFQUF4QjtBQUNBO0FBQ0QsVUFBTzdILFNBQVNxSSxVQUFoQjs7QUFFQTtBQUNBLE9BQUlySSxTQUFTZ0osZUFBYixFQUE4QjtBQUM3QixTQUFLMThCLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixPQUFuQixFQUNDLEtBQUthLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixPQUFuQixFQUE0Qm9JLE9BQTVCLENBQW9DLElBQUl3VCxNQUFKLENBQVcsTUFBTSxLQUFLL0ksT0FBTCxDQUFhMHFCLGVBQW5CLEdBQXFDLFdBQWhELEVBQTZELEdBQTdELENBQXBDLEVBQXVHLE9BQU85WixLQUE5RyxDQUREO0FBR0E7QUFDRDs7QUFFRCxPQUFLMWlCLE9BQUwsQ0FBYSxRQUFiLEVBQXVCLEVBQUVzL0IsVUFBVSxFQUFFbmdDLE1BQU0sVUFBUixFQUFvQm1PLE9BQU9rbUIsUUFBM0IsRUFBWixFQUF2QjtBQUNBLE9BQUsrRixXQUFMLEdBQW1CN1csS0FBbkI7QUFDQSxPQUFLOFEsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxPQUFLdUwsVUFBTCxDQUFnQixVQUFoQjtBQUNBLE9BQUsvK0IsT0FBTCxDQUFhLFNBQWIsRUFBd0IsRUFBRXMvQixVQUFVLEVBQUVuZ0MsTUFBTSxVQUFSLEVBQW9CbU8sT0FBTyxLQUFLa21CLFFBQWhDLEVBQVosRUFBeEI7QUFDQSxFQWxDRDs7QUFvQ0E7Ozs7QUFJQXdGLEtBQUlsMEIsU0FBSixDQUFjeTZCLFlBQWQsR0FBNkIsWUFBVztBQUN2QyxNQUFJLEtBQUsvTCxRQUFMLENBQWNnSSxTQUFsQixFQUE2QjtBQUM1QixRQUFLaEksUUFBTCxDQUFjNkgsWUFBZCxHQUE2QixLQUE3QjtBQUNBLFFBQUs3SCxRQUFMLENBQWM4SCxLQUFkLEdBQXNCLEtBQXRCO0FBQ0E7QUFDRCxFQUxEOztBQU9BOzs7Ozs7QUFNQXRDLEtBQUlsMEIsU0FBSixDQUFjMDZCLE9BQWQsR0FBd0IsVUFBU0MsSUFBVCxFQUFlO0FBQ3RDLE1BQUl2MUIsUUFBUSxLQUFLbEssT0FBTCxDQUFhLFNBQWIsRUFBd0IsRUFBRTAvQixTQUFTRCxJQUFYLEVBQXhCLENBQVo7O0FBRUEsTUFBSSxDQUFDdjFCLE1BQU1uSyxJQUFYLEVBQWlCO0FBQ2hCbUssU0FBTW5LLElBQU4sR0FBYXJCLEVBQUUsTUFBTSxLQUFLODBCLFFBQUwsQ0FBYzBJLFdBQXBCLEdBQWtDLElBQXBDLEVBQ1h4ckIsUUFEVyxDQUNGLEtBQUtvQixPQUFMLENBQWE0cUIsU0FEWCxFQUNzQjlXLE1BRHRCLENBQzZCNlosSUFEN0IsQ0FBYjtBQUVBOztBQUVELE9BQUt6L0IsT0FBTCxDQUFhLFVBQWIsRUFBeUIsRUFBRTAvQixTQUFTeDFCLE1BQU1uSyxJQUFqQixFQUF6Qjs7QUFFQSxTQUFPbUssTUFBTW5LLElBQWI7QUFDQSxFQVhEOztBQWFBOzs7O0FBSUFpNUIsS0FBSWwwQixTQUFKLENBQWM2NkIsTUFBZCxHQUF1QixZQUFXO0FBQ2pDLE1BQUl4OUIsSUFBSSxDQUFSO0FBQUEsTUFDQ3E4QixJQUFJLEtBQUsxRSxLQUFMLENBQVdyNEIsTUFEaEI7QUFBQSxNQUVDK0osU0FBUzlNLEVBQUUyN0IsS0FBRixDQUFRLFVBQVNuNUIsQ0FBVCxFQUFZO0FBQUUsVUFBTyxLQUFLQSxDQUFMLENBQVA7QUFBZ0IsR0FBdEMsRUFBd0MsS0FBSzI0QixZQUE3QyxDQUZWO0FBQUEsTUFHQ3VELFFBQVEsRUFIVDs7QUFLQSxTQUFPajdCLElBQUlxOEIsQ0FBWCxFQUFjO0FBQ2IsT0FBSSxLQUFLM0UsWUFBTCxDQUFrQitGLEdBQWxCLElBQXlCbGhDLEVBQUVtaEMsSUFBRixDQUFPLEtBQUsvRixLQUFMLENBQVczM0IsQ0FBWCxFQUFjcUosTUFBckIsRUFBNkJBLE1BQTdCLEVBQXFDL0osTUFBckMsR0FBOEMsQ0FBM0UsRUFBOEU7QUFDN0UsU0FBS3E0QixLQUFMLENBQVczM0IsQ0FBWCxFQUFjeTRCLEdBQWQsQ0FBa0J3QyxLQUFsQjtBQUNBO0FBQ0RqN0I7QUFDQTs7QUFFRCxPQUFLMDNCLFlBQUwsR0FBb0IsRUFBcEI7O0FBRUEsR0FBQyxLQUFLcHVCLEVBQUwsQ0FBUSxPQUFSLENBQUQsSUFBcUIsS0FBS2l6QixLQUFMLENBQVcsT0FBWCxDQUFyQjtBQUNBLEVBaEJEOztBQWtCQTs7Ozs7O0FBTUExRixLQUFJbDBCLFNBQUosQ0FBY3lELEtBQWQsR0FBc0IsVUFBU3UzQixTQUFULEVBQW9CO0FBQ3pDQSxjQUFZQSxhQUFhOUcsSUFBSThELEtBQUosQ0FBVUMsT0FBbkM7QUFDQSxVQUFRK0MsU0FBUjtBQUNDLFFBQUs5RyxJQUFJOEQsS0FBSixDQUFVRSxLQUFmO0FBQ0EsUUFBS2hFLElBQUk4RCxLQUFKLENBQVVHLEtBQWY7QUFDQyxXQUFPLEtBQUt6RCxNQUFaO0FBQ0Q7QUFDQyxXQUFPLEtBQUtBLE1BQUwsR0FBYyxLQUFLaEcsUUFBTCxDQUFjNkgsWUFBZCxHQUE2QixDQUEzQyxHQUErQyxLQUFLN0gsUUFBTCxDQUFjbEssTUFBcEU7QUFMRjtBQU9BLEVBVEQ7O0FBV0E7Ozs7QUFJQTBQLEtBQUlsMEIsU0FBSixDQUFjZzZCLE9BQWQsR0FBd0IsWUFBVztBQUNsQyxPQUFLSixLQUFMLENBQVcsWUFBWDtBQUNBLE9BQUsxK0IsT0FBTCxDQUFhLFNBQWI7O0FBRUEsT0FBS3dVLEtBQUw7O0FBRUEsT0FBSytxQixZQUFMOztBQUVBLE9BQUt6L0IsUUFBTCxDQUFjNFEsUUFBZCxDQUF1QixLQUFLb0IsT0FBTCxDQUFhc3FCLFlBQXBDOztBQUVBLE9BQUt1RCxNQUFMOztBQUVBLE9BQUs3L0IsUUFBTCxDQUFjNkUsV0FBZCxDQUEwQixLQUFLbU4sT0FBTCxDQUFhc3FCLFlBQXZDOztBQUVBLE9BQUs2QyxLQUFMLENBQVcsWUFBWDtBQUNBLE9BQUtqL0IsT0FBTCxDQUFhLFdBQWI7QUFDQSxFQWhCRDs7QUFrQkE7Ozs7QUFJQWc1QixLQUFJbDBCLFNBQUosQ0FBY2k3QixpQkFBZCxHQUFrQyxZQUFXO0FBQzVDMzZCLFNBQU9nQixZQUFQLENBQW9CLEtBQUs0NUIsV0FBekI7QUFDQSxPQUFLQSxXQUFMLEdBQW1CNTZCLE9BQU96QixVQUFQLENBQWtCLEtBQUt1MUIsU0FBTCxDQUFlK0csUUFBakMsRUFBMkMsS0FBS3pNLFFBQUwsQ0FBY3NJLHFCQUF6RCxDQUFuQjtBQUNBLEVBSEQ7O0FBS0E7Ozs7QUFJQTlDLEtBQUlsMEIsU0FBSixDQUFjbTdCLFFBQWQsR0FBeUIsWUFBVztBQUNuQyxNQUFJLENBQUMsS0FBS3hHLE1BQUwsQ0FBWWg0QixNQUFqQixFQUF5QjtBQUN4QixVQUFPLEtBQVA7QUFDQTs7QUFFRCxNQUFJLEtBQUsrM0IsTUFBTCxLQUFnQixLQUFLMTVCLFFBQUwsQ0FBY3lJLEtBQWQsRUFBcEIsRUFBMkM7QUFDMUMsVUFBTyxLQUFQO0FBQ0E7O0FBRUQsTUFBSSxDQUFDLEtBQUt6SSxRQUFMLENBQWMyTCxFQUFkLENBQWlCLFVBQWpCLENBQUwsRUFBbUM7QUFDbEMsVUFBTyxLQUFQO0FBQ0E7O0FBRUQsT0FBS2l6QixLQUFMLENBQVcsVUFBWDs7QUFFQSxNQUFJLEtBQUsxK0IsT0FBTCxDQUFhLFFBQWIsRUFBdUJrZ0Msa0JBQXZCLEVBQUosRUFBaUQ7QUFDaEQsUUFBS2pCLEtBQUwsQ0FBVyxVQUFYO0FBQ0EsVUFBTyxLQUFQO0FBQ0E7O0FBRUQsT0FBS0YsVUFBTCxDQUFnQixPQUFoQjs7QUFFQSxPQUFLRCxPQUFMOztBQUVBLE9BQUtHLEtBQUwsQ0FBVyxVQUFYO0FBQ0EsT0FBS2ovQixPQUFMLENBQWEsU0FBYjtBQUNBLEVBMUJEOztBQTRCQTs7Ozs7O0FBTUFnNUIsS0FBSWwwQixTQUFKLENBQWNrNkIscUJBQWQsR0FBc0MsWUFBVztBQUNoRCxNQUFJdGdDLEVBQUV5aEMsT0FBRixDQUFVN2EsVUFBZCxFQUEwQjtBQUN6QixRQUFLZ1ksTUFBTCxDQUFZcnhCLEVBQVosQ0FBZXZOLEVBQUV5aEMsT0FBRixDQUFVN2EsVUFBVixDQUFxQjloQixHQUFyQixHQUEyQixXQUExQyxFQUF1RDlFLEVBQUUyN0IsS0FBRixDQUFRLEtBQUsrRixlQUFiLEVBQThCLElBQTlCLENBQXZEO0FBQ0E7O0FBRUQsTUFBSSxLQUFLNU0sUUFBTCxDQUFjcUksVUFBZCxLQUE2QixLQUFqQyxFQUF3QztBQUN2QyxRQUFLNXZCLEVBQUwsQ0FBUTdHLE1BQVIsRUFBZ0IsUUFBaEIsRUFBMEIsS0FBSzh6QixTQUFMLENBQWU2RyxpQkFBekM7QUFDQTs7QUFFRCxNQUFJLEtBQUt2TSxRQUFMLENBQWN5SCxTQUFsQixFQUE2QjtBQUM1QixRQUFLbjdCLFFBQUwsQ0FBYzRRLFFBQWQsQ0FBdUIsS0FBS29CLE9BQUwsQ0FBYTJxQixTQUFwQztBQUNBLFFBQUthLE1BQUwsQ0FBWXJ4QixFQUFaLENBQWUsb0JBQWYsRUFBcUN2TixFQUFFMjdCLEtBQUYsQ0FBUSxLQUFLZ0csV0FBYixFQUEwQixJQUExQixDQUFyQztBQUNBLFFBQUsvQyxNQUFMLENBQVlyeEIsRUFBWixDQUFlLHlDQUFmLEVBQTBELFlBQVc7QUFBRSxXQUFPLEtBQVA7QUFBYyxJQUFyRjtBQUNBOztBQUVELE1BQUksS0FBS3VuQixRQUFMLENBQWMwSCxTQUFsQixFQUE0QjtBQUMzQixRQUFLb0MsTUFBTCxDQUFZcnhCLEVBQVosQ0FBZSxxQkFBZixFQUFzQ3ZOLEVBQUUyN0IsS0FBRixDQUFRLEtBQUtnRyxXQUFiLEVBQTBCLElBQTFCLENBQXRDO0FBQ0EsUUFBSy9DLE1BQUwsQ0FBWXJ4QixFQUFaLENBQWUsc0JBQWYsRUFBdUN2TixFQUFFMjdCLEtBQUYsQ0FBUSxLQUFLaUcsU0FBYixFQUF3QixJQUF4QixDQUF2QztBQUNBO0FBQ0QsRUFuQkQ7O0FBcUJBOzs7Ozs7O0FBT0F0SCxLQUFJbDBCLFNBQUosQ0FBY3U3QixXQUFkLEdBQTRCLFVBQVNuMkIsS0FBVCxFQUFnQjtBQUMzQyxNQUFJK3ZCLFFBQVEsSUFBWjs7QUFFQSxNQUFJL3ZCLE1BQU1FLEtBQU4sS0FBZ0IsQ0FBcEIsRUFBdUI7QUFDdEI7QUFDQTs7QUFFRCxNQUFJMUwsRUFBRXloQyxPQUFGLENBQVVJLFNBQWQsRUFBeUI7QUFDeEJ0RyxXQUFRLEtBQUtxRCxNQUFMLENBQVlwd0IsR0FBWixDQUFnQixXQUFoQixFQUE2QjdGLE9BQTdCLENBQXFDLFlBQXJDLEVBQW1ELEVBQW5ELEVBQXVEMUUsS0FBdkQsQ0FBNkQsR0FBN0QsQ0FBUjtBQUNBczNCLFdBQVE7QUFDUHhtQixPQUFHd21CLE1BQU1BLE1BQU14NEIsTUFBTixLQUFpQixFQUFqQixHQUFzQixFQUF0QixHQUEyQixDQUFqQyxDQURJO0FBRVBtUyxPQUFHcW1CLE1BQU1BLE1BQU14NEIsTUFBTixLQUFpQixFQUFqQixHQUFzQixFQUF0QixHQUEyQixDQUFqQztBQUZJLElBQVI7QUFJQSxHQU5ELE1BTU87QUFDTnc0QixXQUFRLEtBQUtxRCxNQUFMLENBQVkvekIsUUFBWixFQUFSO0FBQ0Ewd0IsV0FBUTtBQUNQeG1CLE9BQUcsS0FBSytmLFFBQUwsQ0FBY3gwQixHQUFkLEdBQ0ZpN0IsTUFBTS94QixJQUFOLEdBQWEsS0FBS28xQixNQUFMLENBQVkvMEIsS0FBWixFQUFiLEdBQW1DLEtBQUtBLEtBQUwsRUFBbkMsR0FBa0QsS0FBS2lyQixRQUFMLENBQWNsSyxNQUQ5RCxHQUVGMlEsTUFBTS94QixJQUhBO0FBSVAwTCxPQUFHcW1CLE1BQU1qeUI7QUFKRixJQUFSO0FBTUE7O0FBRUQsTUFBSSxLQUFLeUQsRUFBTCxDQUFRLFdBQVIsQ0FBSixFQUEwQjtBQUN6Qi9NLEtBQUV5aEMsT0FBRixDQUFVSSxTQUFWLEdBQXNCLEtBQUt6d0IsT0FBTCxDQUFhbXFCLE1BQU14bUIsQ0FBbkIsQ0FBdEIsR0FBOEMsS0FBSzZwQixNQUFMLENBQVk1ZSxJQUFaLEVBQTlDO0FBQ0EsUUFBS3FnQixVQUFMLENBQWdCLFVBQWhCO0FBQ0E7O0FBRUQsT0FBS2ovQixRQUFMLENBQWMrdkIsV0FBZCxDQUEwQixLQUFLL2QsT0FBTCxDQUFhK3FCLFNBQXZDLEVBQWtEM3lCLE1BQU1ySixJQUFOLEtBQWUsV0FBakU7O0FBRUEsT0FBSzIvQixLQUFMLENBQVcsQ0FBWDs7QUFFQSxPQUFLekcsS0FBTCxDQUFXaGUsSUFBWCxHQUFrQixJQUFJelcsSUFBSixHQUFXRSxPQUFYLEVBQWxCO0FBQ0EsT0FBS3UwQixLQUFMLENBQVc3dEIsTUFBWCxHQUFvQnhOLEVBQUV3TCxNQUFNZ0MsTUFBUixDQUFwQjtBQUNBLE9BQUs2dEIsS0FBTCxDQUFXRSxLQUFYLENBQWlCM3pCLEtBQWpCLEdBQXlCMnpCLEtBQXpCO0FBQ0EsT0FBS0YsS0FBTCxDQUFXRSxLQUFYLENBQWlCbHRCLE9BQWpCLEdBQTJCa3RCLEtBQTNCO0FBQ0EsT0FBS0YsS0FBTCxDQUFXQyxPQUFYLEdBQXFCLEtBQUtBLE9BQUwsQ0FBYTl2QixLQUFiLENBQXJCOztBQUVBeEwsSUFBRTRFLFFBQUYsRUFBWTJJLEVBQVosQ0FBZSxvQ0FBZixFQUFxRHZOLEVBQUUyN0IsS0FBRixDQUFRLEtBQUtpRyxTQUFiLEVBQXdCLElBQXhCLENBQXJEOztBQUVBNWhDLElBQUU0RSxRQUFGLEVBQVl1TixHQUFaLENBQWdCLHVDQUFoQixFQUF5RG5TLEVBQUUyN0IsS0FBRixDQUFRLFVBQVNud0IsS0FBVCxFQUFnQjtBQUNoRixPQUFJdTJCLFFBQVEsS0FBS0MsVUFBTCxDQUFnQixLQUFLM0csS0FBTCxDQUFXQyxPQUEzQixFQUFvQyxLQUFLQSxPQUFMLENBQWE5dkIsS0FBYixDQUFwQyxDQUFaOztBQUVBeEwsS0FBRTRFLFFBQUYsRUFBWTJJLEVBQVosQ0FBZSx1Q0FBZixFQUF3RHZOLEVBQUUyN0IsS0FBRixDQUFRLEtBQUtzRyxVQUFiLEVBQXlCLElBQXpCLENBQXhEOztBQUVBLE9BQUloL0IsS0FBS3NTLEdBQUwsQ0FBU3dzQixNQUFNaHRCLENBQWYsSUFBb0I5UixLQUFLc1MsR0FBTCxDQUFTd3NCLE1BQU03c0IsQ0FBZixDQUFwQixJQUF5QyxLQUFLbkksRUFBTCxDQUFRLE9BQVIsQ0FBN0MsRUFBK0Q7QUFDOUQ7QUFDQTs7QUFFRHZCLFNBQU1pQyxjQUFOOztBQUVBLFFBQUt1eUIsS0FBTCxDQUFXLFVBQVg7QUFDQSxRQUFLMStCLE9BQUwsQ0FBYSxNQUFiO0FBQ0EsR0Fid0QsRUFhdEQsSUFic0QsQ0FBekQ7QUFjQSxFQXRERDs7QUF3REE7Ozs7OztBQU1BZzVCLEtBQUlsMEIsU0FBSixDQUFjNjdCLFVBQWQsR0FBMkIsVUFBU3oyQixLQUFULEVBQWdCO0FBQzFDLE1BQUlpMEIsVUFBVSxJQUFkO0FBQUEsTUFDQ0MsVUFBVSxJQURYO0FBQUEsTUFFQ3dDLE9BQU8sSUFGUjtBQUFBLE1BR0NILFFBQVEsS0FBS0MsVUFBTCxDQUFnQixLQUFLM0csS0FBTCxDQUFXQyxPQUEzQixFQUFvQyxLQUFLQSxPQUFMLENBQWE5dkIsS0FBYixDQUFwQyxDQUhUO0FBQUEsTUFJQyt2QixRQUFRLEtBQUt5RyxVQUFMLENBQWdCLEtBQUszRyxLQUFMLENBQVdFLEtBQVgsQ0FBaUIzekIsS0FBakMsRUFBd0NtNkIsS0FBeEMsQ0FKVDs7QUFNQSxNQUFJLENBQUMsS0FBS2gxQixFQUFMLENBQVEsVUFBUixDQUFMLEVBQTBCO0FBQ3pCO0FBQ0E7O0FBRUR2QixRQUFNaUMsY0FBTjs7QUFFQSxNQUFJLEtBQUtxbkIsUUFBTCxDQUFjc0gsSUFBbEIsRUFBd0I7QUFDdkJxRCxhQUFVLEtBQUtILFdBQUwsQ0FBaUIsS0FBS0csT0FBTCxFQUFqQixDQUFWO0FBQ0FDLGFBQVUsS0FBS0osV0FBTCxDQUFpQixLQUFLSSxPQUFMLEtBQWlCLENBQWxDLElBQXVDRCxPQUFqRDtBQUNBbEUsU0FBTXhtQixDQUFOLEdBQVcsQ0FBQyxDQUFDd21CLE1BQU14bUIsQ0FBTixHQUFVMHFCLE9BQVgsSUFBc0JDLE9BQXRCLEdBQWdDQSxPQUFqQyxJQUE0Q0EsT0FBN0MsR0FBd0RELE9BQWxFO0FBQ0EsR0FKRCxNQUlPO0FBQ05BLGFBQVUsS0FBSzNLLFFBQUwsQ0FBY3gwQixHQUFkLEdBQW9CLEtBQUtnL0IsV0FBTCxDQUFpQixLQUFLSSxPQUFMLEVBQWpCLENBQXBCLEdBQXVELEtBQUtKLFdBQUwsQ0FBaUIsS0FBS0csT0FBTCxFQUFqQixDQUFqRTtBQUNBQyxhQUFVLEtBQUs1SyxRQUFMLENBQWN4MEIsR0FBZCxHQUFvQixLQUFLZy9CLFdBQUwsQ0FBaUIsS0FBS0csT0FBTCxFQUFqQixDQUFwQixHQUF1RCxLQUFLSCxXQUFMLENBQWlCLEtBQUtJLE9BQUwsRUFBakIsQ0FBakU7QUFDQXdDLFVBQU8sS0FBS3BOLFFBQUwsQ0FBYzJILFFBQWQsR0FBeUIsQ0FBQyxDQUFELEdBQUtzRixNQUFNaHRCLENBQVgsR0FBZSxDQUF4QyxHQUE0QyxDQUFuRDtBQUNBd21CLFNBQU14bUIsQ0FBTixHQUFVOVIsS0FBS3dFLEdBQUwsQ0FBU3hFLEtBQUs2ZCxHQUFMLENBQVN5YSxNQUFNeG1CLENBQWYsRUFBa0IwcUIsVUFBVXlDLElBQTVCLENBQVQsRUFBNEN4QyxVQUFVd0MsSUFBdEQsQ0FBVjtBQUNBOztBQUVELE9BQUs3RyxLQUFMLENBQVdFLEtBQVgsQ0FBaUJsdEIsT0FBakIsR0FBMkJrdEIsS0FBM0I7O0FBRUEsT0FBS25xQixPQUFMLENBQWFtcUIsTUFBTXhtQixDQUFuQjtBQUNBLEVBM0JEOztBQTZCQTs7Ozs7OztBQU9BdWxCLEtBQUlsMEIsU0FBSixDQUFjdzdCLFNBQWQsR0FBMEIsVUFBU3AyQixLQUFULEVBQWdCO0FBQ3pDLE1BQUl1MkIsUUFBUSxLQUFLQyxVQUFMLENBQWdCLEtBQUszRyxLQUFMLENBQVdDLE9BQTNCLEVBQW9DLEtBQUtBLE9BQUwsQ0FBYTl2QixLQUFiLENBQXBDLENBQVo7QUFBQSxNQUNDK3ZCLFFBQVEsS0FBS0YsS0FBTCxDQUFXRSxLQUFYLENBQWlCbHRCLE9BRDFCO0FBQUEsTUFFQ210QixZQUFZdUcsTUFBTWh0QixDQUFOLEdBQVUsQ0FBVixHQUFjLEtBQUsrZixRQUFMLENBQWN4MEIsR0FBNUIsR0FBa0MsTUFBbEMsR0FBMkMsT0FGeEQ7O0FBSUFOLElBQUU0RSxRQUFGLEVBQVlnSixHQUFaLENBQWdCLFdBQWhCOztBQUVBLE9BQUt4TSxRQUFMLENBQWM2RSxXQUFkLENBQTBCLEtBQUttTixPQUFMLENBQWErcUIsU0FBdkM7O0FBRUEsTUFBSTRELE1BQU1odEIsQ0FBTixLQUFZLENBQVosSUFBaUIsS0FBS2hJLEVBQUwsQ0FBUSxVQUFSLENBQWpCLElBQXdDLENBQUMsS0FBS0EsRUFBTCxDQUFRLE9BQVIsQ0FBN0MsRUFBK0Q7QUFDOUQsUUFBSyswQixLQUFMLENBQVcsS0FBS2hOLFFBQUwsQ0FBY29JLFlBQWQsSUFBOEIsS0FBS3BJLFFBQUwsQ0FBY2tJLFVBQXZEO0FBQ0EsUUFBSzN1QixPQUFMLENBQWEsS0FBS29LLE9BQUwsQ0FBYThpQixNQUFNeG1CLENBQW5CLEVBQXNCZ3RCLE1BQU1odEIsQ0FBTixLQUFZLENBQVosR0FBZ0J5bUIsU0FBaEIsR0FBNEIsS0FBS0gsS0FBTCxDQUFXRyxTQUE3RCxDQUFiO0FBQ0EsUUFBSzZFLFVBQUwsQ0FBZ0IsVUFBaEI7QUFDQSxRQUFLWSxNQUFMOztBQUVBLFFBQUs1RixLQUFMLENBQVdHLFNBQVgsR0FBdUJBLFNBQXZCOztBQUVBLE9BQUl2NEIsS0FBS3NTLEdBQUwsQ0FBU3dzQixNQUFNaHRCLENBQWYsSUFBb0IsQ0FBcEIsSUFBeUIsSUFBSW5PLElBQUosR0FBV0UsT0FBWCxLQUF1QixLQUFLdTBCLEtBQUwsQ0FBV2hlLElBQWxDLEdBQXlDLEdBQXRFLEVBQTJFO0FBQzFFLFNBQUtnZSxLQUFMLENBQVc3dEIsTUFBWCxDQUFrQjJFLEdBQWxCLENBQXNCLGdCQUF0QixFQUF3QyxZQUFXO0FBQUUsWUFBTyxLQUFQO0FBQWUsS0FBcEU7QUFDQTtBQUNEOztBQUVELE1BQUksQ0FBQyxLQUFLcEYsRUFBTCxDQUFRLFVBQVIsQ0FBTCxFQUEwQjtBQUN6QjtBQUNBOztBQUVELE9BQUt3ekIsS0FBTCxDQUFXLFVBQVg7QUFDQSxPQUFLai9CLE9BQUwsQ0FBYSxTQUFiO0FBQ0EsRUE1QkQ7O0FBOEJBOzs7Ozs7OztBQVFBZzVCLEtBQUlsMEIsU0FBSixDQUFjcVMsT0FBZCxHQUF3QixVQUFTMHBCLFVBQVQsRUFBcUIzRyxTQUFyQixFQUFnQztBQUN2RCxNQUFJM3dCLFdBQVcsQ0FBQyxDQUFoQjtBQUFBLE1BQ0NxM0IsT0FBTyxFQURSO0FBQUEsTUFFQ3I0QixRQUFRLEtBQUtBLEtBQUwsRUFGVDtBQUFBLE1BR0N5MUIsY0FBYyxLQUFLQSxXQUFMLEVBSGY7O0FBS0EsTUFBSSxDQUFDLEtBQUt4SyxRQUFMLENBQWM0SCxRQUFuQixFQUE2QjtBQUM1QjtBQUNBMThCLEtBQUVpQyxJQUFGLENBQU9xOUIsV0FBUCxFQUFvQnQvQixFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTNkQsS0FBVCxFQUFnQjV3QixLQUFoQixFQUF1QjtBQUNsRDtBQUNBLFFBQUk0c0IsY0FBYyxNQUFkLElBQXdCMkcsYUFBYXZ6QixRQUFRc3pCLElBQTdDLElBQXFEQyxhQUFhdnpCLFFBQVFzekIsSUFBOUUsRUFBb0Y7QUFDbkZyM0IsZ0JBQVcyMEIsS0FBWDtBQUNEO0FBQ0E7QUFDQyxLQUpELE1BSU8sSUFBSWhFLGNBQWMsT0FBZCxJQUF5QjJHLGFBQWF2ekIsUUFBUS9FLEtBQVIsR0FBZ0JxNEIsSUFBdEQsSUFBOERDLGFBQWF2ekIsUUFBUS9FLEtBQVIsR0FBZ0JxNEIsSUFBL0YsRUFBcUc7QUFDM0dyM0IsZ0JBQVcyMEIsUUFBUSxDQUFuQjtBQUNBLEtBRk0sTUFFQSxJQUFJLEtBQUtPLEVBQUwsQ0FBUW9DLFVBQVIsRUFBb0IsR0FBcEIsRUFBeUJ2ekIsS0FBekIsS0FDUCxLQUFLbXhCLEVBQUwsQ0FBUW9DLFVBQVIsRUFBb0IsR0FBcEIsRUFBeUI3QyxZQUFZRSxRQUFRLENBQXBCLEtBQTBCNXdCLFFBQVEvRSxLQUEzRCxDQURHLEVBQ2dFO0FBQ3RFZ0IsZ0JBQVcyd0IsY0FBYyxNQUFkLEdBQXVCZ0UsUUFBUSxDQUEvQixHQUFtQ0EsS0FBOUM7QUFDQTtBQUNELFdBQU8zMEIsYUFBYSxDQUFDLENBQXJCO0FBQ0EsSUFibUIsRUFhakIsSUFiaUIsQ0FBcEI7QUFjQTs7QUFFRCxNQUFJLENBQUMsS0FBS2lxQixRQUFMLENBQWNzSCxJQUFuQixFQUF5QjtBQUN4QjtBQUNBLE9BQUksS0FBSzJELEVBQUwsQ0FBUW9DLFVBQVIsRUFBb0IsR0FBcEIsRUFBeUI3QyxZQUFZLEtBQUtHLE9BQUwsRUFBWixDQUF6QixDQUFKLEVBQTJEO0FBQzFENTBCLGVBQVdzM0IsYUFBYSxLQUFLMUMsT0FBTCxFQUF4QjtBQUNBLElBRkQsTUFFTyxJQUFJLEtBQUtNLEVBQUwsQ0FBUW9DLFVBQVIsRUFBb0IsR0FBcEIsRUFBeUI3QyxZQUFZLEtBQUtJLE9BQUwsRUFBWixDQUF6QixDQUFKLEVBQTJEO0FBQ2pFNzBCLGVBQVdzM0IsYUFBYSxLQUFLekMsT0FBTCxFQUF4QjtBQUNBO0FBQ0Q7O0FBRUQsU0FBTzcwQixRQUFQO0FBQ0EsRUFsQ0Q7O0FBb0NBOzs7Ozs7QUFNQXl2QixLQUFJbDBCLFNBQUosQ0FBY2dMLE9BQWQsR0FBd0IsVUFBUyt3QixVQUFULEVBQXFCO0FBQzVDLE1BQUkvd0IsVUFBVSxLQUFLMHdCLEtBQUwsS0FBZSxDQUE3Qjs7QUFFQSxPQUFLLzBCLEVBQUwsQ0FBUSxXQUFSLEtBQXdCLEtBQUsyMEIsZUFBTCxFQUF4Qjs7QUFFQSxNQUFJdHdCLE9BQUosRUFBYTtBQUNaLFFBQUs0dUIsS0FBTCxDQUFXLFdBQVg7QUFDQSxRQUFLMStCLE9BQUwsQ0FBYSxXQUFiO0FBQ0E7O0FBRUQsTUFBSXRCLEVBQUV5aEMsT0FBRixDQUFVVyxXQUFWLElBQXlCcGlDLEVBQUV5aEMsT0FBRixDQUFVN2EsVUFBdkMsRUFBbUQ7QUFDbEQsUUFBS2dZLE1BQUwsQ0FBWXB3QixHQUFaLENBQWdCO0FBQ2ZxekIsZUFBVyxpQkFBaUJNLFVBQWpCLEdBQThCLGFBRDFCO0FBRWZ2YixnQkFBYSxLQUFLa2IsS0FBTCxLQUFlLElBQWhCLEdBQXdCO0FBRnJCLElBQWhCO0FBSUEsR0FMRCxNQUtPLElBQUkxd0IsT0FBSixFQUFhO0FBQ25CLFFBQUt3dEIsTUFBTCxDQUFZeHRCLE9BQVosQ0FBb0I7QUFDbkI1SCxVQUFNMjRCLGFBQWE7QUFEQSxJQUFwQixFQUVHLEtBQUtMLEtBQUwsRUFGSCxFQUVpQixLQUFLaE4sUUFBTCxDQUFjd0ksY0FGL0IsRUFFK0N0OUIsRUFBRTI3QixLQUFGLENBQVEsS0FBSytGLGVBQWIsRUFBOEIsSUFBOUIsQ0FGL0M7QUFHQSxHQUpNLE1BSUE7QUFDTixRQUFLOUMsTUFBTCxDQUFZcHdCLEdBQVosQ0FBZ0I7QUFDZmhGLFVBQU0yNEIsYUFBYTtBQURKLElBQWhCO0FBR0E7QUFDRCxFQXhCRDs7QUEwQkE7Ozs7O0FBS0E3SCxLQUFJbDBCLFNBQUosQ0FBYzJHLEVBQWQsR0FBbUIsVUFBU3MxQixLQUFULEVBQWdCO0FBQ2xDLFNBQU8sS0FBSzVHLE9BQUwsQ0FBYXB0QixPQUFiLENBQXFCZzBCLEtBQXJCLEtBQStCLEtBQUs1RyxPQUFMLENBQWFwdEIsT0FBYixDQUFxQmcwQixLQUFyQixJQUE4QixDQUFwRTtBQUNBLEVBRkQ7O0FBSUE7Ozs7OztBQU1BL0gsS0FBSWwwQixTQUFKLENBQWNpSSxPQUFkLEdBQXdCLFVBQVN4RCxRQUFULEVBQW1CO0FBQzFDLE1BQUlBLGFBQWF0RSxTQUFqQixFQUE0QjtBQUMzQixVQUFPLEtBQUttMEIsUUFBWjtBQUNBOztBQUVELE1BQUksS0FBS0ssTUFBTCxDQUFZaDRCLE1BQVosS0FBdUIsQ0FBM0IsRUFBOEI7QUFDN0IsVUFBT3dELFNBQVA7QUFDQTs7QUFFRHNFLGFBQVcsS0FBS3MwQixTQUFMLENBQWV0MEIsUUFBZixDQUFYOztBQUVBLE1BQUksS0FBSzZ2QixRQUFMLEtBQWtCN3ZCLFFBQXRCLEVBQWdDO0FBQy9CLE9BQUlXLFFBQVEsS0FBS2xLLE9BQUwsQ0FBYSxRQUFiLEVBQXVCLEVBQUVzL0IsVUFBVSxFQUFFbmdDLE1BQU0sVUFBUixFQUFvQm1PLE9BQU8vRCxRQUEzQixFQUFaLEVBQXZCLENBQVo7O0FBRUEsT0FBSVcsTUFBTW5LLElBQU4sS0FBZWtGLFNBQW5CLEVBQThCO0FBQzdCc0UsZUFBVyxLQUFLczBCLFNBQUwsQ0FBZTN6QixNQUFNbkssSUFBckIsQ0FBWDtBQUNBOztBQUVELFFBQUtxNUIsUUFBTCxHQUFnQjd2QixRQUFoQjs7QUFFQSxRQUFLdzFCLFVBQUwsQ0FBZ0IsVUFBaEI7O0FBRUEsUUFBSy8rQixPQUFMLENBQWEsU0FBYixFQUF3QixFQUFFcy9CLFVBQVUsRUFBRW5nQyxNQUFNLFVBQVIsRUFBb0JtTyxPQUFPLEtBQUs4ckIsUUFBaEMsRUFBWixFQUF4QjtBQUNBOztBQUVELFNBQU8sS0FBS0EsUUFBWjtBQUNBLEVBMUJEOztBQTRCQTs7Ozs7QUFLQUosS0FBSWwwQixTQUFKLENBQWNpNkIsVUFBZCxHQUEyQixVQUFTaUMsSUFBVCxFQUFlO0FBQ3pDLE1BQUl0aUMsRUFBRW1DLElBQUYsQ0FBT21nQyxJQUFQLE1BQWlCLFFBQXJCLEVBQStCO0FBQzlCLFFBQUtuSCxZQUFMLENBQWtCbUgsSUFBbEIsSUFBMEIsSUFBMUI7QUFDQSxRQUFLdjFCLEVBQUwsQ0FBUSxPQUFSLEtBQW9CLEtBQUt3ekIsS0FBTCxDQUFXLE9BQVgsQ0FBcEI7QUFDQTtBQUNELFNBQU92Z0MsRUFBRW9FLEdBQUYsQ0FBTSxLQUFLKzJCLFlBQVgsRUFBeUIsVUFBUzVlLENBQVQsRUFBWTlZLENBQVosRUFBZTtBQUFFLFVBQU9BLENBQVA7QUFBVSxHQUFwRCxDQUFQO0FBQ0EsRUFORDs7QUFRQTs7Ozs7QUFLQTYyQixLQUFJbDBCLFNBQUosQ0FBYzJMLEtBQWQsR0FBc0IsVUFBU2xILFFBQVQsRUFBbUI7QUFDeENBLGFBQVcsS0FBS3MwQixTQUFMLENBQWV0MEIsUUFBZixDQUFYOztBQUVBLE1BQUlBLGFBQWF0RSxTQUFqQixFQUE0QjtBQUMzQjtBQUNBOztBQUVELE9BQUtvMEIsTUFBTCxHQUFjLENBQWQ7QUFDQSxPQUFLRCxRQUFMLEdBQWdCN3ZCLFFBQWhCOztBQUVBLE9BQUswM0IsUUFBTCxDQUFjLENBQUUsV0FBRixFQUFlLFlBQWYsQ0FBZDs7QUFFQSxPQUFLbnhCLE9BQUwsQ0FBYSxLQUFLa3VCLFdBQUwsQ0FBaUJ6MEIsUUFBakIsQ0FBYjs7QUFFQSxPQUFLMjNCLE9BQUwsQ0FBYSxDQUFFLFdBQUYsRUFBZSxZQUFmLENBQWI7QUFDQSxFQWZEOztBQWlCQTs7Ozs7OztBQU9BbEksS0FBSWwwQixTQUFKLENBQWMrNEIsU0FBZCxHQUEwQixVQUFTdDBCLFFBQVQsRUFBbUI4ekIsUUFBbkIsRUFBNkI7QUFDdEQsTUFBSW1CLElBQUksS0FBSy9FLE1BQUwsQ0FBWWg0QixNQUFwQjtBQUFBLE1BQ0MwL0IsSUFBSTlELFdBQVcsQ0FBWCxHQUFlLEtBQUszRCxPQUFMLENBQWFqNEIsTUFEakM7O0FBR0EsTUFBSSxDQUFDLEtBQUsyL0IsU0FBTCxDQUFlNzNCLFFBQWYsQ0FBRCxJQUE2QmkxQixJQUFJLENBQXJDLEVBQXdDO0FBQ3ZDajFCLGNBQVd0RSxTQUFYO0FBQ0EsR0FGRCxNQUVPLElBQUlzRSxXQUFXLENBQVgsSUFBZ0JBLFlBQVlpMUIsSUFBSTJDLENBQXBDLEVBQXVDO0FBQzdDNTNCLGNBQVcsQ0FBQyxDQUFDQSxXQUFXNDNCLElBQUksQ0FBaEIsSUFBcUIzQyxDQUFyQixHQUF5QkEsQ0FBMUIsSUFBK0JBLENBQS9CLEdBQW1DMkMsSUFBSSxDQUFsRDtBQUNBOztBQUVELFNBQU81M0IsUUFBUDtBQUNBLEVBWEQ7O0FBYUE7Ozs7OztBQU1BeXZCLEtBQUlsMEIsU0FBSixDQUFjdTRCLFFBQWQsR0FBeUIsVUFBUzl6QixRQUFULEVBQW1CO0FBQzNDQSxjQUFZLEtBQUttd0IsT0FBTCxDQUFhajRCLE1BQWIsR0FBc0IsQ0FBbEM7QUFDQSxTQUFPLEtBQUtvOEIsU0FBTCxDQUFldDBCLFFBQWYsRUFBeUIsSUFBekIsQ0FBUDtBQUNBLEVBSEQ7O0FBS0E7Ozs7OztBQU1BeXZCLEtBQUlsMEIsU0FBSixDQUFjczVCLE9BQWQsR0FBd0IsVUFBU2YsUUFBVCxFQUFtQjtBQUMxQyxNQUFJN0osV0FBVyxLQUFLQSxRQUFwQjtBQUFBLE1BQ0M0SyxVQUFVLEtBQUs5RSxZQUFMLENBQWtCNzNCLE1BRDdCO0FBQUEsTUFFQys3QixRQUZEO0FBQUEsTUFHQzZELG9CQUhEO0FBQUEsTUFJQ0MsWUFKRDs7QUFNQSxNQUFJOU4sU0FBU3NILElBQWIsRUFBbUI7QUFDbEJzRCxhQUFVLEtBQUsxRSxPQUFMLENBQWFqNEIsTUFBYixHQUFzQixDQUF0QixHQUEwQixLQUFLZzRCLE1BQUwsQ0FBWWg0QixNQUF0QyxHQUErQyxDQUF6RDtBQUNBLEdBRkQsTUFFTyxJQUFJK3hCLFNBQVNnSSxTQUFULElBQXNCaEksU0FBUzhILEtBQW5DLEVBQTBDO0FBQ2hEa0MsY0FBVyxLQUFLL0QsTUFBTCxDQUFZaDRCLE1BQXZCO0FBQ0E0L0IsMEJBQXVCLEtBQUs1SCxNQUFMLENBQVksRUFBRStELFFBQWQsRUFBd0JqMUIsS0FBeEIsRUFBdkI7QUFDQSs0QixrQkFBZSxLQUFLeGhDLFFBQUwsQ0FBY3lJLEtBQWQsRUFBZjtBQUNBLFVBQU9pMUIsVUFBUCxFQUFtQjtBQUNsQjZELDRCQUF3QixLQUFLNUgsTUFBTCxDQUFZK0QsUUFBWixFQUFzQmoxQixLQUF0QixLQUFnQyxLQUFLaXJCLFFBQUwsQ0FBY2xLLE1BQXRFO0FBQ0EsUUFBSStYLHVCQUF1QkMsWUFBM0IsRUFBeUM7QUFDeEM7QUFDQTtBQUNEO0FBQ0RsRCxhQUFVWixXQUFXLENBQXJCO0FBQ0EsR0FYTSxNQVdBLElBQUloSyxTQUFTdUgsTUFBYixFQUFxQjtBQUMzQnFELGFBQVUsS0FBSzNFLE1BQUwsQ0FBWWg0QixNQUFaLEdBQXFCLENBQS9CO0FBQ0EsR0FGTSxNQUVBO0FBQ04yOEIsYUFBVSxLQUFLM0UsTUFBTCxDQUFZaDRCLE1BQVosR0FBcUIreEIsU0FBU3BpQixLQUF4QztBQUNBOztBQUVELE1BQUlpc0IsUUFBSixFQUFjO0FBQ2JlLGNBQVcsS0FBSzFFLE9BQUwsQ0FBYWo0QixNQUFiLEdBQXNCLENBQWpDO0FBQ0E7O0FBRUQsU0FBT0UsS0FBS3dFLEdBQUwsQ0FBU2k0QixPQUFULEVBQWtCLENBQWxCLENBQVA7QUFDQSxFQS9CRDs7QUFpQ0E7Ozs7OztBQU1BcEYsS0FBSWwwQixTQUFKLENBQWNxNUIsT0FBZCxHQUF3QixVQUFTZCxRQUFULEVBQW1CO0FBQzFDLFNBQU9BLFdBQVcsQ0FBWCxHQUFlLEtBQUszRCxPQUFMLENBQWFqNEIsTUFBYixHQUFzQixDQUE1QztBQUNBLEVBRkQ7O0FBSUE7Ozs7OztBQU1BdTNCLEtBQUlsMEIsU0FBSixDQUFjc00sS0FBZCxHQUFzQixVQUFTN0gsUUFBVCxFQUFtQjtBQUN4QyxNQUFJQSxhQUFhdEUsU0FBakIsRUFBNEI7QUFDM0IsVUFBTyxLQUFLdzBCLE1BQUwsQ0FBWXozQixLQUFaLEVBQVA7QUFDQTs7QUFFRHVILGFBQVcsS0FBS3MwQixTQUFMLENBQWV0MEIsUUFBZixFQUF5QixJQUF6QixDQUFYO0FBQ0EsU0FBTyxLQUFLa3dCLE1BQUwsQ0FBWWx3QixRQUFaLENBQVA7QUFDQSxFQVBEOztBQVNBOzs7Ozs7QUFNQXl2QixLQUFJbDBCLFNBQUosQ0FBY3k4QixPQUFkLEdBQXdCLFVBQVNoNEIsUUFBVCxFQUFtQjtBQUMxQyxNQUFJQSxhQUFhdEUsU0FBakIsRUFBNEI7QUFDM0IsVUFBTyxLQUFLMDBCLFFBQUwsQ0FBYzMzQixLQUFkLEVBQVA7QUFDQTs7QUFFRHVILGFBQVcsS0FBS3MwQixTQUFMLENBQWV0MEIsUUFBZixFQUF5QixJQUF6QixDQUFYO0FBQ0EsU0FBTyxLQUFLb3dCLFFBQUwsQ0FBY3B3QixRQUFkLENBQVA7QUFDQSxFQVBEOztBQVNBOzs7Ozs7QUFNQXl2QixLQUFJbDBCLFNBQUosQ0FBYzQ0QixNQUFkLEdBQXVCLFVBQVNuMEIsUUFBVCxFQUFtQjtBQUN6QyxNQUFJaTRCLE1BQU0sS0FBSzlILE9BQUwsQ0FBYWo0QixNQUFiLEdBQXNCLENBQWhDO0FBQUEsTUFDQ2dnQyxPQUFPRCxNQUFNLEtBQUsvSCxNQUFMLENBQVloNEIsTUFEMUI7QUFBQSxNQUVDcUIsTUFBTSxTQUFOQSxHQUFNLENBQVNvN0IsS0FBVCxFQUFnQjtBQUFFLFVBQU9BLFFBQVEsQ0FBUixLQUFjLENBQWQsR0FBa0J1RCxPQUFPdkQsUUFBUSxDQUFqQyxHQUFxQ3NELE1BQU0sQ0FBQ3RELFFBQVEsQ0FBVCxJQUFjLENBQWhFO0FBQW1FLEdBRjVGOztBQUlBLE1BQUkzMEIsYUFBYXRFLFNBQWpCLEVBQTRCO0FBQzNCLFVBQU92RyxFQUFFb0UsR0FBRixDQUFNLEtBQUs0MkIsT0FBWCxFQUFvQixVQUFTemUsQ0FBVCxFQUFZOVksQ0FBWixFQUFlO0FBQUUsV0FBT1csSUFBSVgsQ0FBSixDQUFQO0FBQWUsSUFBcEQsQ0FBUDtBQUNBOztBQUVELFNBQU96RCxFQUFFb0UsR0FBRixDQUFNLEtBQUs0MkIsT0FBWCxFQUFvQixVQUFTemUsQ0FBVCxFQUFZOVksQ0FBWixFQUFlO0FBQUUsVUFBTzhZLE1BQU0xUixRQUFOLEdBQWlCekcsSUFBSVgsQ0FBSixDQUFqQixHQUEwQixJQUFqQztBQUF1QyxHQUE1RSxDQUFQO0FBQ0EsRUFWRDs7QUFZQTs7Ozs7O0FBTUE2MkIsS0FBSWwwQixTQUFKLENBQWMwN0IsS0FBZCxHQUFzQixVQUFTQSxLQUFULEVBQWdCO0FBQ3JDLE1BQUlBLFVBQVV2N0IsU0FBZCxFQUF5QjtBQUN4QixRQUFLbzBCLE1BQUwsR0FBY21ILEtBQWQ7QUFDQTs7QUFFRCxTQUFPLEtBQUtuSCxNQUFaO0FBQ0EsRUFORDs7QUFRQTs7Ozs7OztBQU9BTCxLQUFJbDBCLFNBQUosQ0FBY2s1QixXQUFkLEdBQTRCLFVBQVN6MEIsUUFBVCxFQUFtQjtBQUM5QyxNQUFJbTRCLGFBQWEsQ0FBakI7QUFBQSxNQUNDQyxjQUFjcDRCLFdBQVcsQ0FEMUI7QUFBQSxNQUVDczNCLFVBRkQ7O0FBSUEsTUFBSXQzQixhQUFhdEUsU0FBakIsRUFBNEI7QUFDM0IsVUFBT3ZHLEVBQUVvRSxHQUFGLENBQU0sS0FBS3cyQixZQUFYLEVBQXlCNTZCLEVBQUUyN0IsS0FBRixDQUFRLFVBQVN3RyxVQUFULEVBQXFCM0MsS0FBckIsRUFBNEI7QUFDbkUsV0FBTyxLQUFLRixXQUFMLENBQWlCRSxLQUFqQixDQUFQO0FBQ0EsSUFGK0IsRUFFN0IsSUFGNkIsQ0FBekIsQ0FBUDtBQUdBOztBQUVELE1BQUksS0FBSzFLLFFBQUwsQ0FBY3VILE1BQWxCLEVBQTBCO0FBQ3pCLE9BQUksS0FBS3ZILFFBQUwsQ0FBY3gwQixHQUFsQixFQUF1QjtBQUN0QjBpQyxpQkFBYSxDQUFDLENBQWQ7QUFDQUMsa0JBQWNwNEIsV0FBVyxDQUF6QjtBQUNBOztBQUVEczNCLGdCQUFhLEtBQUt2SCxZQUFMLENBQWtCL3ZCLFFBQWxCLENBQWI7QUFDQXMzQixpQkFBYyxDQUFDLEtBQUt0NEIsS0FBTCxLQUFlczRCLFVBQWYsSUFBNkIsS0FBS3ZILFlBQUwsQ0FBa0JxSSxXQUFsQixLQUFrQyxDQUEvRCxDQUFELElBQXNFLENBQXRFLEdBQTBFRCxVQUF4RjtBQUNBLEdBUkQsTUFRTztBQUNOYixnQkFBYSxLQUFLdkgsWUFBTCxDQUFrQnFJLFdBQWxCLEtBQWtDLENBQS9DO0FBQ0E7O0FBRURkLGVBQWFsL0IsS0FBS28yQixJQUFMLENBQVU4SSxVQUFWLENBQWI7O0FBRUEsU0FBT0EsVUFBUDtBQUNBLEVBMUJEOztBQTRCQTs7Ozs7Ozs7QUFRQTdILEtBQUlsMEIsU0FBSixDQUFjbUwsUUFBZCxHQUF5QixVQUFTMnhCLElBQVQsRUFBZUMsRUFBZixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDbkQsTUFBSUEsV0FBVyxDQUFmLEVBQWtCO0FBQ2pCLFVBQU8sQ0FBUDtBQUNBOztBQUVELFNBQU9uZ0MsS0FBSzZkLEdBQUwsQ0FBUzdkLEtBQUt3RSxHQUFMLENBQVN4RSxLQUFLc1MsR0FBTCxDQUFTNHRCLEtBQUtELElBQWQsQ0FBVCxFQUE4QixDQUE5QixDQUFULEVBQTJDLENBQTNDLElBQWdEamdDLEtBQUtzUyxHQUFMLENBQVU2dEIsVUFBVSxLQUFLdE8sUUFBTCxDQUFja0ksVUFBbEMsQ0FBdkQ7QUFDQSxFQU5EOztBQVFBOzs7Ozs7QUFNQTFDLEtBQUlsMEIsU0FBSixDQUFjKzhCLEVBQWQsR0FBbUIsVUFBU3Q0QixRQUFULEVBQW1CaTNCLEtBQW5CLEVBQTBCO0FBQzVDLE1BQUl6ekIsVUFBVSxLQUFLQSxPQUFMLEVBQWQ7QUFBQSxNQUNDZzFCLFNBQVMsSUFEVjtBQUFBLE1BRUNDLFdBQVd6NEIsV0FBVyxLQUFLOHpCLFFBQUwsQ0FBY3R3QixPQUFkLENBRnZCO0FBQUEsTUFHQ210QixZQUFZLENBQUM4SCxXQUFXLENBQVosS0FBa0JBLFdBQVcsQ0FBN0IsQ0FIYjtBQUFBLE1BSUM1d0IsUUFBUSxLQUFLcW9CLE1BQUwsQ0FBWWg0QixNQUpyQjtBQUFBLE1BS0MwOEIsVUFBVSxLQUFLQSxPQUFMLEVBTFg7QUFBQSxNQU1DQyxVQUFVLEtBQUtBLE9BQUwsRUFOWDs7QUFRQSxNQUFJLEtBQUs1SyxRQUFMLENBQWNzSCxJQUFsQixFQUF3QjtBQUN2QixPQUFJLENBQUMsS0FBS3RILFFBQUwsQ0FBY3dILE1BQWYsSUFBeUJyNUIsS0FBS3NTLEdBQUwsQ0FBUyt0QixRQUFULElBQXFCNXdCLFFBQVEsQ0FBMUQsRUFBNkQ7QUFDNUQ0d0IsZ0JBQVk5SCxZQUFZLENBQUMsQ0FBYixHQUFpQjlvQixLQUE3QjtBQUNBOztBQUVEN0gsY0FBV3dELFVBQVVpMUIsUUFBckI7QUFDQUQsWUFBUyxDQUFDLENBQUN4NEIsV0FBVzQwQixPQUFaLElBQXVCL3NCLEtBQXZCLEdBQStCQSxLQUFoQyxJQUF5Q0EsS0FBekMsR0FBaUQrc0IsT0FBMUQ7O0FBRUEsT0FBSTRELFdBQVd4NEIsUUFBWCxJQUF1Qnc0QixTQUFTQyxRQUFULElBQXFCNUQsT0FBNUMsSUFBdUQyRCxTQUFTQyxRQUFULEdBQW9CLENBQS9FLEVBQWtGO0FBQ2pGajFCLGNBQVVnMUIsU0FBU0MsUUFBbkI7QUFDQXo0QixlQUFXdzRCLE1BQVg7QUFDQSxTQUFLdHhCLEtBQUwsQ0FBVzFELE9BQVg7QUFDQTtBQUNELEdBYkQsTUFhTyxJQUFJLEtBQUt5bUIsUUFBTCxDQUFjd0gsTUFBbEIsRUFBMEI7QUFDaENvRCxjQUFXLENBQVg7QUFDQTcwQixjQUFXLENBQUNBLFdBQVc2MEIsT0FBWCxHQUFxQkEsT0FBdEIsSUFBaUNBLE9BQTVDO0FBQ0EsR0FITSxNQUdBO0FBQ043MEIsY0FBVzVILEtBQUt3RSxHQUFMLENBQVNnNEIsT0FBVCxFQUFrQng4QixLQUFLNmQsR0FBTCxDQUFTNGUsT0FBVCxFQUFrQjcwQixRQUFsQixDQUFsQixDQUFYO0FBQ0E7O0FBRUQsT0FBS2kzQixLQUFMLENBQVcsS0FBS3Z3QixRQUFMLENBQWNsRCxPQUFkLEVBQXVCeEQsUUFBdkIsRUFBaUNpM0IsS0FBakMsQ0FBWDtBQUNBLE9BQUt6ekIsT0FBTCxDQUFheEQsUUFBYjs7QUFFQSxNQUFJLEtBQUt6SixRQUFMLENBQWMyTCxFQUFkLENBQWlCLFVBQWpCLENBQUosRUFBa0M7QUFDakMsUUFBS2swQixNQUFMO0FBQ0E7QUFDRCxFQW5DRDs7QUFxQ0E7Ozs7O0FBS0EzRyxLQUFJbDBCLFNBQUosQ0FBYzJZLElBQWQsR0FBcUIsVUFBUytpQixLQUFULEVBQWdCO0FBQ3BDQSxVQUFRQSxTQUFTLEtBQWpCO0FBQ0EsT0FBS3FCLEVBQUwsQ0FBUSxLQUFLeEUsUUFBTCxDQUFjLEtBQUt0d0IsT0FBTCxFQUFkLElBQWdDLENBQXhDLEVBQTJDeXpCLEtBQTNDO0FBQ0EsRUFIRDs7QUFLQTs7Ozs7QUFLQXhILEtBQUlsMEIsU0FBSixDQUFjK1ksSUFBZCxHQUFxQixVQUFTMmlCLEtBQVQsRUFBZ0I7QUFDcENBLFVBQVFBLFNBQVMsS0FBakI7QUFDQSxPQUFLcUIsRUFBTCxDQUFRLEtBQUt4RSxRQUFMLENBQWMsS0FBS3R3QixPQUFMLEVBQWQsSUFBZ0MsQ0FBeEMsRUFBMkN5ekIsS0FBM0M7QUFDQSxFQUhEOztBQUtBOzs7OztBQUtBeEgsS0FBSWwwQixTQUFKLENBQWNzN0IsZUFBZCxHQUFnQyxVQUFTbDJCLEtBQVQsRUFBZ0I7O0FBRS9DO0FBQ0EsTUFBSUEsVUFBVWpGLFNBQWQsRUFBeUI7QUFDeEJpRixTQUFNNEwsZUFBTjs7QUFFQTtBQUNBLE9BQUksQ0FBQzVMLE1BQU1nQyxNQUFOLElBQWdCaEMsTUFBTSszQixVQUF0QixJQUFvQy8zQixNQUFNZzRCLGNBQTNDLE1BQStELEtBQUs1RSxNQUFMLENBQVkxdkIsR0FBWixDQUFnQixDQUFoQixDQUFuRSxFQUF1RjtBQUN0RixXQUFPLEtBQVA7QUFDQTtBQUNEOztBQUVELE9BQUtxeEIsS0FBTCxDQUFXLFdBQVg7QUFDQSxPQUFLai9CLE9BQUwsQ0FBYSxZQUFiO0FBQ0EsRUFkRDs7QUFnQkE7Ozs7O0FBS0FnNUIsS0FBSWwwQixTQUFKLENBQWNvNkIsUUFBZCxHQUF5QixZQUFXO0FBQ25DLE1BQUkzMkIsS0FBSjtBQUNBLE1BQUksS0FBS3VKLE9BQUwsQ0FBYWlxQixxQkFBYixLQUF1QzMyQixNQUEzQyxFQUFtRDtBQUNsRG1ELFdBQVE3SixFQUFFLEtBQUtvVCxPQUFMLENBQWFpcUIscUJBQWYsRUFBc0N4ekIsS0FBdEMsRUFBUjtBQUNBLEdBRkQsTUFFTyxJQUFJbkQsT0FBTys4QixVQUFYLEVBQXVCO0FBQzdCNTVCLFdBQVFuRCxPQUFPKzhCLFVBQWY7QUFDQSxHQUZNLE1BRUEsSUFBSTcrQixTQUFTd1AsZUFBVCxJQUE0QnhQLFNBQVN3UCxlQUFULENBQXlCc3ZCLFdBQXpELEVBQXNFO0FBQzVFNzVCLFdBQVFqRixTQUFTd1AsZUFBVCxDQUF5QnN2QixXQUFqQztBQUNBLEdBRk0sTUFFQTtBQUNON2dDLFdBQVFrQixJQUFSLENBQWEsZ0NBQWI7QUFDQTtBQUNELFNBQU84RixLQUFQO0FBQ0EsRUFaRDs7QUFjQTs7Ozs7QUFLQXl3QixLQUFJbDBCLFNBQUosQ0FBY3VDLE9BQWQsR0FBd0IsVUFBU3E0QixPQUFULEVBQWtCO0FBQ3pDLE9BQUtwQyxNQUFMLENBQVlqRixLQUFaO0FBQ0EsT0FBS29CLE1BQUwsR0FBYyxFQUFkOztBQUVBLE1BQUlpRyxPQUFKLEVBQWE7QUFDWkEsYUFBV0EsbUJBQW1CcDRCLE1BQXBCLEdBQThCbzRCLE9BQTlCLEdBQXdDaGhDLEVBQUVnaEMsT0FBRixDQUFsRDtBQUNBOztBQUVELE1BQUksS0FBS2xNLFFBQUwsQ0FBY3lJLGtCQUFsQixFQUFzQztBQUNyQ3lELGFBQVVBLFFBQVFyOUIsSUFBUixDQUFhLE1BQU0sS0FBS214QixRQUFMLENBQWN5SSxrQkFBakMsQ0FBVjtBQUNBOztBQUVEeUQsVUFBUWwwQixNQUFSLENBQWUsWUFBVztBQUN6QixVQUFPLEtBQUs2MkIsUUFBTCxLQUFrQixDQUF6QjtBQUNBLEdBRkQsRUFFRzFoQyxJQUZILENBRVFqQyxFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTNkQsS0FBVCxFQUFnQnVCLElBQWhCLEVBQXNCO0FBQ3JDQSxVQUFPLEtBQUtELE9BQUwsQ0FBYUMsSUFBYixDQUFQO0FBQ0EsUUFBS25DLE1BQUwsQ0FBWTFYLE1BQVosQ0FBbUI2WixJQUFuQjtBQUNBLFFBQUtoRyxNQUFMLENBQVl4NUIsSUFBWixDQUFpQncvQixJQUFqQjtBQUNBLFFBQUs5RixRQUFMLENBQWMxNUIsSUFBZCxDQUFtQncvQixLQUFLcDlCLElBQUwsQ0FBVSxjQUFWLEVBQTBCQyxPQUExQixDQUFrQyxjQUFsQyxFQUFrRHJELElBQWxELENBQXVELFlBQXZELElBQXVFLENBQXZFLElBQTRFLENBQS9GO0FBQ0EsR0FMTyxFQUtMLElBTEssQ0FGUjs7QUFTQSxPQUFLd1IsS0FBTCxDQUFXLEtBQUsyd0IsU0FBTCxDQUFlLEtBQUs1TixRQUFMLENBQWNpSSxhQUE3QixJQUE4QyxLQUFLakksUUFBTCxDQUFjaUksYUFBNUQsR0FBNEUsQ0FBdkY7O0FBRUEsT0FBS3NELFVBQUwsQ0FBZ0IsT0FBaEI7QUFDQSxFQXhCRDs7QUEwQkE7Ozs7Ozs7QUFPQS9GLEtBQUlsMEIsU0FBSixDQUFjNlQsR0FBZCxHQUFvQixVQUFTK21CLE9BQVQsRUFBa0JuMkIsUUFBbEIsRUFBNEI7QUFDL0MsTUFBSXdELFVBQVUsS0FBS3N3QixRQUFMLENBQWMsS0FBS2pFLFFBQW5CLENBQWQ7O0FBRUE3dkIsYUFBV0EsYUFBYXRFLFNBQWIsR0FBeUIsS0FBS3cwQixNQUFMLENBQVloNEIsTUFBckMsR0FBOEMsS0FBS284QixTQUFMLENBQWV0MEIsUUFBZixFQUF5QixJQUF6QixDQUF6RDtBQUNBbTJCLFlBQVVBLG1CQUFtQnA0QixNQUFuQixHQUE0Qm80QixPQUE1QixHQUFzQ2hoQyxFQUFFZ2hDLE9BQUYsQ0FBaEQ7O0FBRUEsT0FBSzEvQixPQUFMLENBQWEsS0FBYixFQUFvQixFQUFFMC9CLFNBQVNBLE9BQVgsRUFBb0JuMkIsVUFBVUEsUUFBOUIsRUFBcEI7O0FBRUFtMkIsWUFBVSxLQUFLRixPQUFMLENBQWFFLE9BQWIsQ0FBVjs7QUFFQSxNQUFJLEtBQUtqRyxNQUFMLENBQVloNEIsTUFBWixLQUF1QixDQUF2QixJQUE0QjhILGFBQWEsS0FBS2t3QixNQUFMLENBQVloNEIsTUFBekQsRUFBaUU7QUFDaEUsUUFBS2c0QixNQUFMLENBQVloNEIsTUFBWixLQUF1QixDQUF2QixJQUE0QixLQUFLNjdCLE1BQUwsQ0FBWTFYLE1BQVosQ0FBbUI4WixPQUFuQixDQUE1QjtBQUNBLFFBQUtqRyxNQUFMLENBQVloNEIsTUFBWixLQUF1QixDQUF2QixJQUE0QixLQUFLZzRCLE1BQUwsQ0FBWWx3QixXQUFXLENBQXZCLEVBQTBCMFYsS0FBMUIsQ0FBZ0N5Z0IsT0FBaEMsQ0FBNUI7QUFDQSxRQUFLakcsTUFBTCxDQUFZeDVCLElBQVosQ0FBaUJ5L0IsT0FBakI7QUFDQSxRQUFLL0YsUUFBTCxDQUFjMTVCLElBQWQsQ0FBbUJ5L0IsUUFBUXI5QixJQUFSLENBQWEsY0FBYixFQUE2QkMsT0FBN0IsQ0FBcUMsY0FBckMsRUFBcURyRCxJQUFyRCxDQUEwRCxZQUExRCxJQUEwRSxDQUExRSxJQUErRSxDQUFsRztBQUNBLEdBTEQsTUFLTztBQUNOLFFBQUt3NkIsTUFBTCxDQUFZbHdCLFFBQVosRUFBc0IrNEIsTUFBdEIsQ0FBNkI1QyxPQUE3QjtBQUNBLFFBQUtqRyxNQUFMLENBQVl0NUIsTUFBWixDQUFtQm9KLFFBQW5CLEVBQTZCLENBQTdCLEVBQWdDbTJCLE9BQWhDO0FBQ0EsUUFBSy9GLFFBQUwsQ0FBY3g1QixNQUFkLENBQXFCb0osUUFBckIsRUFBK0IsQ0FBL0IsRUFBa0NtMkIsUUFBUXI5QixJQUFSLENBQWEsY0FBYixFQUE2QkMsT0FBN0IsQ0FBcUMsY0FBckMsRUFBcURyRCxJQUFyRCxDQUEwRCxZQUExRCxJQUEwRSxDQUExRSxJQUErRSxDQUFqSDtBQUNBOztBQUVELE9BQUt3NkIsTUFBTCxDQUFZMXNCLE9BQVosS0FBd0IsS0FBSzBELEtBQUwsQ0FBVyxLQUFLZ3BCLE1BQUwsQ0FBWTFzQixPQUFaLEVBQXFCbXhCLEtBQXJCLEVBQVgsQ0FBeEI7O0FBRUEsT0FBS2EsVUFBTCxDQUFnQixPQUFoQjs7QUFFQSxPQUFLLytCLE9BQUwsQ0FBYSxPQUFiLEVBQXNCLEVBQUUwL0IsU0FBU0EsT0FBWCxFQUFvQm4yQixVQUFVQSxRQUE5QixFQUF0QjtBQUNBLEVBMUJEOztBQTRCQTs7Ozs7O0FBTUF5dkIsS0FBSWwwQixTQUFKLENBQWNtYixNQUFkLEdBQXVCLFVBQVMxVyxRQUFULEVBQW1CO0FBQ3pDQSxhQUFXLEtBQUtzMEIsU0FBTCxDQUFldDBCLFFBQWYsRUFBeUIsSUFBekIsQ0FBWDs7QUFFQSxNQUFJQSxhQUFhdEUsU0FBakIsRUFBNEI7QUFDM0I7QUFDQTs7QUFFRCxPQUFLakYsT0FBTCxDQUFhLFFBQWIsRUFBdUIsRUFBRTAvQixTQUFTLEtBQUtqRyxNQUFMLENBQVlsd0IsUUFBWixDQUFYLEVBQWtDQSxVQUFVQSxRQUE1QyxFQUF2Qjs7QUFFQSxPQUFLa3dCLE1BQUwsQ0FBWWx3QixRQUFaLEVBQXNCMFcsTUFBdEI7QUFDQSxPQUFLd1osTUFBTCxDQUFZdDVCLE1BQVosQ0FBbUJvSixRQUFuQixFQUE2QixDQUE3QjtBQUNBLE9BQUtvd0IsUUFBTCxDQUFjeDVCLE1BQWQsQ0FBcUJvSixRQUFyQixFQUErQixDQUEvQjs7QUFFQSxPQUFLdzFCLFVBQUwsQ0FBZ0IsT0FBaEI7O0FBRUEsT0FBSy8rQixPQUFMLENBQWEsU0FBYixFQUF3QixFQUFFMC9CLFNBQVMsSUFBWCxFQUFpQm4yQixVQUFVQSxRQUEzQixFQUF4QjtBQUNBLEVBaEJEOztBQWtCQTs7Ozs7QUFLQXl2QixLQUFJbDBCLFNBQUosQ0FBYzg1QixzQkFBZCxHQUF1QyxVQUFTdHNCLE1BQVQsRUFBaUI7QUFDdkRBLFNBQU8zUixJQUFQLENBQVlqQyxFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTbDRCLENBQVQsRUFBWXdGLE9BQVosRUFBcUI7QUFDeEMsUUFBSysyQixLQUFMLENBQVcsYUFBWDtBQUNBLzJCLGFBQVVqSixFQUFFaUosT0FBRixDQUFWO0FBQ0FqSixLQUFFLElBQUk2akMsS0FBSixFQUFGLEVBQWUxeEIsR0FBZixDQUFtQixNQUFuQixFQUEyQm5TLEVBQUUyN0IsS0FBRixDQUFRLFVBQVN6M0IsQ0FBVCxFQUFZO0FBQzlDK0UsWUFBUTFJLElBQVIsQ0FBYSxLQUFiLEVBQW9CMkQsRUFBRXNKLE1BQUYsQ0FBU3lHLEdBQTdCO0FBQ0FoTCxZQUFRdUYsR0FBUixDQUFZLFNBQVosRUFBdUIsQ0FBdkI7QUFDQSxTQUFLK3hCLEtBQUwsQ0FBVyxhQUFYO0FBQ0EsS0FBQyxLQUFLeHpCLEVBQUwsQ0FBUSxhQUFSLENBQUQsSUFBMkIsQ0FBQyxLQUFLQSxFQUFMLENBQVEsY0FBUixDQUE1QixJQUF1RCxLQUFLcXpCLE9BQUwsRUFBdkQ7QUFDQSxJQUwwQixFQUt4QixJQUx3QixDQUEzQixFQUtVNy9CLElBTFYsQ0FLZSxLQUxmLEVBS3NCMEksUUFBUTFJLElBQVIsQ0FBYSxLQUFiLEtBQXVCMEksUUFBUTFJLElBQVIsQ0FBYSxVQUFiLENBQXZCLElBQW1EMEksUUFBUTFJLElBQVIsQ0FBYSxpQkFBYixDQUx6RTtBQU1BLEdBVFcsRUFTVCxJQVRTLENBQVo7QUFVQSxFQVhEOztBQWFBOzs7O0FBSUErNUIsS0FBSWwwQixTQUFKLENBQWMraUIsT0FBZCxHQUF3QixZQUFXOztBQUVsQyxPQUFLL25CLFFBQUwsQ0FBY3dNLEdBQWQsQ0FBa0IsV0FBbEI7QUFDQSxPQUFLZ3hCLE1BQUwsQ0FBWWh4QixHQUFaLENBQWdCLFdBQWhCO0FBQ0E1TixJQUFFNEUsUUFBRixFQUFZZ0osR0FBWixDQUFnQixXQUFoQjs7QUFFQSxNQUFJLEtBQUtrbkIsUUFBTCxDQUFjcUksVUFBZCxLQUE2QixLQUFqQyxFQUF3QztBQUN2Q3oyQixVQUFPZ0IsWUFBUCxDQUFvQixLQUFLNDVCLFdBQXpCO0FBQ0EsUUFBSzF6QixHQUFMLENBQVNsSCxNQUFULEVBQWlCLFFBQWpCLEVBQTJCLEtBQUs4ekIsU0FBTCxDQUFlNkcsaUJBQTFDO0FBQ0E7O0FBRUQsT0FBSyxJQUFJNTlCLENBQVQsSUFBYyxLQUFLckQsUUFBbkIsRUFBNkI7QUFDNUIsUUFBS0EsUUFBTCxDQUFjcUQsQ0FBZCxFQUFpQjBsQixPQUFqQjtBQUNBOztBQUVELE9BQUt5VixNQUFMLENBQVkzckIsUUFBWixDQUFxQixTQUFyQixFQUFnQ3NPLE1BQWhDOztBQUVBLE9BQUtxZCxNQUFMLENBQVl4UCxNQUFaO0FBQ0EsT0FBS3dQLE1BQUwsQ0FBWTNyQixRQUFaLEdBQXVCNndCLFFBQXZCLEdBQWtDMVUsTUFBbEM7QUFDQSxPQUFLd1AsTUFBTCxDQUFZM3JCLFFBQVosR0FBdUJtYyxNQUF2Qjs7QUFFQSxPQUFLaHVCLFFBQUwsQ0FDRTZFLFdBREYsQ0FDYyxLQUFLbU4sT0FBTCxDQUFhc3FCLFlBRDNCLEVBRUV6M0IsV0FGRixDQUVjLEtBQUttTixPQUFMLENBQWF3cUIsWUFGM0IsRUFHRTMzQixXQUhGLENBR2MsS0FBS21OLE9BQUwsQ0FBYXVxQixXQUgzQixFQUlFMTNCLFdBSkYsQ0FJYyxLQUFLbU4sT0FBTCxDQUFheXFCLFFBSjNCLEVBS0U1M0IsV0FMRixDQUtjLEtBQUttTixPQUFMLENBQWEycUIsU0FMM0IsRUFNRTkzQixXQU5GLENBTWMsS0FBS21OLE9BQUwsQ0FBYStxQixTQU4zQixFQU9FNTlCLElBUEYsQ0FPTyxPQVBQLEVBT2dCLEtBQUthLFFBQUwsQ0FBY2IsSUFBZCxDQUFtQixPQUFuQixFQUE0Qm9JLE9BQTVCLENBQW9DLElBQUl3VCxNQUFKLENBQVcsS0FBSy9JLE9BQUwsQ0FBYTBxQixlQUFiLEdBQStCLFVBQTFDLEVBQXNELEdBQXRELENBQXBDLEVBQWdHLEVBQWhHLENBUGhCLEVBUUVsOEIsVUFSRixDQVFhLGNBUmI7QUFTQSxFQTlCRDs7QUFnQ0E7Ozs7Ozs7QUFPQTA0QixLQUFJbDBCLFNBQUosQ0FBYzI1QixFQUFkLEdBQW1CLFVBQVNnRSxDQUFULEVBQVlDLENBQVosRUFBZUMsQ0FBZixFQUFrQjtBQUNwQyxNQUFJM2pDLE1BQU0sS0FBS3cwQixRQUFMLENBQWN4MEIsR0FBeEI7QUFDQSxVQUFRMGpDLENBQVI7QUFDQyxRQUFLLEdBQUw7QUFDQyxXQUFPMWpDLE1BQU15akMsSUFBSUUsQ0FBVixHQUFjRixJQUFJRSxDQUF6QjtBQUNELFFBQUssR0FBTDtBQUNDLFdBQU8zakMsTUFBTXlqQyxJQUFJRSxDQUFWLEdBQWNGLElBQUlFLENBQXpCO0FBQ0QsUUFBSyxJQUFMO0FBQ0MsV0FBTzNqQyxNQUFNeWpDLEtBQUtFLENBQVgsR0FBZUYsS0FBS0UsQ0FBM0I7QUFDRCxRQUFLLElBQUw7QUFDQyxXQUFPM2pDLE1BQU15akMsS0FBS0UsQ0FBWCxHQUFlRixLQUFLRSxDQUEzQjtBQUNEO0FBQ0M7QUFWRjtBQVlBLEVBZEQ7O0FBZ0JBOzs7Ozs7OztBQVFBM0osS0FBSWwwQixTQUFKLENBQWNtSCxFQUFkLEdBQW1CLFVBQVN0RSxPQUFULEVBQWtCdUMsS0FBbEIsRUFBeUIwNEIsUUFBekIsRUFBbUNDLE9BQW5DLEVBQTRDO0FBQzlELE1BQUlsN0IsUUFBUXdNLGdCQUFaLEVBQThCO0FBQzdCeE0sV0FBUXdNLGdCQUFSLENBQXlCakssS0FBekIsRUFBZ0MwNEIsUUFBaEMsRUFBMENDLE9BQTFDO0FBQ0EsR0FGRCxNQUVPLElBQUlsN0IsUUFBUW03QixXQUFaLEVBQXlCO0FBQy9CbjdCLFdBQVFtN0IsV0FBUixDQUFvQixPQUFPNTRCLEtBQTNCLEVBQWtDMDRCLFFBQWxDO0FBQ0E7QUFDRCxFQU5EOztBQVFBOzs7Ozs7OztBQVFBNUosS0FBSWwwQixTQUFKLENBQWN3SCxHQUFkLEdBQW9CLFVBQVMzRSxPQUFULEVBQWtCdUMsS0FBbEIsRUFBeUIwNEIsUUFBekIsRUFBbUNDLE9BQW5DLEVBQTRDO0FBQy9ELE1BQUlsN0IsUUFBUTRMLG1CQUFaLEVBQWlDO0FBQ2hDNUwsV0FBUTRMLG1CQUFSLENBQTRCckosS0FBNUIsRUFBbUMwNEIsUUFBbkMsRUFBNkNDLE9BQTdDO0FBQ0EsR0FGRCxNQUVPLElBQUlsN0IsUUFBUW83QixXQUFaLEVBQXlCO0FBQy9CcDdCLFdBQVFvN0IsV0FBUixDQUFvQixPQUFPNzRCLEtBQTNCLEVBQWtDMDRCLFFBQWxDO0FBQ0E7QUFDRCxFQU5EOztBQVFBOzs7Ozs7Ozs7OztBQVdBNUosS0FBSWwwQixTQUFKLENBQWM5RSxPQUFkLEdBQXdCLFVBQVNiLElBQVQsRUFBZVksSUFBZixFQUFxQjJCLFNBQXJCLEVBQWdDcS9CLEtBQWhDLEVBQXVDckMsS0FBdkMsRUFBOEM7QUFDckUsTUFBSXNFLFNBQVM7QUFDWnZELFNBQU0sRUFBRXdELE9BQU8sS0FBS3hKLE1BQUwsQ0FBWWg0QixNQUFyQixFQUE2Qnk4QixPQUFPLEtBQUtueEIsT0FBTCxFQUFwQztBQURNLEdBQWI7QUFBQSxNQUVHdXRCLFVBQVU1N0IsRUFBRXdrQyxTQUFGLENBQ1p4a0MsRUFBRW1oQyxJQUFGLENBQU8sQ0FBRSxJQUFGLEVBQVExZ0MsSUFBUixFQUFjdUMsU0FBZCxDQUFQLEVBQWtDLFVBQVN1WixDQUFULEVBQVk7QUFBRSxVQUFPQSxDQUFQO0FBQVUsR0FBMUQsRUFDRXpFLElBREYsQ0FDTyxHQURQLEVBQ1k3VyxXQURaLEVBRFksQ0FGYjtBQUFBLE1BS0d1SyxRQUFReEwsRUFBRTA1QixLQUFGLENBQ1YsQ0FBRWo1QixJQUFGLEVBQVEsS0FBUixFQUFldUMsYUFBYSxVQUE1QixFQUF5QzhVLElBQXpDLENBQThDLEdBQTlDLEVBQW1EN1csV0FBbkQsRUFEVSxFQUVWakIsRUFBRXlNLE1BQUYsQ0FBUyxFQUFFZzRCLGVBQWUsSUFBakIsRUFBVCxFQUFrQ0gsTUFBbEMsRUFBMENqakMsSUFBMUMsQ0FGVSxDQUxYOztBQVVBLE1BQUksQ0FBQyxLQUFLbzVCLFFBQUwsQ0FBY2g2QixJQUFkLENBQUwsRUFBMEI7QUFDekJULEtBQUVpQyxJQUFGLENBQU8sS0FBSzdCLFFBQVosRUFBc0IsVUFBU0ssSUFBVCxFQUFlRCxNQUFmLEVBQXVCO0FBQzVDLFFBQUlBLE9BQU9ra0MsU0FBWCxFQUFzQjtBQUNyQmxrQyxZQUFPa2tDLFNBQVAsQ0FBaUJsNUIsS0FBakI7QUFDQTtBQUNELElBSkQ7O0FBTUEsUUFBS3dCLFFBQUwsQ0FBYyxFQUFFN0ssTUFBTW00QixJQUFJa0UsSUFBSixDQUFTOUUsS0FBakIsRUFBd0JqNUIsTUFBTUEsSUFBOUIsRUFBZDtBQUNBLFFBQUtXLFFBQUwsQ0FBY0UsT0FBZCxDQUFzQmtLLEtBQXRCOztBQUVBLE9BQUksS0FBS3NwQixRQUFMLElBQWlCLE9BQU8sS0FBS0EsUUFBTCxDQUFjOEcsT0FBZCxDQUFQLEtBQWtDLFVBQXZELEVBQW1FO0FBQ2xFLFNBQUs5RyxRQUFMLENBQWM4RyxPQUFkLEVBQXVCdjFCLElBQXZCLENBQTRCLElBQTVCLEVBQWtDbUYsS0FBbEM7QUFDQTtBQUNEOztBQUVELFNBQU9BLEtBQVA7QUFDQSxFQTNCRDs7QUE2QkE7Ozs7QUFJQTh1QixLQUFJbDBCLFNBQUosQ0FBYzQ1QixLQUFkLEdBQXNCLFVBQVN2L0IsSUFBVCxFQUFlO0FBQ3BDVCxJQUFFaUMsSUFBRixDQUFPLENBQUV4QixJQUFGLEVBQVMySCxNQUFULENBQWdCLEtBQUtxekIsT0FBTCxDQUFhQyxJQUFiLENBQWtCajdCLElBQWxCLEtBQTJCLEVBQTNDLENBQVAsRUFBdURULEVBQUUyN0IsS0FBRixDQUFRLFVBQVNsNEIsQ0FBVCxFQUFZaEQsSUFBWixFQUFrQjtBQUNoRixPQUFJLEtBQUtnN0IsT0FBTCxDQUFhcHRCLE9BQWIsQ0FBcUI1TixJQUFyQixNQUErQjhGLFNBQW5DLEVBQThDO0FBQzdDLFNBQUtrMUIsT0FBTCxDQUFhcHRCLE9BQWIsQ0FBcUI1TixJQUFyQixJQUE2QixDQUE3QjtBQUNBOztBQUVELFFBQUtnN0IsT0FBTCxDQUFhcHRCLE9BQWIsQ0FBcUI1TixJQUFyQjtBQUNBLEdBTnNELEVBTXBELElBTm9ELENBQXZEO0FBT0EsRUFSRDs7QUFVQTs7OztBQUlBNjVCLEtBQUlsMEIsU0FBSixDQUFjbTZCLEtBQWQsR0FBc0IsVUFBUzkvQixJQUFULEVBQWU7QUFDcENULElBQUVpQyxJQUFGLENBQU8sQ0FBRXhCLElBQUYsRUFBUzJILE1BQVQsQ0FBZ0IsS0FBS3F6QixPQUFMLENBQWFDLElBQWIsQ0FBa0JqN0IsSUFBbEIsS0FBMkIsRUFBM0MsQ0FBUCxFQUF1RFQsRUFBRTI3QixLQUFGLENBQVEsVUFBU2w0QixDQUFULEVBQVloRCxJQUFaLEVBQWtCO0FBQ2hGLFFBQUtnN0IsT0FBTCxDQUFhcHRCLE9BQWIsQ0FBcUI1TixJQUFyQjtBQUNBLEdBRnNELEVBRXBELElBRm9ELENBQXZEO0FBR0EsRUFKRDs7QUFNQTs7Ozs7QUFLQTY1QixLQUFJbDBCLFNBQUosQ0FBYzRHLFFBQWQsR0FBeUIsVUFBUzIzQixNQUFULEVBQWlCO0FBQ3pDLE1BQUlBLE9BQU94aUMsSUFBUCxLQUFnQm00QixJQUFJa0UsSUFBSixDQUFTOUUsS0FBN0IsRUFBb0M7QUFDbkMsT0FBSSxDQUFDMTVCLEVBQUV3TCxLQUFGLENBQVFvSyxPQUFSLENBQWdCK3VCLE9BQU9sa0MsSUFBdkIsQ0FBTCxFQUFtQztBQUNsQ1QsTUFBRXdMLEtBQUYsQ0FBUW9LLE9BQVIsQ0FBZ0IrdUIsT0FBT2xrQyxJQUF2QixJQUErQixFQUEvQjtBQUNBOztBQUVELE9BQUksQ0FBQ1QsRUFBRXdMLEtBQUYsQ0FBUW9LLE9BQVIsQ0FBZ0IrdUIsT0FBT2xrQyxJQUF2QixFQUE2Qm1rQyxHQUFsQyxFQUF1QztBQUN0QyxRQUFJQyxXQUFXN2tDLEVBQUV3TCxLQUFGLENBQVFvSyxPQUFSLENBQWdCK3VCLE9BQU9sa0MsSUFBdkIsRUFBNkJva0MsUUFBNUM7QUFDQTdrQyxNQUFFd0wsS0FBRixDQUFRb0ssT0FBUixDQUFnQit1QixPQUFPbGtDLElBQXZCLEVBQTZCb2tDLFFBQTdCLEdBQXdDLFVBQVMzZ0MsQ0FBVCxFQUFZO0FBQ25ELFNBQUkyZ0MsWUFBWUEsU0FBU2wvQixLQUFyQixLQUErQixDQUFDekIsRUFBRWxCLFNBQUgsSUFBZ0JrQixFQUFFbEIsU0FBRixDQUFZdEIsT0FBWixDQUFvQixLQUFwQixNQUErQixDQUFDLENBQS9FLENBQUosRUFBdUY7QUFDdEYsYUFBT21qQyxTQUFTbC9CLEtBQVQsQ0FBZSxJQUFmLEVBQXFCRCxTQUFyQixDQUFQO0FBQ0E7QUFDRCxZQUFPeEIsRUFBRWxCLFNBQUYsSUFBZWtCLEVBQUVsQixTQUFGLENBQVl0QixPQUFaLENBQW9CLEtBQXBCLElBQTZCLENBQUMsQ0FBcEQ7QUFDQSxLQUxEO0FBTUExQixNQUFFd0wsS0FBRixDQUFRb0ssT0FBUixDQUFnQit1QixPQUFPbGtDLElBQXZCLEVBQTZCbWtDLEdBQTdCLEdBQW1DLElBQW5DO0FBQ0E7QUFDRCxHQWZELE1BZU8sSUFBSUQsT0FBT3hpQyxJQUFQLEtBQWdCbTRCLElBQUlrRSxJQUFKLENBQVNDLEtBQTdCLEVBQW9DO0FBQzFDLE9BQUksQ0FBQyxLQUFLaEQsT0FBTCxDQUFhQyxJQUFiLENBQWtCaUosT0FBT2xrQyxJQUF6QixDQUFMLEVBQXFDO0FBQ3BDLFNBQUtnN0IsT0FBTCxDQUFhQyxJQUFiLENBQWtCaUosT0FBT2xrQyxJQUF6QixJQUFpQ2trQyxPQUFPakosSUFBeEM7QUFDQSxJQUZELE1BRU87QUFDTixTQUFLRCxPQUFMLENBQWFDLElBQWIsQ0FBa0JpSixPQUFPbGtDLElBQXpCLElBQWlDLEtBQUtnN0IsT0FBTCxDQUFhQyxJQUFiLENBQWtCaUosT0FBT2xrQyxJQUF6QixFQUErQjJILE1BQS9CLENBQXNDdThCLE9BQU9qSixJQUE3QyxDQUFqQztBQUNBOztBQUVELFFBQUtELE9BQUwsQ0FBYUMsSUFBYixDQUFrQmlKLE9BQU9sa0MsSUFBekIsSUFBaUNULEVBQUVtaEMsSUFBRixDQUFPLEtBQUsxRixPQUFMLENBQWFDLElBQWIsQ0FBa0JpSixPQUFPbGtDLElBQXpCLENBQVAsRUFBdUNULEVBQUUyN0IsS0FBRixDQUFRLFVBQVNtSixHQUFULEVBQWNyaEMsQ0FBZCxFQUFpQjtBQUNoRyxXQUFPekQsRUFBRStrQyxPQUFGLENBQVVELEdBQVYsRUFBZSxLQUFLckosT0FBTCxDQUFhQyxJQUFiLENBQWtCaUosT0FBT2xrQyxJQUF6QixDQUFmLE1BQW1EZ0QsQ0FBMUQ7QUFDQSxJQUZ1RSxFQUVyRSxJQUZxRSxDQUF2QyxDQUFqQztBQUdBO0FBQ0QsRUEzQkQ7O0FBNkJBOzs7OztBQUtBNjJCLEtBQUlsMEIsU0FBSixDQUFjbThCLFFBQWQsR0FBeUIsVUFBU3lDLE1BQVQsRUFBaUI7QUFDekNobEMsSUFBRWlDLElBQUYsQ0FBTytpQyxNQUFQLEVBQWVobEMsRUFBRTI3QixLQUFGLENBQVEsVUFBUzZELEtBQVQsRUFBZ0JoMEIsS0FBaEIsRUFBdUI7QUFDN0MsUUFBS2l2QixRQUFMLENBQWNqdkIsS0FBZCxJQUF1QixJQUF2QjtBQUNBLEdBRmMsRUFFWixJQUZZLENBQWY7QUFHQSxFQUpEOztBQU1BOzs7OztBQUtBOHVCLEtBQUlsMEIsU0FBSixDQUFjbzhCLE9BQWQsR0FBd0IsVUFBU3dDLE1BQVQsRUFBaUI7QUFDeENobEMsSUFBRWlDLElBQUYsQ0FBTytpQyxNQUFQLEVBQWVobEMsRUFBRTI3QixLQUFGLENBQVEsVUFBUzZELEtBQVQsRUFBZ0JoMEIsS0FBaEIsRUFBdUI7QUFDN0MsVUFBTyxLQUFLaXZCLFFBQUwsQ0FBY2p2QixLQUFkLENBQVA7QUFDQSxHQUZjLEVBRVosSUFGWSxDQUFmO0FBR0EsRUFKRDs7QUFNQTs7Ozs7OztBQU9BOHVCLEtBQUlsMEIsU0FBSixDQUFjazFCLE9BQWQsR0FBd0IsVUFBUzl2QixLQUFULEVBQWdCO0FBQ3ZDLE1BQUlncEIsU0FBUyxFQUFFemYsR0FBRyxJQUFMLEVBQVdHLEdBQUcsSUFBZCxFQUFiOztBQUVBMUosVUFBUUEsTUFBTXVjLGFBQU4sSUFBdUJ2YyxLQUF2QixJQUFnQzlFLE9BQU84RSxLQUEvQzs7QUFFQUEsVUFBUUEsTUFBTXdKLE9BQU4sSUFBaUJ4SixNQUFNd0osT0FBTixDQUFjalMsTUFBL0IsR0FDUHlJLE1BQU13SixPQUFOLENBQWMsQ0FBZCxDQURPLEdBQ1l4SixNQUFNMEssY0FBTixJQUF3QjFLLE1BQU0wSyxjQUFOLENBQXFCblQsTUFBN0MsR0FDbEJ5SSxNQUFNMEssY0FBTixDQUFxQixDQUFyQixDQURrQixHQUNRMUssS0FGNUI7O0FBSUEsTUFBSUEsTUFBTXlKLEtBQVYsRUFBaUI7QUFDaEJ1ZixVQUFPemYsQ0FBUCxHQUFXdkosTUFBTXlKLEtBQWpCO0FBQ0F1ZixVQUFPdGYsQ0FBUCxHQUFXMUosTUFBTTJKLEtBQWpCO0FBQ0EsR0FIRCxNQUdPO0FBQ05xZixVQUFPemYsQ0FBUCxHQUFXdkosTUFBTW9MLE9BQWpCO0FBQ0E0ZCxVQUFPdGYsQ0FBUCxHQUFXMUosTUFBTXFMLE9BQWpCO0FBQ0E7O0FBRUQsU0FBTzJkLE1BQVA7QUFDQSxFQWxCRDs7QUFvQkE7Ozs7OztBQU1BOEYsS0FBSWwwQixTQUFKLENBQWNzOEIsU0FBZCxHQUEwQixVQUFTN2xCLE1BQVQsRUFBaUI7QUFDMUMsU0FBTyxDQUFDcFUsTUFBTUMsV0FBV21VLE1BQVgsQ0FBTixDQUFSO0FBQ0EsRUFGRDs7QUFJQTs7Ozs7Ozs7QUFRQXlkLEtBQUlsMEIsU0FBSixDQUFjNDdCLFVBQWQsR0FBMkIsVUFBUzdyQixLQUFULEVBQWdCOHVCLE1BQWhCLEVBQXdCO0FBQ2xELFNBQU87QUFDTmx3QixNQUFHb0IsTUFBTXBCLENBQU4sR0FBVWt3QixPQUFPbHdCLENBRGQ7QUFFTkcsTUFBR2lCLE1BQU1qQixDQUFOLEdBQVUrdkIsT0FBTy92QjtBQUZkLEdBQVA7QUFJQSxFQUxEOztBQU9BOzs7OztBQUtBbFYsR0FBRTJHLEVBQUYsQ0FBS3UrQixXQUFMLEdBQW1CLFVBQVNDLE1BQVQsRUFBaUI7QUFDbkMsTUFBSTEvQixPQUFPVSxNQUFNQyxTQUFOLENBQWdCOUMsS0FBaEIsQ0FBc0IrQyxJQUF0QixDQUEyQlgsU0FBM0IsRUFBc0MsQ0FBdEMsQ0FBWDs7QUFFQSxTQUFPLEtBQUt6RCxJQUFMLENBQVUsWUFBVztBQUMzQixPQUFJbWpDLFFBQVFwbEMsRUFBRSxJQUFGLENBQVo7QUFBQSxPQUNDcUIsT0FBTytqQyxNQUFNL2pDLElBQU4sQ0FBVyxjQUFYLENBRFI7O0FBR0EsT0FBSSxDQUFDQSxJQUFMLEVBQVc7QUFDVkEsV0FBTyxJQUFJaTVCLEdBQUosQ0FBUSxJQUFSLEVBQWMsUUFBTzZLLE1BQVAseUNBQU9BLE1BQVAsTUFBaUIsUUFBakIsSUFBNkJBLE1BQTNDLENBQVA7QUFDQUMsVUFBTS9qQyxJQUFOLENBQVcsY0FBWCxFQUEyQkEsSUFBM0I7O0FBRUFyQixNQUFFaUMsSUFBRixDQUFPLENBQ04sTUFETSxFQUNFLE1BREYsRUFDVSxJQURWLEVBQ2dCLFNBRGhCLEVBQzJCLFNBRDNCLEVBQ3NDLFNBRHRDLEVBQ2lELEtBRGpELEVBQ3dELFFBRHhELENBQVAsRUFFRyxVQUFTd0IsQ0FBVCxFQUFZK0gsS0FBWixFQUFtQjtBQUNyQm5LLFVBQUsyTCxRQUFMLENBQWMsRUFBRTdLLE1BQU1tNEIsSUFBSWtFLElBQUosQ0FBUzlFLEtBQWpCLEVBQXdCajVCLE1BQU0rSyxLQUE5QixFQUFkO0FBQ0FuSyxVQUFLRCxRQUFMLENBQWNtTSxFQUFkLENBQWlCL0IsUUFBUSxvQkFBekIsRUFBK0N4TCxFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUNsRSxVQUFJQSxFQUFFbEIsU0FBRixJQUFla0IsRUFBRXVnQyxhQUFGLEtBQW9CLElBQXZDLEVBQTZDO0FBQzVDLFlBQUtsQyxRQUFMLENBQWMsQ0FBRS8yQixLQUFGLENBQWQ7QUFDQW5LLFlBQUttSyxLQUFMLEVBQVk3RixLQUFaLENBQWtCLElBQWxCLEVBQXdCLEdBQUdyQyxLQUFILENBQVMrQyxJQUFULENBQWNYLFNBQWQsRUFBeUIsQ0FBekIsQ0FBeEI7QUFDQSxZQUFLODhCLE9BQUwsQ0FBYSxDQUFFaDNCLEtBQUYsQ0FBYjtBQUNBO0FBQ0QsTUFOOEMsRUFNNUNuSyxJQU40QyxDQUEvQztBQU9BLEtBWEQ7QUFZQTs7QUFFRCxPQUFJLE9BQU84akMsTUFBUCxJQUFpQixRQUFqQixJQUE2QkEsT0FBT3JKLE1BQVAsQ0FBYyxDQUFkLE1BQXFCLEdBQXRELEVBQTJEO0FBQzFEejZCLFNBQUs4akMsTUFBTCxFQUFheC9CLEtBQWIsQ0FBbUJ0RSxJQUFuQixFQUF5Qm9FLElBQXpCO0FBQ0E7QUFDRCxHQXpCTSxDQUFQO0FBMEJBLEVBN0JEOztBQStCQTs7OztBQUlBekYsR0FBRTJHLEVBQUYsQ0FBS3UrQixXQUFMLENBQWlCRyxXQUFqQixHQUErQi9LLEdBQS9CO0FBRUEsQ0Evb0RBLEVBK29ERTV6QixPQUFPNCtCLEtBQVAsSUFBZ0I1K0IsT0FBT2tDLE1BL29EekIsRUErb0RpQ2xDLE1BL29EakMsRUErb0R5QzlCLFFBL29EekM7OztBQ1pEOzs7Ozs7O0FBT0EsQ0FBQyxDQUFDLFVBQVM1RSxDQUFULEVBQVkwRyxNQUFaLEVBQW9COUIsUUFBcEIsRUFBOEIyQixTQUE5QixFQUF5Qzs7QUFFMUM7Ozs7O0FBS0EsS0FBSWcvQixVQUFVLFNBQVZBLE9BQVUsQ0FBU0MsS0FBVCxFQUFnQjtBQUM3QixPQUFLQyxJQUFMLEdBQVlELEtBQVo7QUFDQSxPQUFLQyxJQUFMLENBQVVyeUIsT0FBVixHQUFvQnBULEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFhODRCLFFBQVFoTCxRQUFyQixFQUErQixLQUFLa0wsSUFBTCxDQUFVcnlCLE9BQXpDLENBQXBCO0FBQ0EsT0FBS3N5QixRQUFMLEdBQWdCLElBQWhCO0FBQ0EsT0FBS3htQixRQUFMLEdBQWdCM1ksU0FBaEI7QUFDQSxPQUFLd1ksSUFBTCxHQUFZeFksU0FBWjs7QUFFQSxPQUFLby9CLFFBQUwsR0FBZ0I7QUFDZiwwQkFBdUIzbEMsRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDMUMsUUFBSUEsRUFBRWxCLFNBQUYsSUFBZWtCLEVBQUUwOEIsUUFBRixDQUFXbmdDLElBQVgsSUFBbUIsVUFBdEMsRUFBa0Q7QUFDakQsVUFBS3llLFFBQUwsR0FBZ0IsS0FBS3VtQixJQUFMLENBQVVwM0IsT0FBVixFQUFoQjtBQUNBLFVBQUswUSxJQUFMLEdBQVk3YSxFQUFFMDhCLFFBQUYsQ0FBV2h5QixLQUF2QjtBQUNBO0FBQ0QsSUFMc0IsRUFLcEIsSUFMb0IsQ0FEUjtBQU9mLHFFQUFrRTVPLEVBQUUyN0IsS0FBRixDQUFRLFVBQVN6M0IsQ0FBVCxFQUFZO0FBQ3JGLFFBQUlBLEVBQUVsQixTQUFOLEVBQWlCO0FBQ2hCLFVBQUswaUMsUUFBTCxHQUFnQnhoQyxFQUFFL0IsSUFBRixJQUFVLFlBQTFCO0FBQ0E7QUFDRCxJQUppRSxFQUkvRCxJQUorRCxDQVBuRDtBQVlmLDZCQUEwQm5DLEVBQUUyN0IsS0FBRixDQUFRLFVBQVN6M0IsQ0FBVCxFQUFZO0FBQzdDLFFBQUlBLEVBQUVsQixTQUFGLElBQWUsS0FBSzBpQyxRQUFwQixLQUFpQyxLQUFLRCxJQUFMLENBQVVyeUIsT0FBVixDQUFrQi9CLFVBQWxCLElBQWdDLEtBQUtvMEIsSUFBTCxDQUFVcnlCLE9BQVYsQ0FBa0JuQyxTQUFuRixDQUFKLEVBQW1HO0FBQ2xHLFVBQUsyMEIsSUFBTDtBQUNBO0FBQ0QsSUFKeUIsRUFJdkIsSUFKdUI7QUFaWCxHQUFoQjs7QUFtQkEsT0FBS0gsSUFBTCxDQUFVcmtDLFFBQVYsQ0FBbUJtTSxFQUFuQixDQUFzQixLQUFLbzRCLFFBQTNCO0FBQ0EsRUEzQkQ7O0FBNkJBOzs7O0FBSUFKLFNBQVFoTCxRQUFSLEdBQW1CO0FBQ2xCbHBCLGNBQVksS0FETTtBQUVsQkosYUFBVztBQUZPLEVBQW5COztBQUtBOzs7OztBQUtBczBCLFNBQVFuL0IsU0FBUixDQUFrQncvQixJQUFsQixHQUF5QixZQUFXOztBQUVuQyxNQUFJLEtBQUtILElBQUwsQ0FBVTNRLFFBQVYsQ0FBbUJwaUIsS0FBbkIsS0FBNkIsQ0FBakMsRUFBb0M7QUFDbkM7QUFDQTs7QUFFRCxNQUFJLENBQUMxUyxFQUFFeWhDLE9BQUYsQ0FBVXZ3QixTQUFYLElBQXdCLENBQUNsUixFQUFFeWhDLE9BQUYsQ0FBVTdhLFVBQXZDLEVBQW1EO0FBQ2xEO0FBQ0E7O0FBRUQsT0FBSzZlLElBQUwsQ0FBVTNELEtBQVYsQ0FBZ0IsQ0FBaEI7O0FBRUEsTUFBSXQ0QixJQUFKO0FBQUEsTUFDQzhTLFFBQVF0YyxFQUFFMjdCLEtBQUYsQ0FBUSxLQUFLcmYsS0FBYixFQUFvQixJQUFwQixDQURUO0FBQUEsTUFFQzRDLFdBQVcsS0FBS3VtQixJQUFMLENBQVU3RyxNQUFWLENBQWlCM3JCLFFBQWpCLEdBQTRCNUYsRUFBNUIsQ0FBK0IsS0FBSzZSLFFBQXBDLENBRlo7QUFBQSxNQUdDSCxPQUFPLEtBQUswbUIsSUFBTCxDQUFVN0csTUFBVixDQUFpQjNyQixRQUFqQixHQUE0QjVGLEVBQTVCLENBQStCLEtBQUswUixJQUFwQyxDQUhSO0FBQUEsTUFJQzhtQixXQUFXLEtBQUtKLElBQUwsQ0FBVTNRLFFBQVYsQ0FBbUI3akIsU0FKL0I7QUFBQSxNQUtDNjBCLFdBQVcsS0FBS0wsSUFBTCxDQUFVM1EsUUFBVixDQUFtQnpqQixVQUwvQjs7QUFPQSxNQUFJLEtBQUtvMEIsSUFBTCxDQUFVcDNCLE9BQVYsT0FBd0IsS0FBSzZRLFFBQWpDLEVBQTJDO0FBQzFDO0FBQ0E7O0FBRUQsTUFBSTRtQixRQUFKLEVBQWM7QUFDYnQ4QixVQUFPLEtBQUtpOEIsSUFBTCxDQUFVbkcsV0FBVixDQUFzQixLQUFLcGdCLFFBQTNCLElBQXVDLEtBQUt1bUIsSUFBTCxDQUFVbkcsV0FBVixDQUFzQixLQUFLdmdCLElBQTNCLENBQTlDO0FBQ0FHLFlBQVMvTSxHQUFULENBQWFuUyxFQUFFeWhDLE9BQUYsQ0FBVXZ3QixTQUFWLENBQW9CcE0sR0FBakMsRUFBc0N3WCxLQUF0QyxFQUNFOU4sR0FERixDQUNPLEVBQUUsUUFBUWhGLE9BQU8sSUFBakIsRUFEUCxFQUVFd0ksUUFGRixDQUVXLDJCQUZYLEVBR0VBLFFBSEYsQ0FHVzh6QixRQUhYO0FBSUE7O0FBRUQsTUFBSUQsUUFBSixFQUFjO0FBQ2I5bUIsUUFBSzVNLEdBQUwsQ0FBU25TLEVBQUV5aEMsT0FBRixDQUFVdndCLFNBQVYsQ0FBb0JwTSxHQUE3QixFQUFrQ3dYLEtBQWxDLEVBQ0V0SyxRQURGLENBQ1csMEJBRFgsRUFFRUEsUUFGRixDQUVXNnpCLFFBRlg7QUFHQTtBQUNELEVBcENEOztBQXNDQU4sU0FBUW4vQixTQUFSLENBQWtCa1csS0FBbEIsR0FBMEIsVUFBU3BZLENBQVQsRUFBWTtBQUNyQ2xFLElBQUVrRSxFQUFFc0osTUFBSixFQUFZZ0IsR0FBWixDQUFpQixFQUFFLFFBQVEsRUFBVixFQUFqQixFQUNFdkksV0FERixDQUNjLDJDQURkLEVBRUVBLFdBRkYsQ0FFYyxLQUFLdy9CLElBQUwsQ0FBVTNRLFFBQVYsQ0FBbUI3akIsU0FGakMsRUFHRWhMLFdBSEYsQ0FHYyxLQUFLdy9CLElBQUwsQ0FBVTNRLFFBQVYsQ0FBbUJ6akIsVUFIakM7QUFJQSxPQUFLbzBCLElBQUwsQ0FBVS9ELGVBQVY7QUFDQSxFQU5EOztBQVFBOzs7O0FBSUE2RCxTQUFRbi9CLFNBQVIsQ0FBa0IraUIsT0FBbEIsR0FBNEIsWUFBVztBQUN0QyxNQUFJeVMsT0FBSixFQUFhZ0YsUUFBYjs7QUFFQSxPQUFLaEYsT0FBTCxJQUFnQixLQUFLK0osUUFBckIsRUFBK0I7QUFDOUIsUUFBS0YsSUFBTCxDQUFVcmtDLFFBQVYsQ0FBbUJ3TSxHQUFuQixDQUF1Qmd1QixPQUF2QixFQUFnQyxLQUFLK0osUUFBTCxDQUFjL0osT0FBZCxDQUFoQztBQUNBO0FBQ0QsT0FBS2dGLFFBQUwsSUFBaUJsK0IsT0FBT3FqQyxtQkFBUCxDQUEyQixJQUEzQixDQUFqQixFQUFtRDtBQUNsRCxVQUFPLEtBQUtuRixRQUFMLENBQVAsSUFBeUIsVUFBekIsS0FBd0MsS0FBS0EsUUFBTCxJQUFpQixJQUF6RDtBQUNBO0FBQ0QsRUFURDs7QUFXQTVnQyxHQUFFMkcsRUFBRixDQUFLdStCLFdBQUwsQ0FBaUJHLFdBQWpCLENBQTZCeEosT0FBN0IsQ0FBcUMwSixPQUFyQyxHQUErQ0EsT0FBL0M7QUFFQSxDQWpIQSxFQWlIRTcrQixPQUFPNCtCLEtBQVAsSUFBZ0I1K0IsT0FBT2tDLE1Bakh6QixFQWlIaUNsQyxNQWpIakMsRUFpSHlDOUIsUUFqSHpDOzs7QUNQRDs7Ozs7OztBQU9BLENBQUMsQ0FBQyxVQUFTNUUsQ0FBVCxFQUFZMEcsTUFBWixFQUFvQjlCLFFBQXBCLEVBQThCMkIsU0FBOUIsRUFBeUM7O0FBRTFDOzs7OztBQUtBLEtBQUl5L0IsYUFBYSxTQUFiQSxVQUFhLENBQVNDLFFBQVQsRUFBbUI7QUFDbkM7Ozs7O0FBS0EsT0FBS0MsS0FBTCxHQUFhRCxRQUFiOztBQUVBOzs7OztBQUtBLE9BQUt6TCxTQUFMLEdBQWlCO0FBQ2hCLHNEQUFtRHg2QixFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUN0RSxRQUFJQSxFQUFFbEIsU0FBRixJQUFlLEtBQUtrakMsS0FBTCxDQUFXcFIsUUFBWCxDQUFvQnFSLFVBQXZDLEVBQW1EO0FBQ2xELFVBQUtsRixNQUFMO0FBQ0E7QUFDRCxJQUprRCxFQUloRCxJQUpnRCxDQURuQztBQU1oQiwyQkFBd0JqaEMsRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDM0MsUUFBSUEsRUFBRWxCLFNBQUYsSUFBZSxLQUFLa2pDLEtBQUwsQ0FBV3BSLFFBQVgsQ0FBb0JxUixVQUFuQyxJQUFpRGppQyxFQUFFMDhCLFFBQUYsQ0FBV25nQyxJQUFYLElBQW1CLFVBQXhFLEVBQW1GO0FBQ2xGLFVBQUt3Z0MsTUFBTDtBQUNBO0FBQ0QsSUFKdUIsRUFJckIsSUFKcUIsQ0FOUjtBQVdoQixzQkFBbUJqaEMsRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDdEMsUUFBSUEsRUFBRWxCLFNBQUYsSUFBZSxLQUFLa2pDLEtBQUwsQ0FBV3BSLFFBQVgsQ0FBb0JxUixVQUFuQyxJQUNBamlDLEVBQUUrRSxPQUFGLENBQVV3UCxPQUFWLENBQWtCLE1BQU0sS0FBS3l0QixLQUFMLENBQVdwUixRQUFYLENBQW9Ca0osU0FBNUMsRUFBdUR3QixLQUF2RCxPQUFtRSxLQUFLMEcsS0FBTCxDQUFXNzNCLE9BQVgsRUFEdkUsRUFDNkY7QUFDNUYsVUFBSzR5QixNQUFMO0FBQ0E7QUFDRCxJQUxrQixFQUtoQixJQUxnQjtBQVhILEdBQWpCOztBQW1CQTtBQUNBLE9BQUtpRixLQUFMLENBQVc5eUIsT0FBWCxHQUFxQnBULEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFhdTVCLFdBQVd6TCxRQUF4QixFQUFrQyxLQUFLMkwsS0FBTCxDQUFXOXlCLE9BQTdDLENBQXJCOztBQUVBO0FBQ0EsT0FBSzh5QixLQUFMLENBQVc5a0MsUUFBWCxDQUFvQm1NLEVBQXBCLENBQXVCLEtBQUtpdEIsU0FBNUI7QUFDQSxFQXJDRDs7QUF1Q0E7Ozs7QUFJQXdMLFlBQVd6TCxRQUFYLEdBQXNCO0FBQ3JCNEwsY0FBWSxLQURTO0FBRXJCQyxtQkFBaUI7QUFGSSxFQUF0Qjs7QUFLQTs7O0FBR0FKLFlBQVc1L0IsU0FBWCxDQUFxQjY2QixNQUFyQixHQUE4QixZQUFXO0FBQ3hDLE1BQUlyNUIsUUFBUSxLQUFLcytCLEtBQUwsQ0FBV3hMLFFBQXZCO0FBQUEsTUFDQzUxQixNQUFNOEMsUUFBUSxLQUFLcytCLEtBQUwsQ0FBV3BSLFFBQVgsQ0FBb0JwaUIsS0FEbkM7QUFBQSxNQUVDMnpCLFVBQVUsS0FBS0gsS0FBTCxDQUFXdEgsTUFBWCxDQUFrQjNyQixRQUFsQixHQUE2QnF6QixPQUE3QixHQUF1Q2hqQyxLQUF2QyxDQUE2Q3NFLEtBQTdDLEVBQW9EOUMsR0FBcEQsQ0FGWDtBQUFBLE1BR0NrZSxVQUFVLEVBSFg7QUFBQSxNQUlDdWpCLFlBQVksQ0FKYjs7QUFNQXZtQyxJQUFFaUMsSUFBRixDQUFPb2tDLE9BQVAsRUFBZ0IsVUFBUzdHLEtBQVQsRUFBZ0J1QixJQUFoQixFQUFzQjtBQUNyQy9kLFdBQVF6aEIsSUFBUixDQUFhdkIsRUFBRStnQyxJQUFGLEVBQVFuM0IsTUFBUixFQUFiO0FBQ0EsR0FGRDs7QUFJQTI4QixjQUFZdGpDLEtBQUt3RSxHQUFMLENBQVM5QixLQUFULENBQWUsSUFBZixFQUFxQnFkLE9BQXJCLENBQVo7O0FBRUEsT0FBS2tqQixLQUFMLENBQVd0SCxNQUFYLENBQWtCMTFCLE1BQWxCLEdBQ0VVLE1BREYsQ0FDUzI4QixTQURULEVBRUV2MEIsUUFGRixDQUVXLEtBQUtrMEIsS0FBTCxDQUFXcFIsUUFBWCxDQUFvQnNSLGVBRi9CO0FBR0EsRUFoQkQ7O0FBa0JBSixZQUFXNS9CLFNBQVgsQ0FBcUIraUIsT0FBckIsR0FBK0IsWUFBVztBQUN6QyxNQUFJeVMsT0FBSixFQUFhZ0YsUUFBYjs7QUFFQSxPQUFLaEYsT0FBTCxJQUFnQixLQUFLcEIsU0FBckIsRUFBZ0M7QUFDL0IsUUFBSzBMLEtBQUwsQ0FBVzlrQyxRQUFYLENBQW9Cd00sR0FBcEIsQ0FBd0JndUIsT0FBeEIsRUFBaUMsS0FBS3BCLFNBQUwsQ0FBZW9CLE9BQWYsQ0FBakM7QUFDQTtBQUNELE9BQUtnRixRQUFMLElBQWlCbCtCLE9BQU9xakMsbUJBQVAsQ0FBMkIsSUFBM0IsQ0FBakIsRUFBbUQ7QUFDbEQsVUFBTyxLQUFLbkYsUUFBTCxDQUFQLElBQXlCLFVBQXpCLEtBQXdDLEtBQUtBLFFBQUwsSUFBaUIsSUFBekQ7QUFDQTtBQUNELEVBVEQ7O0FBV0E1Z0MsR0FBRTJHLEVBQUYsQ0FBS3UrQixXQUFMLENBQWlCRyxXQUFqQixDQUE2QnhKLE9BQTdCLENBQXFDbUssVUFBckMsR0FBa0RBLFVBQWxEO0FBRUEsQ0F6RkEsRUF5RkV0L0IsT0FBTzQrQixLQUFQLElBQWdCNStCLE9BQU9rQyxNQXpGekIsRUF5RmlDbEMsTUF6RmpDLEVBeUZ5QzlCLFFBekZ6Qzs7O0FDUEQ7Ozs7Ozs7O0FBUUEsQ0FBQyxDQUFDLFVBQVM1RSxDQUFULEVBQVkwRyxNQUFaLEVBQW9COUIsUUFBcEIsRUFBOEIyQixTQUE5QixFQUF5Qzs7QUFFMUM7Ozs7O0FBS0EsS0FBSWlnQyxXQUFXLFNBQVhBLFFBQVcsQ0FBU1AsUUFBVCxFQUFtQjtBQUNqQzs7Ozs7QUFLQSxPQUFLQyxLQUFMLEdBQWFELFFBQWI7O0FBRUE7Ozs7QUFJQSxPQUFLUSxRQUFMLEdBQWdCLElBQWhCOztBQUVBOzs7O0FBSUEsT0FBS0MsT0FBTCxHQUFlLEtBQWY7O0FBRUE7Ozs7O0FBS0EsT0FBS2xNLFNBQUwsR0FBaUI7QUFDaEIsMkJBQXdCeDZCLEVBQUUyN0IsS0FBRixDQUFRLFVBQVN6M0IsQ0FBVCxFQUFZO0FBQzNDLFFBQUlBLEVBQUVsQixTQUFGLElBQWVrQixFQUFFMDhCLFFBQUYsQ0FBV25nQyxJQUFYLEtBQW9CLFVBQXZDLEVBQW1EO0FBQ2xELFNBQUksS0FBS3lsQyxLQUFMLENBQVdwUixRQUFYLENBQW9CNlIsUUFBeEIsRUFBa0M7QUFDakMsV0FBS0MsSUFBTDtBQUNBLE1BRkQsTUFFTztBQUNOLFdBQUs1bUIsSUFBTDtBQUNBO0FBQ0QsS0FORCxNQU1PLElBQUk5YixFQUFFbEIsU0FBRixJQUFla0IsRUFBRTA4QixRQUFGLENBQVduZ0MsSUFBWCxLQUFvQixVQUF2QyxFQUFtRDtBQUN6RDtBQUNBLFNBQUksS0FBS3lsQyxLQUFMLENBQVdwUixRQUFYLENBQW9CNlIsUUFBeEIsRUFBa0M7QUFDakMsV0FBS0Usb0JBQUw7QUFDQTtBQUNEO0FBQ0QsSUFidUIsRUFhckIsSUFicUIsQ0FEUjtBQWVoQiwrQkFBNEI3bUMsRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDL0MsUUFBSUEsRUFBRWxCLFNBQUYsSUFBZSxLQUFLa2pDLEtBQUwsQ0FBV3BSLFFBQVgsQ0FBb0I2UixRQUF2QyxFQUFpRDtBQUNoRCxVQUFLQyxJQUFMO0FBQ0E7QUFDRCxJQUoyQixFQUl6QixJQUp5QixDQWZaO0FBb0JoQix3QkFBcUI1bUMsRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVlhLENBQVosRUFBZXF1QixDQUFmLEVBQWtCO0FBQzlDLFFBQUlsdkIsRUFBRWxCLFNBQU4sRUFBaUI7QUFDaEIsVUFBSzRqQyxJQUFMLENBQVU3aEMsQ0FBVixFQUFhcXVCLENBQWI7QUFDQTtBQUNELElBSm9CLEVBSWxCLElBSmtCLENBcEJMO0FBeUJoQix3QkFBcUJwekIsRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDeEMsUUFBSUEsRUFBRWxCLFNBQU4sRUFBaUI7QUFDaEIsVUFBS2dkLElBQUw7QUFDQTtBQUNELElBSm9CLEVBSWxCLElBSmtCLENBekJMO0FBOEJoQiw2QkFBMEJoZ0IsRUFBRTI3QixLQUFGLENBQVEsWUFBVztBQUM1QyxRQUFJLEtBQUt1SyxLQUFMLENBQVdwUixRQUFYLENBQW9CZ1Msa0JBQXBCLElBQTBDLEtBQUtaLEtBQUwsQ0FBV241QixFQUFYLENBQWMsVUFBZCxDQUE5QyxFQUF5RTtBQUN4RSxVQUFLMkcsS0FBTDtBQUNBO0FBQ0QsSUFKeUIsRUFJdkIsSUFKdUIsQ0E5QlY7QUFtQ2hCLDhCQUEyQjFULEVBQUUyN0IsS0FBRixDQUFRLFlBQVc7QUFDN0MsUUFBSSxLQUFLdUssS0FBTCxDQUFXcFIsUUFBWCxDQUFvQmdTLGtCQUFwQixJQUEwQyxLQUFLWixLQUFMLENBQVduNUIsRUFBWCxDQUFjLFVBQWQsQ0FBOUMsRUFBeUU7QUFDeEUsVUFBSzY1QixJQUFMO0FBQ0E7QUFDRCxJQUowQixFQUl4QixJQUp3QixDQW5DWDtBQXdDaEIsMEJBQXVCNW1DLEVBQUUyN0IsS0FBRixDQUFRLFlBQVc7QUFDekMsUUFBSSxLQUFLdUssS0FBTCxDQUFXcFIsUUFBWCxDQUFvQmdTLGtCQUFwQixJQUEwQyxLQUFLWixLQUFMLENBQVduNUIsRUFBWCxDQUFjLFVBQWQsQ0FBOUMsRUFBeUU7QUFDeEUsVUFBSzJHLEtBQUw7QUFDQTtBQUNELElBSnNCLEVBSXBCLElBSm9CLENBeENQO0FBNkNoQix3QkFBcUIxVCxFQUFFMjdCLEtBQUYsQ0FBUSxZQUFXO0FBQ3ZDLFFBQUksS0FBS3VLLEtBQUwsQ0FBV3BSLFFBQVgsQ0FBb0JnUyxrQkFBeEIsRUFBNEM7QUFDM0MsVUFBS0YsSUFBTDtBQUNBO0FBQ0QsSUFKb0IsRUFJbEIsSUFKa0I7QUE3Q0wsR0FBakI7O0FBb0RBO0FBQ0EsT0FBS1YsS0FBTCxDQUFXOWtDLFFBQVgsQ0FBb0JtTSxFQUFwQixDQUF1QixLQUFLaXRCLFNBQTVCOztBQUVBO0FBQ0EsT0FBSzBMLEtBQUwsQ0FBVzl5QixPQUFYLEdBQXFCcFQsRUFBRXlNLE1BQUYsQ0FBUyxFQUFULEVBQWErNUIsU0FBU2pNLFFBQXRCLEVBQWdDLEtBQUsyTCxLQUFMLENBQVc5eUIsT0FBM0MsQ0FBckI7QUFDQSxFQWxGRDs7QUFvRkE7Ozs7QUFJQW96QixVQUFTak0sUUFBVCxHQUFvQjtBQUNuQm9NLFlBQVUsS0FEUztBQUVuQkksbUJBQWlCLElBRkU7QUFHbkJELHNCQUFvQixLQUhEO0FBSW5CRSxpQkFBZTtBQUpJLEVBQXBCOztBQU9BOzs7Ozs7QUFNQVIsVUFBU3BnQyxTQUFULENBQW1Cd2dDLElBQW5CLEdBQTBCLFVBQVNLLE9BQVQsRUFBa0JuRixLQUFsQixFQUF5QjtBQUNsRCxPQUFLNEUsT0FBTCxHQUFlLEtBQWY7O0FBRUEsTUFBSSxLQUFLUixLQUFMLENBQVduNUIsRUFBWCxDQUFjLFVBQWQsQ0FBSixFQUErQjtBQUM5QjtBQUNBOztBQUVELE9BQUttNUIsS0FBTCxDQUFXbEcsS0FBWCxDQUFpQixVQUFqQjs7QUFFQSxPQUFLNkcsb0JBQUw7QUFDQSxFQVZEOztBQVlBOzs7Ozs7O0FBT0FMLFVBQVNwZ0MsU0FBVCxDQUFtQjhnQyxlQUFuQixHQUFxQyxVQUFTRCxPQUFULEVBQWtCbkYsS0FBbEIsRUFBeUI7QUFDN0QsTUFBSyxLQUFLMkUsUUFBVixFQUFxQjtBQUNwQi8vQixVQUFPZ0IsWUFBUCxDQUFvQixLQUFLKytCLFFBQXpCO0FBQ0E7QUFDRCxTQUFPLy9CLE9BQU96QixVQUFQLENBQWtCakYsRUFBRTI3QixLQUFGLENBQVEsWUFBVztBQUMzQyxPQUFJLEtBQUsrSyxPQUFMLElBQWdCLEtBQUtSLEtBQUwsQ0FBV241QixFQUFYLENBQWMsTUFBZCxDQUFoQixJQUF5QyxLQUFLbTVCLEtBQUwsQ0FBV241QixFQUFYLENBQWMsYUFBZCxDQUF6QyxJQUF5RW5JLFNBQVN1aUMsTUFBdEYsRUFBOEY7QUFDN0Y7QUFDQTtBQUNELFFBQUtqQixLQUFMLENBQVdubkIsSUFBWCxDQUFnQitpQixTQUFTLEtBQUtvRSxLQUFMLENBQVdwUixRQUFYLENBQW9Ca1MsYUFBN0M7QUFDQSxHQUx3QixFQUt0QixJQUxzQixDQUFsQixFQUtHQyxXQUFXLEtBQUtmLEtBQUwsQ0FBV3BSLFFBQVgsQ0FBb0JpUyxlQUxsQyxDQUFQO0FBTUEsRUFWRDs7QUFZQTs7OztBQUlBUCxVQUFTcGdDLFNBQVQsQ0FBbUJ5Z0Msb0JBQW5CLEdBQTBDLFlBQVc7QUFDcEQsT0FBS0osUUFBTCxHQUFnQixLQUFLUyxlQUFMLEVBQWhCO0FBQ0EsRUFGRDs7QUFJQTs7OztBQUlBVixVQUFTcGdDLFNBQVQsQ0FBbUI0WixJQUFuQixHQUEwQixZQUFXO0FBQ3BDLE1BQUksQ0FBQyxLQUFLa21CLEtBQUwsQ0FBV241QixFQUFYLENBQWMsVUFBZCxDQUFMLEVBQWdDO0FBQy9CO0FBQ0E7O0FBRURyRyxTQUFPZ0IsWUFBUCxDQUFvQixLQUFLKytCLFFBQXpCO0FBQ0EsT0FBS1AsS0FBTCxDQUFXM0YsS0FBWCxDQUFpQixVQUFqQjtBQUNBLEVBUEQ7O0FBU0E7Ozs7QUFJQWlHLFVBQVNwZ0MsU0FBVCxDQUFtQnNOLEtBQW5CLEdBQTJCLFlBQVc7QUFDckMsTUFBSSxDQUFDLEtBQUt3eUIsS0FBTCxDQUFXbjVCLEVBQVgsQ0FBYyxVQUFkLENBQUwsRUFBZ0M7QUFDL0I7QUFDQTs7QUFFRCxPQUFLMjVCLE9BQUwsR0FBZSxJQUFmO0FBQ0EsRUFORDs7QUFRQTs7O0FBR0FGLFVBQVNwZ0MsU0FBVCxDQUFtQitpQixPQUFuQixHQUE2QixZQUFXO0FBQ3ZDLE1BQUl5UyxPQUFKLEVBQWFnRixRQUFiOztBQUVBLE9BQUs1Z0IsSUFBTDs7QUFFQSxPQUFLNGIsT0FBTCxJQUFnQixLQUFLcEIsU0FBckIsRUFBZ0M7QUFDL0IsUUFBSzBMLEtBQUwsQ0FBVzlrQyxRQUFYLENBQW9Cd00sR0FBcEIsQ0FBd0JndUIsT0FBeEIsRUFBaUMsS0FBS3BCLFNBQUwsQ0FBZW9CLE9BQWYsQ0FBakM7QUFDQTtBQUNELE9BQUtnRixRQUFMLElBQWlCbCtCLE9BQU9xakMsbUJBQVAsQ0FBMkIsSUFBM0IsQ0FBakIsRUFBbUQ7QUFDbEQsVUFBTyxLQUFLbkYsUUFBTCxDQUFQLElBQXlCLFVBQXpCLEtBQXdDLEtBQUtBLFFBQUwsSUFBaUIsSUFBekQ7QUFDQTtBQUNELEVBWEQ7O0FBYUE1Z0MsR0FBRTJHLEVBQUYsQ0FBS3UrQixXQUFMLENBQWlCRyxXQUFqQixDQUE2QnhKLE9BQTdCLENBQXFDOEssUUFBckMsR0FBZ0RILFFBQWhEO0FBRUEsQ0E5TEEsRUE4TEU5L0IsT0FBTzQrQixLQUFQLElBQWdCNStCLE9BQU9rQyxNQTlMekIsRUE4TGlDbEMsTUE5TGpDLEVBOEx5QzlCLFFBOUx6Qzs7O0FDUkQ7Ozs7Ozs7QUFPQSxDQUFDLENBQUMsVUFBUzVFLENBQVQsRUFBWTBHLE1BQVosRUFBb0I5QixRQUFwQixFQUE4QjJCLFNBQTlCLEVBQXlDOztBQUUxQzs7Ozs7QUFLQSxLQUFJNmdDLGNBQWMsU0FBZEEsV0FBYyxDQUFTbkIsUUFBVCxFQUFtQjtBQUNwQzs7Ozs7QUFLQSxPQUFLQyxLQUFMLEdBQWFELFFBQWI7O0FBRUE7Ozs7O0FBS0EsT0FBS29CLFNBQUwsR0FBaUIsSUFBakI7O0FBRUE7Ozs7O0FBS0EsT0FBS0MsUUFBTCxHQUFnQixJQUFoQjs7QUFFQTs7Ozs7QUFLQSxPQUFLOU0sU0FBTCxHQUFpQjtBQUNoQiwrQkFBNEJ4NkIsRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDL0MsUUFBSUEsRUFBRWxCLFNBQUYsSUFBZSxLQUFLa2pDLEtBQUwsQ0FBV3BSLFFBQVgsQ0FBb0J5UyxXQUF2QyxFQUFvRDtBQUNuRCxVQUFLQyxLQUFMO0FBQ0E7QUFDRCxJQUoyQixFQUl6QixJQUp5QjtBQURaLEdBQWpCOztBQVFBO0FBQ0EsT0FBS3RCLEtBQUwsQ0FBVzl5QixPQUFYLEdBQXFCcFQsRUFBRXlNLE1BQUYsQ0FBUyxFQUFULEVBQWEyNkIsWUFBWTdNLFFBQXpCLEVBQW1DLEtBQUsyTCxLQUFMLENBQVc5eUIsT0FBOUMsQ0FBckI7O0FBRUE7QUFDQSxPQUFLOHlCLEtBQUwsQ0FBVzlrQyxRQUFYLENBQW9CbU0sRUFBcEIsQ0FBdUIsS0FBS2l0QixTQUE1QjtBQUNBLEVBeENEOztBQTBDQTs7OztBQUlBNE0sYUFBWTdNLFFBQVosR0FBdUI7QUFDdEJnTixlQUFhLElBRFM7QUFFdEJFLHVCQUFxQjtBQUZDLEVBQXZCOztBQUtBOzs7QUFHQUwsYUFBWWhoQyxTQUFaLENBQXNCb2hDLEtBQXRCLEdBQThCLFlBQVc7QUFDeEMsTUFBSSxLQUFLSCxTQUFULEVBQW9CO0FBQ25CO0FBQ0E7O0FBRUQsT0FBS0MsUUFBTCxHQUFnQixLQUFLcEIsS0FBTCxDQUFXOWtDLFFBQVgsQ0FBb0IyTCxFQUFwQixDQUF1QixVQUF2QixDQUFoQjtBQUNBLE9BQUtzNkIsU0FBTCxHQUFpQjNnQyxPQUFPZ2hDLFdBQVAsQ0FBbUIxbkMsRUFBRTI3QixLQUFGLENBQVEsS0FBS3lFLE9BQWIsRUFBc0IsSUFBdEIsQ0FBbkIsRUFBZ0QsS0FBSzhGLEtBQUwsQ0FBV3BSLFFBQVgsQ0FBb0IyUyxtQkFBcEUsQ0FBakI7QUFDQSxFQVBEOztBQVNBOzs7QUFHQUwsYUFBWWhoQyxTQUFaLENBQXNCZzZCLE9BQXRCLEdBQWdDLFlBQVc7QUFDMUMsTUFBSSxLQUFLOEYsS0FBTCxDQUFXOWtDLFFBQVgsQ0FBb0IyTCxFQUFwQixDQUF1QixVQUF2QixNQUF1QyxLQUFLdTZCLFFBQWhELEVBQTBEO0FBQ3pEO0FBQ0E7O0FBRUQsT0FBS0EsUUFBTCxHQUFnQixDQUFDLEtBQUtBLFFBQXRCOztBQUVBLE9BQUtwQixLQUFMLENBQVc5a0MsUUFBWCxDQUFvQit2QixXQUFwQixDQUFnQyxZQUFoQyxFQUE4QyxDQUFDLEtBQUttVyxRQUFwRDs7QUFFQSxPQUFLQSxRQUFMLElBQWtCLEtBQUtwQixLQUFMLENBQVc3RixVQUFYLENBQXNCLE9BQXRCLEtBQWtDLEtBQUs2RixLQUFMLENBQVc5RixPQUFYLEVBQXBEO0FBQ0EsRUFWRDs7QUFZQTs7O0FBR0FnSCxhQUFZaGhDLFNBQVosQ0FBc0IraUIsT0FBdEIsR0FBZ0MsWUFBVztBQUMxQyxNQUFJeVMsT0FBSixFQUFhZ0YsUUFBYjs7QUFFQWw2QixTQUFPaWhDLGFBQVAsQ0FBcUIsS0FBS04sU0FBMUI7O0FBRUEsT0FBS3pMLE9BQUwsSUFBZ0IsS0FBS3BCLFNBQXJCLEVBQWdDO0FBQy9CLFFBQUswTCxLQUFMLENBQVc5a0MsUUFBWCxDQUFvQndNLEdBQXBCLENBQXdCZ3VCLE9BQXhCLEVBQWlDLEtBQUtwQixTQUFMLENBQWVvQixPQUFmLENBQWpDO0FBQ0E7QUFDRCxPQUFLZ0YsUUFBTCxJQUFpQmwrQixPQUFPcWpDLG1CQUFQLENBQTJCLElBQTNCLENBQWpCLEVBQW1EO0FBQ2xELFVBQU8sS0FBS25GLFFBQUwsQ0FBUCxJQUF5QixVQUF6QixLQUF3QyxLQUFLQSxRQUFMLElBQWlCLElBQXpEO0FBQ0E7QUFDRCxFQVhEOztBQWFBNWdDLEdBQUUyRyxFQUFGLENBQUt1K0IsV0FBTCxDQUFpQkcsV0FBakIsQ0FBNkJ4SixPQUE3QixDQUFxQ3VMLFdBQXJDLEdBQW1EQSxXQUFuRDtBQUVBLENBdkdBLEVBdUdFMWdDLE9BQU80K0IsS0FBUCxJQUFnQjUrQixPQUFPa0MsTUF2R3pCLEVBdUdpQ2xDLE1BdkdqQyxFQXVHeUM5QixRQXZHekM7OztBQ1BEOzs7Ozs7O0FBT0EsQ0FBQyxDQUFDLFVBQVM1RSxDQUFULEVBQVkwRyxNQUFaLEVBQW9COUIsUUFBcEIsRUFBOEIyQixTQUE5QixFQUF5QztBQUMxQzs7QUFFQTs7Ozs7O0FBS0EsS0FBSXFoQyxPQUFPLFNBQVBBLElBQU8sQ0FBUzNCLFFBQVQsRUFBbUI7QUFDN0I7Ozs7O0FBS0EsT0FBS0MsS0FBTCxHQUFhRCxRQUFiOztBQUVBOzs7OztBQUtBLE9BQUs0QixPQUFMLEdBQWUsRUFBZjs7QUFFQTs7OztBQUlBLE9BQUt6bUMsUUFBTCxHQUFnQixLQUFLOGtDLEtBQUwsQ0FBVzlrQyxRQUEzQjs7QUFFQTs7Ozs7QUFLQSxPQUFLbzVCLFNBQUwsR0FBaUI7QUFDaEIsK0JBQTRCeDZCLEVBQUUyN0IsS0FBRixDQUFRLFVBQVN6M0IsQ0FBVCxFQUFZO0FBQy9DLFFBQUlBLEVBQUVsQixTQUFGLElBQWUsS0FBS2tqQyxLQUFMLENBQVdwUixRQUFYLENBQW9CaUksYUFBcEIsS0FBc0MsU0FBekQsRUFBb0U7QUFDbkUvOEIsT0FBRTBHLE1BQUYsRUFBVXBGLE9BQVYsQ0FBa0IsMkJBQWxCO0FBQ0E7QUFDRCxJQUoyQixFQUl6QixJQUp5QixDQURaO0FBTWhCLDRCQUF5QnRCLEVBQUUyN0IsS0FBRixDQUFRLFVBQVN6M0IsQ0FBVCxFQUFZO0FBQzVDLFFBQUlBLEVBQUVsQixTQUFOLEVBQWlCO0FBQ2hCLFNBQUlvYixPQUFPcGUsRUFBRWtFLEVBQUU4OEIsT0FBSixFQUFhcjlCLElBQWIsQ0FBa0IsYUFBbEIsRUFBaUNDLE9BQWpDLENBQXlDLGFBQXpDLEVBQXdEckQsSUFBeEQsQ0FBNkQsV0FBN0QsQ0FBWDs7QUFFQSxTQUFJLENBQUM2ZCxJQUFMLEVBQVc7QUFDVjtBQUNBOztBQUVELFVBQUt5cEIsT0FBTCxDQUFhenBCLElBQWIsSUFBcUJsYSxFQUFFODhCLE9BQXZCO0FBQ0E7QUFDRCxJQVZ3QixFQVV0QixJQVZzQixDQU5UO0FBaUJoQiwyQkFBd0JoaEMsRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDM0MsUUFBSUEsRUFBRWxCLFNBQUYsSUFBZWtCLEVBQUUwOEIsUUFBRixDQUFXbmdDLElBQVgsS0FBb0IsVUFBdkMsRUFBbUQ7QUFDbEQsU0FBSTROLFVBQVUsS0FBSzYzQixLQUFMLENBQVd4ekIsS0FBWCxDQUFpQixLQUFLd3pCLEtBQUwsQ0FBV3ZILFFBQVgsQ0FBb0IsS0FBS3VILEtBQUwsQ0FBVzczQixPQUFYLEVBQXBCLENBQWpCLENBQWQ7QUFBQSxTQUNDK1AsT0FBT3BlLEVBQUVvRSxHQUFGLENBQU0sS0FBS3lqQyxPQUFYLEVBQW9CLFVBQVM5RyxJQUFULEVBQWUzaUIsSUFBZixFQUFxQjtBQUMvQyxhQUFPMmlCLFNBQVMxeUIsT0FBVCxHQUFtQitQLElBQW5CLEdBQTBCLElBQWpDO0FBQ0EsTUFGTSxFQUVKdEcsSUFGSSxFQURSOztBQUtBLFNBQUksQ0FBQ3NHLElBQUQsSUFBUzFYLE9BQU95WCxRQUFQLENBQWdCQyxJQUFoQixDQUFxQjlhLEtBQXJCLENBQTJCLENBQTNCLE1BQWtDOGEsSUFBL0MsRUFBcUQ7QUFDcEQ7QUFDQTs7QUFFRDFYLFlBQU95WCxRQUFQLENBQWdCQyxJQUFoQixHQUF1QkEsSUFBdkI7QUFDQTtBQUNELElBYnVCLEVBYXJCLElBYnFCO0FBakJSLEdBQWpCOztBQWlDQTtBQUNBLE9BQUs4bkIsS0FBTCxDQUFXOXlCLE9BQVgsR0FBcUJwVCxFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYW03QixLQUFLck4sUUFBbEIsRUFBNEIsS0FBSzJMLEtBQUwsQ0FBVzl5QixPQUF2QyxDQUFyQjs7QUFFQTtBQUNBLE9BQUtoUyxRQUFMLENBQWNtTSxFQUFkLENBQWlCLEtBQUtpdEIsU0FBdEI7O0FBRUE7QUFDQXg2QixJQUFFMEcsTUFBRixFQUFVNkcsRUFBVixDQUFhLDJCQUFiLEVBQTBDdk4sRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDN0QsT0FBSWthLE9BQU8xWCxPQUFPeVgsUUFBUCxDQUFnQkMsSUFBaEIsQ0FBcUIwcEIsU0FBckIsQ0FBK0IsQ0FBL0IsQ0FBWDtBQUFBLE9BQ0NwMUIsUUFBUSxLQUFLd3pCLEtBQUwsQ0FBV3RILE1BQVgsQ0FBa0IzckIsUUFBbEIsRUFEVDtBQUFBLE9BRUNwSSxXQUFXLEtBQUtnOUIsT0FBTCxDQUFhenBCLElBQWIsS0FBc0IxTCxNQUFNOHNCLEtBQU4sQ0FBWSxLQUFLcUksT0FBTCxDQUFhenBCLElBQWIsQ0FBWixDQUZsQzs7QUFJQSxPQUFJdlQsYUFBYXRFLFNBQWIsSUFBMEJzRSxhQUFhLEtBQUtxN0IsS0FBTCxDQUFXNzNCLE9BQVgsRUFBM0MsRUFBaUU7QUFDaEU7QUFDQTs7QUFFRCxRQUFLNjNCLEtBQUwsQ0FBVy9DLEVBQVgsQ0FBYyxLQUFLK0MsS0FBTCxDQUFXdkgsUUFBWCxDQUFvQjl6QixRQUFwQixDQUFkLEVBQTZDLEtBQTdDLEVBQW9ELElBQXBEO0FBQ0EsR0FWeUMsRUFVdkMsSUFWdUMsQ0FBMUM7QUFXQSxFQTdFRDs7QUErRUE7Ozs7QUFJQSs4QixNQUFLck4sUUFBTCxHQUFnQjtBQUNmd04sbUJBQWlCO0FBREYsRUFBaEI7O0FBSUE7Ozs7QUFJQUgsTUFBS3hoQyxTQUFMLENBQWUraUIsT0FBZixHQUF5QixZQUFXO0FBQ25DLE1BQUl5UyxPQUFKLEVBQWFnRixRQUFiOztBQUVBNWdDLElBQUUwRyxNQUFGLEVBQVVrSCxHQUFWLENBQWMsMkJBQWQ7O0FBRUEsT0FBS2d1QixPQUFMLElBQWdCLEtBQUtwQixTQUFyQixFQUFnQztBQUMvQixRQUFLMEwsS0FBTCxDQUFXOWtDLFFBQVgsQ0FBb0J3TSxHQUFwQixDQUF3Qmd1QixPQUF4QixFQUFpQyxLQUFLcEIsU0FBTCxDQUFlb0IsT0FBZixDQUFqQztBQUNBO0FBQ0QsT0FBS2dGLFFBQUwsSUFBaUJsK0IsT0FBT3FqQyxtQkFBUCxDQUEyQixJQUEzQixDQUFqQixFQUFtRDtBQUNsRCxVQUFPLEtBQUtuRixRQUFMLENBQVAsSUFBeUIsVUFBekIsS0FBd0MsS0FBS0EsUUFBTCxJQUFpQixJQUF6RDtBQUNBO0FBQ0QsRUFYRDs7QUFhQTVnQyxHQUFFMkcsRUFBRixDQUFLdStCLFdBQUwsQ0FBaUJHLFdBQWpCLENBQTZCeEosT0FBN0IsQ0FBcUMrTCxJQUFyQyxHQUE0Q0EsSUFBNUM7QUFFQSxDQWxIQSxFQWtIRWxoQyxPQUFPNCtCLEtBQVAsSUFBZ0I1K0IsT0FBT2tDLE1BbEh6QixFQWtIaUNsQyxNQWxIakMsRUFrSHlDOUIsUUFsSHpDOzs7QUNQRDs7Ozs7OztBQU9BLENBQUMsQ0FBQyxVQUFTNUUsQ0FBVCxFQUFZMEcsTUFBWixFQUFvQjlCLFFBQXBCLEVBQThCMkIsU0FBOUIsRUFBeUM7O0FBRTFDOzs7OztBQUtBLEtBQUl5aEMsT0FBTyxTQUFQQSxJQUFPLENBQVMvQixRQUFULEVBQW1COztBQUU3Qjs7Ozs7QUFLQSxPQUFLQyxLQUFMLEdBQWFELFFBQWI7O0FBRUE7Ozs7O0FBS0EsT0FBS2dDLE9BQUwsR0FBZSxFQUFmOztBQUVBOzs7OztBQUtBLE9BQUt6TixTQUFMLEdBQWlCO0FBQ2hCLHdFQUFxRXg2QixFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUN4RixRQUFJLENBQUNBLEVBQUVsQixTQUFQLEVBQWtCO0FBQ2pCO0FBQ0E7O0FBRUQsUUFBSSxDQUFDLEtBQUtrakMsS0FBTCxDQUFXcFIsUUFBWixJQUF3QixDQUFDLEtBQUtvUixLQUFMLENBQVdwUixRQUFYLENBQW9Cb1QsUUFBakQsRUFBMkQ7QUFDMUQ7QUFDQTs7QUFFRCxRQUFLaGtDLEVBQUUwOEIsUUFBRixJQUFjMThCLEVBQUUwOEIsUUFBRixDQUFXbmdDLElBQVgsSUFBbUIsVUFBbEMsSUFBaUR5RCxFQUFFL0IsSUFBRixJQUFVLGFBQS9ELEVBQThFO0FBQzdFLFNBQUkyeUIsV0FBVyxLQUFLb1IsS0FBTCxDQUFXcFIsUUFBMUI7QUFBQSxTQUNDZ0wsSUFBS2hMLFNBQVN1SCxNQUFULElBQW1CcDVCLEtBQUtvMkIsSUFBTCxDQUFVdkUsU0FBU3BpQixLQUFULEdBQWlCLENBQTNCLENBQW5CLElBQW9Eb2lCLFNBQVNwaUIsS0FEbkU7QUFBQSxTQUVDalAsSUFBTXF4QixTQUFTdUgsTUFBVCxJQUFtQnlELElBQUksQ0FBQyxDQUF6QixJQUErQixDQUZyQztBQUFBLFNBR0NqMUIsV0FBVyxDQUFDM0csRUFBRTA4QixRQUFGLElBQWMxOEIsRUFBRTA4QixRQUFGLENBQVdoeUIsS0FBWCxLQUFxQnJJLFNBQW5DLEdBQStDckMsRUFBRTA4QixRQUFGLENBQVdoeUIsS0FBMUQsR0FBa0UsS0FBS3MzQixLQUFMLENBQVc3M0IsT0FBWCxFQUFuRSxJQUEyRjVLLENBSHZHO0FBQUEsU0FJQ3U3QixTQUFTLEtBQUtrSCxLQUFMLENBQVdsSCxNQUFYLEdBQW9CajhCLE1BSjlCO0FBQUEsU0FLQzBiLE9BQU96ZSxFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTbDRCLENBQVQsRUFBWThZLENBQVosRUFBZTtBQUFFLFdBQUtrQyxJQUFMLENBQVVsQyxDQUFWO0FBQWMsTUFBdkMsRUFBeUMsSUFBekMsQ0FMUjs7QUFPQSxZQUFPOVksTUFBTXE4QixDQUFiLEVBQWdCO0FBQ2YsV0FBS3JoQixJQUFMLENBQVV1Z0IsU0FBUyxDQUFULEdBQWEsS0FBS2tILEtBQUwsQ0FBV3ZILFFBQVgsQ0FBb0I5ekIsUUFBcEIsQ0FBdkI7QUFDQW0wQixnQkFBVWgvQixFQUFFaUMsSUFBRixDQUFPLEtBQUtpa0MsS0FBTCxDQUFXbEgsTUFBWCxDQUFrQixLQUFLa0gsS0FBTCxDQUFXdkgsUUFBWCxDQUFvQjl6QixRQUFwQixDQUFsQixDQUFQLEVBQXlENFQsSUFBekQsQ0FBVjtBQUNBNVQ7QUFDQTtBQUNEO0FBQ0QsSUF2Qm9FLEVBdUJsRSxJQXZCa0U7QUFEckQsR0FBakI7O0FBMkJBO0FBQ0EsT0FBS3E3QixLQUFMLENBQVc5eUIsT0FBWCxHQUFxQnBULEVBQUV5TSxNQUFGLENBQVMsRUFBVCxFQUFhdTdCLEtBQUt6TixRQUFsQixFQUE0QixLQUFLMkwsS0FBTCxDQUFXOXlCLE9BQXZDLENBQXJCOztBQUVBO0FBQ0EsT0FBSzh5QixLQUFMLENBQVc5a0MsUUFBWCxDQUFvQm1NLEVBQXBCLENBQXVCLEtBQUtpdEIsU0FBNUI7QUFDQSxFQXJERDs7QUF1REE7Ozs7QUFJQXdOLE1BQUt6TixRQUFMLEdBQWdCO0FBQ2YyTixZQUFVO0FBREssRUFBaEI7O0FBSUE7Ozs7O0FBS0FGLE1BQUs1aEMsU0FBTCxDQUFlcVksSUFBZixHQUFzQixVQUFTNVQsUUFBVCxFQUFtQjtBQUN4QyxNQUFJa0ksUUFBUSxLQUFLbXpCLEtBQUwsQ0FBV3RILE1BQVgsQ0FBa0IzckIsUUFBbEIsR0FBNkI1RixFQUE3QixDQUFnQ3hDLFFBQWhDLENBQVo7QUFBQSxNQUNDOFYsWUFBWTVOLFNBQVNBLE1BQU1wUCxJQUFOLENBQVcsV0FBWCxDQUR0Qjs7QUFHQSxNQUFJLENBQUNnZCxTQUFELElBQWMzZ0IsRUFBRStrQyxPQUFGLENBQVVoeUIsTUFBTTdELEdBQU4sQ0FBVSxDQUFWLENBQVYsRUFBd0IsS0FBSys0QixPQUE3QixJQUF3QyxDQUFDLENBQTNELEVBQThEO0FBQzdEO0FBQ0E7O0FBRUR0bkIsWUFBVTFlLElBQVYsQ0FBZWpDLEVBQUUyN0IsS0FBRixDQUFRLFVBQVM2RCxLQUFULEVBQWdCdjJCLE9BQWhCLEVBQXlCO0FBQy9DLE9BQUk3SCxXQUFXcEIsRUFBRWlKLE9BQUYsQ0FBZjtBQUFBLE9BQTJCay9CLEtBQTNCO0FBQUEsT0FDQ2xyQixNQUFPdlcsT0FBTzBoQyxnQkFBUCxHQUEwQixDQUExQixJQUErQmhuQyxTQUFTYixJQUFULENBQWMsaUJBQWQsQ0FBaEMsSUFBcUVhLFNBQVNiLElBQVQsQ0FBYyxVQUFkLENBRDVFOztBQUdBLFFBQUsybEMsS0FBTCxDQUFXNWtDLE9BQVgsQ0FBbUIsTUFBbkIsRUFBMkIsRUFBRTJILFNBQVM3SCxRQUFYLEVBQXFCNmIsS0FBS0EsR0FBMUIsRUFBM0IsRUFBNEQsTUFBNUQ7O0FBRUEsT0FBSTdiLFNBQVMyTCxFQUFULENBQVksS0FBWixDQUFKLEVBQXdCO0FBQ3ZCM0wsYUFBUytRLEdBQVQsQ0FBYSxlQUFiLEVBQThCblMsRUFBRTI3QixLQUFGLENBQVEsWUFBVztBQUNoRHY2QixjQUFTb04sR0FBVCxDQUFhLFNBQWIsRUFBd0IsQ0FBeEI7QUFDQSxVQUFLMDNCLEtBQUwsQ0FBVzVrQyxPQUFYLENBQW1CLFFBQW5CLEVBQTZCLEVBQUUySCxTQUFTN0gsUUFBWCxFQUFxQjZiLEtBQUtBLEdBQTFCLEVBQTdCLEVBQThELE1BQTlEO0FBQ0EsS0FINkIsRUFHM0IsSUFIMkIsQ0FBOUIsRUFHVTFjLElBSFYsQ0FHZSxLQUhmLEVBR3NCMGMsR0FIdEI7QUFJQSxJQUxELE1BS087QUFDTmtyQixZQUFRLElBQUl0RSxLQUFKLEVBQVI7QUFDQXNFLFVBQU1FLE1BQU4sR0FBZXJvQyxFQUFFMjdCLEtBQUYsQ0FBUSxZQUFXO0FBQ2pDdjZCLGNBQVNvTixHQUFULENBQWE7QUFDWiwwQkFBb0IsVUFBVXlPLEdBQVYsR0FBZ0IsSUFEeEI7QUFFWixpQkFBVztBQUZDLE1BQWI7QUFJQSxVQUFLaXBCLEtBQUwsQ0FBVzVrQyxPQUFYLENBQW1CLFFBQW5CLEVBQTZCLEVBQUUySCxTQUFTN0gsUUFBWCxFQUFxQjZiLEtBQUtBLEdBQTFCLEVBQTdCLEVBQThELE1BQTlEO0FBQ0EsS0FOYyxFQU1aLElBTlksQ0FBZjtBQU9Ba3JCLFVBQU1sMEIsR0FBTixHQUFZZ0osR0FBWjtBQUNBO0FBQ0QsR0F0QmMsRUFzQlosSUF0QlksQ0FBZjs7QUF3QkEsT0FBS2dyQixPQUFMLENBQWExbUMsSUFBYixDQUFrQndSLE1BQU03RCxHQUFOLENBQVUsQ0FBVixDQUFsQjtBQUNBLEVBakNEOztBQW1DQTs7OztBQUlBODRCLE1BQUs1aEMsU0FBTCxDQUFlK2lCLE9BQWYsR0FBeUIsWUFBVztBQUNuQyxNQUFJeVMsT0FBSixFQUFhZ0YsUUFBYjs7QUFFQSxPQUFLaEYsT0FBTCxJQUFnQixLQUFLK0osUUFBckIsRUFBK0I7QUFDOUIsUUFBS08sS0FBTCxDQUFXOWtDLFFBQVgsQ0FBb0J3TSxHQUFwQixDQUF3Qmd1QixPQUF4QixFQUFpQyxLQUFLK0osUUFBTCxDQUFjL0osT0FBZCxDQUFqQztBQUNBO0FBQ0QsT0FBS2dGLFFBQUwsSUFBaUJsK0IsT0FBT3FqQyxtQkFBUCxDQUEyQixJQUEzQixDQUFqQixFQUFtRDtBQUNsRCxVQUFPLEtBQUtuRixRQUFMLENBQVAsSUFBeUIsVUFBekIsS0FBd0MsS0FBS0EsUUFBTCxJQUFpQixJQUF6RDtBQUNBO0FBQ0QsRUFURDs7QUFXQTVnQyxHQUFFMkcsRUFBRixDQUFLdStCLFdBQUwsQ0FBaUJHLFdBQWpCLENBQTZCeEosT0FBN0IsQ0FBcUNtTSxJQUFyQyxHQUE0Q0EsSUFBNUM7QUFFQSxDQS9IQSxFQStIRXRoQyxPQUFPNCtCLEtBQVAsSUFBZ0I1K0IsT0FBT2tDLE1BL0h6QixFQStIaUNsQyxNQS9IakMsRUErSHlDOUIsUUEvSHpDOzs7QUNQRDs7Ozs7OztBQU9BLENBQUMsQ0FBQyxVQUFTNUUsQ0FBVCxFQUFZMEcsTUFBWixFQUFvQjlCLFFBQXBCLEVBQThCMkIsU0FBOUIsRUFBeUM7QUFDMUM7O0FBRUE7Ozs7OztBQUtBLEtBQUkraEMsYUFBYSxTQUFiQSxVQUFhLENBQVNyQyxRQUFULEVBQW1CO0FBQ25DOzs7OztBQUtBLE9BQUtDLEtBQUwsR0FBYUQsUUFBYjs7QUFFQTs7Ozs7QUFLQSxPQUFLc0MsWUFBTCxHQUFvQixLQUFwQjs7QUFFQTs7Ozs7QUFLQSxPQUFLQyxNQUFMLEdBQWMsRUFBZDs7QUFFQTs7Ozs7QUFLQSxPQUFLQyxTQUFMLEdBQWlCLEVBQWpCOztBQUVBOzs7OztBQUtBLE9BQUtDLFVBQUwsR0FBa0IsRUFBbEI7O0FBRUE7Ozs7QUFJQSxPQUFLdG5DLFFBQUwsR0FBZ0IsS0FBSzhrQyxLQUFMLENBQVc5a0MsUUFBM0I7O0FBRUE7Ozs7O0FBS0EsT0FBS3VuQyxVQUFMLEdBQWtCO0FBQ2pCNXBCLFNBQU0sS0FBS21uQixLQUFMLENBQVdubkIsSUFEQTtBQUVqQkksU0FBTSxLQUFLK21CLEtBQUwsQ0FBVy9tQixJQUZBO0FBR2pCZ2tCLE9BQUksS0FBSytDLEtBQUwsQ0FBVy9DO0FBSEUsR0FBbEI7O0FBTUE7Ozs7O0FBS0EsT0FBSzNJLFNBQUwsR0FBaUI7QUFDaEIsNEJBQXlCeDZCLEVBQUUyN0IsS0FBRixDQUFRLFVBQVN6M0IsQ0FBVCxFQUFZO0FBQzVDLFFBQUlBLEVBQUVsQixTQUFGLElBQWUsS0FBS2tqQyxLQUFMLENBQVdwUixRQUFYLENBQW9COFQsUUFBdkMsRUFBaUQ7QUFDaEQsVUFBS0YsVUFBTCxDQUFnQm5uQyxJQUFoQixDQUFxQixpQkFBaUIsS0FBSzJrQyxLQUFMLENBQVdwUixRQUFYLENBQW9CK1QsUUFBckMsR0FBZ0QsSUFBaEQsR0FDcEI3b0MsRUFBRWtFLEVBQUU4OEIsT0FBSixFQUFhcjlCLElBQWIsQ0FBa0IsWUFBbEIsRUFBZ0NDLE9BQWhDLENBQXdDLFlBQXhDLEVBQXNEckQsSUFBdEQsQ0FBMkQsVUFBM0QsQ0FEb0IsR0FDcUQsUUFEMUU7QUFFQTtBQUNELElBTHdCLEVBS3RCLElBTHNCLENBRFQ7QUFPaEIseUJBQXNCUCxFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUN6QyxRQUFJQSxFQUFFbEIsU0FBRixJQUFlLEtBQUtrakMsS0FBTCxDQUFXcFIsUUFBWCxDQUFvQjhULFFBQXZDLEVBQWlEO0FBQ2hELFVBQUtGLFVBQUwsQ0FBZ0JqbkMsTUFBaEIsQ0FBdUJ5QyxFQUFFMkcsUUFBekIsRUFBbUMsQ0FBbkMsRUFBc0MsS0FBSzY5QixVQUFMLENBQWdCSSxHQUFoQixFQUF0QztBQUNBO0FBQ0QsSUFKcUIsRUFJbkIsSUFKbUIsQ0FQTjtBQVloQiwwQkFBdUI5b0MsRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDMUMsUUFBSUEsRUFBRWxCLFNBQUYsSUFBZSxLQUFLa2pDLEtBQUwsQ0FBV3BSLFFBQVgsQ0FBb0I4VCxRQUF2QyxFQUFpRDtBQUNoRCxVQUFLRixVQUFMLENBQWdCam5DLE1BQWhCLENBQXVCeUMsRUFBRTJHLFFBQXpCLEVBQW1DLENBQW5DO0FBQ0E7QUFDRCxJQUpzQixFQUlwQixJQUpvQixDQVpQO0FBaUJoQiwyQkFBd0I3SyxFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUMzQyxRQUFJQSxFQUFFbEIsU0FBRixJQUFla0IsRUFBRTA4QixRQUFGLENBQVduZ0MsSUFBWCxJQUFtQixVQUF0QyxFQUFrRDtBQUNqRCxVQUFLc29DLElBQUw7QUFDQTtBQUNELElBSnVCLEVBSXJCLElBSnFCLENBakJSO0FBc0JoQiwrQkFBNEIvb0MsRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDL0MsUUFBSUEsRUFBRWxCLFNBQUYsSUFBZSxDQUFDLEtBQUt1bEMsWUFBekIsRUFBdUM7QUFDdEMsVUFBS3JDLEtBQUwsQ0FBVzVrQyxPQUFYLENBQW1CLFlBQW5CLEVBQWlDLElBQWpDLEVBQXVDLFlBQXZDO0FBQ0EsVUFBSzY2QixVQUFMO0FBQ0EsVUFBSzhFLE1BQUw7QUFDQSxVQUFLOEgsSUFBTDtBQUNBLFVBQUtSLFlBQUwsR0FBb0IsSUFBcEI7QUFDQSxVQUFLckMsS0FBTCxDQUFXNWtDLE9BQVgsQ0FBbUIsYUFBbkIsRUFBa0MsSUFBbEMsRUFBd0MsWUFBeEM7QUFDQTtBQUNELElBVDJCLEVBU3pCLElBVHlCLENBdEJaO0FBZ0NoQiw2QkFBMEJ0QixFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUM3QyxRQUFJQSxFQUFFbEIsU0FBRixJQUFlLEtBQUt1bEMsWUFBeEIsRUFBc0M7QUFDckMsVUFBS3JDLEtBQUwsQ0FBVzVrQyxPQUFYLENBQW1CLFNBQW5CLEVBQThCLElBQTlCLEVBQW9DLFlBQXBDO0FBQ0EsVUFBSzIvQixNQUFMO0FBQ0EsVUFBSzhILElBQUw7QUFDQSxVQUFLN0MsS0FBTCxDQUFXNWtDLE9BQVgsQ0FBbUIsV0FBbkIsRUFBZ0MsSUFBaEMsRUFBc0MsWUFBdEM7QUFDQTtBQUNELElBUHlCLEVBT3ZCLElBUHVCO0FBaENWLEdBQWpCOztBQTBDQTtBQUNBLE9BQUs0a0MsS0FBTCxDQUFXOXlCLE9BQVgsR0FBcUJwVCxFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYTY3QixXQUFXL04sUUFBeEIsRUFBa0MsS0FBSzJMLEtBQUwsQ0FBVzl5QixPQUE3QyxDQUFyQjs7QUFFQTtBQUNBLE9BQUtoUyxRQUFMLENBQWNtTSxFQUFkLENBQWlCLEtBQUtpdEIsU0FBdEI7QUFDQSxFQXpHRDs7QUEyR0E7Ozs7O0FBS0E4TixZQUFXL04sUUFBWCxHQUFzQjtBQUNyQnlPLE9BQUssS0FEZ0I7QUFFckJDLFdBQVMsQ0FBRSxNQUFGLEVBQVUsTUFBVixDQUZZO0FBR3JCQyxZQUFVLEtBSFc7QUFJckJDLGNBQVksS0FKUztBQUtyQkMsZ0JBQWMsS0FMTztBQU1yQkMscUJBQW1CLFNBTkU7QUFPckJDLFlBQVUsQ0FBRSxVQUFGLEVBQWMsVUFBZCxDQVBXO0FBUXJCQyxXQUFTLENBUlk7QUFTckJWLFlBQVUsU0FUVztBQVVyQlcsYUFBVyxVQVZVO0FBV3JCQyxRQUFNLElBWGU7QUFZckJDLFlBQVUsS0FaVztBQWFyQmQsWUFBVSxLQWJXO0FBY3JCZSxhQUFXLEtBZFU7QUFlckJDLGlCQUFlO0FBZk0sRUFBdEI7O0FBa0JBOzs7O0FBSUF0QixZQUFXbGlDLFNBQVgsQ0FBcUIrMUIsVUFBckIsR0FBa0MsWUFBVztBQUM1QyxNQUFJME4sUUFBSjtBQUFBLE1BQ0MvVSxXQUFXLEtBQUtvUixLQUFMLENBQVdwUixRQUR2Qjs7QUFHQTtBQUNBLE9BQUsyVCxTQUFMLENBQWVxQixTQUFmLEdBQTJCLENBQUNoVixTQUFTc1UsWUFBVCxHQUF3QnBwQyxFQUFFODBCLFNBQVNzVSxZQUFYLENBQXhCLEdBQ3pCcHBDLEVBQUUsT0FBRixFQUFXZ1MsUUFBWCxDQUFvQjhpQixTQUFTdVUsaUJBQTdCLEVBQWdEdGpDLFFBQWhELENBQXlELEtBQUszRSxRQUE5RCxDQUR3QixFQUNpRDRRLFFBRGpELENBQzBELFVBRDFELENBQTNCOztBQUdBLE9BQUt5MkIsU0FBTCxDQUFlc0IsU0FBZixHQUEyQi9wQyxFQUFFLE1BQU04MEIsU0FBU3FVLFVBQWYsR0FBNEIsR0FBOUIsRUFDekJuM0IsUUFEeUIsQ0FDaEI4aUIsU0FBU3dVLFFBQVQsQ0FBa0IsQ0FBbEIsQ0FEZ0IsRUFFekIva0IsSUFGeUIsQ0FFcEJ1USxTQUFTbVUsT0FBVCxDQUFpQixDQUFqQixDQUZvQixFQUd6QjVKLFNBSHlCLENBR2YsS0FBS29KLFNBQUwsQ0FBZXFCLFNBSEEsRUFJekJ2OEIsRUFKeUIsQ0FJdEIsT0FKc0IsRUFJYnZOLEVBQUUyN0IsS0FBRixDQUFRLFVBQVN6M0IsQ0FBVCxFQUFZO0FBQ2hDLFFBQUtpYixJQUFMLENBQVUyVixTQUFTb1UsUUFBbkI7QUFDQSxHQUZZLEVBRVYsSUFGVSxDQUphLENBQTNCO0FBT0EsT0FBS1QsU0FBTCxDQUFldUIsS0FBZixHQUF1QmhxQyxFQUFFLE1BQU04MEIsU0FBU3FVLFVBQWYsR0FBNEIsR0FBOUIsRUFDckJuM0IsUUFEcUIsQ0FDWjhpQixTQUFTd1UsUUFBVCxDQUFrQixDQUFsQixDQURZLEVBRXJCL2tCLElBRnFCLENBRWhCdVEsU0FBU21VLE9BQVQsQ0FBaUIsQ0FBakIsQ0FGZ0IsRUFHckJsakMsUUFIcUIsQ0FHWixLQUFLMGlDLFNBQUwsQ0FBZXFCLFNBSEgsRUFJckJ2OEIsRUFKcUIsQ0FJbEIsT0FKa0IsRUFJVHZOLEVBQUUyN0IsS0FBRixDQUFRLFVBQVN6M0IsQ0FBVCxFQUFZO0FBQ2hDLFFBQUs2YSxJQUFMLENBQVUrVixTQUFTb1UsUUFBbkI7QUFDQSxHQUZZLEVBRVYsSUFGVSxDQUpTLENBQXZCOztBQVFBO0FBQ0EsTUFBSSxDQUFDcFUsU0FBUzhULFFBQWQsRUFBd0I7QUFDdkIsUUFBS0YsVUFBTCxHQUFrQixDQUFFMW9DLEVBQUUsT0FBRixFQUNsQmdTLFFBRGtCLENBQ1Q4aUIsU0FBUytULFFBREEsRUFFbEIzaEIsTUFGa0IsQ0FFWGxuQixFQUFFLFFBQUYsQ0FGVyxFQUdsQjZCLElBSGtCLENBR2IsV0FIYSxDQUFGLENBQWxCO0FBSUE7O0FBRUQsT0FBSzRtQyxTQUFMLENBQWV3QixTQUFmLEdBQTJCLENBQUNuVixTQUFTOFUsYUFBVCxHQUF5QjVwQyxFQUFFODBCLFNBQVM4VSxhQUFYLENBQXpCLEdBQ3pCNXBDLEVBQUUsT0FBRixFQUFXZ1MsUUFBWCxDQUFvQjhpQixTQUFTMFUsU0FBN0IsRUFBd0N6akMsUUFBeEMsQ0FBaUQsS0FBSzNFLFFBQXRELENBRHdCLEVBQ3lDNFEsUUFEekMsQ0FDa0QsVUFEbEQsQ0FBM0I7O0FBR0EsT0FBS3kyQixTQUFMLENBQWV3QixTQUFmLENBQXlCMThCLEVBQXpCLENBQTRCLE9BQTVCLEVBQXFDLEtBQXJDLEVBQTRDdk4sRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDL0QsT0FBSXM3QixRQUFReC9CLEVBQUVrRSxFQUFFc0osTUFBSixFQUFZdEUsTUFBWixHQUFxQjZELEVBQXJCLENBQXdCLEtBQUswN0IsU0FBTCxDQUFld0IsU0FBdkMsSUFDVGpxQyxFQUFFa0UsRUFBRXNKLE1BQUosRUFBWWd5QixLQUFaLEVBRFMsR0FDYXgvQixFQUFFa0UsRUFBRXNKLE1BQUosRUFBWXRFLE1BQVosR0FBcUJzMkIsS0FBckIsRUFEekI7O0FBR0F0N0IsS0FBRXVKLGNBQUY7O0FBRUEsUUFBSzAxQixFQUFMLENBQVEzRCxLQUFSLEVBQWUxSyxTQUFTNlUsU0FBeEI7QUFDQSxHQVAyQyxFQU96QyxJQVB5QyxDQUE1Qzs7QUFTQTtBQUNBLE9BQUtFLFFBQUwsSUFBaUIsS0FBS2xCLFVBQXRCLEVBQWtDO0FBQ2pDLFFBQUt6QyxLQUFMLENBQVcyRCxRQUFYLElBQXVCN3BDLEVBQUUyN0IsS0FBRixDQUFRLEtBQUtrTyxRQUFMLENBQVIsRUFBd0IsSUFBeEIsQ0FBdkI7QUFDQTtBQUNELEVBL0NEOztBQWlEQTs7OztBQUlBdkIsWUFBV2xpQyxTQUFYLENBQXFCK2lCLE9BQXJCLEdBQStCLFlBQVc7QUFDekMsTUFBSXlTLE9BQUosRUFBYXNPLE9BQWIsRUFBc0J0SixRQUF0QixFQUFnQ2lKLFFBQWhDOztBQUVBLE9BQUtqTyxPQUFMLElBQWdCLEtBQUtwQixTQUFyQixFQUFnQztBQUMvQixRQUFLcDVCLFFBQUwsQ0FBY3dNLEdBQWQsQ0FBa0JndUIsT0FBbEIsRUFBMkIsS0FBS3BCLFNBQUwsQ0FBZW9CLE9BQWYsQ0FBM0I7QUFDQTtBQUNELE9BQUtzTyxPQUFMLElBQWdCLEtBQUt6QixTQUFyQixFQUFnQztBQUMvQixRQUFLQSxTQUFMLENBQWV5QixPQUFmLEVBQXdCM29CLE1BQXhCO0FBQ0E7QUFDRCxPQUFLc29CLFFBQUwsSUFBaUIsS0FBS00sUUFBdEIsRUFBZ0M7QUFDL0IsUUFBS2pFLEtBQUwsQ0FBVzJELFFBQVgsSUFBdUIsS0FBS2xCLFVBQUwsQ0FBZ0JrQixRQUFoQixDQUF2QjtBQUNBO0FBQ0QsT0FBS2pKLFFBQUwsSUFBaUJsK0IsT0FBT3FqQyxtQkFBUCxDQUEyQixJQUEzQixDQUFqQixFQUFtRDtBQUNsRCxVQUFPLEtBQUtuRixRQUFMLENBQVAsSUFBeUIsVUFBekIsS0FBd0MsS0FBS0EsUUFBTCxJQUFpQixJQUF6RDtBQUNBO0FBQ0QsRUFmRDs7QUFpQkE7Ozs7QUFJQTBILFlBQVdsaUMsU0FBWCxDQUFxQjY2QixNQUFyQixHQUE4QixZQUFXO0FBQ3hDLE1BQUl4OUIsQ0FBSjtBQUFBLE1BQU84ZixDQUFQO0FBQUEsTUFBVXpWLENBQVY7QUFBQSxNQUNDczhCLFFBQVEsS0FBS2xFLEtBQUwsQ0FBV2xILE1BQVgsR0FBb0JqOEIsTUFBcEIsR0FBNkIsQ0FEdEM7QUFBQSxNQUVDc25DLFFBQVFELFFBQVEsS0FBS2xFLEtBQUwsQ0FBV3h6QixLQUFYLEdBQW1CM1AsTUFGcEM7QUFBQSxNQUdDMjhCLFVBQVUsS0FBS3dHLEtBQUwsQ0FBV3hHLE9BQVgsQ0FBbUIsSUFBbkIsQ0FIWDtBQUFBLE1BSUM1SyxXQUFXLEtBQUtvUixLQUFMLENBQVdwUixRQUp2QjtBQUFBLE1BS0M5bEIsT0FBTzhsQixTQUFTdUgsTUFBVCxJQUFtQnZILFNBQVNnSSxTQUE1QixJQUF5Q2hJLFNBQVM4VCxRQUFsRCxHQUNKLENBREksR0FDQTlULFNBQVM0VSxRQUFULElBQXFCNVUsU0FBU3BpQixLQU50Qzs7QUFRQSxNQUFJb2lCLFNBQVN5VSxPQUFULEtBQXFCLE1BQXpCLEVBQWlDO0FBQ2hDelUsWUFBU3lVLE9BQVQsR0FBbUJ0bUMsS0FBSzZkLEdBQUwsQ0FBU2dVLFNBQVN5VSxPQUFsQixFQUEyQnpVLFNBQVNwaUIsS0FBcEMsQ0FBbkI7QUFDQTs7QUFFRCxNQUFJb2lCLFNBQVMyVSxJQUFULElBQWlCM1UsU0FBU3lVLE9BQVQsSUFBb0IsTUFBekMsRUFBaUQ7QUFDaEQsUUFBS2YsTUFBTCxHQUFjLEVBQWQ7O0FBRUEsUUFBSy9rQyxJQUFJMm1DLEtBQUosRUFBVzdtQixJQUFJLENBQWYsRUFBa0J6VixJQUFJLENBQTNCLEVBQThCckssSUFBSTRtQyxLQUFsQyxFQUF5QzVtQyxHQUF6QyxFQUE4QztBQUM3QyxRQUFJOGYsS0FBS3ZVLElBQUwsSUFBYXVVLE1BQU0sQ0FBdkIsRUFBMEI7QUFDekIsVUFBS2lsQixNQUFMLENBQVlqbkMsSUFBWixDQUFpQjtBQUNoQnFHLGFBQU8zRSxLQUFLNmQsR0FBTCxDQUFTNGUsT0FBVCxFQUFrQmo4QixJQUFJMm1DLEtBQXRCLENBRFM7QUFFaEJ0bEMsV0FBS3JCLElBQUkybUMsS0FBSixHQUFZcDdCLElBQVosR0FBbUI7QUFGUixNQUFqQjtBQUlBLFNBQUkvTCxLQUFLNmQsR0FBTCxDQUFTNGUsT0FBVCxFQUFrQmo4QixJQUFJMm1DLEtBQXRCLE1BQWlDMUssT0FBckMsRUFBOEM7QUFDN0M7QUFDQTtBQUNEbmMsU0FBSSxDQUFKLEVBQU8sRUFBRXpWLENBQVQ7QUFDQTtBQUNEeVYsU0FBSyxLQUFLMmlCLEtBQUwsQ0FBV3JELE9BQVgsQ0FBbUIsS0FBS3FELEtBQUwsQ0FBV3ZILFFBQVgsQ0FBb0JsN0IsQ0FBcEIsQ0FBbkIsQ0FBTDtBQUNBO0FBQ0Q7QUFDRCxFQTlCRDs7QUFnQ0E7Ozs7O0FBS0E2a0MsWUFBV2xpQyxTQUFYLENBQXFCMmlDLElBQXJCLEdBQTRCLFlBQVc7QUFDdEMsTUFBSS9HLFVBQUo7QUFBQSxNQUNDbE4sV0FBVyxLQUFLb1IsS0FBTCxDQUFXcFIsUUFEdkI7QUFBQSxNQUVDd1YsV0FBVyxLQUFLcEUsS0FBTCxDQUFXeHpCLEtBQVgsR0FBbUIzUCxNQUFuQixJQUE2Qit4QixTQUFTcGlCLEtBRmxEO0FBQUEsTUFHQzhzQixRQUFRLEtBQUswRyxLQUFMLENBQVd2SCxRQUFYLENBQW9CLEtBQUt1SCxLQUFMLENBQVc3M0IsT0FBWCxFQUFwQixDQUhUO0FBQUEsTUFJQyt0QixPQUFPdEgsU0FBU3NILElBQVQsSUFBaUJ0SCxTQUFTd0gsTUFKbEM7O0FBTUEsT0FBS21NLFNBQUwsQ0FBZXFCLFNBQWYsQ0FBeUIzWSxXQUF6QixDQUFxQyxVQUFyQyxFQUFpRCxDQUFDMkQsU0FBU2tVLEdBQVYsSUFBaUJzQixRQUFsRTs7QUFFQSxNQUFJeFYsU0FBU2tVLEdBQWIsRUFBa0I7QUFDakIsUUFBS1AsU0FBTCxDQUFlc0IsU0FBZixDQUF5QjVZLFdBQXpCLENBQXFDLFVBQXJDLEVBQWlELENBQUNpTCxJQUFELElBQVNvRCxTQUFTLEtBQUswRyxLQUFMLENBQVd6RyxPQUFYLENBQW1CLElBQW5CLENBQW5FO0FBQ0EsUUFBS2dKLFNBQUwsQ0FBZXVCLEtBQWYsQ0FBcUI3WSxXQUFyQixDQUFpQyxVQUFqQyxFQUE2QyxDQUFDaUwsSUFBRCxJQUFTb0QsU0FBUyxLQUFLMEcsS0FBTCxDQUFXeEcsT0FBWCxDQUFtQixJQUFuQixDQUEvRDtBQUNBOztBQUVELE9BQUsrSSxTQUFMLENBQWV3QixTQUFmLENBQXlCOVksV0FBekIsQ0FBcUMsVUFBckMsRUFBaUQsQ0FBQzJELFNBQVMyVSxJQUFWLElBQWtCYSxRQUFuRTs7QUFFQSxNQUFJeFYsU0FBUzJVLElBQWIsRUFBbUI7QUFDbEJ6SCxnQkFBYSxLQUFLd0csTUFBTCxDQUFZemxDLE1BQVosR0FBcUIsS0FBSzBsQyxTQUFMLENBQWV3QixTQUFmLENBQXlCaDNCLFFBQXpCLEdBQW9DbFEsTUFBdEU7O0FBRUEsT0FBSSt4QixTQUFTOFQsUUFBVCxJQUFxQjVHLGVBQWUsQ0FBeEMsRUFBMkM7QUFDMUMsU0FBS3lHLFNBQUwsQ0FBZXdCLFNBQWYsQ0FBeUIxbEIsSUFBekIsQ0FBOEIsS0FBS21rQixVQUFMLENBQWdCNXdCLElBQWhCLENBQXFCLEVBQXJCLENBQTlCO0FBQ0EsSUFGRCxNQUVPLElBQUlrcUIsYUFBYSxDQUFqQixFQUFvQjtBQUMxQixTQUFLeUcsU0FBTCxDQUFld0IsU0FBZixDQUF5Qi9pQixNQUF6QixDQUFnQyxJQUFJL2dCLEtBQUosQ0FBVTY3QixhQUFhLENBQXZCLEVBQTBCbHFCLElBQTFCLENBQStCLEtBQUs0d0IsVUFBTCxDQUFnQixDQUFoQixDQUEvQixDQUFoQztBQUNBLElBRk0sTUFFQSxJQUFJMUcsYUFBYSxDQUFqQixFQUFvQjtBQUMxQixTQUFLeUcsU0FBTCxDQUFld0IsU0FBZixDQUF5QmgzQixRQUF6QixHQUFvQzNQLEtBQXBDLENBQTBDMCtCLFVBQTFDLEVBQXNEemdCLE1BQXREO0FBQ0E7O0FBRUQsUUFBS2tuQixTQUFMLENBQWV3QixTQUFmLENBQXlCdG1DLElBQXpCLENBQThCLFNBQTlCLEVBQXlDc0MsV0FBekMsQ0FBcUQsUUFBckQ7QUFDQSxRQUFLd2lDLFNBQUwsQ0FBZXdCLFNBQWYsQ0FBeUJoM0IsUUFBekIsR0FBb0M1RixFQUFwQyxDQUF1Q3JOLEVBQUUra0MsT0FBRixDQUFVLEtBQUsxMkIsT0FBTCxFQUFWLEVBQTBCLEtBQUttNkIsTUFBL0IsQ0FBdkMsRUFBK0V4MkIsUUFBL0UsQ0FBd0YsUUFBeEY7QUFDQTtBQUNELEVBOUJEOztBQWdDQTs7Ozs7QUFLQXMyQixZQUFXbGlDLFNBQVgsQ0FBcUJzK0IsU0FBckIsR0FBaUMsVUFBU2w1QixLQUFULEVBQWdCO0FBQ2hELE1BQUlzcEIsV0FBVyxLQUFLb1IsS0FBTCxDQUFXcFIsUUFBMUI7O0FBRUF0cEIsUUFBTSsrQixJQUFOLEdBQWE7QUFDWi9LLFVBQU94L0IsRUFBRStrQyxPQUFGLENBQVUsS0FBSzEyQixPQUFMLEVBQVYsRUFBMEIsS0FBS202QixNQUEvQixDQURLO0FBRVpqRSxVQUFPLEtBQUtpRSxNQUFMLENBQVl6bEMsTUFGUDtBQUdaaU0sU0FBTThsQixhQUFhQSxTQUFTdUgsTUFBVCxJQUFtQnZILFNBQVNnSSxTQUE1QixJQUF5Q2hJLFNBQVM4VCxRQUFsRCxHQUNoQixDQURnQixHQUNaOVQsU0FBUzRVLFFBQVQsSUFBcUI1VSxTQUFTcGlCLEtBRC9CO0FBSE0sR0FBYjtBQU1BLEVBVEQ7O0FBV0E7Ozs7O0FBS0E0MUIsWUFBV2xpQyxTQUFYLENBQXFCaUksT0FBckIsR0FBK0IsWUFBVztBQUN6QyxNQUFJQSxVQUFVLEtBQUs2M0IsS0FBTCxDQUFXdkgsUUFBWCxDQUFvQixLQUFLdUgsS0FBTCxDQUFXNzNCLE9BQVgsRUFBcEIsQ0FBZDtBQUNBLFNBQU9yTyxFQUFFbWhDLElBQUYsQ0FBTyxLQUFLcUgsTUFBWixFQUFvQnhvQyxFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTNE8sSUFBVCxFQUFlL0ssS0FBZixFQUFzQjtBQUN4RCxVQUFPK0ssS0FBSzNpQyxLQUFMLElBQWN5RyxPQUFkLElBQXlCazhCLEtBQUt6bEMsR0FBTCxJQUFZdUosT0FBNUM7QUFDQSxHQUYwQixFQUV4QixJQUZ3QixDQUFwQixFQUVHeTZCLEdBRkgsRUFBUDtBQUdBLEVBTEQ7O0FBT0E7Ozs7O0FBS0FSLFlBQVdsaUMsU0FBWCxDQUFxQm9rQyxXQUFyQixHQUFtQyxVQUFTQyxTQUFULEVBQW9CO0FBQ3RELE1BQUk1L0IsUUFBSjtBQUFBLE1BQWM5SCxNQUFkO0FBQUEsTUFDQyt4QixXQUFXLEtBQUtvUixLQUFMLENBQVdwUixRQUR2Qjs7QUFHQSxNQUFJQSxTQUFTeVUsT0FBVCxJQUFvQixNQUF4QixFQUFnQztBQUMvQjErQixjQUFXN0ssRUFBRStrQyxPQUFGLENBQVUsS0FBSzEyQixPQUFMLEVBQVYsRUFBMEIsS0FBS202QixNQUEvQixDQUFYO0FBQ0F6bEMsWUFBUyxLQUFLeWxDLE1BQUwsQ0FBWXpsQyxNQUFyQjtBQUNBMG5DLGVBQVksRUFBRTUvQixRQUFkLEdBQXlCLEVBQUVBLFFBQTNCO0FBQ0FBLGNBQVcsS0FBSzI5QixNQUFMLENBQVksQ0FBRTM5QixXQUFXOUgsTUFBWixHQUFzQkEsTUFBdkIsSUFBaUNBLE1BQTdDLEVBQXFENkUsS0FBaEU7QUFDQSxHQUxELE1BS087QUFDTmlELGNBQVcsS0FBS3E3QixLQUFMLENBQVd2SCxRQUFYLENBQW9CLEtBQUt1SCxLQUFMLENBQVc3M0IsT0FBWCxFQUFwQixDQUFYO0FBQ0F0TCxZQUFTLEtBQUttakMsS0FBTCxDQUFXeHpCLEtBQVgsR0FBbUIzUCxNQUE1QjtBQUNBMG5DLGVBQVk1L0IsWUFBWWlxQixTQUFTeVUsT0FBakMsR0FBMkMxK0IsWUFBWWlxQixTQUFTeVUsT0FBaEU7QUFDQTs7QUFFRCxTQUFPMStCLFFBQVA7QUFDQSxFQWhCRDs7QUFrQkE7Ozs7O0FBS0F5OUIsWUFBV2xpQyxTQUFYLENBQXFCMlksSUFBckIsR0FBNEIsVUFBUytpQixLQUFULEVBQWdCO0FBQzNDOWhDLElBQUUyN0IsS0FBRixDQUFRLEtBQUtnTixVQUFMLENBQWdCeEYsRUFBeEIsRUFBNEIsS0FBSytDLEtBQWpDLEVBQXdDLEtBQUtzRSxXQUFMLENBQWlCLElBQWpCLENBQXhDLEVBQWdFMUksS0FBaEU7QUFDQSxFQUZEOztBQUlBOzs7OztBQUtBd0csWUFBV2xpQyxTQUFYLENBQXFCK1ksSUFBckIsR0FBNEIsVUFBUzJpQixLQUFULEVBQWdCO0FBQzNDOWhDLElBQUUyN0IsS0FBRixDQUFRLEtBQUtnTixVQUFMLENBQWdCeEYsRUFBeEIsRUFBNEIsS0FBSytDLEtBQWpDLEVBQXdDLEtBQUtzRSxXQUFMLENBQWlCLEtBQWpCLENBQXhDLEVBQWlFMUksS0FBakU7QUFDQSxFQUZEOztBQUlBOzs7Ozs7O0FBT0F3RyxZQUFXbGlDLFNBQVgsQ0FBcUIrOEIsRUFBckIsR0FBMEIsVUFBU3Q0QixRQUFULEVBQW1CaTNCLEtBQW5CLEVBQTBCNEksUUFBMUIsRUFBb0M7QUFDN0QsTUFBSTNuQyxNQUFKOztBQUVBLE1BQUksQ0FBQzJuQyxRQUFELElBQWEsS0FBS2xDLE1BQUwsQ0FBWXpsQyxNQUE3QixFQUFxQztBQUNwQ0EsWUFBUyxLQUFLeWxDLE1BQUwsQ0FBWXpsQyxNQUFyQjtBQUNBL0MsS0FBRTI3QixLQUFGLENBQVEsS0FBS2dOLFVBQUwsQ0FBZ0J4RixFQUF4QixFQUE0QixLQUFLK0MsS0FBakMsRUFBd0MsS0FBS3NDLE1BQUwsQ0FBWSxDQUFFMzlCLFdBQVc5SCxNQUFaLEdBQXNCQSxNQUF2QixJQUFpQ0EsTUFBN0MsRUFBcUQ2RSxLQUE3RixFQUFvR2s2QixLQUFwRztBQUNBLEdBSEQsTUFHTztBQUNOOWhDLEtBQUUyN0IsS0FBRixDQUFRLEtBQUtnTixVQUFMLENBQWdCeEYsRUFBeEIsRUFBNEIsS0FBSytDLEtBQWpDLEVBQXdDcjdCLFFBQXhDLEVBQWtEaTNCLEtBQWxEO0FBQ0E7QUFDRCxFQVREOztBQVdBOWhDLEdBQUUyRyxFQUFGLENBQUt1K0IsV0FBTCxDQUFpQkcsV0FBakIsQ0FBNkJ4SixPQUE3QixDQUFxQ3lNLFVBQXJDLEdBQWtEQSxVQUFsRDtBQUVBLENBdFhBLEVBc1hFNWhDLE9BQU80K0IsS0FBUCxJQUFnQjUrQixPQUFPa0MsTUF0WHpCLEVBc1hpQ2xDLE1BdFhqQyxFQXNYeUM5QixRQXRYekM7OztBQ1BEOzs7Ozs7Ozs7QUFTQSxDQUFDLENBQUMsVUFBUzVFLENBQVQsRUFBWTBHLE1BQVosRUFBb0I5QixRQUFwQixFQUE4QjJCLFNBQTlCLEVBQXlDOztBQUUxQyxLQUFJdkIsUUFBUWhGLEVBQUUsV0FBRixFQUFla1AsR0FBZixDQUFtQixDQUFuQixFQUFzQmxLLEtBQWxDO0FBQUEsS0FDQ2tTLFdBQVcsa0JBQWtCalQsS0FBbEIsQ0FBd0IsR0FBeEIsQ0FEWjtBQUFBLEtBRUMrZ0MsU0FBUztBQUNScGUsY0FBWTtBQUNYOWhCLFFBQUs7QUFDSjZsQyxzQkFBa0IscUJBRGQ7QUFFSkMsbUJBQWUsZUFGWDtBQUdKQyxpQkFBYSxnQkFIVDtBQUlKamtCLGdCQUFZO0FBSlI7QUFETSxHQURKO0FBU1IxVixhQUFXO0FBQ1ZwTSxRQUFLO0FBQ0pnbUMscUJBQWlCLG9CQURiO0FBRUpDLGtCQUFjLGNBRlY7QUFHSkMsZ0JBQVksZUFIUjtBQUlKOTVCLGVBQVc7QUFKUDtBQURLO0FBVEgsRUFGVjtBQUFBLEtBb0JDKzVCLFFBQVE7QUFDUEMsaUJBQWUseUJBQVc7QUFDekIsVUFBTyxDQUFDLENBQUMvakMsS0FBSyxXQUFMLENBQVQ7QUFDQSxHQUhNO0FBSVBna0MsbUJBQWlCLDJCQUFXO0FBQzNCLFVBQU8sQ0FBQyxDQUFDaGtDLEtBQUssYUFBTCxDQUFUO0FBQ0EsR0FOTTtBQU9QaWtDLGtCQUFnQiwwQkFBVztBQUMxQixVQUFPLENBQUMsQ0FBQ2prQyxLQUFLLFlBQUwsQ0FBVDtBQUNBLEdBVE07QUFVUGtrQyxpQkFBZSx5QkFBVztBQUN6QixVQUFPLENBQUMsQ0FBQ2xrQyxLQUFLLFdBQUwsQ0FBVDtBQUNBO0FBWk0sRUFwQlQ7O0FBbUNBLFVBQVNBLElBQVQsQ0FBY3k1QixRQUFkLEVBQXdCMEssUUFBeEIsRUFBa0M7QUFDakMsTUFBSTlXLFNBQVMsS0FBYjtBQUFBLE1BQ0M2VixRQUFRekosU0FBUzlFLE1BQVQsQ0FBZ0IsQ0FBaEIsRUFBbUJod0IsV0FBbkIsS0FBbUM4MEIsU0FBU3Q5QixLQUFULENBQWUsQ0FBZixDQUQ1Qzs7QUFHQXRELElBQUVpQyxJQUFGLENBQU8sQ0FBQzIrQixXQUFXLEdBQVgsR0FBaUIxcEIsU0FBU1ksSUFBVCxDQUFjdXlCLFFBQVEsR0FBdEIsQ0FBakIsR0FBOENBLEtBQS9DLEVBQXNEcG1DLEtBQXRELENBQTRELEdBQTVELENBQVAsRUFBeUUsVUFBU1IsQ0FBVCxFQUFZbTlCLFFBQVosRUFBc0I7QUFDOUYsT0FBSTU3QixNQUFNNDdCLFFBQU4sTUFBb0JyNkIsU0FBeEIsRUFBbUM7QUFDbENpdUIsYUFBUzhXLFdBQVcxSyxRQUFYLEdBQXNCLElBQS9CO0FBQ0EsV0FBTyxLQUFQO0FBQ0E7QUFDRCxHQUxEOztBQU9BLFNBQU9wTSxNQUFQO0FBQ0E7O0FBRUQsVUFBUzhXLFFBQVQsQ0FBa0IxSyxRQUFsQixFQUE0QjtBQUMzQixTQUFPejVCLEtBQUt5NUIsUUFBTCxFQUFlLElBQWYsQ0FBUDtBQUNBOztBQUVELEtBQUlxSyxNQUFNRyxjQUFOLEVBQUosRUFBNEI7QUFDM0I7QUFDQXByQyxJQUFFeWhDLE9BQUYsQ0FBVTdhLFVBQVYsR0FBdUIsSUFBSWhiLE1BQUosQ0FBVzAvQixTQUFTLFlBQVQsQ0FBWCxDQUF2QjtBQUNBdHJDLElBQUV5aEMsT0FBRixDQUFVN2EsVUFBVixDQUFxQjloQixHQUFyQixHQUEyQmtnQyxPQUFPcGUsVUFBUCxDQUFrQjloQixHQUFsQixDQUF1QjlFLEVBQUV5aEMsT0FBRixDQUFVN2EsVUFBakMsQ0FBM0I7QUFDQTs7QUFFRCxLQUFJcWtCLE1BQU1JLGFBQU4sRUFBSixFQUEyQjtBQUMxQjtBQUNBcnJDLElBQUV5aEMsT0FBRixDQUFVdndCLFNBQVYsR0FBc0IsSUFBSXRGLE1BQUosQ0FBVzAvQixTQUFTLFdBQVQsQ0FBWCxDQUF0QjtBQUNBdHJDLElBQUV5aEMsT0FBRixDQUFVdndCLFNBQVYsQ0FBb0JwTSxHQUFwQixHQUEwQmtnQyxPQUFPOXpCLFNBQVAsQ0FBaUJwTSxHQUFqQixDQUFzQjlFLEVBQUV5aEMsT0FBRixDQUFVdndCLFNBQWhDLENBQTFCO0FBQ0E7O0FBRUQsS0FBSSs1QixNQUFNQyxhQUFOLEVBQUosRUFBMkI7QUFDMUI7QUFDQWxyQyxJQUFFeWhDLE9BQUYsQ0FBVUksU0FBVixHQUFzQixJQUFJajJCLE1BQUosQ0FBVzAvQixTQUFTLFdBQVQsQ0FBWCxDQUF0QjtBQUNBdHJDLElBQUV5aEMsT0FBRixDQUFVVyxXQUFWLEdBQXdCNkksTUFBTUUsZUFBTixFQUF4QjtBQUNBO0FBRUQsQ0F6RUEsRUF5RUV6a0MsT0FBTzQrQixLQUFQLElBQWdCNStCLE9BQU9rQyxNQXpFekIsRUF5RWlDbEMsTUF6RWpDLEVBeUV5QzlCLFFBekV6Qzs7O0FDVEQ7Ozs7Ozs7QUFPQSxDQUFDLENBQUMsVUFBUzVFLENBQVQsRUFBWTBHLE1BQVosRUFBb0I5QixRQUFwQixFQUE4QjJCLFNBQTlCLEVBQXlDOztBQUUxQzs7Ozs7QUFLQSxLQUFJZ2xDLFFBQVEsU0FBUkEsS0FBUSxDQUFTdEYsUUFBVCxFQUFtQjtBQUM5Qjs7Ozs7QUFLQSxPQUFLQyxLQUFMLEdBQWFELFFBQWI7O0FBRUE7Ozs7O0FBS0EsT0FBS3VGLE9BQUwsR0FBZSxFQUFmOztBQUVBOzs7OztBQUtBLE9BQUtDLFFBQUwsR0FBZ0IsSUFBaEI7O0FBRUE7Ozs7OztBQU1BLE9BQUtqUixTQUFMLEdBQWlCO0FBQ2hCLCtCQUE0Qng2QixFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUMvQyxRQUFJQSxFQUFFbEIsU0FBTixFQUFpQjtBQUNoQixVQUFLa2pDLEtBQUwsQ0FBV2w1QixRQUFYLENBQW9CLEVBQUU3SyxNQUFNLE9BQVIsRUFBaUIxQixNQUFNLFNBQXZCLEVBQWtDaTdCLE1BQU0sQ0FBRSxhQUFGLENBQXhDLEVBQXBCO0FBQ0E7QUFDRCxJQUoyQixFQUl6QixJQUp5QixDQURaO0FBTWhCLDBCQUF1QjE3QixFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUMxQyxRQUFJQSxFQUFFbEIsU0FBRixJQUFlLEtBQUtrakMsS0FBTCxDQUFXcFIsUUFBWCxDQUFvQjRXLEtBQW5DLElBQTRDLEtBQUtDLGNBQUwsRUFBaEQsRUFBdUU7QUFDdEV6bkMsT0FBRXVKLGNBQUY7QUFDQTtBQUNELElBSnNCLEVBSXBCLElBSm9CLENBTlA7QUFXaEIsNkJBQTBCek4sRUFBRTI3QixLQUFGLENBQVEsVUFBU3ozQixDQUFULEVBQVk7QUFDN0MsUUFBSUEsRUFBRWxCLFNBQUYsSUFBZSxLQUFLa2pDLEtBQUwsQ0FBV241QixFQUFYLENBQWMsVUFBZCxDQUFuQixFQUE4QztBQUM3QyxVQUFLbTVCLEtBQUwsQ0FBV3RILE1BQVgsQ0FBa0JqN0IsSUFBbEIsQ0FBdUIsMEJBQXZCLEVBQW1ENGQsTUFBbkQ7QUFDQTtBQUNELElBSnlCLEVBSXZCLElBSnVCLENBWFY7QUFnQmhCLDJCQUF3QnZoQixFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUMzQyxRQUFJQSxFQUFFbEIsU0FBRixJQUFla0IsRUFBRTA4QixRQUFGLENBQVduZ0MsSUFBWCxLQUFvQixVQUFuQyxJQUFpRCxLQUFLZ3JDLFFBQTFELEVBQW9FO0FBQ25FLFVBQUt6ckIsSUFBTDtBQUNBO0FBQ0QsSUFKdUIsRUFJckIsSUFKcUIsQ0FoQlI7QUFxQmhCLDRCQUF5QmhnQixFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUM1QyxRQUFJLENBQUNBLEVBQUVsQixTQUFQLEVBQWtCO0FBQ2pCO0FBQ0E7O0FBRUQsUUFBSTVCLFdBQVdwQixFQUFFa0UsRUFBRTg4QixPQUFKLEVBQWFyOUIsSUFBYixDQUFrQixZQUFsQixDQUFmOztBQUVBLFFBQUl2QyxTQUFTMkIsTUFBYixFQUFxQjtBQUNwQjNCLGNBQVNvTixHQUFULENBQWEsU0FBYixFQUF3QixNQUF4QjtBQUNBLFVBQUtvOUIsS0FBTCxDQUFXeHFDLFFBQVgsRUFBcUJwQixFQUFFa0UsRUFBRTg4QixPQUFKLENBQXJCO0FBQ0E7QUFDRCxJQVh3QixFQVd0QixJQVhzQjtBQXJCVCxHQUFqQjs7QUFtQ0E7QUFDQSxPQUFLa0YsS0FBTCxDQUFXOXlCLE9BQVgsR0FBcUJwVCxFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYTgrQixNQUFNaFIsUUFBbkIsRUFBNkIsS0FBSzJMLEtBQUwsQ0FBVzl5QixPQUF4QyxDQUFyQjs7QUFFQTtBQUNBLE9BQUs4eUIsS0FBTCxDQUFXOWtDLFFBQVgsQ0FBb0JtTSxFQUFwQixDQUF1QixLQUFLaXRCLFNBQTVCOztBQUVBLE9BQUswTCxLQUFMLENBQVc5a0MsUUFBWCxDQUFvQm1NLEVBQXBCLENBQXVCLGlCQUF2QixFQUEwQyxzQkFBMUMsRUFBa0V2TixFQUFFMjdCLEtBQUYsQ0FBUSxVQUFTejNCLENBQVQsRUFBWTtBQUNyRixRQUFLMGlDLElBQUwsQ0FBVTFpQyxDQUFWO0FBQ0EsR0FGaUUsRUFFL0QsSUFGK0QsQ0FBbEU7QUFHQSxFQXhFRDs7QUEwRUE7Ozs7QUFJQXFuQyxPQUFNaFIsUUFBTixHQUFpQjtBQUNoQm1SLFNBQU8sS0FEUztBQUVoQkcsZUFBYSxLQUZHO0FBR2hCQyxjQUFZO0FBSEksRUFBakI7O0FBTUE7Ozs7OztBQU1BUCxPQUFNbmxDLFNBQU4sQ0FBZ0J3bEMsS0FBaEIsR0FBd0IsVUFBU3ArQixNQUFULEVBQWlCdXpCLElBQWpCLEVBQXVCO0FBQzdDLE1BQUk1K0IsT0FBUSxZQUFXO0FBQ3JCLE9BQUlxTCxPQUFPak4sSUFBUCxDQUFZLGVBQVosQ0FBSixFQUFrQztBQUNqQyxXQUFPLE9BQVA7QUFDQSxJQUZELE1BRU8sSUFBSWlOLE9BQU9qTixJQUFQLENBQVksZUFBWixDQUFKLEVBQWtDO0FBQ3hDLFdBQU8sT0FBUDtBQUNBLElBRk0sTUFFQTtBQUNOLFdBQU8sU0FBUDtBQUNBO0FBQ0QsR0FSUyxFQUFYO0FBQUEsTUFTQ3NQLEtBQUtyQyxPQUFPak4sSUFBUCxDQUFZLGVBQVosS0FBZ0NpTixPQUFPak4sSUFBUCxDQUFZLGlCQUFaLENBQWhDLElBQWtFaU4sT0FBT2pOLElBQVAsQ0FBWSxlQUFaLENBVHhFO0FBQUEsTUFVQ3NKLFFBQVEyRCxPQUFPak4sSUFBUCxDQUFZLFlBQVosS0FBNkIsS0FBSzJsQyxLQUFMLENBQVdwUixRQUFYLENBQW9CZ1gsVUFWMUQ7QUFBQSxNQVdDbGlDLFNBQVM0RCxPQUFPak4sSUFBUCxDQUFZLGFBQVosS0FBOEIsS0FBSzJsQyxLQUFMLENBQVdwUixRQUFYLENBQW9CK1csV0FYNUQ7QUFBQSxNQVlDNXVCLE1BQU16UCxPQUFPak4sSUFBUCxDQUFZLE1BQVosQ0FaUDs7QUFjRCxNQUFJMGMsR0FBSixFQUFTOztBQUVSOzs7Ozs7Ozs7OztBQVlBcE4sUUFBS29OLElBQUkrRyxLQUFKLENBQVUseU1BQVYsQ0FBTDs7QUFFQSxPQUFJblUsR0FBRyxDQUFILEVBQU1uTyxPQUFOLENBQWMsT0FBZCxJQUF5QixDQUFDLENBQTlCLEVBQWlDO0FBQ2hDUyxXQUFPLFNBQVA7QUFDQSxJQUZELE1BRU8sSUFBSTBOLEdBQUcsQ0FBSCxFQUFNbk8sT0FBTixDQUFjLE9BQWQsSUFBeUIsQ0FBQyxDQUE5QixFQUFpQztBQUN2Q1MsV0FBTyxPQUFQO0FBQ0EsSUFGTSxNQUVBLElBQUkwTixHQUFHLENBQUgsRUFBTW5PLE9BQU4sQ0FBYyxPQUFkLElBQXlCLENBQUMsQ0FBOUIsRUFBaUM7QUFDdkNTLFdBQU8sT0FBUDtBQUNBLElBRk0sTUFFQTtBQUNOLFVBQU0sSUFBSTZILEtBQUosQ0FBVSwwQkFBVixDQUFOO0FBQ0E7QUFDRDZGLFFBQUtBLEdBQUcsQ0FBSCxDQUFMO0FBQ0EsR0ExQkQsTUEwQk87QUFDTixTQUFNLElBQUk3RixLQUFKLENBQVUsb0JBQVYsQ0FBTjtBQUNBOztBQUVELE9BQUt3aEMsT0FBTCxDQUFhdnVCLEdBQWIsSUFBb0I7QUFDbkI5YSxTQUFNQSxJQURhO0FBRW5CME4sT0FBSUEsRUFGZTtBQUduQmhHLFVBQU9BLEtBSFk7QUFJbkJELFdBQVFBO0FBSlcsR0FBcEI7O0FBT0FtM0IsT0FBS3hnQyxJQUFMLENBQVUsWUFBVixFQUF3QjBjLEdBQXhCOztBQUVBLE9BQUs4dUIsU0FBTCxDQUFlditCLE1BQWYsRUFBdUIsS0FBS2crQixPQUFMLENBQWF2dUIsR0FBYixDQUF2QjtBQUNBLEVBdkREOztBQXlEQTs7Ozs7OztBQU9Bc3VCLE9BQU1ubEMsU0FBTixDQUFnQjJsQyxTQUFoQixHQUE0QixVQUFTditCLE1BQVQsRUFBaUJrK0IsS0FBakIsRUFBd0I7QUFDbkQsTUFBSU0sTUFBSjtBQUFBLE1BQ0NsVSxJQUREO0FBQUEsTUFFQzVULElBRkQ7QUFBQSxNQUdDK25CLGFBQWFQLE1BQU03aEMsS0FBTixJQUFlNmhDLE1BQU05aEMsTUFBckIsR0FBOEIsa0JBQWtCOGhDLE1BQU03aEMsS0FBeEIsR0FBZ0MsWUFBaEMsR0FBK0M2aEMsTUFBTTloQyxNQUFyRCxHQUE4RCxNQUE1RixHQUFxRyxFQUhuSDtBQUFBLE1BSUNzaUMsV0FBVzErQixPQUFPN0osSUFBUCxDQUFZLEtBQVosQ0FKWjtBQUFBLE1BS0N3b0MsVUFBVSxLQUxYO0FBQUEsTUFNQ0MsWUFBWSxFQU5iO0FBQUEsTUFPQ3RYLFdBQVcsS0FBS29SLEtBQUwsQ0FBV3BSLFFBUHZCO0FBQUEsTUFRQ3VYLFNBQVMsU0FBVEEsTUFBUyxDQUFTbm9CLElBQVQsRUFBZTtBQUN2QjRULFVBQU8seUNBQVA7O0FBRUEsT0FBSWhELFNBQVNvVCxRQUFiLEVBQXVCO0FBQ3RCOEQsYUFBUyw4QkFBOEJJLFNBQTlCLEdBQTBDLElBQTFDLEdBQWlERCxPQUFqRCxHQUEyRCxJQUEzRCxHQUFrRWpvQixJQUFsRSxHQUF5RSxVQUFsRjtBQUNBLElBRkQsTUFFTztBQUNOOG5CLGFBQVMscUVBQXFFOW5CLElBQXJFLEdBQTRFLFdBQXJGO0FBQ0E7QUFDRDFXLFVBQU8rUyxLQUFQLENBQWF5ckIsTUFBYjtBQUNBeCtCLFVBQU8rUyxLQUFQLENBQWF1WCxJQUFiO0FBQ0EsR0FsQkY7O0FBb0JBO0FBQ0F0cUIsU0FBTzJ5QixJQUFQLENBQVksbUNBQW1DOEwsVUFBbkMsR0FBZ0QsU0FBNUQ7O0FBRUEsTUFBSSxLQUFLL0YsS0FBTCxDQUFXcFIsUUFBWCxDQUFvQm9ULFFBQXhCLEVBQWtDO0FBQ2pDaUUsYUFBVSxVQUFWO0FBQ0FDLGVBQVksVUFBWjtBQUNBOztBQUVEO0FBQ0EsTUFBSUYsU0FBU25wQyxNQUFiLEVBQXFCO0FBQ3BCc3BDLFVBQU9ILFNBQVMzckMsSUFBVCxDQUFjNHJDLE9BQWQsQ0FBUDtBQUNBRCxZQUFTM3FCLE1BQVQ7QUFDQSxVQUFPLEtBQVA7QUFDQTs7QUFFRCxNQUFJbXFCLE1BQU12cEMsSUFBTixLQUFlLFNBQW5CLEVBQThCO0FBQzdCK2hCLFVBQU8sMEJBQTBCd25CLE1BQU03N0IsRUFBaEMsR0FBcUMsZ0JBQTVDO0FBQ0F3OEIsVUFBT25vQixJQUFQO0FBQ0EsR0FIRCxNQUdPLElBQUl3bkIsTUFBTXZwQyxJQUFOLEtBQWUsT0FBbkIsRUFBNEI7QUFDbENuQyxLQUFFc3NDLElBQUYsQ0FBTztBQUNObnFDLFVBQU0sS0FEQTtBQUVOOGEsU0FBSyw4QkFBOEJ5dUIsTUFBTTc3QixFQUFwQyxHQUF5QyxPQUZ4QztBQUdOMDhCLFdBQU8sVUFIRDtBQUlOQyxjQUFVLE9BSko7QUFLTkMsYUFBUyxpQkFBU3ByQyxJQUFULEVBQWU7QUFDdkI2aUIsWUFBTzdpQixLQUFLLENBQUwsRUFBUXFyQyxlQUFmO0FBQ0FMLFlBQU9ub0IsSUFBUDtBQUNBO0FBUkssSUFBUDtBQVVBLEdBWE0sTUFXQSxJQUFJd25CLE1BQU12cEMsSUFBTixLQUFlLE9BQW5CLEVBQTRCO0FBQ2xDbkMsS0FBRXNzQyxJQUFGLENBQU87QUFDTm5xQyxVQUFNLEtBREE7QUFFTjhhLFNBQUssNEJBQTRCeXVCLE1BQU03N0IsRUFBbEMsR0FBdUMsT0FGdEM7QUFHTjA4QixXQUFPLFVBSEQ7QUFJTkMsY0FBVSxPQUpKO0FBS05DLGFBQVMsaUJBQVNwckMsSUFBVCxFQUFlO0FBQ3ZCNmlCLFlBQU83aUIsS0FBS3NyQyxhQUFaO0FBQ0FOLFlBQU9ub0IsSUFBUDtBQUNBO0FBUkssSUFBUDtBQVVBO0FBQ0QsRUE5REQ7O0FBZ0VBOzs7O0FBSUFxbkIsT0FBTW5sQyxTQUFOLENBQWdCNFosSUFBaEIsR0FBdUIsWUFBVztBQUNqQyxPQUFLa21CLEtBQUwsQ0FBVzVrQyxPQUFYLENBQW1CLE1BQW5CLEVBQTJCLElBQTNCLEVBQWlDLE9BQWpDO0FBQ0EsT0FBS21xQyxRQUFMLENBQWM5bkMsSUFBZCxDQUFtQixrQkFBbkIsRUFBdUM0ZCxNQUF2QztBQUNBLE9BQUtrcUIsUUFBTCxDQUFjeGxDLFdBQWQsQ0FBMEIsbUJBQTFCO0FBQ0EsT0FBS3dsQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsT0FBS3ZGLEtBQUwsQ0FBVzNGLEtBQVgsQ0FBaUIsU0FBakI7QUFDQSxPQUFLMkYsS0FBTCxDQUFXNWtDLE9BQVgsQ0FBbUIsU0FBbkIsRUFBOEIsSUFBOUIsRUFBb0MsT0FBcEM7QUFDQSxFQVBEOztBQVNBOzs7OztBQUtBaXFDLE9BQU1ubEMsU0FBTixDQUFnQndnQyxJQUFoQixHQUF1QixVQUFTcDdCLEtBQVQsRUFBZ0I7QUFDdEMsTUFBSWdDLFNBQVN4TixFQUFFd0wsTUFBTWdDLE1BQVIsQ0FBYjtBQUFBLE1BQ0N1ekIsT0FBT3Z6QixPQUFPaUwsT0FBUCxDQUFlLE1BQU0sS0FBS3l0QixLQUFMLENBQVdwUixRQUFYLENBQW9Ca0osU0FBekMsQ0FEUjtBQUFBLE1BRUMwTixRQUFRLEtBQUtGLE9BQUwsQ0FBYXpLLEtBQUt4Z0MsSUFBTCxDQUFVLFlBQVYsQ0FBYixDQUZUO0FBQUEsTUFHQ3NKLFFBQVE2aEMsTUFBTTdoQyxLQUFOLElBQWUsTUFIeEI7QUFBQSxNQUlDRCxTQUFTOGhDLE1BQU05aEMsTUFBTixJQUFnQixLQUFLczhCLEtBQUwsQ0FBV3RILE1BQVgsQ0FBa0JoMUIsTUFBbEIsRUFKMUI7QUFBQSxNQUtDMmEsSUFMRDs7QUFPQSxNQUFJLEtBQUtrbkIsUUFBVCxFQUFtQjtBQUNsQjtBQUNBOztBQUVELE9BQUt2RixLQUFMLENBQVdsRyxLQUFYLENBQWlCLFNBQWpCO0FBQ0EsT0FBS2tHLEtBQUwsQ0FBVzVrQyxPQUFYLENBQW1CLE1BQW5CLEVBQTJCLElBQTNCLEVBQWlDLE9BQWpDOztBQUVBeS9CLFNBQU8sS0FBS21GLEtBQUwsQ0FBV3h6QixLQUFYLENBQWlCLEtBQUt3ekIsS0FBTCxDQUFXdkgsUUFBWCxDQUFvQm9DLEtBQUt2QixLQUFMLEVBQXBCLENBQWpCLENBQVA7O0FBRUEsT0FBSzBHLEtBQUwsQ0FBV24wQixLQUFYLENBQWlCZ3ZCLEtBQUt2QixLQUFMLEVBQWpCOztBQUVBLE1BQUlrTSxNQUFNdnBDLElBQU4sS0FBZSxTQUFuQixFQUE4QjtBQUM3Qm9pQixVQUFPLG9CQUFvQjFhLEtBQXBCLEdBQTRCLFlBQTVCLEdBQTJDRCxNQUEzQyxHQUFvRCxpQ0FBcEQsR0FDTjhoQyxNQUFNNzdCLEVBREEsR0FDSyxzQkFETCxHQUM4QjY3QixNQUFNNzdCLEVBRHBDLEdBQ3lDLDZDQURoRDtBQUVBLEdBSEQsTUFHTyxJQUFJNjdCLE1BQU12cEMsSUFBTixLQUFlLE9BQW5CLEVBQTRCO0FBQ2xDb2lCLFVBQU8sMkNBQTJDbW5CLE1BQU03N0IsRUFBakQsR0FDTixzQkFETSxHQUNtQmhHLEtBRG5CLEdBQzJCLFlBRDNCLEdBQzBDRCxNQUQxQyxHQUVOLHNGQUZEO0FBR0EsR0FKTSxNQUlBLElBQUk4aEMsTUFBTXZwQyxJQUFOLEtBQWUsT0FBbkIsRUFBNEI7QUFDbENvaUIsVUFBTyw0QkFBNEIsVUFBNUIsR0FBeUMzYSxNQUF6QyxHQUFrRCxHQUFsRCxHQUF3RCxTQUF4RCxHQUFvRUMsS0FBcEUsR0FDTiw2REFETSxHQUVOLHdCQUZNLEdBRXFCNmhDLE1BQU03N0IsRUFGM0IsR0FFZ0Msa0NBRnZDO0FBR0E7O0FBRUQ3UCxJQUFFLGtDQUFrQ3VrQixJQUFsQyxHQUF5QyxRQUEzQyxFQUFxRG1PLFdBQXJELENBQWlFcU8sS0FBS3A5QixJQUFMLENBQVUsWUFBVixDQUFqRTs7QUFFQSxPQUFLOG5DLFFBQUwsR0FBZ0IxSyxLQUFLL3VCLFFBQUwsQ0FBYyxtQkFBZCxDQUFoQjtBQUNBLEVBbkNEOztBQXFDQTs7Ozs7O0FBTUF1NUIsT0FBTW5sQyxTQUFOLENBQWdCdWxDLGNBQWhCLEdBQWlDLFlBQVc7QUFDM0MsTUFBSTFpQyxVQUFVckUsU0FBU2dvQyxpQkFBVCxJQUE4QmhvQyxTQUFTaW9DLG9CQUF2QyxJQUNaam9DLFNBQVNrb0MsdUJBRFg7O0FBR0EsU0FBTzdqQyxXQUFXakosRUFBRWlKLE9BQUYsRUFBV0MsTUFBWCxHQUFvQnFWLFFBQXBCLENBQTZCLGlCQUE3QixDQUFsQjtBQUNBLEVBTEQ7O0FBT0E7OztBQUdBZ3RCLE9BQU1ubEMsU0FBTixDQUFnQitpQixPQUFoQixHQUEwQixZQUFXO0FBQ3BDLE1BQUl5UyxPQUFKLEVBQWFnRixRQUFiOztBQUVBLE9BQUtzRixLQUFMLENBQVc5a0MsUUFBWCxDQUFvQndNLEdBQXBCLENBQXdCLGlCQUF4Qjs7QUFFQSxPQUFLZ3VCLE9BQUwsSUFBZ0IsS0FBS3BCLFNBQXJCLEVBQWdDO0FBQy9CLFFBQUswTCxLQUFMLENBQVc5a0MsUUFBWCxDQUFvQndNLEdBQXBCLENBQXdCZ3VCLE9BQXhCLEVBQWlDLEtBQUtwQixTQUFMLENBQWVvQixPQUFmLENBQWpDO0FBQ0E7QUFDRCxPQUFLZ0YsUUFBTCxJQUFpQmwrQixPQUFPcWpDLG1CQUFQLENBQTJCLElBQTNCLENBQWpCLEVBQW1EO0FBQ2xELFVBQU8sS0FBS25GLFFBQUwsQ0FBUCxJQUF5QixVQUF6QixLQUF3QyxLQUFLQSxRQUFMLElBQWlCLElBQXpEO0FBQ0E7QUFDRCxFQVhEOztBQWFBNWdDLEdBQUUyRyxFQUFGLENBQUt1K0IsV0FBTCxDQUFpQkcsV0FBakIsQ0FBNkJ4SixPQUE3QixDQUFxQzBQLEtBQXJDLEdBQTZDQSxLQUE3QztBQUVBLENBdlRBLEVBdVRFN2tDLE9BQU80K0IsS0FBUCxJQUFnQjUrQixPQUFPa0MsTUF2VHpCLEVBdVRpQ2xDLE1BdlRqQyxFQXVUeUM5QixRQXZUekM7Ozs7O0FDUEQ7Ozs7Ozs7O0FBUUMsV0FBVWl1QixPQUFWLEVBQW1CO0FBQ2hCLFFBQUssT0FBT0MsTUFBUCxLQUFrQixVQUFsQixJQUFnQ0EsT0FBT0MsR0FBNUMsRUFBa0Q7QUFDOUM7QUFDQUQsZUFBTyxDQUFDLFFBQUQsQ0FBUCxFQUFtQkQsT0FBbkI7QUFDSCxLQUhELE1BR08sSUFBSSxRQUFPRyxPQUFQLHlDQUFPQSxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQ3BDO0FBQ0ErWixlQUFPL1osT0FBUCxHQUFpQkgsT0FBakI7QUFDSCxLQUhNLE1BR0E7QUFDSDtBQUNBQSxnQkFBUWpxQixNQUFSO0FBQ0g7QUFDSixDQVhBLEVBV0MsVUFBVTVJLENBQVYsRUFBYTs7QUFFWCxRQUFJZ3RDLFFBQVMsQ0FBQyxPQUFELEVBQVUsWUFBVixFQUF3QixnQkFBeEIsRUFBMEMscUJBQTFDLENBQWI7QUFBQSxRQUNJQyxTQUFXLGFBQWFyb0MsUUFBYixJQUF5QkEsU0FBU3NvQyxZQUFULElBQXlCLENBQXBELEdBQ0csQ0FBQyxPQUFELENBREgsR0FDZSxDQUFDLFlBQUQsRUFBZSxnQkFBZixFQUFpQyxxQkFBakMsQ0FGNUI7QUFBQSxRQUdJNXBDLFFBQVM2QyxNQUFNQyxTQUFOLENBQWdCOUMsS0FIN0I7QUFBQSxRQUlJNnBDLHNCQUpKO0FBQUEsUUFJNEJDLFdBSjVCOztBQU1BLFFBQUtwdEMsRUFBRXdMLEtBQUYsQ0FBUTZoQyxRQUFiLEVBQXdCO0FBQ3BCLGFBQU0sSUFBSTVwQyxJQUFJdXBDLE1BQU1qcUMsTUFBcEIsRUFBNEJVLENBQTVCLEdBQWlDO0FBQzdCekQsY0FBRXdMLEtBQUYsQ0FBUTZoQyxRQUFSLENBQWtCTCxNQUFNLEVBQUV2cEMsQ0FBUixDQUFsQixJQUFpQ3pELEVBQUV3TCxLQUFGLENBQVE4aEMsVUFBekM7QUFDSDtBQUNKOztBQUVELFFBQUkxM0IsVUFBVTVWLEVBQUV3TCxLQUFGLENBQVFvSyxPQUFSLENBQWdCMjNCLFVBQWhCLEdBQTZCO0FBQ3ZDcHRDLGlCQUFTLFFBRDhCOztBQUd2QzJWLGVBQU8saUJBQVc7QUFDZCxnQkFBSyxLQUFLTCxnQkFBVixFQUE2QjtBQUN6QixxQkFBTSxJQUFJaFMsSUFBSXdwQyxPQUFPbHFDLE1BQXJCLEVBQTZCVSxDQUE3QixHQUFrQztBQUM5Qix5QkFBS2dTLGdCQUFMLENBQXVCdzNCLE9BQU8sRUFBRXhwQyxDQUFULENBQXZCLEVBQW9DbTRCLE9BQXBDLEVBQTZDLEtBQTdDO0FBQ0g7QUFDSixhQUpELE1BSU87QUFDSCxxQkFBSzRSLFlBQUwsR0FBb0I1UixPQUFwQjtBQUNIO0FBQ0Q7QUFDQTU3QixjQUFFcUIsSUFBRixDQUFPLElBQVAsRUFBYSx3QkFBYixFQUF1Q3VVLFFBQVE2M0IsYUFBUixDQUFzQixJQUF0QixDQUF2QztBQUNBenRDLGNBQUVxQixJQUFGLENBQU8sSUFBUCxFQUFhLHdCQUFiLEVBQXVDdVUsUUFBUTgzQixhQUFSLENBQXNCLElBQXRCLENBQXZDO0FBQ0gsU0Fkc0M7O0FBZ0J2Qy8zQixrQkFBVSxvQkFBVztBQUNqQixnQkFBSyxLQUFLZCxtQkFBVixFQUFnQztBQUM1QixxQkFBTSxJQUFJcFIsSUFBSXdwQyxPQUFPbHFDLE1BQXJCLEVBQTZCVSxDQUE3QixHQUFrQztBQUM5Qix5QkFBS29SLG1CQUFMLENBQTBCbzRCLE9BQU8sRUFBRXhwQyxDQUFULENBQTFCLEVBQXVDbTRCLE9BQXZDLEVBQWdELEtBQWhEO0FBQ0g7QUFDSixhQUpELE1BSU87QUFDSCxxQkFBSzRSLFlBQUwsR0FBb0IsSUFBcEI7QUFDSDtBQUNEO0FBQ0F4dEMsY0FBRTRCLFVBQUYsQ0FBYSxJQUFiLEVBQW1CLHdCQUFuQjtBQUNBNUIsY0FBRTRCLFVBQUYsQ0FBYSxJQUFiLEVBQW1CLHdCQUFuQjtBQUNILFNBM0JzQzs7QUE2QnZDNnJDLHVCQUFlLHVCQUFTanFDLElBQVQsRUFBZTtBQUMxQixnQkFBSUUsUUFBUTFELEVBQUV3RCxJQUFGLENBQVo7QUFBQSxnQkFDSXlvQixVQUFVdm9CLE1BQU0sa0JBQWtCMUQsRUFBRTJHLEVBQXBCLEdBQXlCLGNBQXpCLEdBQTBDLFFBQWhELEdBRGQ7QUFFQSxnQkFBSSxDQUFDc2xCLFFBQVFscEIsTUFBYixFQUFxQjtBQUNqQmtwQiwwQkFBVWpzQixFQUFFLE1BQUYsQ0FBVjtBQUNIO0FBQ0QsbUJBQU84a0IsU0FBU21ILFFBQVF6ZCxHQUFSLENBQVksVUFBWixDQUFULEVBQWtDLEVBQWxDLEtBQXlDc1csU0FBU3BoQixNQUFNOEssR0FBTixDQUFVLFVBQVYsQ0FBVCxFQUFnQyxFQUFoQyxDQUF6QyxJQUFnRixFQUF2RjtBQUNILFNBcENzQzs7QUFzQ3ZDay9CLHVCQUFlLHVCQUFTbHFDLElBQVQsRUFBZTtBQUMxQixtQkFBT3hELEVBQUV3RCxJQUFGLEVBQVFvRyxNQUFSLEVBQVA7QUFDSCxTQXhDc0M7O0FBMEN2Q2tyQixrQkFBVTtBQUNONlksNkJBQWlCLElBRFgsRUFDaUI7QUFDdkJDLDZCQUFpQixJQUZYLENBRWlCO0FBRmpCO0FBMUM2QixLQUEzQzs7QUFnREE1dEMsTUFBRTJHLEVBQUYsQ0FBSzhGLE1BQUwsQ0FBWTtBQUNSOGdDLG9CQUFZLG9CQUFTNW1DLEVBQVQsRUFBYTtBQUNyQixtQkFBT0EsS0FBSyxLQUFLbUIsSUFBTCxDQUFVLFlBQVYsRUFBd0JuQixFQUF4QixDQUFMLEdBQW1DLEtBQUtyRixPQUFMLENBQWEsWUFBYixDQUExQztBQUNILFNBSE87O0FBS1J1c0Msc0JBQWMsc0JBQVNsbkMsRUFBVCxFQUFhO0FBQ3ZCLG1CQUFPLEtBQUttbkMsTUFBTCxDQUFZLFlBQVosRUFBMEJubkMsRUFBMUIsQ0FBUDtBQUNIO0FBUE8sS0FBWjs7QUFXQSxhQUFTaTFCLE9BQVQsQ0FBaUJwd0IsS0FBakIsRUFBd0I7QUFDcEIsWUFBSXVpQyxXQUFhdmlDLFNBQVM5RSxPQUFPOEUsS0FBakM7QUFBQSxZQUNJL0YsT0FBYW5DLE1BQU0rQyxJQUFOLENBQVdYLFNBQVgsRUFBc0IsQ0FBdEIsQ0FEakI7QUFBQSxZQUVJcThCLFFBQWEsQ0FGakI7QUFBQSxZQUdJaU0sU0FBYSxDQUhqQjtBQUFBLFlBSUlDLFNBQWEsQ0FKakI7QUFBQSxZQUtJQyxXQUFhLENBTGpCO0FBQUEsWUFNSUMsVUFBYSxDQU5qQjtBQUFBLFlBT0lDLFVBQWEsQ0FQakI7QUFRQTVpQyxnQkFBUXhMLEVBQUV3TCxLQUFGLENBQVE2aUMsR0FBUixDQUFZTixRQUFaLENBQVI7QUFDQXZpQyxjQUFNckosSUFBTixHQUFhLFlBQWI7O0FBRUE7QUFDQSxZQUFLLFlBQWlCNHJDLFFBQXRCLEVBQWlDO0FBQUVFLHFCQUFTRixTQUFTTyxNQUFULEdBQWtCLENBQUMsQ0FBNUI7QUFBcUM7QUFDeEUsWUFBSyxnQkFBaUJQLFFBQXRCLEVBQWlDO0FBQUVFLHFCQUFTRixTQUFTUSxVQUFsQjtBQUFxQztBQUN4RSxZQUFLLGlCQUFpQlIsUUFBdEIsRUFBaUM7QUFBRUUscUJBQVNGLFNBQVNTLFdBQWxCO0FBQXFDO0FBQ3hFLFlBQUssaUJBQWlCVCxRQUF0QixFQUFpQztBQUFFQyxxQkFBU0QsU0FBU1UsV0FBVCxHQUF1QixDQUFDLENBQWpDO0FBQXFDOztBQUV4RTtBQUNBLFlBQUssVUFBVVYsUUFBVixJQUFzQkEsU0FBU1csSUFBVCxLQUFrQlgsU0FBU1ksZUFBdEQsRUFBd0U7QUFDcEVYLHFCQUFTQyxTQUFTLENBQUMsQ0FBbkI7QUFDQUEscUJBQVMsQ0FBVDtBQUNIOztBQUVEO0FBQ0FsTSxnQkFBUWtNLFdBQVcsQ0FBWCxHQUFlRCxNQUFmLEdBQXdCQyxNQUFoQzs7QUFFQTtBQUNBLFlBQUssWUFBWUYsUUFBakIsRUFBNEI7QUFDeEJFLHFCQUFTRixTQUFTRSxNQUFULEdBQWtCLENBQUMsQ0FBNUI7QUFDQWxNLG9CQUFTa00sTUFBVDtBQUNIO0FBQ0QsWUFBSyxZQUFZRixRQUFqQixFQUE0QjtBQUN4QkMscUJBQVNELFNBQVNDLE1BQWxCO0FBQ0EsZ0JBQUtDLFdBQVcsQ0FBaEIsRUFBb0I7QUFBRWxNLHdCQUFTaU0sU0FBUyxDQUFDLENBQW5CO0FBQXVCO0FBQ2hEOztBQUVEO0FBQ0EsWUFBS0MsV0FBVyxDQUFYLElBQWdCRCxXQUFXLENBQWhDLEVBQW9DO0FBQUU7QUFBUzs7QUFFL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUtELFNBQVNhLFNBQVQsS0FBdUIsQ0FBNUIsRUFBZ0M7QUFDNUIsZ0JBQUlDLGFBQWE3dUMsRUFBRXFCLElBQUYsQ0FBTyxJQUFQLEVBQWEsd0JBQWIsQ0FBakI7QUFDQTBnQyxxQkFBVThNLFVBQVY7QUFDQVosc0JBQVVZLFVBQVY7QUFDQWIsc0JBQVVhLFVBQVY7QUFDSCxTQUxELE1BS08sSUFBS2QsU0FBU2EsU0FBVCxLQUF1QixDQUE1QixFQUFnQztBQUNuQyxnQkFBSUUsYUFBYTl1QyxFQUFFcUIsSUFBRixDQUFPLElBQVAsRUFBYSx3QkFBYixDQUFqQjtBQUNBMGdDLHFCQUFVK00sVUFBVjtBQUNBYixzQkFBVWEsVUFBVjtBQUNBZCxzQkFBVWMsVUFBVjtBQUNIOztBQUVEO0FBQ0FaLG1CQUFXanJDLEtBQUt3RSxHQUFMLENBQVV4RSxLQUFLc1MsR0FBTCxDQUFTMDRCLE1BQVQsQ0FBVixFQUE0QmhyQyxLQUFLc1MsR0FBTCxDQUFTeTRCLE1BQVQsQ0FBNUIsQ0FBWDs7QUFFQSxZQUFLLENBQUNaLFdBQUQsSUFBZ0JjLFdBQVdkLFdBQWhDLEVBQThDO0FBQzFDQSwwQkFBY2MsUUFBZDs7QUFFQTtBQUNBLGdCQUFLYSxzQkFBc0JoQixRQUF0QixFQUFnQ0csUUFBaEMsQ0FBTCxFQUFpRDtBQUM3Q2QsK0JBQWUsRUFBZjtBQUNIO0FBQ0o7O0FBRUQ7QUFDQSxZQUFLMkIsc0JBQXNCaEIsUUFBdEIsRUFBZ0NHLFFBQWhDLENBQUwsRUFBaUQ7QUFDN0M7QUFDQW5NLHFCQUFVLEVBQVY7QUFDQWlNLHNCQUFVLEVBQVY7QUFDQUMsc0JBQVUsRUFBVjtBQUNIOztBQUVEO0FBQ0FsTSxnQkFBUzkrQixLQUFNOCtCLFNBQVUsQ0FBVixHQUFjLE9BQWQsR0FBd0IsTUFBOUIsRUFBdUNBLFFBQVNxTCxXQUFoRCxDQUFUO0FBQ0FZLGlCQUFTL3FDLEtBQU0rcUMsVUFBVSxDQUFWLEdBQWMsT0FBZCxHQUF3QixNQUE5QixFQUF1Q0EsU0FBU1osV0FBaEQsQ0FBVDtBQUNBYSxpQkFBU2hyQyxLQUFNZ3JDLFVBQVUsQ0FBVixHQUFjLE9BQWQsR0FBd0IsTUFBOUIsRUFBdUNBLFNBQVNiLFdBQWhELENBQVQ7O0FBRUE7QUFDQSxZQUFLeDNCLFFBQVFrZixRQUFSLENBQWlCOFksZUFBakIsSUFBb0MsS0FBSzFqQyxxQkFBOUMsRUFBc0U7QUFDbEUsZ0JBQUk4a0MsZUFBZSxLQUFLOWtDLHFCQUFMLEVBQW5CO0FBQ0Fpa0Msc0JBQVUzaUMsTUFBTW9MLE9BQU4sR0FBZ0JvNEIsYUFBYXhsQyxJQUF2QztBQUNBNGtDLHNCQUFVNWlDLE1BQU1xTCxPQUFOLEdBQWdCbTRCLGFBQWExbEMsR0FBdkM7QUFDSDs7QUFFRDtBQUNBa0MsY0FBTXdpQyxNQUFOLEdBQWVBLE1BQWY7QUFDQXhpQyxjQUFNeWlDLE1BQU4sR0FBZUEsTUFBZjtBQUNBemlDLGNBQU15akMsV0FBTixHQUFvQjdCLFdBQXBCO0FBQ0E1aEMsY0FBTTJpQyxPQUFOLEdBQWdCQSxPQUFoQjtBQUNBM2lDLGNBQU00aUMsT0FBTixHQUFnQkEsT0FBaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTVpQyxjQUFNb2pDLFNBQU4sR0FBa0IsQ0FBbEI7O0FBRUE7QUFDQW5wQyxhQUFLeXBDLE9BQUwsQ0FBYTFqQyxLQUFiLEVBQW9CdTJCLEtBQXBCLEVBQTJCaU0sTUFBM0IsRUFBbUNDLE1BQW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBSWQsc0JBQUosRUFBNEI7QUFBRXpsQyx5QkFBYXlsQyxzQkFBYjtBQUF1QztBQUNyRUEsaUNBQXlCbG9DLFdBQVdrcUMsZUFBWCxFQUE0QixHQUE1QixDQUF6Qjs7QUFFQSxlQUFPLENBQUNudkMsRUFBRXdMLEtBQUYsQ0FBUTRqQyxRQUFSLElBQW9CcHZDLEVBQUV3TCxLQUFGLENBQVE2akMsTUFBN0IsRUFBcUMxcEMsS0FBckMsQ0FBMkMsSUFBM0MsRUFBaURGLElBQWpELENBQVA7QUFDSDs7QUFFRCxhQUFTMHBDLGVBQVQsR0FBMkI7QUFDdkIvQixzQkFBYyxJQUFkO0FBQ0g7O0FBRUQsYUFBUzJCLHFCQUFULENBQStCaEIsUUFBL0IsRUFBeUNHLFFBQXpDLEVBQW1EO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBT3Q0QixRQUFRa2YsUUFBUixDQUFpQjZZLGVBQWpCLElBQW9DSSxTQUFTNXJDLElBQVQsS0FBa0IsWUFBdEQsSUFBc0UrckMsV0FBVyxHQUFYLEtBQW1CLENBQWhHO0FBQ0g7QUFFSixDQXBOQSxDQUFEOzs7OztBQ1JBOzs7O0FBSUMsV0FBVW9CLElBQVYsRUFBZ0J6YyxPQUFoQixFQUF5QjtBQUN4QixRQUFJLE9BQU9DLE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0NBLE9BQU9DLEdBQTNDLEVBQWdEO0FBQzlDO0FBQ0FELGVBQU8sQ0FBQyxRQUFELENBQVAsRUFBbUIsVUFBVXljLEVBQVYsRUFBYztBQUMvQixtQkFBUTFjLFFBQVEwYyxFQUFSLENBQVI7QUFDRCxTQUZEO0FBR0QsS0FMRCxNQUtPLElBQUksUUFBT3ZjLE9BQVAseUNBQU9BLE9BQVAsT0FBbUIsUUFBdkIsRUFBaUM7QUFDdEM7QUFDQTtBQUNBO0FBQ0ErWixlQUFPL1osT0FBUCxHQUFpQkgsUUFBUUksUUFBUSxRQUFSLENBQVIsQ0FBakI7QUFDRCxLQUxNLE1BS0E7QUFDTEosZ0JBQVFqcUIsTUFBUjtBQUNEO0FBQ0YsQ0FkQSxhQWNPLFVBQVU1SSxDQUFWLEVBQWE7O0FBRXJCLEtBQUMsWUFBVztBQUNSOztBQUVBLFlBQUltWixXQUFXOztBQUVYcTJCLGtCQUFNLFVBRks7O0FBSVg7QUFDQUMsdUJBQVcsTUFMQTs7QUFPWDtBQUNBOXBCLG9CQUFRLFFBUkc7QUFTWG1jLG1CQUFPLEdBVEk7QUFVWGw0QixvQkFBUSxNQVZHO0FBV1hDLG1CQUFPLE1BWEk7QUFZWG1JLHNCQUFVLEVBWkM7QUFhWDA5Qix3QkFBWSxlQWJEO0FBY1hDLDhCQUFrQixHQWRQO0FBZVhDLDJCQUFlLElBZko7O0FBaUJYQyxxQkFBUyxLQWpCRTs7QUFtQlhDLHNCQUFVLElBbkJDO0FBb0JYMVQsa0JBQU0sSUFwQks7QUFxQlgyVCxvQkFBUSxJQXJCRztBQXNCWEMsc0JBQVUsSUF0QkM7QUF1QlhDLHNCQUFVLElBdkJDO0FBd0JYQywrQkFBbUIsSUF4QlI7QUF5QlhDLDhCQUFrQixLQXpCUDtBQTBCWDVDLHdCQUFZLElBMUJEOztBQTRCWDZDLHNDQUEwQixJQTVCZjs7QUE4Qlg7QUFDQUMsNkJBQWlCLGNBL0JOOztBQWlDWEMscUNBQXlCLEtBakNkOztBQW1DWDs7Ozs7Ozs7O0FBU0FDLHFCQUFTLENBNUNFO0FBNkNYQywyQkFBZSxJQTdDSjtBQThDWEMsc0JBQVUsRUE5Q0M7QUErQ1hDLDBCQUFjLEVBL0NIO0FBZ0RYQyxzQkFBVSxFQWhEQztBQWlEWEMsc0JBQVUsRUFqREM7O0FBbURYO0FBQ0FwUixtQkFBTyxLQXBESTs7QUFzRFhxUiw0QkFBZ0IsTUF0REw7O0FBd0RYQyxzQkFBVSxJQXhEQztBQXlEWEMscUJBQVMsSUF6REU7QUEwRFhDLDZCQUFpQixhQTFETjs7QUE0RFhDLDRCQUFnQixFQTVETDtBQTZEWEMseUJBQWEsSUE3REY7QUE4RFhDLHdCQUFZLElBOUREOztBQWdFWEMscUJBQVMsS0FoRUU7QUFpRVhDLHVCQUFXLEVBakVBO0FBa0VYQyx1QkFBVztBQWxFQSxTQUFmOztBQXFFQSxpQkFBU0MsTUFBVCxDQUFnQnRvQyxPQUFoQixFQUF5Qm1LLE9BQXpCLEVBQWtDOztBQUU5QjtBQUNBLGlCQUFLL08sRUFBTCxHQUFVNEUsT0FBVjs7QUFFQTtBQUNBLGlCQUFLcEYsR0FBTCxHQUFXN0QsRUFBRWlKLE9BQUYsQ0FBWDs7QUFFQTtBQUNBLGlCQUFLbXFCLENBQUwsR0FBU3B6QixFQUFFeU0sTUFBRixDQUFTLEVBQVQsRUFBYTBNLFFBQWIsRUFBdUIvRixPQUF2QixDQUFUOztBQUVBO0FBQ0EsZ0JBQUksS0FBS2dnQixDQUFMLENBQU9nZSxPQUFQLElBQWtCLEtBQUtoZSxDQUFMLENBQU9pZSxTQUFQLEtBQXFCLFdBQXZDLElBQXNELEtBQUtqZSxDQUFMLENBQU9pZSxTQUFQLENBQWlCcndDLFdBQWpCLEtBQWlDbUYsS0FBdkYsSUFBZ0csQ0FBQyxLQUFLaXRCLENBQUwsQ0FBT2llLFNBQVAsQ0FBaUJ0dUMsTUFBdEgsRUFBOEg7QUFDMUgsc0JBQU8sc0VBQVA7QUFDSDs7QUFFRDtBQUNBLGlCQUFLeXVDLE9BQUwsR0FBZSxFQUFmOztBQUVBO0FBQ0EsaUJBQUtDLFVBQUwsR0FBa0IsS0FBbEI7O0FBRUEsaUJBQUtDLE1BQUwsR0FBYyxLQUFkOztBQUVBO0FBQ0EsaUJBQUtDLGNBQUwsR0FBc0IsS0FBdEI7O0FBRUE7QUFDQSxpQkFBS0MsT0FBTCxHQUFnQixrQkFBa0JodEMsU0FBU3dQLGVBQTNDOztBQUVBO0FBQ0EsZ0JBQUksS0FBS2dmLENBQUwsQ0FBTzhjLGlCQUFYLEVBQThCO0FBQzFCLHFCQUFLOWMsQ0FBTCxDQUFPK2MsZ0JBQVAsR0FBMEIsS0FBMUI7QUFDSDs7QUFFRDtBQUNBLGdCQUFJLEtBQUsvYyxDQUFMLENBQU9nZSxPQUFYLEVBQW9CO0FBQ2hCLHFCQUFLUyxNQUFMLEdBQWMsS0FBS3plLENBQUwsQ0FBT2llLFNBQXJCO0FBQ0gsYUFGRCxNQUVPO0FBQ0gsb0JBQUksS0FBS2plLENBQUwsQ0FBT3FkLFFBQVAsS0FBb0IsTUFBeEIsRUFBZ0M7QUFDNUIseUJBQUtvQixNQUFMLEdBQWMsS0FBS2h1QyxHQUFuQjtBQUNILGlCQUZELE1BRU8sSUFBSSxLQUFLdXZCLENBQUwsQ0FBT3FkLFFBQVAsS0FBb0IsRUFBeEIsRUFBNEI7QUFDL0Isd0JBQUksS0FBS3JkLENBQUwsQ0FBT3NkLFlBQVgsRUFBeUI7QUFDckIsNkJBQUttQixNQUFMLEdBQWM3eEMsRUFBRSxLQUFLb3pCLENBQUwsQ0FBT3NkLFlBQVQsRUFBdUIvc0MsSUFBdkIsQ0FBNEIsS0FBS3l2QixDQUFMLENBQU9xZCxRQUFuQyxDQUFkO0FBQ0gscUJBRkQsTUFFTztBQUNILDZCQUFLb0IsTUFBTCxHQUFjLEtBQUtodUMsR0FBTCxDQUFTRixJQUFULENBQWMzRCxFQUFFLEtBQUtvekIsQ0FBTCxDQUFPcWQsUUFBVCxDQUFkLENBQWQ7QUFDSDtBQUNKLGlCQU5NLE1BTUE7QUFDSCx5QkFBS29CLE1BQUwsR0FBYyxLQUFLaHVDLEdBQUwsQ0FBU29QLFFBQVQsRUFBZDtBQUNIO0FBQ0o7O0FBRUQ7QUFDQSxpQkFBSzYrQixNQUFMLEdBQWMsRUFBZDs7QUFFQTtBQUNBLGlCQUFLQyxNQUFMLEdBQWMsRUFBZDs7QUFFQSxpQkFBS3I4QixJQUFMOztBQUVBLG1CQUFPLElBQVA7QUFDSDs7QUFFRDY3QixlQUFPbnJDLFNBQVAsQ0FBaUJzUCxJQUFqQixHQUF3QixZQUFXOztBQUUvQixnQkFBSXRULFFBQVEsSUFBWjs7QUFFQTtBQUNBLGdCQUFJQSxNQUFNZ3hCLENBQU4sQ0FBUW1kLE9BQVIsR0FBa0JudUMsTUFBTXl2QyxNQUFOLENBQWE5dUMsTUFBbkMsRUFBMkM7QUFDdkNYLHNCQUFNZ3hCLENBQU4sQ0FBUW1kLE9BQVIsR0FBa0JudUMsTUFBTXl2QyxNQUFOLENBQWE5dUMsTUFBL0I7QUFDSDs7QUFFRDtBQUNBLGdCQUFJaXZDLFFBQVF0ckMsT0FBT3lYLFFBQVAsQ0FBZ0JDLElBQTVCO0FBQ0EsZ0JBQUk0ekIsTUFBTXR3QyxPQUFOLENBQWMsUUFBUSxLQUFLMHhCLENBQUwsQ0FBT2tlLFNBQTdCLElBQTBDLENBQTlDLEVBQWlEOztBQUU3Q2x2QyxzQkFBTW85QixLQUFOLEdBQWMxYSxTQUFTa3RCLE1BQU0vdEMsS0FBTixDQUFZLFNBQVosRUFBdUIsQ0FBdkIsQ0FBVCxFQUFvQyxFQUFwQyxDQUFkOztBQUVBakUsa0JBQUUsTUFBRixFQUFVZ1MsUUFBVixDQUFtQixjQUFuQjtBQUNBLG9CQUFJLENBQUNoUyxFQUFFLE1BQUYsRUFBVXVlLFFBQVYsQ0FBbUIsT0FBbkIsQ0FBTCxFQUFrQztBQUM5QnRaLCtCQUFXLFlBQVc7QUFDbEI3Qyw4QkFBTTZ2QyxLQUFOLENBQVk3dkMsTUFBTW85QixLQUFsQjtBQUNILHFCQUZEOztBQUlBeC9CLHNCQUFFLE1BQUYsRUFBVWdTLFFBQVYsQ0FBbUIsT0FBbkI7QUFDSDtBQUNKOztBQUVELGdCQUFJNVAsTUFBTWd4QixDQUFOLENBQVFnZSxPQUFaLEVBQXFCOztBQUVqQmh2QyxzQkFBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0IsaUJBQWxCOztBQUVBYyxzQkFBTW85QixLQUFOLEdBQWNwOUIsTUFBTWd4QixDQUFOLENBQVFvTSxLQUFSLElBQWlCLENBQS9COztBQUVBO0FBQ0Esb0JBQUksQ0FBQ3gvQixFQUFFLE1BQUYsRUFBVXVlLFFBQVYsQ0FBbUIsT0FBbkIsQ0FBTCxFQUFrQztBQUM5QnRaLCtCQUFXLFlBQVc7QUFDbEI3Qyw4QkFBTTZ2QyxLQUFOLENBQVk3dkMsTUFBTW85QixLQUFsQjtBQUNBeC9CLDBCQUFFLE1BQUYsRUFBVWdTLFFBQVYsQ0FBbUIsT0FBbkI7QUFDSCxxQkFIRDtBQUlIO0FBQ0osYUFiRCxNQWFPOztBQUVIO0FBQ0E1UCxzQkFBTXl2QyxNQUFOLENBQWF0a0MsRUFBYixDQUFnQixnQkFBaEIsRUFBa0MsVUFBUy9CLEtBQVQsRUFBZ0I7O0FBRTlDO0FBQ0Esd0JBQUk7QUFDQUEsOEJBQU1pQyxjQUFOO0FBQ0FqQyw4QkFBTWlDLGNBQU47QUFDSCxxQkFIRCxDQUdFLE9BQU9qSixFQUFQLEVBQVc7QUFDVGdILDhCQUFNa0IsV0FBTixHQUFvQixLQUFwQjtBQUNIOztBQUVEdEssMEJBQU15QixHQUFOLENBQVV2QyxPQUFWLENBQWtCLGlCQUFsQjs7QUFFQWMsMEJBQU1vOUIsS0FBTixHQUFjcDlCLE1BQU1neEIsQ0FBTixDQUFRb00sS0FBUixJQUFpQnA5QixNQUFNeXZDLE1BQU4sQ0FBYXJTLEtBQWIsQ0FBbUIsSUFBbkIsQ0FBL0I7O0FBRUE7QUFDQSx3QkFBSSxDQUFDeC9CLEVBQUUsTUFBRixFQUFVdWUsUUFBVixDQUFtQixPQUFuQixDQUFMLEVBQWtDO0FBQzlCbmMsOEJBQU02dkMsS0FBTixDQUFZN3ZDLE1BQU1vOUIsS0FBbEI7QUFDQXgvQiwwQkFBRSxNQUFGLEVBQVVnUyxRQUFWLENBQW1CLE9BQW5CO0FBQ0g7QUFDSixpQkFuQkQ7QUFvQkg7QUFFSixTQS9ERDs7QUFpRUF1L0IsZUFBT25yQyxTQUFQLENBQWlCNnJDLEtBQWpCLEdBQXlCLFVBQVN6UyxLQUFULEVBQWdCOztBQUVyQyxnQkFBSXA5QixRQUFRLElBQVo7O0FBRUFBLGtCQUFNOHZDLFNBQU47O0FBRUE7QUFDQWx5QyxjQUFFaUMsSUFBRixDQUFPakMsRUFBRTJHLEVBQUYsQ0FBS3dyQyxZQUFMLENBQWtCWCxPQUF6QixFQUFrQyxVQUFTL2xDLEdBQVQsRUFBYztBQUM1Q3JKLHNCQUFNb3ZDLE9BQU4sQ0FBYy9sQyxHQUFkLElBQXFCLElBQUl6TCxFQUFFMkcsRUFBRixDQUFLd3JDLFlBQUwsQ0FBa0JYLE9BQWxCLENBQTBCL2xDLEdBQTFCLENBQUosQ0FBbUNySixNQUFNaUMsRUFBekMsQ0FBckI7QUFDSCxhQUZEOztBQUlBO0FBQ0FqQyxrQkFBTWd3QyxLQUFOLENBQVk1UyxLQUFaLEVBQW1CLEtBQW5CLEVBQTBCLEtBQTFCLEVBQWlDLEtBQWpDOztBQUVBLGdCQUFJcDlCLE1BQU1neEIsQ0FBTixDQUFRNGMsUUFBWixFQUFzQjtBQUNsQjV0QyxzQkFBTTR0QyxRQUFOO0FBQ0g7O0FBRUQsZ0JBQUk1dEMsTUFBTXl2QyxNQUFOLENBQWE5dUMsTUFBYixHQUFzQixDQUExQixFQUE2Qjs7QUFFekJYLHNCQUFNaXdDLEtBQU47O0FBRUFwdEMsMkJBQVcsWUFBVztBQUNsQjdDLDBCQUFNK3VDLFVBQU47QUFDQS91QywwQkFBTTh1QyxXQUFOO0FBQ0gsaUJBSEQsRUFHRyxFQUhIOztBQUtBLG9CQUFJOXVDLE1BQU1neEIsQ0FBTixDQUFRbWEsVUFBWixFQUF3QjtBQUNwQm5yQywwQkFBTW1yQyxVQUFOO0FBQ0g7QUFDSjs7QUFFRG5yQyxrQkFBTTJ1QyxPQUFOOztBQUVBM3VDLGtCQUFNa3dDLFlBQU47O0FBRUFsd0Msa0JBQU15QixHQUFOLENBQVV2QyxPQUFWLENBQWtCLGdCQUFsQjs7QUFFQTtBQUNBYyxrQkFBTTJ2QyxNQUFOLENBQWF4a0MsRUFBYixDQUFnQixxQ0FBaEIsRUFBdUQsWUFBVzs7QUFFOURuTCxzQkFBTTJ2QyxNQUFOLENBQWE5ckMsV0FBYixDQUF5QixlQUF6Qjs7QUFFQXlCLDZCQUFhdEYsTUFBTXV2QyxjQUFuQjs7QUFFQTtBQUNBdnZDLHNCQUFNdXZDLGNBQU4sR0FBdUIxc0MsV0FBVyxZQUFXO0FBQ3pDN0MsMEJBQU0ydkMsTUFBTixDQUFhLy9CLFFBQWIsQ0FBc0IsZUFBdEI7QUFDSCxpQkFGc0IsRUFFcEI1UCxNQUFNZ3hCLENBQU4sQ0FBUXdjLGFBRlksQ0FBdkI7QUFJSCxhQVhEOztBQWFBeHRDLGtCQUFNMnZDLE1BQU4sQ0FBYXp3QyxPQUFiLENBQXFCLGNBQXJCO0FBRUgsU0F0REQ7O0FBd0RBaXdDLGVBQU9uckMsU0FBUCxDQUFpQjhyQyxTQUFqQixHQUE2QixZQUFXO0FBQ3BDLGdCQUFJSyxPQUFPLEVBQVg7QUFDQSxnQkFBSXRDLFdBQVcsRUFBZjtBQUNBLGdCQUFJeHNDLElBQUksQ0FBUjtBQUNBLGdCQUFJK3VDLGNBQWMsRUFBbEI7QUFDQSxnQkFBSUMsUUFBSjtBQUNBLGdCQUFJcndDLFFBQVEsSUFBWjs7QUFFQXBDLGNBQUUsTUFBRixFQUFVa25CLE1BQVYsQ0FBaUIsaUNBQWpCO0FBQ0FsbkIsY0FBRSxjQUFGLEVBQWtCd08sR0FBbEIsQ0FBc0IscUJBQXRCLEVBQTZDLEtBQUs0a0IsQ0FBTCxDQUFPdWMsZ0JBQVAsR0FBMEIsSUFBdkU7O0FBRUE7QUFDQSxpQkFBS2xzQyxJQUFJLENBQVQsRUFBWUEsSUFBSSxLQUFLb3VDLE1BQUwsQ0FBWTl1QyxNQUE1QixFQUFvQ1UsR0FBcEMsRUFBeUM7QUFDckM4dUMsd0JBQVEsNkJBQVI7QUFDSDs7QUFFRDtBQUNBLGdCQUFJLEtBQUtuZixDQUFMLENBQU82YyxRQUFQLElBQW1CLEtBQUs0QixNQUFMLENBQVk5dUMsTUFBWixHQUFxQixDQUE1QyxFQUErQztBQUMzQ2t0QywyQkFBVyw2QkFDUCwrQkFETyxHQUMyQixLQUFLN2MsQ0FBTCxDQUFPd2QsUUFEbEMsR0FDNkMsUUFEN0MsR0FFUCwrQkFGTyxHQUUyQixLQUFLeGQsQ0FBTCxDQUFPdWQsUUFGbEMsR0FFNkMsUUFGN0MsR0FHUCxRQUhKO0FBSUg7O0FBRUQsZ0JBQUksS0FBS3ZkLENBQUwsQ0FBT2lkLGVBQVAsS0FBMkIsY0FBL0IsRUFBK0M7QUFDM0NtQyw4QkFBYyxpQ0FBZDtBQUNIOztBQUVEQyx1QkFBVywwQkFBMEIsS0FBS3JmLENBQUwsQ0FBT3BoQixRQUFqQyxHQUE0QyxHQUE1QyxHQUFrRCxLQUFLb2hCLENBQUwsQ0FBT3NjLFVBQXpELEdBQXNFLElBQXRFLEdBQ1AsK0JBRE8sR0FDMkIsS0FBS3RjLENBQUwsQ0FBT3ZwQixLQURsQyxHQUMwQyxXQUQxQyxHQUN3RCxLQUFLdXBCLENBQUwsQ0FBT3hwQixNQUQvRCxHQUN3RSxJQUR4RSxHQUVQLHdCQUZPLEdBRW9CMm9DLElBRnBCLEdBRTJCLFFBRjNCLEdBR1AsbUNBSE8sR0FJUCx3Q0FKTyxHQUtQLFFBTE8sR0FNUHRDLFFBTk8sR0FPUHVDLFdBUE8sR0FRUCxRQVJPLEdBU1AsUUFUSjs7QUFXQXh5QyxjQUFFLE1BQUYsRUFBVWtuQixNQUFWLENBQWlCdXJCLFFBQWpCO0FBQ0EsaUJBQUtWLE1BQUwsR0FBYy94QyxFQUFFLFdBQUYsQ0FBZDtBQUNBLGlCQUFLOHhDLE1BQUwsR0FBYyxLQUFLQyxNQUFMLENBQVlwdUMsSUFBWixDQUFpQixVQUFqQixDQUFkOztBQUVBLGdCQUFJLEtBQUt5dkIsQ0FBTCxDQUFPeWMsT0FBWCxFQUFvQjtBQUNoQixxQkFBS2tDLE1BQUwsQ0FBWS8vQixRQUFaLENBQXFCLGFBQXJCOztBQUVBO0FBQ0EscUJBQUtvaEIsQ0FBTCxDQUFPb2MsSUFBUCxHQUFjLFVBQWQ7QUFDSCxhQUxELE1BS087QUFDSCxxQkFBS3VDLE1BQUwsQ0FBWS8vQixRQUFaLENBQXFCLGFBQXJCO0FBQ0g7O0FBRUQ7QUFDQTVQLGtCQUFNc3dDLE1BQU47QUFDQTF5QyxjQUFFMEcsTUFBRixFQUFVNkcsRUFBVixDQUFhLGdDQUFiLEVBQStDLFlBQVc7QUFDdER0SSwyQkFBVyxZQUFXO0FBQ2xCN0MsMEJBQU1zd0MsTUFBTjtBQUNILGlCQUZELEVBRUcsR0FGSDtBQUdILGFBSkQ7O0FBTUE7QUFDQSxpQkFBS1osTUFBTCxDQUFZemtDLEVBQVosQ0FBZSxLQUFLbXlCLEtBQXBCLEVBQTJCeHRCLFFBQTNCLENBQW9DLFlBQXBDOztBQUVBO0FBQ0EsZ0JBQUksS0FBSzJnQyxLQUFMLEVBQUosRUFBa0I7QUFDZCxxQkFBS1osTUFBTCxDQUFZLy9CLFFBQVosQ0FBcUIsU0FBckI7QUFDSCxhQUZELE1BRU87QUFDSCxxQkFBSysvQixNQUFMLENBQVkvL0IsUUFBWixDQUFxQixRQUFyQjs7QUFFQTtBQUNBLHFCQUFLb2hCLENBQUwsQ0FBTzBPLEtBQVAsR0FBZSxDQUFmO0FBQ0g7O0FBRUQsaUJBQUtpUSxNQUFMLENBQVkvL0IsUUFBWixDQUFxQixLQUFLb2hCLENBQUwsQ0FBT29jLElBQTVCOztBQUVBLGdCQUFJLEtBQUtwYyxDQUFMLENBQU8rZCxVQUFQLElBQXFCLEtBQUtVLE1BQUwsQ0FBWTl1QyxNQUFaLEdBQXFCLENBQTlDLEVBQWlEO0FBQzdDLHFCQUFLZ3ZDLE1BQUwsQ0FBWS8vQixRQUFaLENBQXFCLFNBQXJCO0FBQ0g7O0FBRUQsZ0JBQUksS0FBS29oQixDQUFMLENBQU9vZCxhQUFYLEVBQTBCO0FBQ3RCLHFCQUFLdUIsTUFBTCxDQUFZLy9CLFFBQVosQ0FBcUIsb0JBQXJCO0FBQ0g7O0FBRUQsZ0JBQUksS0FBSzJnQyxLQUFMLEVBQUosRUFBa0I7QUFDZCxvQkFBSUMsU0FBUyxLQUFLYixNQUFMLENBQVlwdUMsSUFBWixDQUFpQixXQUFqQixDQUFiO0FBQ0FpdkMsdUJBQU9wa0MsR0FBUCxDQUFXLDRCQUFYLEVBQXlDLEtBQUs0a0IsQ0FBTCxDQUFPcWMsU0FBaEQ7QUFDQW1ELHVCQUFPcGtDLEdBQVAsQ0FBVyxxQkFBWCxFQUFrQyxLQUFLNGtCLENBQUwsQ0FBTzBPLEtBQVAsR0FBZSxJQUFqRDtBQUNIOztBQUVENzhCLHVCQUFXLFlBQVc7QUFDbEJqRixrQkFBRSxjQUFGLEVBQWtCZ1MsUUFBbEIsQ0FBMkIsSUFBM0I7QUFDSCxhQUZEOztBQUlBL00sdUJBQVcsWUFBVztBQUNsQjdDLHNCQUFNMnZDLE1BQU4sQ0FBYS8vQixRQUFiLENBQXNCLFlBQXRCO0FBQ0gsYUFGRCxFQUVHLEtBQUtvaEIsQ0FBTCxDQUFPdWMsZ0JBRlY7O0FBSUEsZ0JBQUksS0FBS3ZjLENBQUwsQ0FBTzBkLFFBQVgsRUFBcUI7QUFDakIscUJBQUtpQixNQUFMLENBQVlwdUMsSUFBWixDQUFpQixhQUFqQixFQUFnQ3VqQixNQUFoQyxDQUF1QywrRUFBdkM7QUFDSDs7QUFFRDtBQUNBLGlCQUFLMnJCLGFBQUwsR0FBcUI3eUMsRUFBRTBHLE1BQUYsRUFBVWdZLFNBQVYsRUFBckI7QUFFSCxTQXhHRDs7QUEwR0E7QUFDQTZ5QixlQUFPbnJDLFNBQVAsQ0FBaUJzc0MsTUFBakIsR0FBMEIsWUFBVztBQUNqQyxnQkFBSSxLQUFLdGYsQ0FBTCxDQUFPeHBCLE1BQVAsS0FBa0IsTUFBdEIsRUFBOEI7QUFDMUIsb0JBQUlrcEMsS0FBSzl5QyxFQUFFMEcsTUFBRixFQUFVa0QsTUFBVixFQUFUO0FBQ0Esb0JBQUlOLE1BQU0sQ0FBQ3dwQyxLQUFLaHVCLFNBQVMsS0FBS3NPLENBQUwsQ0FBT3hwQixNQUFoQixFQUF3QixFQUF4QixDQUFOLElBQXFDLENBQS9DO0FBQ0Esb0JBQUltcEMsWUFBWSxLQUFLaEIsTUFBTCxDQUFZcHVDLElBQVosQ0FBaUIsS0FBakIsQ0FBaEI7QUFDQSxvQkFBSW12QyxNQUFNaHVCLFNBQVMsS0FBS3NPLENBQUwsQ0FBT3hwQixNQUFoQixFQUF3QixFQUF4QixDQUFWLEVBQXVDO0FBQ25DbXBDLDhCQUFVdmtDLEdBQVYsQ0FBYyxLQUFkLEVBQXFCbEYsTUFBTSxJQUEzQjtBQUNILGlCQUZELE1BRU87QUFDSHlwQyw4QkFBVXZrQyxHQUFWLENBQWMsS0FBZCxFQUFxQixLQUFyQjtBQUNIO0FBQ0o7QUFDSixTQVhEOztBQWFBO0FBQ0EraUMsZUFBT25yQyxTQUFQLENBQWlCdXNDLEtBQWpCLEdBQXlCLFlBQVc7QUFDaEM7QUFDQSxnQkFBSWxSLFVBQVUsU0FBVkEsT0FBVSxHQUFXO0FBQ3JCLG9CQUFJN2EsYUFBYSxDQUFDLFlBQUQsRUFBZSxlQUFmLEVBQWdDLGtCQUFoQyxFQUFvRCxhQUFwRCxFQUFtRSxjQUFuRSxFQUFtRixpQkFBbkYsQ0FBakI7QUFDQSxvQkFBSTBvQixPQUFPMXFDLFNBQVN3UCxlQUFwQjtBQUNBLG9CQUFJM1EsSUFBSSxDQUFSO0FBQ0EscUJBQUtBLElBQUksQ0FBVCxFQUFZQSxJQUFJbWpCLFdBQVc3akIsTUFBM0IsRUFBbUNVLEdBQW5DLEVBQXdDO0FBQ3BDLHdCQUFJbWpCLFdBQVduakIsQ0FBWCxLQUFpQjZyQyxLQUFLdHFDLEtBQTFCLEVBQWlDO0FBQzdCLCtCQUFPLElBQVA7QUFDSDtBQUNKO0FBQ0osYUFURDs7QUFXQSxnQkFBSXk4QixTQUFKLEVBQWU7QUFDWCx1QkFBTyxJQUFQO0FBQ0g7O0FBRUQsbUJBQU8sS0FBUDtBQUNILFNBbEJEOztBQW9CQTs7Ozs7O0FBTUE4UCxlQUFPbnJDLFNBQVAsQ0FBaUI0c0MsT0FBakIsR0FBMkIsVUFBUy8rQixHQUFULEVBQWN1ckIsS0FBZCxFQUFxQjs7QUFFNUMsZ0JBQUlqYixJQUFKO0FBQ0EsZ0JBQUksS0FBSzZPLENBQUwsQ0FBT2dlLE9BQVgsRUFBb0I7QUFDaEI3c0IsdUJBQU8sS0FBSzZPLENBQUwsQ0FBT2llLFNBQVAsQ0FBaUI3UixLQUFqQixFQUF3QmpiLElBQS9CO0FBQ0gsYUFGRCxNQUVPO0FBQ0hBLHVCQUFPLEtBQUtzdEIsTUFBTCxDQUFZeGtDLEVBQVosQ0FBZW15QixLQUFmLEVBQXNCai9CLElBQXRCLENBQTJCLFdBQTNCLENBQVA7QUFDSDs7QUFFRCxnQkFBSSxDQUFDMFQsR0FBRCxJQUFRc1EsSUFBWixFQUFrQjtBQUNkLHVCQUFPO0FBQ0gwdUIsMkJBQU87QUFESixpQkFBUDtBQUdIOztBQUVELGdCQUFJQyxVQUFVai9CLElBQUkrUCxLQUFKLENBQVUsK0VBQVYsQ0FBZDtBQUNBLGdCQUFJbXZCLFFBQVFsL0IsSUFBSStQLEtBQUosQ0FBVSwwQ0FBVixDQUFaO0FBQ0EsZ0JBQUlvdkIsY0FBY24vQixJQUFJK1AsS0FBSixDQUFVLHVDQUFWLENBQWxCO0FBQ0EsZ0JBQUlxdkIsS0FBS3AvQixJQUFJK1AsS0FBSixDQUFVLG9FQUFWLENBQVQ7O0FBRUEsZ0JBQUlrdkIsT0FBSixFQUFhO0FBQ1QsdUJBQU87QUFDSEEsNkJBQVNBO0FBRE4saUJBQVA7QUFHSCxhQUpELE1BSU8sSUFBSUMsS0FBSixFQUFXO0FBQ2QsdUJBQU87QUFDSEEsMkJBQU9BO0FBREosaUJBQVA7QUFHSCxhQUpNLE1BSUEsSUFBSUMsV0FBSixFQUFpQjtBQUNwQix1QkFBTztBQUNIQSxpQ0FBYUE7QUFEVixpQkFBUDtBQUdILGFBSk0sTUFJQSxJQUFJQyxFQUFKLEVBQVE7QUFDWCx1QkFBTztBQUNIQSx3QkFBSUE7QUFERCxpQkFBUDtBQUdIO0FBQ0osU0FyQ0Q7O0FBdUNBOzs7O0FBSUE5QixlQUFPbnJDLFNBQVAsQ0FBaUIycUMsT0FBakIsR0FBMkIsWUFBVztBQUNsQyxnQkFBSSxLQUFLM2QsQ0FBTCxDQUFPMmQsT0FBWCxFQUFvQjtBQUNoQi93QyxrQkFBRSxLQUFLb3pCLENBQUwsQ0FBTzRkLGVBQVQsRUFBMEI5cEIsTUFBMUIsQ0FBaUMseURBQXlEcEMsU0FBUyxLQUFLMGEsS0FBZCxFQUFxQixFQUFyQixJQUEyQixDQUFwRixJQUF5RixzQ0FBekYsR0FBa0ksS0FBS3FTLE1BQUwsQ0FBWTl1QyxNQUE5SSxHQUF1SixlQUF4TDtBQUNIO0FBQ0osU0FKRDs7QUFNQTs7OztBQUlBd3VDLGVBQU9uckMsU0FBUCxDQUFpQmt0QyxPQUFqQixHQUEyQixVQUFTOVQsS0FBVCxFQUFnQjtBQUN2QyxnQkFBSStULFVBQVUsSUFBZDtBQUNBLGdCQUFJQyxVQUFKO0FBQ0EsZ0JBQUlDLFdBQUo7QUFDQSxnQkFBSSxLQUFLcmdCLENBQUwsQ0FBT2dlLE9BQVgsRUFBb0I7QUFDaEIsb0JBQUksS0FBS2hlLENBQUwsQ0FBT2llLFNBQVAsQ0FBaUI3UixLQUFqQixFQUF3QmdVLFVBQTVCLEVBQXdDO0FBQ3BDQSxpQ0FBYSxLQUFLcGdCLENBQUwsQ0FBT2llLFNBQVAsQ0FBaUI3UixLQUFqQixFQUF3QmdVLFVBQXJDO0FBQ0gsaUJBRkQsTUFFTztBQUNIRCw4QkFBVSxLQUFLbmdCLENBQUwsQ0FBT2llLFNBQVAsQ0FBaUI3UixLQUFqQixFQUF3QitULE9BQWxDO0FBQ0g7QUFDSixhQU5ELE1BTU87QUFDSEUsOEJBQWMsS0FBSzVCLE1BQUwsQ0FBWXhrQyxFQUFaLENBQWVteUIsS0FBZixDQUFkO0FBQ0Esb0JBQUlpVSxZQUFZbHpDLElBQVosQ0FBaUIsbUJBQWpCLENBQUosRUFBMkM7QUFDdkNpekMsaUNBQWFDLFlBQVlsekMsSUFBWixDQUFpQixtQkFBakIsQ0FBYjtBQUNILGlCQUZELE1BRU87QUFDSGd6Qyw4QkFBVUUsWUFBWWx6QyxJQUFaLENBQWlCLGVBQWpCLENBQVY7QUFDQSx3QkFBSSxLQUFLNnlCLENBQUwsQ0FBT2dkLHdCQUFQLElBQW1DLENBQUNtRCxPQUF4QyxFQUFpRDtBQUM3Q0Esa0NBQVVFLFlBQVlsekMsSUFBWixDQUFpQixPQUFqQixLQUE2Qmt6QyxZQUFZOXZDLElBQVosQ0FBaUIsS0FBakIsRUFBd0J3UyxLQUF4QixHQUFnQzVWLElBQWhDLENBQXFDLEtBQXJDLENBQXZDO0FBQ0g7QUFDSjtBQUNKOztBQUVELGdCQUFJLENBQUNpekMsVUFBTCxFQUFpQjtBQUNiLG9CQUFJLE9BQU9ELE9BQVAsS0FBbUIsV0FBbkIsSUFBa0NBLFlBQVksSUFBbEQsRUFBd0Q7O0FBRXBEO0FBQ0E7QUFDQSx3QkFBSUcsS0FBS0gsUUFBUXpMLFNBQVIsQ0FBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsQ0FBVDtBQUNBLHdCQUFJNEwsT0FBTyxHQUFQLElBQWNBLE9BQU8sR0FBekIsRUFBOEI7QUFDMUIsNEJBQUksS0FBS3RnQixDQUFMLENBQU9rZCx1QkFBUCxJQUFrQyxDQUFDLEtBQUtsZCxDQUFMLENBQU9nZSxPQUE5QyxFQUF1RDtBQUNuRG1DLHNDQUFVRSxZQUFZOXZDLElBQVosQ0FBaUI0dkMsT0FBakIsRUFBMEJodkIsSUFBMUIsRUFBVjtBQUNILHlCQUZELE1BRU87QUFDSGd2QixzQ0FBVXZ6QyxFQUFFdXpDLE9BQUYsRUFBV2h2QixJQUFYLEVBQVY7QUFDSDtBQUNKO0FBQ0osaUJBWkQsTUFZTztBQUNIZ3ZCLDhCQUFVLEVBQVY7QUFDSDtBQUNKOztBQUVELGdCQUFJLEtBQUtuZ0IsQ0FBTCxDQUFPaWQsZUFBUCxLQUEyQixjQUEvQixFQUErQzs7QUFFM0Msb0JBQUltRCxVQUFKLEVBQWdCO0FBQ1oseUJBQUt6QixNQUFMLENBQVlwdUMsSUFBWixDQUFpQixLQUFLeXZCLENBQUwsQ0FBT2lkLGVBQXhCLEVBQXlDNXhCLElBQXpDLENBQThDKzBCLFVBQTlDO0FBQ0gsaUJBRkQsTUFFTztBQUNILHlCQUFLekIsTUFBTCxDQUFZcHVDLElBQVosQ0FBaUIsS0FBS3l2QixDQUFMLENBQU9pZCxlQUF4QixFQUF5QzlyQixJQUF6QyxDQUE4Q2d2QixPQUE5QztBQUNIO0FBRUosYUFSRCxNQVFPOztBQUVILG9CQUFJQyxVQUFKLEVBQWdCO0FBQ1oseUJBQUsxQixNQUFMLENBQVl6a0MsRUFBWixDQUFlbXlCLEtBQWYsRUFBc0IvZ0IsSUFBdEIsQ0FBMkIrMEIsVUFBM0I7QUFDSCxpQkFGRCxNQUVPO0FBQ0gseUJBQUsxQixNQUFMLENBQVl6a0MsRUFBWixDQUFlbXlCLEtBQWYsRUFBc0J0WSxNQUF0QixDQUE2QnFzQixPQUE3QjtBQUNIO0FBQ0o7O0FBRUQ7QUFDQSxnQkFBSSxPQUFPQSxPQUFQLEtBQW1CLFdBQW5CLElBQWtDQSxZQUFZLElBQWxELEVBQXdEO0FBQ3BELG9CQUFJQSxZQUFZLEVBQWhCLEVBQW9CO0FBQ2hCLHlCQUFLeEIsTUFBTCxDQUFZcHVDLElBQVosQ0FBaUIsS0FBS3l2QixDQUFMLENBQU9pZCxlQUF4QixFQUF5Q3IrQixRQUF6QyxDQUFrRCxlQUFsRDtBQUNILGlCQUZELE1BRU87QUFDSCx5QkFBSysvQixNQUFMLENBQVlwdUMsSUFBWixDQUFpQixLQUFLeXZCLENBQUwsQ0FBT2lkLGVBQXhCLEVBQXlDcHFDLFdBQXpDLENBQXFELGVBQXJEO0FBQ0g7QUFDSjs7QUFFRCxpQkFBS3BDLEdBQUwsQ0FBU3ZDLE9BQVQsQ0FBaUIseUJBQWpCLEVBQTRDLENBQUNrK0IsS0FBRCxDQUE1QztBQUNILFNBbkVEOztBQXFFQTs7OztBQUlBK1IsZUFBT25yQyxTQUFQLENBQWlCbXFDLE9BQWpCLEdBQTJCLFVBQVMvUSxLQUFULEVBQWdCO0FBQ3ZDLGdCQUFJLzdCLElBQUksQ0FBUjtBQUNBLGdCQUFJOGYsSUFBSSxDQUFSO0FBQ0EsaUJBQUs5ZixJQUFJLENBQVQsRUFBWUEsS0FBSyxLQUFLMnZCLENBQUwsQ0FBT21kLE9BQXhCLEVBQWlDOXNDLEdBQWpDLEVBQXNDO0FBQ2xDLG9CQUFJQSxLQUFLLEtBQUtvdUMsTUFBTCxDQUFZOXVDLE1BQVosR0FBcUJ5OEIsS0FBOUIsRUFBcUM7QUFDakM7QUFDSDs7QUFFRCxxQkFBS21VLFdBQUwsQ0FBaUJuVSxRQUFRLzdCLENBQXpCLEVBQTRCLEtBQTVCLEVBQW1DLENBQW5DO0FBQ0g7O0FBRUQsaUJBQUs4ZixJQUFJLENBQVQsRUFBWUEsS0FBSyxLQUFLNlAsQ0FBTCxDQUFPbWQsT0FBeEIsRUFBaUNodEIsR0FBakMsRUFBc0M7QUFDbEMsb0JBQUlpYyxRQUFRamMsQ0FBUixHQUFZLENBQWhCLEVBQW1CO0FBQ2Y7QUFDSDs7QUFFRCxxQkFBS293QixXQUFMLENBQWlCblUsUUFBUWpjLENBQXpCLEVBQTRCLEtBQTVCLEVBQW1DLENBQW5DO0FBQ0g7QUFDSixTQWxCRDs7QUFvQkE7Ozs7OztBQU1BZ3VCLGVBQU9uckMsU0FBUCxDQUFpQnV0QyxXQUFqQixHQUErQixVQUFTblUsS0FBVCxFQUFnQm9VLEdBQWhCLEVBQXFCdHVDLEtBQXJCLEVBQTRCOztBQUV2RCxnQkFBSWxELFFBQVEsSUFBWjtBQUNBLGdCQUFJeXhDLGFBQWEsS0FBakI7QUFDQSxnQkFBSUMsS0FBSjtBQUNBLGdCQUFJQyxJQUFKO0FBQ0EsZ0JBQUlDLE9BQUo7QUFDQSxnQkFBSUMsT0FBSjtBQUNBLGdCQUFJQyxNQUFKO0FBQ0EsZ0JBQUlDLEtBQUo7QUFDQSxnQkFBSUMsbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBU0MsT0FBVCxFQUFrQjtBQUNyQyxvQkFBSUMsVUFBVSxFQUFkO0FBQ0Esb0JBQUlDLFFBQVEsRUFBWjtBQUNBLHFCQUFLLElBQUk5d0MsSUFBSSxDQUFiLEVBQWdCQSxJQUFJNHdDLFFBQVF0eEMsTUFBNUIsRUFBb0NVLEdBQXBDLEVBQXlDO0FBQ3JDLHdCQUFJK3dDLFFBQVFILFFBQVE1d0MsQ0FBUixFQUFXUSxLQUFYLENBQWlCLEdBQWpCLENBQVo7O0FBRUE7QUFDQSx3QkFBSXV3QyxNQUFNLENBQU4sTUFBYSxFQUFqQixFQUFxQjtBQUNqQkEsOEJBQU0veUMsTUFBTixDQUFhLENBQWIsRUFBZ0IsQ0FBaEI7QUFDSDs7QUFFRDh5QywwQkFBTWh6QyxJQUFOLENBQVdpekMsTUFBTSxDQUFOLENBQVg7QUFDQUYsNEJBQVEveUMsSUFBUixDQUFhaXpDLE1BQU0sQ0FBTixDQUFiO0FBQ0g7O0FBRUQsb0JBQUlDLFNBQVN6MEMsRUFBRTBHLE1BQUYsRUFBVW1ELEtBQVYsRUFBYjtBQUNBLHFCQUFLLElBQUkwWixJQUFJLENBQWIsRUFBZ0JBLElBQUkrd0IsUUFBUXZ4QyxNQUE1QixFQUFvQ3dnQixHQUFwQyxFQUF5QztBQUNyQyx3QkFBSXVCLFNBQVN3dkIsUUFBUS93QixDQUFSLENBQVQsRUFBcUIsRUFBckIsSUFBMkJreEIsTUFBL0IsRUFBdUM7QUFDbkNWLCtCQUFPUSxNQUFNaHhCLENBQU4sQ0FBUDtBQUNBO0FBQ0g7QUFDSjtBQUNKLGFBdEJEOztBQXdCQSxnQkFBSW5oQixNQUFNZ3hCLENBQU4sQ0FBUWdlLE9BQVosRUFBcUI7O0FBRWpCLG9CQUFJaHZDLE1BQU1neEIsQ0FBTixDQUFRaWUsU0FBUixDQUFrQjdSLEtBQWxCLEVBQXlCa1YsTUFBN0IsRUFBcUM7QUFDakNiLGlDQUFhLElBQWI7QUFDQUcsOEJBQVU1eEMsTUFBTWd4QixDQUFOLENBQVFpZSxTQUFSLENBQWtCN1IsS0FBbEIsRUFBeUJrVixNQUFuQztBQUNIOztBQUVEUCx3QkFBUS94QyxNQUFNZ3hCLENBQU4sQ0FBUWllLFNBQVIsQ0FBa0I3UixLQUFsQixFQUF5QmpiLElBQWpDO0FBQ0F3dkIsdUJBQU8zeEMsTUFBTWd4QixDQUFOLENBQVFpZSxTQUFSLENBQWtCN1IsS0FBbEIsRUFBeUJ2ckIsR0FBaEM7O0FBRUEsb0JBQUk3UixNQUFNZ3hCLENBQU4sQ0FBUWllLFNBQVIsQ0FBa0I3UixLQUFsQixFQUF5QnJDLFVBQTdCLEVBQXlDO0FBQ3JDLHdCQUFJd1gsWUFBWXZ5QyxNQUFNZ3hCLENBQU4sQ0FBUWllLFNBQVIsQ0FBa0I3UixLQUFsQixFQUF5QnJDLFVBQXpCLENBQW9DbDVCLEtBQXBDLENBQTBDLEdBQTFDLENBQWhCO0FBQ0Ftd0MscUNBQWlCTyxTQUFqQjtBQUNIOztBQUVEViwwQkFBVTd4QyxNQUFNZ3hCLENBQU4sQ0FBUWllLFNBQVIsQ0FBa0I3UixLQUFsQixFQUF5Qm9WLE1BQW5DO0FBQ0FWLHlCQUFTOXhDLE1BQU1neEIsQ0FBTixDQUFRaWUsU0FBUixDQUFrQjdSLEtBQWxCLEVBQXlCcVYsS0FBbEM7QUFFSCxhQWxCRCxNQWtCTzs7QUFFSCxvQkFBSXp5QyxNQUFNeXZDLE1BQU4sQ0FBYXhrQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCai9CLElBQXZCLENBQTRCLGFBQTVCLENBQUosRUFBZ0Q7QUFDNUNzekMsaUNBQWEsSUFBYjtBQUNBRyw4QkFBVTV4QyxNQUFNeXZDLE1BQU4sQ0FBYXhrQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCai9CLElBQXZCLENBQTRCLGFBQTVCLENBQVY7QUFDSDs7QUFFRDR6Qyx3QkFBUS94QyxNQUFNeXZDLE1BQU4sQ0FBYXhrQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCai9CLElBQXZCLENBQTRCLFdBQTVCLENBQVI7QUFDQXd6Qyx1QkFBTzN4QyxNQUFNeXZDLE1BQU4sQ0FBYXhrQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCai9CLElBQXZCLENBQTRCLE1BQTVCLEtBQXVDNkIsTUFBTXl2QyxNQUFOLENBQWF4a0MsRUFBYixDQUFnQm15QixLQUFoQixFQUF1QmovQixJQUF2QixDQUE0QixVQUE1QixDQUE5Qzs7QUFFQSxvQkFBSTZCLE1BQU15dkMsTUFBTixDQUFheGtDLEVBQWIsQ0FBZ0JteUIsS0FBaEIsRUFBdUJqL0IsSUFBdkIsQ0FBNEIsaUJBQTVCLENBQUosRUFBb0Q7QUFDaEQsd0JBQUk4ekMsVUFBVWp5QyxNQUFNeXZDLE1BQU4sQ0FBYXhrQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCai9CLElBQXZCLENBQTRCLGlCQUE1QixFQUErQzBELEtBQS9DLENBQXFELEdBQXJELENBQWQ7QUFDQW13QyxxQ0FBaUJDLE9BQWpCO0FBQ0g7O0FBRURKLDBCQUFVN3hDLE1BQU15dkMsTUFBTixDQUFheGtDLEVBQWIsQ0FBZ0JteUIsS0FBaEIsRUFBdUJqL0IsSUFBdkIsQ0FBNEIsYUFBNUIsQ0FBVjtBQUNBMnpDLHlCQUFTOXhDLE1BQU15dkMsTUFBTixDQUFheGtDLEVBQWIsQ0FBZ0JteUIsS0FBaEIsRUFBdUJqL0IsSUFBdkIsQ0FBNEIsWUFBNUIsQ0FBVDtBQUVIOztBQUVEOztBQUVBLGdCQUFJdTBDLFNBQVMsS0FBYjtBQUNBLGdCQUFJMXlDLE1BQU1neEIsQ0FBTixDQUFRZ2UsT0FBWixFQUFxQjtBQUNqQixvQkFBSWh2QyxNQUFNZ3hCLENBQU4sQ0FBUWllLFNBQVIsQ0FBa0I3UixLQUFsQixFQUF5QnNWLE1BQTdCLEVBQXFDO0FBQ2pDQSw2QkFBUyxJQUFUO0FBQ0g7QUFDSixhQUpELE1BSU87QUFDSCxvQkFBSTF5QyxNQUFNeXZDLE1BQU4sQ0FBYXhrQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCai9CLElBQXZCLENBQTRCLGFBQTVCLE1BQStDLE1BQW5ELEVBQTJEO0FBQ3ZEdTBDLDZCQUFTLElBQVQ7QUFDSDtBQUNKOztBQUVELGdCQUFJQyxXQUFXM3lDLE1BQU00d0MsT0FBTixDQUFjZSxJQUFkLEVBQW9CdlUsS0FBcEIsQ0FBZjtBQUNBLGdCQUFJLENBQUNwOUIsTUFBTTB2QyxNQUFOLENBQWF6a0MsRUFBYixDQUFnQm15QixLQUFoQixFQUF1QmpoQixRQUF2QixDQUFnQyxXQUFoQyxDQUFMLEVBQW1EO0FBQy9DLG9CQUFJdTJCLE1BQUosRUFBWTtBQUNSMXlDLDBCQUFNMHZDLE1BQU4sQ0FBYXprQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCdEssT0FBdkIsQ0FBK0IsaURBQWlEOXlCLE1BQU1neEIsQ0FBTixDQUFReWQsY0FBekQsR0FBMEUseUVBQTFFLEdBQXNKa0QsSUFBdEosR0FBNkosaURBQTVMO0FBQ0gsaUJBRkQsTUFFTyxJQUFJRixVQUFKLEVBQWdCO0FBQ25CLHdCQUFJbUIsYUFBYSxFQUFqQjtBQUNBLHdCQUFJRCxZQUFZQSxTQUFTN0IsT0FBekIsRUFBa0M7QUFDOUI4QixxQ0FBYSxnQkFBYjtBQUNILHFCQUZELE1BRU8sSUFBSUQsWUFBWUEsU0FBUzVCLEtBQXpCLEVBQWdDO0FBQ25DNkIscUNBQWEsY0FBYjtBQUNILHFCQUZNLE1BRUE7QUFDSEEscUNBQWEsY0FBYjtBQUNIOztBQUVENXlDLDBCQUFNMHZDLE1BQU4sQ0FBYXprQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCdEssT0FBdkIsQ0FBK0IsK0JBQStCOGYsVUFBL0IsR0FBNEMsd0dBQTVDLEdBQXVKaEIsT0FBdkosR0FBaUssa0JBQWhNO0FBRUgsaUJBWk0sTUFZQSxJQUFJZSxRQUFKLEVBQWM7QUFDakIzeUMsMEJBQU0wdkMsTUFBTixDQUFhemtDLEVBQWIsQ0FBZ0JteUIsS0FBaEIsRUFBdUJ0SyxPQUF2QixDQUErQixnRUFBL0I7QUFDQTl5QiwwQkFBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0IsYUFBbEIsRUFBaUMsQ0FBQ2srQixLQUFELEVBQVF1VSxJQUFSLEVBQWNJLEtBQWQsQ0FBakM7QUFDSCxpQkFITSxNQUdBO0FBQ0gveEMsMEJBQU0wdkMsTUFBTixDQUFhemtDLEVBQWIsQ0FBZ0JteUIsS0FBaEIsRUFBdUJ0SyxPQUF2QixDQUErQixtRUFBbUU2ZSxJQUFuRSxHQUEwRSxZQUF6RztBQUNIOztBQUVEM3hDLHNCQUFNeUIsR0FBTixDQUFVdkMsT0FBVixDQUFrQixzQkFBbEIsRUFBMEMsQ0FBQ2srQixLQUFELENBQTFDOztBQUVBc1Usd0JBQVExeEMsTUFBTTB2QyxNQUFOLENBQWF6a0MsRUFBYixDQUFnQm15QixLQUFoQixFQUF1Qjc3QixJQUF2QixDQUE0QixZQUE1QixDQUFSO0FBQ0Esb0JBQUl1d0MsTUFBSixFQUFZO0FBQ1JKLDBCQUFNdnpDLElBQU4sQ0FBVyxPQUFYLEVBQW9CMnpDLE1BQXBCO0FBQ0g7O0FBRUQsb0JBQUlELE9BQUosRUFBYTtBQUNUSCwwQkFBTXZ6QyxJQUFOLENBQVcsUUFBWCxFQUFxQjB6QyxPQUFyQjtBQUNBLHdCQUFJO0FBQ0FnQixvQ0FBWTtBQUNSQyxzQ0FBVSxDQUFDcEIsTUFBTSxDQUFOLENBQUQ7QUFERix5QkFBWjtBQUdILHFCQUpELENBSUUsT0FBTzV2QyxDQUFQLEVBQVU7QUFDUnJCLGdDQUFRQyxLQUFSLENBQWMsbURBQWQ7QUFDSDtBQUNKOztBQUVELG9CQUFJLEtBQUtzd0IsQ0FBTCxDQUFPaWQsZUFBUCxLQUEyQixjQUEvQixFQUErQztBQUMzQ2p1QywwQkFBTWt4QyxPQUFOLENBQWM5VCxLQUFkO0FBQ0g7O0FBRURwOUIsc0JBQU0wdkMsTUFBTixDQUFhemtDLEVBQWIsQ0FBZ0JteUIsS0FBaEIsRUFBdUJ4dEIsUUFBdkIsQ0FBZ0MsV0FBaEM7QUFDSDs7QUFFRDVQLGtCQUFNMHZDLE1BQU4sQ0FBYXprQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCNzdCLElBQXZCLENBQTRCLFlBQTVCLEVBQTBDNEosRUFBMUMsQ0FBNkMsa0JBQTdDLEVBQWlFLFlBQVc7O0FBRXhFO0FBQ0Esb0JBQUlvdEIsU0FBUyxDQUFiOztBQUVBO0FBQ0E7QUFDQSxvQkFBSXIxQixTQUFTLENBQUN0RixFQUFFLE1BQUYsRUFBVXVlLFFBQVYsQ0FBbUIsY0FBbkIsQ0FBZCxFQUFrRDtBQUM5Q29jLDZCQUFTcjFCLEtBQVQ7QUFDSDs7QUFFREwsMkJBQVcsWUFBVztBQUNsQjdDLDBCQUFNMHZDLE1BQU4sQ0FBYXprQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCeHRCLFFBQXZCLENBQWdDLGFBQWhDO0FBQ0E1UCwwQkFBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0Isb0JBQWxCLEVBQXdDLENBQUNrK0IsS0FBRCxFQUFRbDZCLFNBQVMsQ0FBakIsQ0FBeEM7QUFDSCxpQkFIRCxFQUdHcTFCLE1BSEg7QUFLSCxhQWhCRDs7QUFrQkE7QUFDQSxnQkFBSW9hLFlBQVlBLFNBQVM5QixLQUFyQixJQUE4QixDQUFDWSxVQUFuQyxFQUErQztBQUMzQ3p4QyxzQkFBTTB2QyxNQUFOLENBQWF6a0MsRUFBYixDQUFnQm15QixLQUFoQixFQUF1Qnh0QixRQUF2QixDQUFnQyxhQUFoQztBQUNIOztBQUVELGdCQUFJNGhDLFFBQVEsSUFBWixFQUFrQjtBQUNkLG9CQUFJLENBQUN4eEMsTUFBTTB2QyxNQUFOLENBQWF6a0MsRUFBYixDQUFnQm15QixLQUFoQixFQUF1QmpoQixRQUF2QixDQUFnQyxhQUFoQyxDQUFMLEVBQXFEO0FBQ2pEbmMsMEJBQU0wdkMsTUFBTixDQUFhemtDLEVBQWIsQ0FBZ0JteUIsS0FBaEIsRUFBdUI3N0IsSUFBdkIsQ0FBNEIsWUFBNUIsRUFBMEM0SixFQUExQyxDQUE2QyxrQkFBN0MsRUFBaUUsWUFBVztBQUN4RW5MLDhCQUFNbXVDLE9BQU4sQ0FBYy9RLEtBQWQ7QUFDSCxxQkFGRDtBQUdILGlCQUpELE1BSU87QUFDSHA5QiwwQkFBTW11QyxPQUFOLENBQWMvUSxLQUFkO0FBQ0g7QUFDSjs7QUFFRDtBQUNILFNBdktEOztBQXlLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkErUixlQUFPbnJDLFNBQVAsQ0FBaUJnc0MsS0FBakIsR0FBeUIsVUFBUzVTLEtBQVQsRUFBZ0IyVixTQUFoQixFQUEyQkMsU0FBM0IsRUFBc0M1WixTQUF0QyxFQUFpRDs7QUFFdEUsZ0JBQUk2WixhQUFhLEtBQUt0RCxNQUFMLENBQVlwdUMsSUFBWixDQUFpQixhQUFqQixFQUFnQzY3QixLQUFoQyxFQUFqQjtBQUNBLGdCQUFJcDlCLFFBQVEsSUFBWjs7QUFFQTtBQUNBO0FBQ0EsZ0JBQUlBLE1BQU1xdkMsVUFBTixJQUFxQjRELGVBQWU3VixLQUF4QyxFQUFnRDtBQUM1QztBQUNIOztBQUVELGdCQUFJOFYsVUFBVSxLQUFLeEQsTUFBTCxDQUFZL3VDLE1BQTFCO0FBQ0EsZ0JBQUl3eUMsUUFBUW56QyxNQUFNcXZDLFVBQU4sR0FBbUIsS0FBS3JlLENBQUwsQ0FBTzBPLEtBQTFCLEdBQWtDLENBQTlDOztBQUVBLGdCQUFJLENBQUMxL0IsTUFBTXN2QyxNQUFYLEVBQW1COztBQUVmLG9CQUFJLEtBQUt0ZSxDQUFMLENBQU8wZCxRQUFYLEVBQXFCO0FBQ2pCLHdCQUFJaUQsSUFBSjtBQUNBLHdCQUFJM3hDLE1BQU1neEIsQ0FBTixDQUFRZ2UsT0FBWixFQUFxQjtBQUNqQjJDLCtCQUFPM3hDLE1BQU1neEIsQ0FBTixDQUFRaWUsU0FBUixDQUFrQjdSLEtBQWxCLEVBQXlCZ1csV0FBekIsS0FBeUMsS0FBekMsS0FBbURwekMsTUFBTWd4QixDQUFOLENBQVFpZSxTQUFSLENBQWtCN1IsS0FBbEIsRUFBeUJnVyxXQUF6QixJQUF3Q3B6QyxNQUFNZ3hCLENBQU4sQ0FBUWllLFNBQVIsQ0FBa0I3UixLQUFsQixFQUF5QnZyQixHQUFwSCxDQUFQO0FBQ0gscUJBRkQsTUFFTztBQUNIOC9CLCtCQUFPM3hDLE1BQU15dkMsTUFBTixDQUFheGtDLEVBQWIsQ0FBZ0JteUIsS0FBaEIsRUFBdUJqL0IsSUFBdkIsQ0FBNEIsbUJBQTVCLE1BQXFELE9BQXJELEtBQWlFNkIsTUFBTXl2QyxNQUFOLENBQWF4a0MsRUFBYixDQUFnQm15QixLQUFoQixFQUF1QmovQixJQUF2QixDQUE0QixtQkFBNUIsS0FBb0Q2QixNQUFNeXZDLE1BQU4sQ0FBYXhrQyxFQUFiLENBQWdCbXlCLEtBQWhCLEVBQXVCai9CLElBQXZCLENBQTRCLE1BQTVCLENBQXBELElBQTJGNkIsTUFBTXl2QyxNQUFOLENBQWF4a0MsRUFBYixDQUFnQm15QixLQUFoQixFQUF1QmovQixJQUF2QixDQUE0QixVQUE1QixDQUE1SixDQUFQO0FBRUg7O0FBRUQsd0JBQUl3ekMsSUFBSixFQUFVO0FBQ04vekMsMEJBQUUsY0FBRixFQUFrQk8sSUFBbEIsQ0FBdUIsTUFBdkIsRUFBK0J3ekMsSUFBL0I7QUFDQTN4Qyw4QkFBTTJ2QyxNQUFOLENBQWE5ckMsV0FBYixDQUF5QixrQkFBekI7QUFDSCxxQkFIRCxNQUdPO0FBQ0g3RCw4QkFBTTJ2QyxNQUFOLENBQWEvL0IsUUFBYixDQUFzQixrQkFBdEI7QUFDSDtBQUNKOztBQUVELHFCQUFLbk8sR0FBTCxDQUFTdkMsT0FBVCxDQUFpQixrQkFBakIsRUFBcUMsQ0FBQyt6QyxVQUFELEVBQWE3VixLQUFiLEVBQW9CMlYsU0FBcEIsRUFBK0JDLFNBQS9CLENBQXJDOztBQUVBaHpDLHNCQUFNc3ZDLE1BQU4sR0FBZSxJQUFmOztBQUVBaHFDLDZCQUFhdEYsTUFBTXV2QyxjQUFuQjs7QUFFQTtBQUNBLG9CQUFJLEtBQUt2ZSxDQUFMLENBQU9pZCxlQUFQLEtBQTJCLGNBQS9CLEVBQStDOztBQUUzQztBQUNBcHJDLCtCQUFXLFlBQVc7QUFDbEI3Qyw4QkFBTWt4QyxPQUFOLENBQWM5VCxLQUFkO0FBQ0gscUJBRkQsRUFFRytWLEtBRkg7QUFHSDs7QUFFRCxxQkFBS0UsWUFBTCxDQUFrQmpXLEtBQWxCOztBQUVBLG9CQUFJLENBQUNoRSxTQUFMLEVBQWdCO0FBQ1osd0JBQUlnRSxRQUFRNlYsVUFBWixFQUF3QjtBQUNwQjdaLG9DQUFZLE1BQVo7QUFDSCxxQkFGRCxNQUVPLElBQUlnRSxRQUFRNlYsVUFBWixFQUF3QjtBQUMzQjdaLG9DQUFZLE1BQVo7QUFDSDtBQUNKOztBQUVELG9CQUFJLENBQUMyWixTQUFMLEVBQWdCOztBQUVaO0FBQ0EveUMsMEJBQU0ydkMsTUFBTixDQUFhLy9CLFFBQWIsQ0FBc0IsYUFBdEI7O0FBRUEseUJBQUs4L0IsTUFBTCxDQUFZN3JDLFdBQVosQ0FBd0IsNkJBQXhCOztBQUVBLHdCQUFJdTFCLGNBQWMsTUFBbEIsRUFBMEI7O0FBRXRCO0FBQ0EsNkJBQUtzVyxNQUFMLENBQVl6a0MsRUFBWixDQUFlbXlCLEtBQWYsRUFBc0J4dEIsUUFBdEIsQ0FBK0IsZUFBL0I7QUFDQSw2QkFBSzgvQixNQUFMLENBQVl6a0MsRUFBWixDQUFlZ29DLFVBQWYsRUFBMkJyakMsUUFBM0IsQ0FBb0MsZUFBcEM7QUFDSCxxQkFMRCxNQUtPOztBQUVIO0FBQ0EsNkJBQUs4L0IsTUFBTCxDQUFZemtDLEVBQVosQ0FBZW15QixLQUFmLEVBQXNCeHRCLFFBQXRCLENBQStCLGVBQS9CO0FBQ0EsNkJBQUs4L0IsTUFBTCxDQUFZemtDLEVBQVosQ0FBZWdvQyxVQUFmLEVBQTJCcmpDLFFBQTNCLENBQW9DLGVBQXBDO0FBQ0g7O0FBRUQ7QUFDQS9NLCtCQUFXLFlBQVc7QUFDbEI3Qyw4QkFBTTB2QyxNQUFOLENBQWE3ckMsV0FBYixDQUF5QixZQUF6Qjs7QUFFQTtBQUNBN0QsOEJBQU0wdkMsTUFBTixDQUFhemtDLEVBQWIsQ0FBZ0JteUIsS0FBaEIsRUFBdUJ4dEIsUUFBdkIsQ0FBZ0MsWUFBaEM7O0FBRUE7QUFDQTVQLDhCQUFNMnZDLE1BQU4sQ0FBYTlyQyxXQUFiLENBQXlCLGFBQXpCO0FBQ0gscUJBUkQsRUFRRyxFQVJIO0FBU0gsaUJBN0JELE1BNkJPOztBQUVILHlCQUFLNnJDLE1BQUwsQ0FBWTdyQyxXQUFaLENBQXdCLHdDQUF4QjtBQUNBLHdCQUFJeXZDLFNBQUo7QUFDQSx3QkFBSUMsU0FBSjtBQUNBLHdCQUFJTCxVQUFVLENBQWQsRUFBaUI7QUFDYkksb0NBQVlsVyxRQUFRLENBQXBCO0FBQ0FtVyxvQ0FBWW5XLFFBQVEsQ0FBcEI7O0FBRUEsNEJBQUtBLFVBQVUsQ0FBWCxJQUFrQjZWLGVBQWVDLFVBQVUsQ0FBL0MsRUFBbUQ7O0FBRS9DO0FBQ0FLLHdDQUFZLENBQVo7QUFDQUQsd0NBQVlKLFVBQVUsQ0FBdEI7QUFDSCx5QkFMRCxNQUtPLElBQUs5VixVQUFVOFYsVUFBVSxDQUFyQixJQUE0QkQsZUFBZSxDQUEvQyxFQUFtRDs7QUFFdEQ7QUFDQU0sd0NBQVksQ0FBWjtBQUNBRCx3Q0FBWUosVUFBVSxDQUF0QjtBQUNIO0FBRUoscUJBaEJELE1BZ0JPO0FBQ0hJLG9DQUFZLENBQVo7QUFDQUMsb0NBQVksQ0FBWjtBQUNIOztBQUVELHdCQUFJbmEsY0FBYyxNQUFsQixFQUEwQjtBQUN0QnA1Qiw4QkFBTTB2QyxNQUFOLENBQWF6a0MsRUFBYixDQUFnQnNvQyxTQUFoQixFQUEyQjNqQyxRQUEzQixDQUFvQyxlQUFwQztBQUNILHFCQUZELE1BRU87QUFDSDVQLDhCQUFNMHZDLE1BQU4sQ0FBYXprQyxFQUFiLENBQWdCcW9DLFNBQWhCLEVBQTJCMWpDLFFBQTNCLENBQW9DLGVBQXBDO0FBQ0g7O0FBRUQ1UCwwQkFBTTB2QyxNQUFOLENBQWF6a0MsRUFBYixDQUFnQm15QixLQUFoQixFQUF1Qnh0QixRQUF2QixDQUFnQyxZQUFoQztBQUNIOztBQUVELG9CQUFJNVAsTUFBTXF2QyxVQUFWLEVBQXNCO0FBQ2xCeHNDLCtCQUFXLFlBQVc7QUFDbEI3Qyw4QkFBTXV4QyxXQUFOLENBQWtCblUsS0FBbEIsRUFBeUIsSUFBekIsRUFBK0IsQ0FBL0I7QUFDSCxxQkFGRCxFQUVHLEtBQUtwTSxDQUFMLENBQU8wTyxLQUFQLEdBQWUsRUFGbEI7O0FBSUE3OEIsK0JBQVcsWUFBVztBQUNsQjdDLDhCQUFNc3ZDLE1BQU4sR0FBZSxLQUFmO0FBQ0F0dkMsOEJBQU15QixHQUFOLENBQVV2QyxPQUFWLENBQWtCLGlCQUFsQixFQUFxQyxDQUFDK3pDLFVBQUQsRUFBYTdWLEtBQWIsRUFBb0IyVixTQUFwQixFQUErQkMsU0FBL0IsQ0FBckM7QUFDSCxxQkFIRCxFQUdHLEtBQUtoaUIsQ0FBTCxDQUFPME8sS0FIVjtBQUtILGlCQVZELE1BVU87QUFDSDEvQiwwQkFBTXV4QyxXQUFOLENBQWtCblUsS0FBbEIsRUFBeUIsSUFBekIsRUFBK0JwOUIsTUFBTWd4QixDQUFOLENBQVF1YyxnQkFBdkM7O0FBRUF2dEMsMEJBQU1zdkMsTUFBTixHQUFlLEtBQWY7QUFDQXR2QywwQkFBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0IsaUJBQWxCLEVBQXFDLENBQUMrekMsVUFBRCxFQUFhN1YsS0FBYixFQUFvQjJWLFNBQXBCLEVBQStCQyxTQUEvQixDQUFyQztBQUNIOztBQUVEaHpDLHNCQUFNcXZDLFVBQU4sR0FBbUIsSUFBbkI7O0FBRUEsb0JBQUksS0FBS3JlLENBQUwsQ0FBTzJkLE9BQVgsRUFBb0I7QUFDaEIvd0Msc0JBQUUscUJBQUYsRUFBeUJrUSxJQUF6QixDQUE4QnN2QixRQUFRLENBQXRDO0FBQ0g7QUFFSjtBQUVKLFNBbkpEOztBQXFKQTs7OztBQUlBK1IsZUFBT25yQyxTQUFQLENBQWlCd3ZDLGFBQWpCLEdBQWlDLFVBQVNULFNBQVQsRUFBb0I7QUFDakQsZ0JBQUkveUMsUUFBUSxJQUFaO0FBQ0EsZ0JBQUl5ekMsUUFBUXp6QyxNQUFNZ3hCLENBQU4sQ0FBUWdKLElBQXBCO0FBQ0EsZ0JBQUkrWSxhQUFhL3lDLE1BQU0wdkMsTUFBTixDQUFhL3VDLE1BQWIsR0FBc0IsQ0FBdkMsRUFBMEM7QUFDdEM4eUMsd0JBQVEsS0FBUjtBQUNIOztBQUVELGdCQUFJLENBQUN6ekMsTUFBTXN2QyxNQUFYLEVBQW1CO0FBQ2Ysb0JBQUt0dkMsTUFBTW85QixLQUFOLEdBQWMsQ0FBZixHQUFvQnA5QixNQUFNMHZDLE1BQU4sQ0FBYS91QyxNQUFyQyxFQUE2QztBQUN6Q1gsMEJBQU1vOUIsS0FBTjtBQUNBcDlCLDBCQUFNeUIsR0FBTixDQUFVdkMsT0FBVixDQUFrQixzQkFBbEIsRUFBMEMsQ0FBQ2MsTUFBTW85QixLQUFQLENBQTFDO0FBQ0FwOUIsMEJBQU1nd0MsS0FBTixDQUFZaHdDLE1BQU1vOUIsS0FBbEIsRUFBeUIyVixTQUF6QixFQUFvQyxLQUFwQyxFQUEyQyxNQUEzQztBQUNILGlCQUpELE1BSU87QUFDSCx3QkFBSVUsS0FBSixFQUFXO0FBQ1B6ekMsOEJBQU1vOUIsS0FBTixHQUFjLENBQWQ7QUFDQXA5Qiw4QkFBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0Isc0JBQWxCLEVBQTBDLENBQUNjLE1BQU1vOUIsS0FBUCxDQUExQztBQUNBcDlCLDhCQUFNZ3dDLEtBQU4sQ0FBWWh3QyxNQUFNbzlCLEtBQWxCLEVBQXlCMlYsU0FBekIsRUFBb0MsS0FBcEMsRUFBMkMsTUFBM0M7QUFDSCxxQkFKRCxNQUlPLElBQUkveUMsTUFBTWd4QixDQUFOLENBQVE4YyxpQkFBUixJQUE2QixDQUFDaUYsU0FBbEMsRUFBNkM7QUFDaEQveUMsOEJBQU0ydkMsTUFBTixDQUFhLy9CLFFBQWIsQ0FBc0IsY0FBdEI7QUFDQS9NLG1DQUFXLFlBQVc7QUFDbEI3QyxrQ0FBTTJ2QyxNQUFOLENBQWE5ckMsV0FBYixDQUF5QixjQUF6QjtBQUNILHlCQUZELEVBRUcsR0FGSDtBQUdIO0FBQ0o7QUFDSjtBQUNKLFNBekJEOztBQTJCQTs7OztBQUlBc3JDLGVBQU9uckMsU0FBUCxDQUFpQjB2QyxhQUFqQixHQUFpQyxVQUFTWCxTQUFULEVBQW9CO0FBQ2pELGdCQUFJL3lDLFFBQVEsSUFBWjtBQUNBLGdCQUFJeXpDLFFBQVF6ekMsTUFBTWd4QixDQUFOLENBQVFnSixJQUFwQjtBQUNBLGdCQUFJK1ksYUFBYS95QyxNQUFNMHZDLE1BQU4sQ0FBYS91QyxNQUFiLEdBQXNCLENBQXZDLEVBQTBDO0FBQ3RDOHlDLHdCQUFRLEtBQVI7QUFDSDs7QUFFRCxnQkFBSSxDQUFDenpDLE1BQU1zdkMsTUFBWCxFQUFtQjtBQUNmLG9CQUFJdHZDLE1BQU1vOUIsS0FBTixHQUFjLENBQWxCLEVBQXFCO0FBQ2pCcDlCLDBCQUFNbzlCLEtBQU47QUFDQXA5QiwwQkFBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0Isc0JBQWxCLEVBQTBDLENBQUNjLE1BQU1vOUIsS0FBUCxFQUFjMlYsU0FBZCxDQUExQztBQUNBL3lDLDBCQUFNZ3dDLEtBQU4sQ0FBWWh3QyxNQUFNbzlCLEtBQWxCLEVBQXlCMlYsU0FBekIsRUFBb0MsS0FBcEMsRUFBMkMsTUFBM0M7QUFDSCxpQkFKRCxNQUlPO0FBQ0gsd0JBQUlVLEtBQUosRUFBVztBQUNQenpDLDhCQUFNbzlCLEtBQU4sR0FBY3A5QixNQUFNeXZDLE1BQU4sQ0FBYTl1QyxNQUFiLEdBQXNCLENBQXBDO0FBQ0FYLDhCQUFNeUIsR0FBTixDQUFVdkMsT0FBVixDQUFrQixzQkFBbEIsRUFBMEMsQ0FBQ2MsTUFBTW85QixLQUFQLEVBQWMyVixTQUFkLENBQTFDO0FBQ0EveUMsOEJBQU1nd0MsS0FBTixDQUFZaHdDLE1BQU1vOUIsS0FBbEIsRUFBeUIyVixTQUF6QixFQUFvQyxLQUFwQyxFQUEyQyxNQUEzQztBQUNILHFCQUpELE1BSU8sSUFBSS95QyxNQUFNZ3hCLENBQU4sQ0FBUThjLGlCQUFSLElBQTZCLENBQUNpRixTQUFsQyxFQUE2QztBQUNoRC95Qyw4QkFBTTJ2QyxNQUFOLENBQWEvL0IsUUFBYixDQUFzQixhQUF0QjtBQUNBL00sbUNBQVcsWUFBVztBQUNsQjdDLGtDQUFNMnZDLE1BQU4sQ0FBYTlyQyxXQUFiLENBQXlCLGFBQXpCO0FBQ0gseUJBRkQsRUFFRyxHQUZIO0FBR0g7QUFDSjtBQUNKO0FBQ0osU0F6QkQ7O0FBMkJBc3JDLGVBQU9uckMsU0FBUCxDQUFpQjRwQyxRQUFqQixHQUE0QixZQUFXO0FBQ25DLGdCQUFJNXRDLFFBQVEsSUFBWjtBQUNBLGdCQUFJLEtBQUt5dkMsTUFBTCxDQUFZOXVDLE1BQVosR0FBcUIsQ0FBekIsRUFBNEI7QUFDeEIvQyxrQkFBRTBHLE1BQUYsRUFBVTZHLEVBQVYsQ0FBYSxVQUFiLEVBQXlCLFVBQVNySixDQUFULEVBQVk7QUFDakMsd0JBQUk5QixNQUFNeXZDLE1BQU4sQ0FBYTl1QyxNQUFiLEdBQXNCLENBQTFCLEVBQTZCO0FBQ3pCLDRCQUFJbUIsRUFBRXlILE9BQUYsS0FBYyxFQUFsQixFQUFzQjtBQUNsQnpILDhCQUFFdUosY0FBRjtBQUNBckwsa0NBQU0wekMsYUFBTjtBQUNIOztBQUVELDRCQUFJNXhDLEVBQUV5SCxPQUFGLEtBQWMsRUFBbEIsRUFBc0I7QUFDbEJ6SCw4QkFBRXVKLGNBQUY7QUFDQXJMLGtDQUFNd3pDLGFBQU47QUFDSDtBQUNKO0FBQ0osaUJBWkQ7QUFhSDs7QUFFRDUxQyxjQUFFMEcsTUFBRixFQUFVNkcsRUFBVixDQUFhLFlBQWIsRUFBMkIsVUFBU3JKLENBQVQsRUFBWTtBQUNuQyxvQkFBSTlCLE1BQU1neEIsQ0FBTixDQUFRMmMsTUFBUixLQUFtQixJQUFuQixJQUEyQjdyQyxFQUFFeUgsT0FBRixLQUFjLEVBQTdDLEVBQWlEO0FBQzdDekgsc0JBQUV1SixjQUFGO0FBQ0Esd0JBQUksQ0FBQ3JMLE1BQU0ydkMsTUFBTixDQUFheHpCLFFBQWIsQ0FBc0IsZUFBdEIsQ0FBTCxFQUE2QztBQUN6Q25jLDhCQUFNK21CLE9BQU47QUFDSCxxQkFGRCxNQUVPO0FBQ0gvbUIsOEJBQU0ydkMsTUFBTixDQUFhOXJDLFdBQWIsQ0FBeUIsZUFBekI7QUFDSDtBQUNKO0FBQ0osYUFURDtBQVVILFNBNUJEOztBQThCQXNyQyxlQUFPbnJDLFNBQVAsQ0FBaUJpc0MsS0FBakIsR0FBeUIsWUFBVztBQUNoQyxnQkFBSWp3QyxRQUFRLElBQVo7QUFDQSxpQkFBSzJ2QyxNQUFMLENBQVlwdUMsSUFBWixDQUFpQixVQUFqQixFQUE2QjRKLEVBQTdCLENBQWdDLFVBQWhDLEVBQTRDLFlBQVc7QUFDbkRuTCxzQkFBTTB6QyxhQUFOO0FBQ0gsYUFGRDs7QUFJQSxpQkFBSy9ELE1BQUwsQ0FBWXB1QyxJQUFaLENBQWlCLFVBQWpCLEVBQTZCNEosRUFBN0IsQ0FBZ0MsVUFBaEMsRUFBNEMsWUFBVztBQUNuRG5MLHNCQUFNd3pDLGFBQU47QUFDSCxhQUZEO0FBR0gsU0FURDs7QUFXQXJFLGVBQU9uckMsU0FBUCxDQUFpQnF2QyxZQUFqQixHQUFnQyxVQUFTalcsS0FBVCxFQUFnQjs7QUFFNUM7QUFDQSxnQkFBSSxDQUFDLEtBQUtwTSxDQUFMLENBQU9nSixJQUFSLElBQWdCLEtBQUtoSixDQUFMLENBQU8rYyxnQkFBM0IsRUFBNkM7QUFDekMsb0JBQUszUSxRQUFRLENBQVQsR0FBYyxLQUFLc1MsTUFBTCxDQUFZL3VDLE1BQTlCLEVBQXNDO0FBQ2xDLHlCQUFLZ3ZDLE1BQUwsQ0FBWXB1QyxJQUFaLENBQWlCLFVBQWpCLEVBQTZCaEMsVUFBN0IsQ0FBd0MsVUFBeEMsRUFBb0RzRSxXQUFwRCxDQUFnRSxVQUFoRTtBQUNILGlCQUZELE1BRU87QUFDSCx5QkFBSzhyQyxNQUFMLENBQVlwdUMsSUFBWixDQUFpQixVQUFqQixFQUE2QnBELElBQTdCLENBQWtDLFVBQWxDLEVBQThDLFVBQTlDLEVBQTBEeVIsUUFBMUQsQ0FBbUUsVUFBbkU7QUFDSDs7QUFFRCxvQkFBSXd0QixRQUFRLENBQVosRUFBZTtBQUNYLHlCQUFLdVMsTUFBTCxDQUFZcHVDLElBQVosQ0FBaUIsVUFBakIsRUFBNkJoQyxVQUE3QixDQUF3QyxVQUF4QyxFQUFvRHNFLFdBQXBELENBQWdFLFVBQWhFO0FBQ0gsaUJBRkQsTUFFTztBQUNILHlCQUFLOHJDLE1BQUwsQ0FBWXB1QyxJQUFaLENBQWlCLFVBQWpCLEVBQTZCcEQsSUFBN0IsQ0FBa0MsVUFBbEMsRUFBOEMsVUFBOUMsRUFBMER5UixRQUExRCxDQUFtRSxVQUFuRTtBQUNIO0FBQ0o7QUFDSixTQWhCRDs7QUFrQkF1L0IsZUFBT25yQyxTQUFQLENBQWlCMnZDLFlBQWpCLEdBQWdDLFVBQVNseUMsR0FBVCxFQUFjbXlDLE1BQWQsRUFBc0JDLE1BQXRCLEVBQThCO0FBQzFEO0FBQ0EsZ0JBQUksS0FBSzdpQixDQUFMLENBQU95YyxPQUFYLEVBQW9CO0FBQ2hCaHNDLG9CQUFJMkssR0FBSixDQUFRLE1BQVIsRUFBZ0J3bkMsTUFBaEI7QUFDSCxhQUZELE1BRU87QUFDSG55QyxvQkFBSTJLLEdBQUosQ0FBUTtBQUNKcXpCLCtCQUFXLGlCQUFrQm1VLE1BQWxCLEdBQTRCLE1BQTVCLEdBQXFDQyxNQUFyQyxHQUE4QztBQURyRCxpQkFBUjtBQUdIO0FBQ0osU0FURDs7QUFXQTFFLGVBQU9uckMsU0FBUCxDQUFpQjh2QyxTQUFqQixHQUE2QixVQUFTQyxXQUFULEVBQXNCQyxTQUF0QixFQUFpQzs7QUFFMUQsZ0JBQUk5UyxXQUFXOFMsWUFBWUQsV0FBM0I7O0FBRUEsZ0JBQUlsekMsS0FBS3NTLEdBQUwsQ0FBUyt0QixRQUFULElBQXFCLEVBQXpCLEVBQTZCO0FBQ3pCO0FBQ0EscUJBQUt5TyxNQUFMLENBQVkvL0IsUUFBWixDQUFxQixhQUFyQjs7QUFFQTtBQUNBLHFCQUFLK2pDLFlBQUwsQ0FBa0IsS0FBS2pFLE1BQUwsQ0FBWXprQyxFQUFaLENBQWUsS0FBS215QixLQUFwQixDQUFsQixFQUE4QzhELFFBQTlDLEVBQXdELENBQXhEOztBQUVBO0FBQ0EscUJBQUt5UyxZQUFMLENBQWtCLzFDLEVBQUUsZ0JBQUYsQ0FBbEIsRUFBdUMsQ0FBQyxLQUFLOHhDLE1BQUwsQ0FBWXprQyxFQUFaLENBQWUsS0FBS215QixLQUFwQixFQUEyQjMxQixLQUEzQixFQUFELEdBQXNDeTVCLFFBQTdFLEVBQXVGLENBQXZGO0FBQ0EscUJBQUt5UyxZQUFMLENBQWtCLzFDLEVBQUUsZ0JBQUYsQ0FBbEIsRUFBdUMsS0FBSzh4QyxNQUFMLENBQVl6a0MsRUFBWixDQUFlLEtBQUtteUIsS0FBcEIsRUFBMkIzMUIsS0FBM0IsS0FBcUN5NUIsUUFBNUUsRUFBc0YsQ0FBdEY7QUFDSDtBQUNKLFNBZkQ7O0FBaUJBaU8sZUFBT25yQyxTQUFQLENBQWlCaXdDLFFBQWpCLEdBQTRCLFVBQVMvUyxRQUFULEVBQW1CO0FBQzNDLGdCQUFJbGhDLFFBQVEsSUFBWjs7QUFFQTtBQUNBLGdCQUFJQSxNQUFNZ3hCLENBQU4sQ0FBUW9jLElBQVIsS0FBaUIsVUFBckIsRUFBaUM7QUFDN0JwdEMsc0JBQU0ydkMsTUFBTixDQUFhLy9CLFFBQWIsQ0FBc0IsVUFBdEI7QUFDSDs7QUFFRCxpQkFBSzgvQixNQUFMLENBQVk5NUIsR0FBWixDQUFnQiw2Q0FBaEIsRUFBK0R4SixHQUEvRCxDQUFtRSxTQUFuRSxFQUE4RSxHQUE5RTs7QUFFQTtBQUNBdkosdUJBQVcsWUFBVztBQUNsQjdDLHNCQUFNMnZDLE1BQU4sQ0FBYTlyQyxXQUFiLENBQXlCLGFBQXpCO0FBQ0Esb0JBQUtxOUIsV0FBVyxDQUFaLElBQW1CcmdDLEtBQUtzUyxHQUFMLENBQVMrdEIsUUFBVCxJQUFxQmxoQyxNQUFNZ3hCLENBQU4sQ0FBUTZkLGNBQXBELEVBQXFFO0FBQ2pFN3VDLDBCQUFNd3pDLGFBQU4sQ0FBb0IsSUFBcEI7QUFDSCxpQkFGRCxNQUVPLElBQUt0UyxXQUFXLENBQVosSUFBbUJyZ0MsS0FBS3NTLEdBQUwsQ0FBUyt0QixRQUFULElBQXFCbGhDLE1BQU1neEIsQ0FBTixDQUFRNmQsY0FBcEQsRUFBcUU7QUFDeEU3dUMsMEJBQU0wekMsYUFBTixDQUFvQixJQUFwQjtBQUNILGlCQUZNLE1BRUEsSUFBSTd5QyxLQUFLc1MsR0FBTCxDQUFTK3RCLFFBQVQsSUFBcUIsQ0FBekIsRUFBNEI7O0FBRS9CO0FBQ0FsaEMsMEJBQU15QixHQUFOLENBQVV2QyxPQUFWLENBQWtCLGlCQUFsQjtBQUNIOztBQUVEYyxzQkFBTTB2QyxNQUFOLENBQWFud0MsVUFBYixDQUF3QixPQUF4QjtBQUNILGFBYkQ7O0FBZUE7QUFDQXNELHVCQUFXLFlBQVc7QUFDbEIsb0JBQUksQ0FBQzdDLE1BQU0ydkMsTUFBTixDQUFheHpCLFFBQWIsQ0FBc0IsYUFBdEIsQ0FBRCxJQUF5Q25jLE1BQU1neEIsQ0FBTixDQUFRb2MsSUFBUixLQUFpQixVQUE5RCxFQUEwRTtBQUN0RXB0QywwQkFBTTJ2QyxNQUFOLENBQWE5ckMsV0FBYixDQUF5QixVQUF6QjtBQUNIO0FBQ0osYUFKRCxFQUlHN0QsTUFBTWd4QixDQUFOLENBQVEwTyxLQUFSLEdBQWdCLEdBSm5CO0FBTUgsU0FqQ0Q7O0FBbUNBeVAsZUFBT25yQyxTQUFQLENBQWlCOHFDLFdBQWpCLEdBQStCLFlBQVc7QUFDdEMsZ0JBQUk5dUMsUUFBUSxJQUFaO0FBQ0EsZ0JBQUkrekMsY0FBYyxDQUFsQjtBQUNBLGdCQUFJQyxZQUFZLENBQWhCO0FBQ0EsZ0JBQUlFLFVBQVUsS0FBZDs7QUFFQSxnQkFBSWwwQyxNQUFNZ3hCLENBQU4sQ0FBUThkLFdBQVIsSUFBdUI5dUMsTUFBTXd2QyxPQUE3QixJQUF3Q3h2QyxNQUFNdXdDLEtBQU4sRUFBNUMsRUFBMkQ7O0FBRXZEdndDLHNCQUFNMHZDLE1BQU4sQ0FBYXZrQyxFQUFiLENBQWdCLGVBQWhCLEVBQWlDLFVBQVNySixDQUFULEVBQVk7QUFDekMsd0JBQUksQ0FBQzlCLE1BQU0ydkMsTUFBTixDQUFheHpCLFFBQWIsQ0FBc0IsV0FBdEIsQ0FBRCxJQUF1QyxDQUFDbmMsTUFBTXN2QyxNQUFsRCxFQUEwRDtBQUN0RHh0QywwQkFBRXVKLGNBQUY7QUFDQXJMLDhCQUFNbTBDLGdCQUFOO0FBQ0FKLHNDQUFjanlDLEVBQUU2akIsYUFBRixDQUFnQnl1QixhQUFoQixDQUE4QixDQUE5QixFQUFpQ3ZoQyxLQUEvQztBQUNIO0FBQ0osaUJBTkQ7O0FBUUE3UyxzQkFBTTB2QyxNQUFOLENBQWF2a0MsRUFBYixDQUFnQixjQUFoQixFQUFnQyxVQUFTckosQ0FBVCxFQUFZO0FBQ3hDLHdCQUFJLENBQUM5QixNQUFNMnZDLE1BQU4sQ0FBYXh6QixRQUFiLENBQXNCLFdBQXRCLENBQUwsRUFBeUM7QUFDckNyYSwwQkFBRXVKLGNBQUY7QUFDQTJvQyxvQ0FBWWx5QyxFQUFFNmpCLGFBQUYsQ0FBZ0J5dUIsYUFBaEIsQ0FBOEIsQ0FBOUIsRUFBaUN2aEMsS0FBN0M7QUFDQTdTLDhCQUFNOHpDLFNBQU4sQ0FBZ0JDLFdBQWhCLEVBQTZCQyxTQUE3QjtBQUNBRSxrQ0FBVSxJQUFWO0FBQ0g7QUFDSixpQkFQRDs7QUFTQWwwQyxzQkFBTTB2QyxNQUFOLENBQWF2a0MsRUFBYixDQUFnQixhQUFoQixFQUErQixZQUFXO0FBQ3RDLHdCQUFJLENBQUNuTCxNQUFNMnZDLE1BQU4sQ0FBYXh6QixRQUFiLENBQXNCLFdBQXRCLENBQUwsRUFBeUM7QUFDckMsNEJBQUkrM0IsT0FBSixFQUFhO0FBQ1RBLHNDQUFVLEtBQVY7QUFDQWwwQyxrQ0FBTWkwQyxRQUFOLENBQWVELFlBQVlELFdBQTNCO0FBQ0gseUJBSEQsTUFHTztBQUNIL3pDLGtDQUFNeUIsR0FBTixDQUFVdkMsT0FBVixDQUFrQixpQkFBbEI7QUFDSDtBQUNKO0FBQ0osaUJBVEQ7QUFVSDtBQUVKLFNBckNEOztBQXVDQWl3QyxlQUFPbnJDLFNBQVAsQ0FBaUIrcUMsVUFBakIsR0FBOEIsWUFBVztBQUNyQyxnQkFBSS91QyxRQUFRLElBQVo7QUFDQSxnQkFBSSt6QyxjQUFjLENBQWxCO0FBQ0EsZ0JBQUlDLFlBQVksQ0FBaEI7QUFDQSxnQkFBSUssWUFBWSxLQUFoQjtBQUNBLGdCQUFJSCxVQUFVLEtBQWQ7QUFDQSxnQkFBSWwwQyxNQUFNZ3hCLENBQU4sQ0FBUStkLFVBQVIsSUFBc0IsQ0FBQy91QyxNQUFNd3ZDLE9BQTdCLElBQXdDeHZDLE1BQU11d0MsS0FBTixFQUE1QyxFQUEyRDtBQUN2RHZ3QyxzQkFBTTB2QyxNQUFOLENBQWF2a0MsRUFBYixDQUFnQixjQUFoQixFQUFnQyxVQUFTckosQ0FBVCxFQUFZO0FBQ3hDO0FBQ0Esd0JBQUksQ0FBQzlCLE1BQU0ydkMsTUFBTixDQUFheHpCLFFBQWIsQ0FBc0IsV0FBdEIsQ0FBTCxFQUF5QztBQUNyQyw0QkFBSXZlLEVBQUVrRSxFQUFFc0osTUFBSixFQUFZK1EsUUFBWixDQUFxQixXQUFyQixLQUFxQ3ZlLEVBQUVrRSxFQUFFc0osTUFBSixFQUFZK1EsUUFBWixDQUFxQixlQUFyQixDQUF6QyxFQUFnRjtBQUM1RXJhLDhCQUFFdUosY0FBRjs7QUFFQSxnQ0FBSSxDQUFDckwsTUFBTXN2QyxNQUFYLEVBQW1CO0FBQ2Z0dkMsc0NBQU1tMEMsZ0JBQU47QUFDQUosOENBQWNqeUMsRUFBRStRLEtBQWhCO0FBQ0F3aEMsNENBQVksSUFBWjs7QUFFQTtBQUNBcjBDLHNDQUFNMnZDLE1BQU4sQ0FBYTJFLFVBQWIsSUFBMkIsQ0FBM0I7QUFDQXQwQyxzQ0FBTTJ2QyxNQUFOLENBQWEyRSxVQUFiLElBQTJCLENBQTNCOztBQUVBOztBQUVBdDBDLHNDQUFNMnZDLE1BQU4sQ0FBYTlyQyxXQUFiLENBQXlCLFNBQXpCLEVBQW9DK0wsUUFBcEMsQ0FBNkMsYUFBN0M7O0FBRUE1UCxzQ0FBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0IsZ0JBQWxCO0FBQ0g7QUFFSjtBQUNKO0FBQ0osaUJBeEJEOztBQTBCQXRCLGtCQUFFMEcsTUFBRixFQUFVNkcsRUFBVixDQUFhLGNBQWIsRUFBNkIsVUFBU3JKLENBQVQsRUFBWTtBQUNyQyx3QkFBSXV5QyxTQUFKLEVBQWU7QUFDWEgsa0NBQVUsSUFBVjtBQUNBRixvQ0FBWWx5QyxFQUFFK1EsS0FBZDtBQUNBN1MsOEJBQU04ekMsU0FBTixDQUFnQkMsV0FBaEIsRUFBNkJDLFNBQTdCO0FBQ0FoMEMsOEJBQU15QixHQUFOLENBQVV2QyxPQUFWLENBQWtCLGVBQWxCO0FBQ0g7QUFDSixpQkFQRDs7QUFTQXRCLGtCQUFFMEcsTUFBRixFQUFVNkcsRUFBVixDQUFhLFlBQWIsRUFBMkIsVUFBU3JKLENBQVQsRUFBWTtBQUNuQyx3QkFBSW95QyxPQUFKLEVBQWE7QUFDVEEsa0NBQVUsS0FBVjtBQUNBbDBDLDhCQUFNaTBDLFFBQU4sQ0FBZUQsWUFBWUQsV0FBM0I7QUFDQS96Qyw4QkFBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0IsY0FBbEI7QUFDSCxxQkFKRCxNQUlPLElBQUl0QixFQUFFa0UsRUFBRXNKLE1BQUosRUFBWStRLFFBQVosQ0FBcUIsV0FBckIsS0FBcUN2ZSxFQUFFa0UsRUFBRXNKLE1BQUosRUFBWStRLFFBQVosQ0FBcUIsZUFBckIsQ0FBekMsRUFBZ0Y7QUFDbkZuYyw4QkFBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0IsaUJBQWxCO0FBQ0g7O0FBRUQ7QUFDQSx3QkFBSW0xQyxTQUFKLEVBQWU7QUFDWEEsb0NBQVksS0FBWjtBQUNBcjBDLDhCQUFNMnZDLE1BQU4sQ0FBYTlyQyxXQUFiLENBQXlCLGFBQXpCLEVBQXdDK0wsUUFBeEMsQ0FBaUQsU0FBakQ7QUFDSDtBQUNKLGlCQWREO0FBZ0JIO0FBQ0osU0EzREQ7O0FBNkRBdS9CLGVBQU9uckMsU0FBUCxDQUFpQm13QyxnQkFBakIsR0FBb0MsWUFBVztBQUMzQyxnQkFBSUksYUFBYSxLQUFLblgsS0FBTCxHQUFhLENBQTlCO0FBQ0EsZ0JBQUlvWCxhQUFhLEtBQUtwWCxLQUFMLEdBQWEsQ0FBOUI7QUFDQSxnQkFBSSxLQUFLcE0sQ0FBTCxDQUFPZ0osSUFBUCxJQUFlLEtBQUswVixNQUFMLENBQVkvdUMsTUFBWixHQUFxQixDQUF4QyxFQUEyQztBQUN2QyxvQkFBSSxLQUFLeThCLEtBQUwsS0FBZSxDQUFuQixFQUFzQjtBQUNsQm9YLGlDQUFhLEtBQUs5RSxNQUFMLENBQVkvdUMsTUFBWixHQUFxQixDQUFsQztBQUNILGlCQUZELE1BRU8sSUFBSSxLQUFLeThCLEtBQUwsS0FBZSxLQUFLc1MsTUFBTCxDQUFZL3VDLE1BQVosR0FBcUIsQ0FBeEMsRUFBMkM7QUFDOUM0ekMsaUNBQWEsQ0FBYjtBQUNIO0FBQ0o7O0FBRUQsaUJBQUs3RSxNQUFMLENBQVk3ckMsV0FBWixDQUF3Qiw2QkFBeEI7QUFDQSxnQkFBSTJ3QyxhQUFhLENBQUMsQ0FBbEIsRUFBcUI7QUFDakIscUJBQUs5RSxNQUFMLENBQVl6a0MsRUFBWixDQUFldXBDLFVBQWYsRUFBMkI1a0MsUUFBM0IsQ0FBb0MsZUFBcEM7QUFDSDs7QUFFRCxpQkFBSzgvQixNQUFMLENBQVl6a0MsRUFBWixDQUFlc3BDLFVBQWYsRUFBMkIza0MsUUFBM0IsQ0FBb0MsZUFBcEM7QUFDSCxTQWpCRDs7QUFtQkF1L0IsZUFBT25yQyxTQUFQLENBQWlCbW5DLFVBQWpCLEdBQThCLFlBQVc7QUFDckMsZ0JBQUluckMsUUFBUSxJQUFaO0FBQ0FBLGtCQUFNMnZDLE1BQU4sQ0FBYXhrQyxFQUFiLENBQWdCLGVBQWhCLEVBQWlDLFVBQVNySixDQUFULEVBQVk7O0FBRXpDLG9CQUFJLENBQUNBLEVBQUUrcEMsTUFBUCxFQUFlO0FBQ1g7QUFDSDs7QUFFRCxvQkFBSS9wQyxFQUFFK3BDLE1BQUYsR0FBVyxDQUFmLEVBQWtCO0FBQ2Q3ckMsMEJBQU0wekMsYUFBTjtBQUNILGlCQUZELE1BRU87QUFDSDF6QywwQkFBTXd6QyxhQUFOO0FBQ0g7O0FBRUQxeEMsa0JBQUV1SixjQUFGO0FBQ0gsYUFiRDtBQWVILFNBakJEOztBQW1CQThqQyxlQUFPbnJDLFNBQVAsQ0FBaUJrc0MsWUFBakIsR0FBZ0MsWUFBVzs7QUFFdkMsZ0JBQUlsd0MsUUFBUSxJQUFaO0FBQ0EsZ0JBQUl5MEMsWUFBWSxLQUFoQjtBQUNBLGlCQUFLOUUsTUFBTCxDQUFZcHVDLElBQVosQ0FBaUIsV0FBakIsRUFBOEI0SixFQUE5QixDQUFpQyxVQUFqQyxFQUE2QyxZQUFXO0FBQ3BEbkwsc0JBQU0rbUIsT0FBTjtBQUNILGFBRkQ7O0FBSUEsZ0JBQUkvbUIsTUFBTWd4QixDQUFOLENBQVEwYyxRQUFaLEVBQXNCOztBQUVsQjtBQUNBO0FBQ0ExdEMsc0JBQU0ydkMsTUFBTixDQUFheGtDLEVBQWIsQ0FBZ0IsY0FBaEIsRUFBZ0MsVUFBU3JKLENBQVQsRUFBWTs7QUFFeEMsd0JBQUlsRSxFQUFFa0UsRUFBRXNKLE1BQUosRUFBWVQsRUFBWixDQUFlLFdBQWYsS0FBK0IvTSxFQUFFa0UsRUFBRXNKLE1BQUosRUFBWVQsRUFBWixDQUFlLFdBQWYsQ0FBL0IsSUFBOEQvTSxFQUFFa0UsRUFBRXNKLE1BQUosRUFBWVQsRUFBWixDQUFlLGNBQWYsQ0FBbEUsRUFBa0c7QUFDOUY4cEMsb0NBQVksSUFBWjtBQUNILHFCQUZELE1BRU87QUFDSEEsb0NBQVksS0FBWjtBQUNIO0FBRUosaUJBUkQ7O0FBVUF6MEMsc0JBQU0ydkMsTUFBTixDQUFheGtDLEVBQWIsQ0FBZ0IsWUFBaEIsRUFBOEIsVUFBU3JKLENBQVQsRUFBWTs7QUFFdEMsd0JBQUlsRSxFQUFFa0UsRUFBRXNKLE1BQUosRUFBWVQsRUFBWixDQUFlLFdBQWYsS0FBK0IvTSxFQUFFa0UsRUFBRXNKLE1BQUosRUFBWVQsRUFBWixDQUFlLFdBQWYsQ0FBL0IsSUFBOEQvTSxFQUFFa0UsRUFBRXNKLE1BQUosRUFBWVQsRUFBWixDQUFlLGNBQWYsS0FBa0M4cEMsU0FBcEcsRUFBK0c7QUFDM0csNEJBQUksQ0FBQ3owQyxNQUFNMnZDLE1BQU4sQ0FBYXh6QixRQUFiLENBQXNCLGFBQXRCLENBQUwsRUFBMkM7QUFDdkNuYyxrQ0FBTSttQixPQUFOO0FBQ0g7QUFDSjtBQUVKLGlCQVJEO0FBVUg7QUFFSixTQWxDRDs7QUFvQ0Fvb0IsZUFBT25yQyxTQUFQLENBQWlCK2lCLE9BQWpCLEdBQTJCLFVBQVMydEIsQ0FBVCxFQUFZOztBQUVuQyxnQkFBSTEwQyxRQUFRLElBQVo7O0FBRUEsZ0JBQUksQ0FBQzAwQyxDQUFMLEVBQVE7QUFDSjEwQyxzQkFBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0Isa0JBQWxCO0FBQ0F0QixrQkFBRTBHLE1BQUYsRUFBVWdZLFNBQVYsQ0FBb0J0YyxNQUFNeXdDLGFBQTFCO0FBQ0g7O0FBR0Q7Ozs7Ozs7QUFPQSxnQkFBSWlFLENBQUosRUFBTztBQUNILG9CQUFJLENBQUMxMEMsTUFBTWd4QixDQUFOLENBQVFnZSxPQUFiLEVBQXNCO0FBQ2xCO0FBQ0EseUJBQUtTLE1BQUwsQ0FBWWprQyxHQUFaLENBQWdCLHlCQUFoQjtBQUNIOztBQUVENU4sa0JBQUU0QixVQUFGLENBQWFRLE1BQU1pQyxFQUFuQixFQUF1QixjQUF2QjtBQUNIOztBQUVEO0FBQ0EsaUJBQUtSLEdBQUwsQ0FBUytKLEdBQVQsQ0FBYSxRQUFiOztBQUVBO0FBQ0E1TixjQUFFaUMsSUFBRixDQUFPakMsRUFBRTJHLEVBQUYsQ0FBS3dyQyxZQUFMLENBQWtCWCxPQUF6QixFQUFrQyxVQUFTL2xDLEdBQVQsRUFBYztBQUM1QyxvQkFBSXJKLE1BQU1vdkMsT0FBTixDQUFjL2xDLEdBQWQsQ0FBSixFQUF3QjtBQUNwQnJKLDBCQUFNb3ZDLE9BQU4sQ0FBYy9sQyxHQUFkLEVBQW1CMGQsT0FBbkI7QUFDSDtBQUNKLGFBSkQ7O0FBTUEsaUJBQUtzb0IsVUFBTCxHQUFrQixLQUFsQjs7QUFFQS9wQyx5QkFBYXRGLE1BQU11dkMsY0FBbkI7QUFDQSxpQkFBS0EsY0FBTCxHQUFzQixLQUF0QjtBQUNBM3hDLGNBQUUwRyxNQUFGLEVBQVVrSCxHQUFWLENBQWMsS0FBZDtBQUNBNU4sY0FBRSxNQUFGLEVBQVVpRyxXQUFWLENBQXNCLG9CQUF0Qjs7QUFFQSxnQkFBSTdELE1BQU0ydkMsTUFBVixFQUFrQjtBQUNkM3ZDLHNCQUFNMnZDLE1BQU4sQ0FBYTlyQyxXQUFiLENBQXlCLFlBQXpCO0FBQ0g7O0FBRURqRyxjQUFFLGNBQUYsRUFBa0JpRyxXQUFsQixDQUE4QixJQUE5Qjs7QUFFQWhCLHVCQUFXLFlBQVc7QUFDbEIsb0JBQUk3QyxNQUFNMnZDLE1BQVYsRUFBa0I7QUFDZDN2QywwQkFBTTJ2QyxNQUFOLENBQWF4d0IsTUFBYjtBQUNIOztBQUVEdmhCLGtCQUFFLGNBQUYsRUFBa0J1aEIsTUFBbEI7O0FBRUEsb0JBQUksQ0FBQ3UxQixDQUFMLEVBQVE7QUFDSjEwQywwQkFBTXlCLEdBQU4sQ0FBVXZDLE9BQVYsQ0FBa0IsaUJBQWxCO0FBQ0g7QUFFSixhQVhELEVBV0djLE1BQU1neEIsQ0FBTixDQUFRdWMsZ0JBQVIsR0FBMkIsRUFYOUI7QUFZSCxTQTdERDs7QUErREEzdkMsVUFBRTJHLEVBQUYsQ0FBS3dyQyxZQUFMLEdBQW9CLFVBQVMvK0IsT0FBVCxFQUFrQjtBQUNsQyxtQkFBTyxLQUFLblIsSUFBTCxDQUFVLFlBQVc7QUFDeEIsb0JBQUksQ0FBQ2pDLEVBQUVxQixJQUFGLENBQU8sSUFBUCxFQUFhLGNBQWIsQ0FBTCxFQUFtQztBQUMvQnJCLHNCQUFFcUIsSUFBRixDQUFPLElBQVAsRUFBYSxjQUFiLEVBQTZCLElBQUlrd0MsTUFBSixDQUFXLElBQVgsRUFBaUJuK0IsT0FBakIsQ0FBN0I7QUFDSCxpQkFGRCxNQUVPO0FBQ0gsd0JBQUk7QUFDQXBULDBCQUFFLElBQUYsRUFBUXFCLElBQVIsQ0FBYSxjQUFiLEVBQTZCcVUsSUFBN0I7QUFDSCxxQkFGRCxDQUVFLE9BQU85UyxHQUFQLEVBQVk7QUFDVkMsZ0NBQVFDLEtBQVIsQ0FBYyx5Q0FBZDtBQUNIO0FBQ0o7QUFDSixhQVZNLENBQVA7QUFXSCxTQVpEOztBQWNBOUMsVUFBRTJHLEVBQUYsQ0FBS3dyQyxZQUFMLENBQWtCWCxPQUFsQixHQUE0QixFQUE1QjtBQUVILEtBbnpDRDtBQXN6Q0MsQ0F0MENBLENBQUQ7OztBQ0pBOzs7OztBQUtBLENBQUMsVUFBVXh4QyxDQUFWLEVBQWE7O0FBRVpBLElBQUUyRyxFQUFGLENBQUs4RixNQUFMLENBQVk7QUFDVnNxQyxnQkFBWSxvQkFBUzNqQyxPQUFULEVBQWtCN0wsUUFBbEIsRUFBNEI7O0FBRXRDLFVBQUl5dkMsaUJBQWlCLEVBQXJCLENBRnNDLENBRWI7QUFDekIsVUFBSUMsaUJBQWlCLEdBQXJCLENBSHNDLENBR1o7QUFDMUIsVUFBSUMsV0FBVztBQUNiO0FBQ0E7QUFDQSxPQUFDLE1BQUQsRUFBUyxNQUFULENBSGEsRUFHSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBSmEsRUFJSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBTGEsRUFLSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBTmEsRUFNSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBUGEsRUFPSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBUmEsRUFRSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBVGEsRUFTSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBVmEsRUFVSztBQUNsQjtBQUNBO0FBQ0EsT0FBQyxNQUFELEVBQVMsTUFBVCxDQWJhLEVBYUs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQWRhLEVBY0s7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQWZhLEVBZUs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQWhCYSxFQWdCSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBakJhLEVBaUJLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FsQmEsRUFrQks7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQW5CYSxFQW1CSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBcEJhLEVBb0JLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FyQmEsRUFxQks7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQXRCYSxFQXNCSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBdkJhLEVBdUJLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0F4QmEsRUF3Qks7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQXpCYSxFQXlCSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBMUJhLEVBMEJLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0EzQmEsRUEyQks7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQTVCYSxFQTRCSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBN0JhLEVBNkJLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0E5QmEsRUE4Qks7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQS9CYSxFQStCSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBaENhLEVBZ0NLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FqQ2EsRUFpQ0s7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQWxDYSxFQWtDSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBbkNhLEVBbUNLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FwQ2EsRUFvQ0s7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQXJDYSxFQXFDSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBdENhLEVBc0NLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0F2Q2EsRUF1Q0s7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQXhDYSxFQXdDSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBekNhLEVBeUNLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0ExQ2EsRUEwQ0s7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQTNDYSxFQTJDSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBNUNhLEVBNENLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0E3Q2EsRUE2Q0s7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQTlDYSxFQThDSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBL0NhLEVBK0NLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FoRGEsRUFnREs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQWpEYSxFQWlESztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBbERhLEVBa0RLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FuRGEsRUFtREs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQXBEYSxFQW9ESztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBckRhLEVBcURLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0F0RGEsRUFzREs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQXZEYSxFQXVESztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBeERhLEVBd0RLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0F6RGEsRUF5REs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQTFEYSxFQTBESztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBM0RhLEVBMkRLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0E1RGEsRUE0REs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQTdEYSxFQTZESztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBOURhLEVBOERLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0EvRGEsRUErREs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQWhFYSxFQWdFSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBakVhLEVBaUVLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FsRWEsRUFrRUs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQW5FYSxFQW1FSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBcEVhLEVBb0VLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FyRWEsRUFxRUs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQXRFYSxFQXNFSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBdkVhLEVBdUVLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0F4RWEsRUF3RUs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQXpFYSxFQXlFSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBMUVhLEVBMEVLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0EzRWEsRUEyRUs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQTVFYSxFQTRFSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBN0VhLEVBNkVLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0E5RWEsRUE4RUs7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQS9FYSxFQStFSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBaEZhLEVBZ0ZLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FqRmEsRUFpRks7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQWxGYSxFQWtGSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBbkZhLEVBbUZLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FwRmEsRUFvRks7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQXJGYSxFQXFGSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBdEZhLEVBc0ZLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0F2RmEsRUF1Rks7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQXhGYSxFQXdGSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBekZhLEVBeUZLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0ExRmEsRUEwRks7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQTNGYSxFQTJGSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBNUZhLEVBNEZLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0E3RmEsRUE2Rks7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQTlGYSxFQThGSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBL0ZhLEVBK0ZLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FoR2EsRUFnR0s7QUFDbEIsT0FBQyxNQUFELEVBQVMsTUFBVCxDQWpHYSxFQWlHSztBQUNsQixPQUFDLE1BQUQsRUFBUyxNQUFULENBbEdhLEVBa0dLO0FBQ2xCLE9BQUMsTUFBRCxFQUFTLE1BQVQsQ0FuR2EsQ0FtR0s7QUFuR0wsT0FBZjs7QUFzR0EsVUFBSS85QixXQUFXO0FBQ2JnK0Isc0JBQWMsQ0FERDtBQUViQyw2QkFBcUIsQ0FGUjtBQUdiQyx5QkFBaUIzd0MsT0FBTzR3QyxrQkFBUCxJQUE2QixFQUhqQztBQUliQyxpQkFBUyxRQUpJLENBSUs7QUFKTCxPQUFmOztBQU9BLFVBQUd2M0MsRUFBRWkwQixVQUFGLENBQWE3Z0IsT0FBYixLQUF5QixDQUFDN0wsUUFBN0IsRUFBdUM7QUFDckNBLG1CQUFXNkwsT0FBWDtBQUNBQSxrQkFBVSxFQUFWO0FBQ0Q7O0FBRURBLGdCQUFVcFQsRUFBRXlNLE1BQUYsQ0FBUzBNLFFBQVQsRUFBbUIvRixPQUFuQixDQUFWOztBQUVBLGVBQVNva0MsOEJBQVQsQ0FBd0NodkMsR0FBeEMsRUFBNkNpdkMsT0FBN0MsRUFBc0Q7QUFDcEQsYUFBSyxJQUFJaDBDLElBQUkrRSxJQUFJekYsTUFBSixHQUFhLENBQTFCLEVBQTZCVSxLQUFLLENBQWxDLEVBQXFDQSxHQUFyQyxFQUEwQztBQUN4QyxjQUFJZzBDLFFBQVEsQ0FBUixLQUFjanZDLElBQUlrdkMsVUFBSixDQUFlajBDLENBQWYsQ0FBZCxJQUFtQytFLElBQUlrdkMsVUFBSixDQUFlajBDLENBQWYsS0FBcUJnMEMsUUFBUSxDQUFSLENBQTVELEVBQXdFO0FBQ3RFLG1CQUFPQSxRQUFRLENBQVIsSUFBYUEsUUFBUSxDQUFSLENBQWIsR0FBMEIsQ0FBakM7QUFDRDtBQUNGO0FBQ0QsZUFBTyxDQUFQO0FBQ0Q7O0FBRUQsZUFBU0UsU0FBVCxDQUFtQm52QyxHQUFuQixFQUF3QjtBQUN0QixZQUFJNEssUUFBUW1rQyxPQUFSLEtBQW9CLFFBQXhCLEVBQWtDO0FBQ2hDLGVBQUssSUFBSTl6QyxJQUFJLENBQWIsRUFBZ0JBLElBQUkyUCxRQUFRaWtDLGVBQVIsQ0FBd0J0MEMsTUFBNUMsRUFBb0RVLEdBQXBELEVBQXlEO0FBQ3ZELGdCQUFJK0UsSUFBSXZILFdBQUosR0FBa0JTLE9BQWxCLENBQTBCMFIsUUFBUWlrQyxlQUFSLENBQXdCNXpDLENBQXhCLEVBQTJCeEMsV0FBM0IsRUFBMUIsTUFBd0UsQ0FBQyxDQUE3RSxFQUFnRjtBQUM1RSxxQkFBTyxJQUFQO0FBQ0g7QUFDRjtBQUNELGlCQUFPLEtBQVA7QUFDRCxTQVBELE1BT087QUFDTCxpQkFBT2pCLEVBQUUra0MsT0FBRixDQUFVdjhCLEdBQVYsRUFBZTRLLFFBQVFpa0MsZUFBdkIsSUFBMEMsQ0FBQyxDQUEzQyxHQUErQyxJQUEvQyxHQUFzRCxLQUE3RDtBQUNEO0FBQ0Y7O0FBRUQsZUFBU08sZ0JBQVQsR0FBNEI7QUFDMUIsWUFBSUMsV0FBVzczQyxFQUFFLElBQUYsRUFBUTJRLEdBQVIsRUFBZjtBQUNBLFlBQUltbkMsYUFBYSxDQUFqQjtBQUFBLFlBQW9CNzdCLFFBQVEsS0FBNUI7O0FBRUE7QUFDQSxZQUFJLENBQUMwN0IsVUFBVUUsUUFBVixDQUFMLEVBQTBCOztBQUV4QjtBQUNBLGVBQUssSUFBSXAwQyxJQUFJeXpDLFNBQVNuMEMsTUFBVCxHQUFrQixDQUEvQixFQUFrQ1UsS0FBSyxDQUF2QyxFQUEwQ0EsR0FBMUMsRUFBK0M7QUFDN0NxMEMsMEJBQWNOLCtCQUErQkssUUFBL0IsRUFBeUNYLFNBQVN6ekMsQ0FBVCxDQUF6QyxDQUFkO0FBQ0Q7QUFFRixTQVBELE1BT087QUFDTHEwQyx1QkFBYSxDQUFiO0FBQ0Q7O0FBRUQ7QUFDQUEscUJBQWE3MEMsS0FBSzgwQyxHQUFMLENBQVM5MEMsS0FBS0UsR0FBTCxDQUFTMjBDLFVBQVQsRUFBcUJELFNBQVM5MEMsTUFBOUIsQ0FBVCxLQUFtRCxJQUFFcVEsUUFBUWdrQyxtQkFBN0QsQ0FBYjs7QUFFQW43QixnQkFBUzY3QixhQUFhZCxjQUFiLElBQStCYSxTQUFTOTBDLE1BQVQsSUFBbUJxUSxRQUFRK2pDLFlBQW5FOztBQUVBO0FBQ0FXLHFCQUFjQSxhQUFhYixjQUFkLEdBQWdDLEdBQTdDO0FBQ0FhLHFCQUFjQSxhQUFhLEdBQWQsR0FBcUIsR0FBckIsR0FBMkJBLFVBQXhDOztBQUVBdndDLGlCQUFTbEIsSUFBVCxDQUFjLElBQWQsRUFBb0I0VixLQUFwQixFQUEyQjY3QixVQUEzQjtBQUNEOztBQUVELFdBQUs3MUMsSUFBTCxDQUFVLFlBQVk7QUFDckIsWUFBR2pDLEVBQUUsSUFBRixFQUFRMlEsR0FBUixFQUFILEVBQWtCO0FBQ2ZpbkMsMkJBQWlCanlDLEtBQWpCLENBQXVCLElBQXZCO0FBQ0Q7QUFDRixPQUpEOztBQU1BLGFBQU8sS0FBSzFELElBQUwsQ0FBVSxZQUFZO0FBQzNCakMsVUFBRSxJQUFGLEVBQVE4SCxJQUFSLENBQWEsMENBQWIsRUFBeUQ4dkMsZ0JBQXpEO0FBQ0QsT0FGTSxDQUFQO0FBSUQ7QUFyTFMsR0FBWjtBQXdMRCxDQTFMRCxFQTBMR2h2QyxNQTFMSDs7Ozs7QUNMQTs7Ozs7Ozs7OztBQVVDLFdBQVVBLE1BQVYsRUFBa0I7QUFDbkI7OztBQUtBLFFBQUlvdkMsY0FBYyxFQUFsQjs7QUFFQSxRQUFJO0FBQ0EsWUFBSSxDQUFDcHZDLE1BQUQsSUFBV21rQyxNQUFYLElBQXFCQSxPQUFPL1osT0FBaEMsRUFBeUM7QUFDckMsZ0JBQUlwcUIsU0FBU3FxQixRQUFRLFFBQVIsQ0FBYjtBQUFBLGdCQUNJZ2xCLFFBQVFobEIsUUFBUSxPQUFSLEVBQWlCZ2xCLEtBRDdCO0FBRUFydkMscUJBQVNBLE9BQU9xdkMsUUFBUUMsWUFBZixDQUFUO0FBQ0g7QUFDSixLQU5ELENBTUUsT0FBT0MsTUFBUCxFQUFlLENBQUU7O0FBRWxCLGVBQVVuNEMsQ0FBVixFQUFhZzRDLFdBQWIsRUFBMEI7QUFDdkI7O0FBQ0EsWUFBSUksYUFBYSxFQUFqQjs7QUFFQUosb0JBQVlLLGtCQUFaLEdBQWlDLENBQzdCLFlBRDZCLEVBQ2YsNEJBRGUsRUFDZSxZQURmLEVBQzZCLFdBRDdCLEVBRTdCLFNBRjZCLEVBRWxCLGNBRmtCLENBQWpDOztBQUtBRCxtQkFBV0UsWUFBWCxHQUEwQixVQUFVbGxDLE9BQVYsRUFBbUJtbEMsSUFBbkIsRUFBeUJyaUIsS0FBekIsRUFBZ0M7QUFDdEQsZ0JBQUlxaUIsS0FBS3YwQixLQUFMLENBQVcsOExBQVgsQ0FBSixFQUFnTjtBQUM1TSx1QkFBT2tTLEtBQVA7QUFDSDtBQUNELG1CQUFPLENBQVA7QUFDSCxTQUxEOztBQU9Ba2lCLG1CQUFXSSxVQUFYLEdBQXdCLFVBQVVwbEMsT0FBVixFQUFtQm1sQyxJQUFuQixFQUF5QnJpQixLQUF6QixFQUFnQztBQUNwRCxnQkFBSXVpQixVQUFVRixLQUFLeDFDLE1BQW5CO0FBQUEsZ0JBQ0kyMUMsV0FBV3oxQyxLQUFLRSxHQUFMLENBQVNzMUMsT0FBVCxFQUFrQnJsQyxRQUFRd1EsS0FBUixDQUFjKzBCLFVBQWhDLENBRGY7QUFFQSxnQkFBSUYsVUFBVXJsQyxRQUFRd2xDLE1BQVIsQ0FBZUMsT0FBN0IsRUFBc0M7QUFDbENILDJCQUFZQSxXQUFXeGlCLEtBQXZCO0FBQ0g7QUFDRCxtQkFBT3dpQixRQUFQO0FBQ0gsU0FQRDs7QUFTQU4sbUJBQVdVLHFCQUFYLEdBQW1DLFVBQVUxbEMsT0FBVixFQUFtQm1sQyxJQUFuQixFQUF5QnJpQixLQUF6QixFQUFnQztBQUMvRCxnQkFBSTZpQixXQUFXLzRDLEVBQUVvVCxRQUFRd2xDLE1BQVIsQ0FBZUksYUFBakIsRUFBZ0Nyb0MsR0FBaEMsRUFBZjtBQUNBLGdCQUFJb29DLFlBQVlSLEtBQUt0M0MsV0FBTCxHQUFtQitpQixLQUFuQixDQUF5QiswQixTQUFTcHdDLE9BQVQsQ0FBaUIsNkNBQWpCLEVBQWdFLE1BQWhFLEVBQXdFMUgsV0FBeEUsRUFBekIsQ0FBaEIsRUFBaUk7QUFDN0gsdUJBQU9pMUIsS0FBUDtBQUNIO0FBQ0QsbUJBQU8sQ0FBUDtBQUNILFNBTkQ7O0FBUUFraUIsbUJBQVdhLHVCQUFYLEdBQXFDLFVBQVU3bEMsT0FBVixFQUFtQm1sQyxJQUFuQixFQUF5QnJpQixLQUF6QixFQUFnQztBQUNqRSxnQkFBSXFpQixLQUFLdjBCLEtBQUwsQ0FBVywrQkFBWCxLQUNLdTBCLEtBQUt2MEIsS0FBTCxDQUFXLFlBQVgsS0FBNEJ1MEIsS0FBS3YwQixLQUFMLENBQVcsU0FBWCxDQURqQyxJQUVLdTBCLEtBQUt2MEIsS0FBTCxDQUFXLDZCQUFYLEtBQTZDdTBCLEtBQUt2MEIsS0FBTCxDQUFXLGNBQVgsQ0FGdEQsRUFFbUY7QUFDL0UsdUJBQU9rUyxLQUFQO0FBQ0g7QUFDRCxtQkFBTyxDQUFQO0FBQ0gsU0FQRDs7QUFTQWtpQixtQkFBV2MsZUFBWCxHQUE2QixVQUFVOWxDLE9BQVYsRUFBbUJtbEMsSUFBbkIsRUFBeUJyaUIsS0FBekIsRUFBZ0M7QUFDekQsZ0JBQUlxaUIsS0FBS3YwQixLQUFMLENBQVcsU0FBWCxDQUFKLEVBQTJCO0FBQUUsdUJBQU9rUyxLQUFQO0FBQWU7QUFDNUMsbUJBQU8sQ0FBUDtBQUNILFNBSEQ7O0FBS0FraUIsbUJBQVdlLGFBQVgsR0FBMkIsVUFBVS9sQyxPQUFWLEVBQW1CbWxDLElBQW5CLEVBQXlCcmlCLEtBQXpCLEVBQWdDO0FBQ3ZELGdCQUFJa2pCLFFBQVEsS0FBWjtBQUFBLGdCQUNJNzFCLENBREo7QUFFQSxnQkFBSWcxQixLQUFLeDFDLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNqQi9DLGtCQUFFaUMsSUFBRixDQUFPKzFDLFlBQVlLLGtCQUFuQixFQUF1QyxVQUFVejZCLEdBQVYsRUFBZXk3QixHQUFmLEVBQW9CO0FBQ3ZELHdCQUFJRCxLQUFKLEVBQVc7QUFBRTtBQUFTO0FBQ3RCLHdCQUFJRSxZQUFZLENBQUNELEdBQUQsRUFBTUEsSUFBSXAxQyxLQUFKLENBQVUsRUFBVixFQUFja3BCLE9BQWQsR0FBd0JyVixJQUF4QixDQUE2QixFQUE3QixDQUFOLENBQWhCO0FBQ0E5WCxzQkFBRWlDLElBQUYsQ0FBT3EzQyxTQUFQLEVBQWtCLFVBQVUxN0IsR0FBVixFQUFlMjdCLFFBQWYsRUFBeUI7QUFDdkMsNkJBQUtoMkIsSUFBSSxDQUFULEVBQVlBLElBQUtnMUIsS0FBS3gxQyxNQUFMLEdBQWMsQ0FBL0IsRUFBbUN3Z0IsS0FBSyxDQUF4QyxFQUEyQztBQUFFO0FBQ3pDLGdDQUFJZzJCLFNBQVM3M0MsT0FBVCxDQUFpQjYyQyxLQUFLdDNDLFdBQUwsR0FBbUI2bUMsU0FBbkIsQ0FBNkJ2a0IsQ0FBN0IsRUFBZ0NBLElBQUksQ0FBcEMsQ0FBakIsSUFBMkQsQ0FBQyxDQUFoRSxFQUFtRTtBQUMvRDYxQix3Q0FBUSxJQUFSO0FBQ0g7QUFDSjtBQUNKLHFCQU5EO0FBT0gsaUJBVkQ7QUFXQSxvQkFBSUEsS0FBSixFQUFXO0FBQUUsMkJBQU9sakIsS0FBUDtBQUFlO0FBQy9CO0FBQ0QsbUJBQU8sQ0FBUDtBQUNILFNBbEJEOztBQW9CQWtpQixtQkFBV29CLGFBQVgsR0FBMkIsVUFBVXBtQyxPQUFWLEVBQW1CbWxDLElBQW5CLEVBQXlCcmlCLEtBQXpCLEVBQWdDO0FBQ3ZELG1CQUFPcWlCLEtBQUt2MEIsS0FBTCxDQUFXLE9BQVgsS0FBdUJrUyxLQUE5QjtBQUNILFNBRkQ7O0FBSUFraUIsbUJBQVdxQixhQUFYLEdBQTJCLFVBQVVybUMsT0FBVixFQUFtQm1sQyxJQUFuQixFQUF5QnJpQixLQUF6QixFQUFnQztBQUN2RCxtQkFBT3FpQixLQUFLdjBCLEtBQUwsQ0FBVyxPQUFYLEtBQXVCa1MsS0FBOUI7QUFDSCxTQUZEOztBQUlBa2lCLG1CQUFXc0IsYUFBWCxHQUEyQixVQUFVdG1DLE9BQVYsRUFBbUJtbEMsSUFBbkIsRUFBeUJyaUIsS0FBekIsRUFBZ0M7QUFDdkQsbUJBQU9xaUIsS0FBS3YwQixLQUFMLENBQVcsS0FBWCxLQUFxQmtTLEtBQTVCO0FBQ0gsU0FGRDs7QUFJQWtpQixtQkFBV3VCLGdCQUFYLEdBQThCLFVBQVV2bUMsT0FBVixFQUFtQm1sQyxJQUFuQixFQUF5QnJpQixLQUF6QixFQUFnQztBQUMxRCxtQkFBT3FpQixLQUFLdjBCLEtBQUwsQ0FBVyx5QkFBWCxLQUF5Q2tTLEtBQWhEO0FBQ0gsU0FGRDs7QUFJQWtpQixtQkFBV3dCLGtCQUFYLEdBQWdDLFVBQVV4bUMsT0FBVixFQUFtQm1sQyxJQUFuQixFQUF5QnJpQixLQUF6QixFQUFnQztBQUM1RCxtQkFBT3FpQixLQUFLdjBCLEtBQUwsQ0FBVywwQkFBWCxLQUEwQ2tTLEtBQWpEO0FBQ0gsU0FGRDs7QUFJQWtpQixtQkFBV3lCLGtCQUFYLEdBQWdDLFVBQVV6bUMsT0FBVixFQUFtQm1sQyxJQUFuQixFQUF5QnJpQixLQUF6QixFQUFnQztBQUM1RCxtQkFBT3FpQixLQUFLdjBCLEtBQUwsQ0FBVyx3REFBWCxLQUF3RWtTLEtBQS9FO0FBQ0gsU0FGRDs7QUFJQWtpQixtQkFBVzBCLG1CQUFYLEdBQWlDLFVBQVUxbUMsT0FBVixFQUFtQm1sQyxJQUFuQixFQUF5QnJpQixLQUF6QixFQUFnQztBQUM3RCxtQkFBT3FpQixLQUFLdjBCLEtBQUwsQ0FBVywrQkFBWCxLQUErQ2tTLEtBQXREO0FBQ0gsU0FGRDs7QUFJQWtpQixtQkFBVzJCLHFCQUFYLEdBQW1DLFVBQVUzbUMsT0FBVixFQUFtQm1sQyxJQUFuQixFQUF5QnJpQixLQUF6QixFQUFnQztBQUMvRCxtQkFBT3FpQixLQUFLdjBCLEtBQUwsQ0FBVyxZQUFYLEtBQTRCdTBCLEtBQUt2MEIsS0FBTCxDQUFXLFNBQVgsQ0FBNUIsSUFBcURrUyxLQUE1RDtBQUNILFNBRkQ7O0FBSUFraUIsbUJBQVc0Qix5QkFBWCxHQUF1QyxVQUFVNW1DLE9BQVYsRUFBbUJtbEMsSUFBbkIsRUFBeUJyaUIsS0FBekIsRUFBZ0M7QUFDbkUsbUJBQU9xaUIsS0FBS3YwQixLQUFMLENBQVcsaUZBQVgsS0FBaUdrUyxLQUF4RztBQUNILFNBRkQ7O0FBSUE4aEIsb0JBQVlJLFVBQVosR0FBeUJBLFVBQXpCOztBQUVBSixvQkFBWWlDLFlBQVosR0FBMkIsVUFBVTdtQyxPQUFWLEVBQW1CbWxDLElBQW5CLEVBQXlCO0FBQ2hELGdCQUFJMkIsYUFBYSxDQUFqQjs7QUFFQWw2QyxjQUFFaUMsSUFBRixDQUFPbVIsUUFBUXdRLEtBQVIsQ0FBY3UyQixTQUFyQixFQUFnQyxVQUFVbDJCLElBQVYsRUFBZ0JtMkIsTUFBaEIsRUFBd0I7QUFDcEQsb0JBQUlBLE1BQUosRUFBWTtBQUNSLHdCQUFJbGtCLFFBQVE5aUIsUUFBUXdRLEtBQVIsQ0FBY3kyQixNQUFkLENBQXFCcDJCLElBQXJCLENBQVo7QUFBQSx3QkFDSXEyQixRQUFRdEMsWUFBWUksVUFBWixDQUF1Qm4wQixJQUF2QixDQURaO0FBQUEsd0JBRUl1USxNQUZKO0FBQUEsd0JBR0krbEIsWUFISjs7QUFLQSx3QkFBSSxDQUFDdjZDLEVBQUVpMEIsVUFBRixDQUFhcW1CLEtBQWIsQ0FBTCxFQUEwQjtBQUN0QkEsZ0NBQVFsbkMsUUFBUXdRLEtBQVIsQ0FBYzQyQixLQUFkLENBQW9CdjJCLElBQXBCLENBQVI7QUFDSDs7QUFFRCx3QkFBSWprQixFQUFFaTBCLFVBQUYsQ0FBYXFtQixLQUFiLENBQUosRUFBeUI7QUFDckI5bEIsaUNBQVM4bEIsTUFBTWxuQyxPQUFOLEVBQWVtbEMsSUFBZixFQUFxQnJpQixLQUFyQixDQUFUO0FBQ0EsNEJBQUkxQixNQUFKLEVBQVk7QUFDUjBsQiwwQ0FBYzFsQixNQUFkO0FBQ0g7QUFDRCw0QkFBSUEsU0FBUyxDQUFULElBQWUsQ0FBQ3gwQixFQUFFMGlDLFNBQUYsQ0FBWWxPLE1BQVosQ0FBRCxJQUF3QixDQUFDQSxNQUE1QyxFQUFxRDtBQUNqRCtsQiwyQ0FBZW5uQyxRQUFRcW5DLEVBQVIsQ0FBV0MsU0FBWCxDQUFxQnRuQyxPQUFyQixFQUE4QjZRLElBQTlCLENBQWY7QUFDQSxnQ0FBSXMyQixhQUFheDNDLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkI7QUFDekJxUSx3Q0FBUXVuQyxTQUFSLENBQWtCQyxNQUFsQixDQUF5QnI1QyxJQUF6QixDQUE4Qmc1QyxZQUE5QjtBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBQ0osYUF4QkQ7O0FBMEJBLG1CQUFPTCxVQUFQO0FBQ0gsU0E5QkQ7QUErQkgsS0F4SUEsRUF3SUN0eEMsTUF4SUQsRUF3SVNvdkMsV0F4SVQsQ0FBRDs7QUEwSUEsUUFBSTtBQUNBLFlBQUlqTCxVQUFVQSxPQUFPL1osT0FBckIsRUFBOEI7QUFDMUIrWixtQkFBTy9aLE9BQVAsR0FBaUJnbEIsV0FBakI7QUFDSDtBQUNKLEtBSkQsQ0FJRSxPQUFPRyxNQUFQLEVBQWUsQ0FBRTs7QUFFbkI7OztBQUtBLFFBQUkwQyxpQkFBaUIsRUFBckI7O0FBRUFBLG1CQUFlakMsTUFBZixHQUF3QixFQUF4QjtBQUNBaUMsbUJBQWVqQyxNQUFmLENBQXNCQyxPQUF0QixHQUFnQyxDQUFoQztBQUNBZ0MsbUJBQWVqQyxNQUFmLENBQXNCSSxhQUF0QixHQUFzQyxXQUF0QztBQUNBNkIsbUJBQWVqQyxNQUFmLENBQXNCa0MsVUFBdEIsR0FBbUM7QUFDL0I7QUFEK0IsS0FBbkM7QUFHQUQsbUJBQWVqQyxNQUFmLENBQXNCbUMsTUFBdEIsR0FBK0J4MEMsU0FBL0I7QUFDQXMwQyxtQkFBZWpDLE1BQWYsQ0FBc0JvQyxPQUF0QixHQUFnQ3owQyxTQUFoQztBQUNBczBDLG1CQUFlakMsTUFBZixDQUFzQnFDLE1BQXRCLEdBQStCLEtBQS9CO0FBQ0FKLG1CQUFlakMsTUFBZixDQUFzQnNDLFdBQXRCLEdBQW9DO0FBQ2hDO0FBRGdDLEtBQXBDO0FBR0FMLG1CQUFlakMsTUFBZixDQUFzQnVDLEtBQXRCLEdBQThCLEtBQTlCOztBQUVBTixtQkFBZWozQixLQUFmLEdBQXVCLEVBQXZCO0FBQ0FpM0IsbUJBQWVqM0IsS0FBZixDQUFxQjQyQixLQUFyQixHQUE2QixFQUE3QjtBQUNBSyxtQkFBZWozQixLQUFmLENBQXFCeTJCLE1BQXJCLEdBQThCO0FBQzFCL0Isc0JBQWMsQ0FBQyxHQURXO0FBRTFCRSxvQkFBWSxDQUFDLEVBRmE7QUFHMUJNLCtCQUF1QixDQUFDLEdBSEU7QUFJMUJLLHVCQUFlLENBQUMsRUFKVTtBQUsxQkYsaUNBQXlCLENBTEM7QUFNMUJDLHlCQUFpQixDQUFDLEVBTlE7QUFPMUJNLHVCQUFlLENBUFc7QUFRMUJDLHVCQUFlLENBUlc7QUFTMUJDLHVCQUFlLENBVFc7QUFVMUJDLDBCQUFrQixDQVZRO0FBVzFCQyw0QkFBb0IsQ0FYTTtBQVkxQkMsNEJBQW9CLENBWk07QUFhMUJDLDZCQUFxQixDQWJLO0FBYzFCQywrQkFBdUIsQ0FkRztBQWUxQkMsbUNBQTJCO0FBZkQsS0FBOUI7QUFpQkFhLG1CQUFlajNCLEtBQWYsQ0FBcUJ1MkIsU0FBckIsR0FBaUM7QUFDN0I3QixzQkFBYyxJQURlO0FBRTdCRSxvQkFBWSxJQUZpQjtBQUc3Qk0sK0JBQXVCLElBSE07QUFJN0JLLHVCQUFlLElBSmM7QUFLN0JGLGlDQUF5QixLQUxJO0FBTTdCQyx5QkFBaUIsS0FOWTtBQU83Qk0sdUJBQWUsSUFQYztBQVE3QkMsdUJBQWUsSUFSYztBQVM3QkMsdUJBQWUsSUFUYztBQVU3QkMsMEJBQWtCLElBVlc7QUFXN0JDLDRCQUFvQixJQVhTO0FBWTdCQyw0QkFBb0IsSUFaUztBQWE3QkMsNkJBQXFCLElBYlE7QUFjN0JDLCtCQUF1QixJQWRNO0FBZTdCQyxtQ0FBMkI7QUFmRSxLQUFqQztBQWlCQWEsbUJBQWVqM0IsS0FBZixDQUFxQiswQixVQUFyQixHQUFrQyxHQUFsQzs7QUFFQWtDLG1CQUFlSixFQUFmLEdBQW9CLEVBQXBCO0FBQ0FJLG1CQUFlSixFQUFmLENBQWtCVyxZQUFsQixHQUFpQyxDQUFDLE9BQUQsRUFBVSxTQUFWLEVBQXFCLFNBQXJCLENBQWpDO0FBQ0FQLG1CQUFlSixFQUFmLENBQWtCWSxlQUFsQixHQUFvQyxJQUFwQztBQUNBUixtQkFBZUosRUFBZixDQUFrQmEsV0FBbEIsR0FBZ0MsS0FBaEM7QUFDQVQsbUJBQWVKLEVBQWYsQ0FBa0JjLGdCQUFsQixHQUFxQyxRQUFyQztBQUNBVixtQkFBZUosRUFBZixDQUFrQmUsVUFBbEIsR0FBK0IsS0FBL0I7QUFDQVgsbUJBQWVKLEVBQWYsQ0FBa0JDLFNBQWxCLEdBQThCLFVBQVV0bkMsT0FBVixFQUFtQjNILEdBQW5CLEVBQXdCO0FBQ2xEOztBQUNBLFlBQUl5RSxPQUFPa0QsUUFBUXFuQyxFQUFSLENBQVdnQixhQUFYLENBQXlCaHdDLEdBQXpCLENBQVg7QUFDQSxZQUFJLENBQUN5RSxJQUFMLEVBQVc7QUFBRSxtQkFBTyxFQUFQO0FBQVk7QUFDekIsZUFBT0EsSUFBUDtBQUNILEtBTEQ7QUFNQTJxQyxtQkFBZUosRUFBZixDQUFrQmlCLFlBQWxCLEdBQWlDLFVBQVVkLE1BQVYsRUFBa0I7QUFDL0M7O0FBQ0EsWUFBSWovQixVQUFVLCtEQUFkOztBQUVBL1MsZUFBTzNHLElBQVAsQ0FBWTI0QyxNQUFaLEVBQW9CLFVBQVVoOUIsR0FBVixFQUFlaGIsR0FBZixFQUFvQjtBQUNwQytZLHVCQUFXLFNBQVMvWSxHQUFULEdBQWUsT0FBMUI7QUFDSCxTQUZEO0FBR0ErWSxtQkFBVyxhQUFYO0FBQ0EsZUFBT0EsT0FBUDtBQUNILEtBVEQ7QUFVQWsvQixtQkFBZUosRUFBZixDQUFrQmdCLGFBQWxCLEdBQWtDO0FBQzlCakQsb0JBQVksNEJBRGtCO0FBRTlCRixzQkFBYyx3Q0FGZ0I7QUFHOUJRLCtCQUF1Qiw0Q0FITztBQUk5QkcsaUNBQXlCLGlDQUpLO0FBSzlCQyx5QkFBaUIsc0JBTGE7QUFNOUJDLHVCQUFlO0FBTmUsS0FBbEM7QUFRQTBCLG1CQUFlSixFQUFmLENBQWtCa0IsUUFBbEIsR0FBNkIsQ0FBQyxNQUFELEVBQVMsUUFBVCxFQUFtQixRQUFuQixFQUE2QixRQUE3QixFQUF1QyxhQUF2QyxDQUE3QjtBQUNBZCxtQkFBZUosRUFBZixDQUFrQm1CLFlBQWxCLEdBQWlDLElBQWpDO0FBQ0FmLG1CQUFlSixFQUFmLENBQWtCb0IsNkJBQWxCLEdBQWtELEtBQWxEO0FBQ0FoQixtQkFBZUosRUFBZixDQUFrQnFCLGtCQUFsQixHQUF1QyxLQUF2QztBQUNBakIsbUJBQWVKLEVBQWYsQ0FBa0JzQixVQUFsQixHQUErQixLQUEvQjtBQUNBbEIsbUJBQWVKLEVBQWYsQ0FBa0JydUIsU0FBbEIsR0FBOEI3bEIsU0FBOUI7QUFDQXMwQyxtQkFBZUosRUFBZixDQUFrQnVCLFNBQWxCLEdBQThCO0FBQzFCQyxrQkFBVTExQyxTQURnQjtBQUUxQjIxQyxpQkFBUyxVQUZpQjtBQUcxQnRCLGdCQUFRcjBDO0FBSGtCLEtBQTlCO0FBS0FzMEMsbUJBQWVKLEVBQWYsQ0FBa0JKLE1BQWxCLEdBQTJCLENBQUMsRUFBRCxFQUFLLEVBQUwsRUFBUyxFQUFULEVBQWEsRUFBYixDQUEzQjs7QUFFQTs7O0FBS0EsUUFBSUksS0FBSyxFQUFUOztBQUVDLGVBQVV6NkMsQ0FBVixFQUFheTZDLEVBQWIsRUFBaUI7QUFDZDs7QUFFQSxZQUFJMEIsZ0JBQWdCLENBQUMsT0FBRCxFQUFVLFNBQVYsRUFBcUIsU0FBckIsQ0FBcEI7O0FBRUExQixXQUFHMkIsWUFBSCxHQUFrQixVQUFVaHBDLE9BQVYsRUFBbUJ2UCxHQUFuQixFQUF3QjtBQUN0QyxnQkFBSXNvQixVQUFKOztBQUVBO0FBQ0FBLHlCQUFhdG9CLElBQUlrZCxPQUFKLENBQVkzTixRQUFRcW5DLEVBQVIsQ0FBV3J1QixTQUF2QixDQUFiO0FBQ0EsZ0JBQUksRUFBRUQsY0FBY0EsV0FBV3BwQixNQUFYLEtBQXNCLENBQXRDLENBQUosRUFBOEM7QUFDMUNvcEIsNkJBQWF0b0IsSUFBSXFGLE1BQUosRUFBYjtBQUNIO0FBQ0QsbUJBQU9pakIsVUFBUDtBQUNILFNBVEQ7O0FBV0FzdUIsV0FBRzRCLFdBQUgsR0FBaUIsVUFBVWx3QixVQUFWLEVBQXNCcVUsUUFBdEIsRUFBZ0M4YixXQUFoQyxFQUE2QztBQUMxRCxnQkFBSTliLFFBQUosRUFBYztBQUNWLHVCQUFPclUsV0FBV3hvQixJQUFYLENBQWdCNjhCLFFBQWhCLEVBQTBCNzhCLElBQTFCLENBQStCMjRDLFdBQS9CLENBQVA7QUFDSDtBQUNELG1CQUFPbndCLFdBQVd4b0IsSUFBWCxDQUFnQjI0QyxXQUFoQixDQUFQO0FBQ0gsU0FMRDs7QUFPQTdCLFdBQUc4QixhQUFILEdBQW1CLFVBQVVucEMsT0FBVixFQUFtQnZQLEdBQW5CLEVBQXdCO0FBQ3ZDLGdCQUFJc29CLFVBQUosRUFBZ0JxSSxNQUFoQjs7QUFFQSxnQkFBSXBoQixRQUFRdW5DLFNBQVIsQ0FBa0JxQixTQUF0QixFQUFpQztBQUM3Qix1QkFBTzVvQyxRQUFRdW5DLFNBQVIsQ0FBa0JxQixTQUF6QjtBQUNIOztBQUVEN3ZCLHlCQUFhc3VCLEdBQUcyQixZQUFILENBQWdCaHBDLE9BQWhCLEVBQXlCdlAsR0FBekIsQ0FBYjs7QUFFQTJ3QixxQkFBUyxFQUFUO0FBQ0FBLG1CQUFPZ29CLFlBQVAsR0FBc0IvQixHQUFHNEIsV0FBSCxDQUFlbHdCLFVBQWYsRUFBMkIvWSxRQUFRcW5DLEVBQVIsQ0FBV3VCLFNBQVgsQ0FBcUJDLFFBQWhELEVBQTBELGNBQTFELENBQXRCO0FBQ0EsZ0JBQUk3b0MsUUFBUXFuQyxFQUFSLENBQVdvQiw2QkFBZixFQUE4QztBQUMxQ3JuQix1QkFBT2lvQixRQUFQLEdBQWtCam9CLE9BQU9nb0IsWUFBUCxDQUFvQjc0QyxJQUFwQixDQUF5QiwwQkFBekIsQ0FBbEI7QUFDSDs7QUFFRCxnQkFBSSxDQUFDeVAsUUFBUXFuQyxFQUFSLENBQVdhLFdBQWhCLEVBQTZCO0FBQ3pCLG9CQUFJLENBQUNsb0MsUUFBUXFuQyxFQUFSLENBQVdvQiw2QkFBaEIsRUFBK0M7QUFDM0NybkIsMkJBQU9pb0IsUUFBUCxHQUFrQmhDLEdBQUc0QixXQUFILENBQWVsd0IsVUFBZixFQUEyQi9ZLFFBQVFxbkMsRUFBUixDQUFXdUIsU0FBWCxDQUFxQkUsT0FBaEQsRUFBeUQsMEJBQXpELENBQWxCO0FBQ0g7QUFDRDFuQix1QkFBT2tvQixPQUFQLEdBQWlCakMsR0FBRzRCLFdBQUgsQ0FBZWx3QixVQUFmLEVBQTJCL1ksUUFBUXFuQyxFQUFSLENBQVd1QixTQUFYLENBQXFCcEIsTUFBaEQsRUFBd0QsWUFBeEQsQ0FBakI7QUFDSDs7QUFFRHhuQyxvQkFBUXVuQyxTQUFSLENBQWtCcUIsU0FBbEIsR0FBOEJ4bkIsTUFBOUI7QUFDQSxtQkFBT0EsTUFBUDtBQUNILFNBeEJEOztBQTBCQWltQixXQUFHa0MsZUFBSCxHQUFxQixVQUFVdnBDLE9BQVYsRUFBbUJ2UCxHQUFuQixFQUF3QjtBQUN6QyxnQkFBSXNvQixhQUFhc3VCLEdBQUcyQixZQUFILENBQWdCaHBDLE9BQWhCLEVBQXlCdlAsR0FBekIsQ0FBakI7QUFBQSxnQkFDSSs0QyxjQUFjLHFFQURsQjtBQUVBLGdCQUFJeHBDLFFBQVFxbkMsRUFBUixDQUFXb0IsNkJBQWYsRUFBOEM7QUFDMUNlLCtCQUFlLDJDQUFmO0FBQ0g7QUFDREEsMkJBQWUsY0FBZjs7QUFFQSxnQkFBSXhwQyxRQUFRcW5DLEVBQVIsQ0FBV3VCLFNBQVgsQ0FBcUJDLFFBQXpCLEVBQW1DO0FBQy9COXZCLDJCQUFXeG9CLElBQVgsQ0FBZ0J5UCxRQUFRcW5DLEVBQVIsQ0FBV3VCLFNBQVgsQ0FBcUJDLFFBQXJDLEVBQStDLzBCLE1BQS9DLENBQXNEMDFCLFdBQXREO0FBQ0gsYUFGRCxNQUVPO0FBQ0g1OEMsa0JBQUU0OEMsV0FBRixFQUFlbHFCLFdBQWYsQ0FBMkI3dUIsR0FBM0I7QUFDSDtBQUNKLFNBYkQ7O0FBZUE0MkMsV0FBR29DLFVBQUgsR0FBZ0IsVUFBVXpwQyxPQUFWLEVBQW1CdlAsR0FBbkIsRUFBd0IwZ0IsSUFBeEIsRUFBOEJpYyxRQUE5QixFQUF3QztBQUNwRCxnQkFBSXJVLGFBQWFzdUIsR0FBRzJCLFlBQUgsQ0FBZ0JocEMsT0FBaEIsRUFBeUJ2UCxHQUF6QixDQUFqQjtBQUNBLGdCQUFJMjhCLFFBQUosRUFBYztBQUNWclUsMkJBQVd4b0IsSUFBWCxDQUFnQjY4QixRQUFoQixFQUEwQnRaLE1BQTFCLENBQWlDM0MsSUFBakM7QUFDSCxhQUZELE1BRU87QUFDSHZrQixrQkFBRXVrQixJQUFGLEVBQVFtTyxXQUFSLENBQW9CN3VCLEdBQXBCO0FBQ0g7QUFDSixTQVBEOztBQVNBNDJDLFdBQUdxQyxXQUFILEdBQWlCLFVBQVUxcEMsT0FBVixFQUFtQnZQLEdBQW5CLEVBQXdCO0FBQ3JDNDJDLGVBQUdvQyxVQUFILENBQWN6cEMsT0FBZCxFQUF1QnZQLEdBQXZCLEVBQTRCLHdDQUE1QixFQUNnQnVQLFFBQVFxbkMsRUFBUixDQUFXdUIsU0FBWCxDQUFxQkUsT0FEckM7QUFFSCxTQUhEOztBQUtBekIsV0FBR3NDLGFBQUgsR0FBbUIsVUFBVTNwQyxPQUFWLEVBQW1CdlAsR0FBbkIsRUFBd0I7QUFDdkMsZ0JBQUlzb0IsYUFBYXN1QixHQUFHMkIsWUFBSCxDQUFnQmhwQyxPQUFoQixFQUF5QnZQLEdBQXpCLENBQWpCO0FBQ0EsZ0JBQUksQ0FBQzQyQyxHQUFHNEIsV0FBSCxDQUFlbHdCLFVBQWYsRUFBMkIvWSxRQUFRcW5DLEVBQVIsQ0FBV3VCLFNBQVgsQ0FBcUJwQixNQUFoRCxFQUF3RCxZQUF4RCxFQUFzRTczQyxNQUEzRSxFQUFtRjtBQUMvRTAzQyxtQkFBR29DLFVBQUgsQ0FBY3pwQyxPQUFkLEVBQXVCdlAsR0FBdkIsRUFBNEIsbURBQTVCLEVBQ1l1UCxRQUFRcW5DLEVBQVIsQ0FBV3VCLFNBQVgsQ0FBcUJwQixNQURqQztBQUVIO0FBQ0osU0FORDs7QUFRQUgsV0FBR3VDLFdBQUgsR0FBaUIsVUFBVTVwQyxPQUFWLEVBQW1CdlAsR0FBbkIsRUFBd0I7QUFDckM7QUFDQSxtQkFBTyxLQUFQO0FBQ0gsU0FIRDs7QUFLQTQyQyxXQUFHd0MsTUFBSCxHQUFZLFVBQVU3cEMsT0FBVixFQUFtQnZQLEdBQW5CLEVBQXdCO0FBQ2hDLGdCQUFJdVAsUUFBUXFuQyxFQUFSLENBQVdhLFdBQWYsRUFBNEI7QUFDeEJiLG1CQUFHdUMsV0FBSCxDQUFlNXBDLE9BQWYsRUFBd0J2UCxHQUF4QjtBQUNILGFBRkQsTUFFTztBQUNILG9CQUFJdVAsUUFBUXFuQyxFQUFSLENBQVdzQixVQUFmLEVBQTJCO0FBQUV0Qix1QkFBR3NDLGFBQUgsQ0FBaUIzcEMsT0FBakIsRUFBMEJ2UCxHQUExQjtBQUFpQztBQUM5RCxvQkFBSXVQLFFBQVFxbkMsRUFBUixDQUFXbUIsWUFBWCxJQUEyQixDQUFDeG9DLFFBQVFxbkMsRUFBUixDQUFXb0IsNkJBQTNDLEVBQTBFO0FBQ3RFcEIsdUJBQUdxQyxXQUFILENBQWUxcEMsT0FBZixFQUF3QnZQLEdBQXhCO0FBQ0g7QUFDSjtBQUNELGdCQUFJdVAsUUFBUXFuQyxFQUFSLENBQVdZLGVBQWYsRUFBZ0M7QUFDNUJaLG1CQUFHa0MsZUFBSCxDQUFtQnZwQyxPQUFuQixFQUE0QnZQLEdBQTVCO0FBQ0g7QUFDSixTQVpEOztBQWNBNDJDLFdBQUd5QywwQkFBSCxHQUFnQyxDQUFDLE9BQUQsRUFBVSxTQUFWLEVBQXFCLFNBQXJCLENBQWhDOztBQUVBekMsV0FBRzBDLGlCQUFILEdBQXVCLFVBQVUvcEMsT0FBVixFQUFtQnZQLEdBQW5CLEVBQXdCcWxCLFFBQXhCLEVBQWtDazBCLFVBQWxDLEVBQThDO0FBQ2pFLGdCQUFJWixlQUFlL0IsR0FBRzhCLGFBQUgsQ0FBaUJucEMsT0FBakIsRUFBMEJ2UCxHQUExQixFQUErQjI0QyxZQUFsRDtBQUFBLGdCQUNJYSxPQUFPYixhQUFhNzRDLElBQWIsQ0FBa0IsaUJBQWxCLENBRFg7O0FBR0EzRCxjQUFFaUMsSUFBRixDQUFPbVIsUUFBUXFuQyxFQUFSLENBQVdXLFlBQWxCLEVBQWdDLFVBQVV4OUIsR0FBVixFQUFlaFAsS0FBZixFQUFzQjtBQUNsRDR0Qyw2QkFBYXYyQyxXQUFiLENBQXlCMkksS0FBekI7QUFDSCxhQUZEO0FBR0E0dEMseUJBQWF4cUMsUUFBYixDQUFzQm9CLFFBQVFxbkMsRUFBUixDQUFXVyxZQUFYLENBQXdCbHlCLFFBQXhCLENBQXRCO0FBQ0FtMEIsaUJBQUs3dUMsR0FBTCxDQUFTLE9BQVQsRUFBa0I0dUMsYUFBYSxHQUEvQjtBQUNILFNBVEQ7O0FBV0EzQyxXQUFHNkMsYUFBSCxHQUFtQixVQUFVbHFDLE9BQVYsRUFBbUJ2UCxHQUFuQixFQUF3QnFsQixRQUF4QixFQUFrQ2haLElBQWxDLEVBQXdDO0FBQ3ZELGdCQUFJdXNDLFdBQVdoQyxHQUFHOEIsYUFBSCxDQUFpQm5wQyxPQUFqQixFQUEwQnZQLEdBQTFCLEVBQStCNDRDLFFBQTlDO0FBQ0FBLHFCQUFTeDJDLFdBQVQsQ0FBcUJtTixRQUFRcW5DLEVBQVIsQ0FBV1csWUFBWCxDQUF3QnRqQyxJQUF4QixDQUE2QixHQUE3QixDQUFyQjtBQUNBLGdCQUFJb1IsV0FBVyxDQUFDLENBQWhCLEVBQW1CO0FBQ2Z1ekIseUJBQVN6cUMsUUFBVCxDQUFrQm9CLFFBQVFxbkMsRUFBUixDQUFXVyxZQUFYLENBQXdCbHlCLFFBQXhCLENBQWxCO0FBQ0g7QUFDRHV6QixxQkFBU2w0QixJQUFULENBQWNyVSxJQUFkO0FBQ0gsU0FQRDs7QUFTQXVxQyxXQUFHOEMsWUFBSCxHQUFrQixVQUFVbnFDLE9BQVYsRUFBbUJ2UCxHQUFuQixFQUF3QjtBQUN0QyxnQkFBSXNvQixhQUFhc3VCLEdBQUcyQixZQUFILENBQWdCaHBDLE9BQWhCLEVBQXlCdlAsR0FBekIsQ0FBakI7QUFBQSxnQkFDSTY0QyxVQUFVakMsR0FBRzhCLGFBQUgsQ0FBaUJucEMsT0FBakIsRUFBMEJ2UCxHQUExQixFQUErQjY0QyxPQUQ3QztBQUFBLGdCQUVJbjRCLE9BQU8sRUFGWDtBQUdBdmtCLGNBQUVpQyxJQUFGLENBQU9tUixRQUFRdW5DLFNBQVIsQ0FBa0JDLE1BQXpCLEVBQWlDLFVBQVVoOUIsR0FBVixFQUFlaGIsR0FBZixFQUFvQjtBQUNqRDJoQix3QkFBUTNoQixNQUFNLEdBQWQ7QUFDSCxhQUZEOztBQUlBLGdCQUFJMmhCLFNBQVMsRUFBYixFQUFpQjtBQUNiNEgsMkJBQVduYSxRQUFYLENBQW9CLE9BQXBCO0FBQ0EwcUMsd0JBQVF6cUMsSUFBUjtBQUNILGFBSEQsTUFHTztBQUNIa2EsMkJBQVdsbUIsV0FBWCxDQUF1QixPQUF2QjtBQUNBeTJDLHdCQUFRcnFDLElBQVI7QUFDSDs7QUFFRHFxQyxvQkFBUW40QixJQUFSLENBQWFBLElBQWI7QUFDSCxTQWpCRDs7QUFtQkFrMkIsV0FBRytDLGFBQUgsR0FBbUIsVUFBVXBxQyxPQUFWLEVBQW1CdlAsR0FBbkIsRUFBd0I0NUMsV0FBeEIsRUFBcUM7QUFDcEQsZ0JBQUlDLFVBQVU3NUMsSUFBSXhDLElBQUosQ0FBUyxZQUFULENBQWQ7QUFBQSxnQkFDSWtqQixPQUFPLEVBRFg7QUFBQSxnQkFFSWxTLE9BQU8sSUFGWDs7QUFJQSxnQkFBSWUsUUFBUXFuQyxFQUFSLENBQVdtQixZQUFYLElBQ0ksQ0FBQ3hvQyxRQUFRcW5DLEVBQVIsQ0FBV29CLDZCQURoQixJQUVJNEIsWUFBWTE2QyxNQUFaLEdBQXFCLENBRjdCLEVBRWdDO0FBQzVCd2hCLHVCQUFPLHdDQUF3Q2s1QixXQUF4QyxHQUNILGNBREo7QUFFQXByQyx1QkFBTyxLQUFQO0FBQ0g7QUFDRCxnQkFBSWUsUUFBUXFuQyxFQUFSLENBQVdzQixVQUFmLEVBQTJCO0FBQ3ZCLG9CQUFJM29DLFFBQVF1bkMsU0FBUixDQUFrQkMsTUFBbEIsQ0FBeUI3M0MsTUFBekIsR0FBa0MsQ0FBdEMsRUFBeUM7QUFDckNzUCwyQkFBTyxLQUFQO0FBQ0g7QUFDRGtTLHdCQUFRblIsUUFBUXFuQyxFQUFSLENBQVdpQixZQUFYLENBQXdCdG9DLFFBQVF1bkMsU0FBUixDQUFrQkMsTUFBMUMsQ0FBUjtBQUNIOztBQUVELGdCQUFJdm9DLElBQUosRUFBVTtBQUNOeE8sb0JBQUk2NUMsT0FBSixDQUFZLE1BQVo7QUFDQTtBQUNIOztBQUVELGdCQUFJQSxRQUFRQyxNQUFSLElBQWtCRCxRQUFRQyxNQUFSLENBQWU1OEIsT0FBZixDQUF1QixNQUF2QixFQUErQmhlLE1BQS9CLEdBQXdDLENBQTlELEVBQWlFO0FBQzdEYyxvQkFBSUYsSUFBSixDQUFTLDZCQUFULEVBQXdDNGdCLElBQXhDLENBQTZDQSxJQUE3QztBQUNILGFBRkQsTUFFTztBQUNIO0FBQ0FtNUIsd0JBQVF0cUMsT0FBUixDQUFnQjR0QixPQUFoQixHQUEwQnpjLElBQTFCO0FBQ0ExZ0Isb0JBQUk2NUMsT0FBSixDQUFZLE1BQVo7QUFDSDtBQUNKLFNBL0JEOztBQWlDQWpELFdBQUdtRCxpQkFBSCxHQUF1QixVQUFVeHFDLE9BQVYsRUFBbUJ2UCxHQUFuQixFQUF3QnFsQixRQUF4QixFQUFrQztBQUNyRCxnQkFBSTIwQixjQUFjLFVBQWxCO0FBQUEsZ0JBQ0kxeEIsYUFBYXRvQixJQUFJa2QsT0FBSixDQUFZODhCLFdBQVosRUFBeUIxbkMsS0FBekIsRUFEakI7O0FBR0FuVyxjQUFFaUMsSUFBRixDQUFPazZDLGFBQVAsRUFBc0IsVUFBVXYrQixHQUFWLEVBQWVwUCxHQUFmLEVBQW9CO0FBQ3RDMmQsMkJBQVdsbUIsV0FBWCxDQUF1QnVJLEdBQXZCO0FBQ0gsYUFGRDs7QUFJQTBhLHVCQUFXaXpCLGNBQWNqekIsUUFBZCxDQUFYO0FBQ0FpRCx1QkFBV25hLFFBQVgsQ0FBb0JrWCxRQUFwQjtBQUNILFNBVkQ7O0FBWUF1eEIsV0FBRzJDLFVBQUgsR0FBZ0IsVUFBVWxuQixLQUFWLEVBQWlCNG5CLE9BQWpCLEVBQTBCO0FBQ3RDLGdCQUFJdHBCLFNBQVN2eEIsS0FBS2cyQixLQUFMLENBQVcsTUFBTS9DLEtBQU4sR0FBYzRuQixPQUF6QixDQUFiO0FBQ0F0cEIscUJBQVNBLFVBQVUsQ0FBVixHQUFjLENBQWQsR0FBa0JBLE1BQTNCLENBRnNDLENBRUg7QUFDbkNBLHFCQUFTQSxTQUFTLEdBQVQsR0FBZSxHQUFmLEdBQXFCQSxNQUE5QjtBQUNBLG1CQUFPQSxNQUFQO0FBQ0gsU0FMRDs7QUFPQWltQixXQUFHc0QscUJBQUgsR0FBMkIsVUFBVTNxQyxPQUFWLEVBQW1COGlCLEtBQW5CLEVBQTBCO0FBQ2pELGdCQUFJaE4sUUFBSixFQUFjdTBCLFdBQWQsRUFBMkJPLEtBQTNCOztBQUVBLGdCQUFJOW5CLFNBQVMsQ0FBYixFQUFnQjtBQUNaaE4sMkJBQVcsQ0FBWDtBQUNBODBCLHdCQUFRLENBQUMsQ0FBVDtBQUNBUCw4QkFBY3JxQyxRQUFRcW5DLEVBQVIsQ0FBV2tCLFFBQVgsQ0FBb0IsQ0FBcEIsQ0FBZDtBQUNILGFBSkQsTUFJTyxJQUFJemxCLFFBQVE5aUIsUUFBUXFuQyxFQUFSLENBQVdKLE1BQVgsQ0FBa0IsQ0FBbEIsQ0FBWixFQUFrQztBQUNyQ254QiwyQkFBVyxDQUFYO0FBQ0E4MEIsd0JBQVEsQ0FBUjtBQUNBUCw4QkFBY3JxQyxRQUFRcW5DLEVBQVIsQ0FBV2tCLFFBQVgsQ0FBb0IsQ0FBcEIsQ0FBZDtBQUNILGFBSk0sTUFJQSxJQUFJemxCLFFBQVE5aUIsUUFBUXFuQyxFQUFSLENBQVdKLE1BQVgsQ0FBa0IsQ0FBbEIsQ0FBWixFQUFrQztBQUNyQ254QiwyQkFBVyxDQUFYO0FBQ0E4MEIsd0JBQVEsQ0FBUjtBQUNBUCw4QkFBY3JxQyxRQUFRcW5DLEVBQVIsQ0FBV2tCLFFBQVgsQ0FBb0IsQ0FBcEIsQ0FBZDtBQUNILGFBSk0sTUFJQSxJQUFJemxCLFFBQVE5aUIsUUFBUXFuQyxFQUFSLENBQVdKLE1BQVgsQ0FBa0IsQ0FBbEIsQ0FBWixFQUFrQztBQUNyQ254QiwyQkFBVyxDQUFYO0FBQ0E4MEIsd0JBQVEsQ0FBUjtBQUNBUCw4QkFBY3JxQyxRQUFRcW5DLEVBQVIsQ0FBV2tCLFFBQVgsQ0FBb0IsQ0FBcEIsQ0FBZDtBQUNILGFBSk0sTUFJQSxJQUFJemxCLFFBQVE5aUIsUUFBUXFuQyxFQUFSLENBQVdKLE1BQVgsQ0FBa0IsQ0FBbEIsQ0FBWixFQUFrQztBQUNyQ254QiwyQkFBVyxDQUFYO0FBQ0E4MEIsd0JBQVEsQ0FBUjtBQUNBUCw4QkFBY3JxQyxRQUFRcW5DLEVBQVIsQ0FBV2tCLFFBQVgsQ0FBb0IsQ0FBcEIsQ0FBZDtBQUNILGFBSk0sTUFJQTtBQUNIenlCLDJCQUFXLENBQVg7QUFDQTgwQix3QkFBUSxDQUFSO0FBQ0FQLDhCQUFjcnFDLFFBQVFxbkMsRUFBUixDQUFXa0IsUUFBWCxDQUFvQixDQUFwQixDQUFkO0FBQ0g7O0FBRUQsbUJBQU8sQ0FBQzhCLFdBQUQsRUFBY3YwQixRQUFkLEVBQXdCODBCLEtBQXhCLENBQVA7QUFDSCxTQTlCRDs7QUFnQ0F2RCxXQUFHd0QsUUFBSCxHQUFjLFVBQVU3cUMsT0FBVixFQUFtQnZQLEdBQW5CLEVBQXdCcXlCLEtBQXhCLEVBQStCO0FBQ3pDLGdCQUFJaE4sUUFBSixFQUFjZzFCLGFBQWQsRUFBNkJULFdBQTdCLEVBQTBDVSxlQUExQzs7QUFFQWoxQix1QkFBV3V4QixHQUFHc0QscUJBQUgsQ0FBeUIzcUMsT0FBekIsRUFBa0M4aUIsS0FBbEMsQ0FBWDtBQUNBdW5CLDBCQUFjdm5CLFVBQVUsQ0FBVixHQUFjLEVBQWQsR0FBbUJoTixTQUFTLENBQVQsQ0FBakM7QUFDQUEsdUJBQVdBLFNBQVMsQ0FBVCxDQUFYO0FBQ0FpMUIsOEJBQWtCL3FDLFFBQVFxbkMsRUFBUixDQUFXcUIsa0JBQVgsR0FBZ0M1eUIsUUFBaEMsR0FBMkMsQ0FBQyxDQUE5RDs7QUFFQSxnQkFBSTlWLFFBQVFxbkMsRUFBUixDQUFXWSxlQUFmLEVBQWdDO0FBQzVCNkMsZ0NBQWdCekQsR0FBRzJDLFVBQUgsQ0FBY2xuQixLQUFkLEVBQXFCOWlCLFFBQVFxbkMsRUFBUixDQUFXSixNQUFYLENBQWtCLENBQWxCLENBQXJCLENBQWhCO0FBQ0FJLG1CQUFHMEMsaUJBQUgsQ0FBcUIvcEMsT0FBckIsRUFBOEJ2UCxHQUE5QixFQUFtQ3FsQixRQUFuQyxFQUE2Q2cxQixhQUE3QztBQUNBLG9CQUFJOXFDLFFBQVFxbkMsRUFBUixDQUFXb0IsNkJBQWYsRUFBOEM7QUFDMUNwQix1QkFBRzZDLGFBQUgsQ0FBaUJscUMsT0FBakIsRUFBMEJ2UCxHQUExQixFQUErQnM2QyxlQUEvQixFQUFnRFYsV0FBaEQ7QUFDSDtBQUNKOztBQUVELGdCQUFJcnFDLFFBQVFxbkMsRUFBUixDQUFXZSxVQUFmLEVBQTJCO0FBQ3ZCZixtQkFBR21ELGlCQUFILENBQXFCeHFDLE9BQXJCLEVBQThCdlAsR0FBOUIsRUFBbUNxbEIsUUFBbkM7QUFDSDs7QUFFRCxnQkFBSTlWLFFBQVFxbkMsRUFBUixDQUFXYSxXQUFmLEVBQTRCO0FBQ3hCYixtQkFBRytDLGFBQUgsQ0FBaUJwcUMsT0FBakIsRUFBMEJ2UCxHQUExQixFQUErQjQ1QyxXQUEvQjtBQUNILGFBRkQsTUFFTztBQUNILG9CQUFJcnFDLFFBQVFxbkMsRUFBUixDQUFXbUIsWUFBWCxJQUEyQixDQUFDeG9DLFFBQVFxbkMsRUFBUixDQUFXb0IsNkJBQTNDLEVBQTBFO0FBQ3RFcEIsdUJBQUc2QyxhQUFILENBQWlCbHFDLE9BQWpCLEVBQTBCdlAsR0FBMUIsRUFBK0JzNkMsZUFBL0IsRUFBZ0RWLFdBQWhEO0FBQ0g7QUFDRCxvQkFBSXJxQyxRQUFRcW5DLEVBQVIsQ0FBV3NCLFVBQWYsRUFBMkI7QUFDdkJ0Qix1QkFBRzhDLFlBQUgsQ0FBZ0JucUMsT0FBaEIsRUFBeUJ2UCxHQUF6QjtBQUNIO0FBQ0o7QUFDSixTQTlCRDtBQStCSCxLQXJRQSxFQXFRQytFLE1BclFELEVBcVFTNnhDLEVBclFULENBQUQ7O0FBdVFBOzs7QUFLQSxRQUFJbGxCLFVBQVUsRUFBZDs7QUFFQyxlQUFVdjFCLENBQVYsRUFBYXUxQixPQUFiLEVBQXNCO0FBQ25COztBQUNBLFlBQUl5bEIsT0FBSixFQUFhb0QsVUFBYjs7QUFFQXBELGtCQUFVLGlCQUFVeHZDLEtBQVYsRUFBaUI7QUFDdkIsZ0JBQUkzSCxNQUFNN0QsRUFBRXdMLE1BQU1nQyxNQUFSLENBQVY7QUFBQSxnQkFDSTRGLFVBQVV2UCxJQUFJeEMsSUFBSixDQUFTLHVCQUFULENBRGQ7QUFBQSxnQkFFSWszQyxPQUFPMTBDLElBQUk4TSxHQUFKLEVBRlg7QUFBQSxnQkFHSW1xQyxVQUhKO0FBQUEsZ0JBSUkyQyxXQUpKO0FBQUEsZ0JBS0lZLFlBTEo7QUFBQSxnQkFNSW5vQixLQU5KOztBQVFBLGdCQUFJOWlCLFlBQVk3TSxTQUFoQixFQUEyQjtBQUFFO0FBQVM7O0FBRXRDNk0sb0JBQVF1bkMsU0FBUixDQUFrQkMsTUFBbEIsR0FBMkIsRUFBM0I7QUFDQSxnQkFBSXJDLEtBQUt4MUMsTUFBTCxLQUFnQixDQUFwQixFQUF1QjtBQUNuQm16Qix3QkFBUSxDQUFSO0FBQ0gsYUFGRCxNQUVPO0FBQ0gsb0JBQUk5aUIsUUFBUXdsQyxNQUFSLENBQWVxQyxNQUFuQixFQUEyQjtBQUN2QkgsaUNBQWEsRUFBYjtBQUNBOTZDLHNCQUFFaUMsSUFBRixDQUFPbVIsUUFBUXdsQyxNQUFSLENBQWVrQyxVQUFmLENBQTBCMXlDLE1BQTFCLENBQWlDLENBQUNnTCxRQUFRd2xDLE1BQVIsQ0FBZUksYUFBaEIsQ0FBakMsQ0FBUCxFQUF5RSxVQUFVcDdCLEdBQVYsRUFBZTZ5QixRQUFmLEVBQXlCO0FBQzlGLDRCQUFJN2hDLFFBQVE1TyxFQUFFeXdDLFFBQUYsRUFBWTkvQixHQUFaLEVBQVo7QUFDQSw0QkFBSS9CLEtBQUosRUFBVztBQUFFa3NDLHVDQUFXdjVDLElBQVgsQ0FBZ0JxTixLQUFoQjtBQUF5QjtBQUN6QyxxQkFIRDtBQUlBa3NDLGlDQUFhQSxXQUFXMXlDLE1BQVgsQ0FBa0JnTCxRQUFRd2xDLE1BQVIsQ0FBZXNDLFdBQWpDLENBQWI7QUFDQWhsQiw0QkFBUStrQixPQUFPMUMsSUFBUCxFQUFhdUMsVUFBYixFQUF5QndELE9BQWpDO0FBQ0gsaUJBUkQsTUFRTztBQUNIcG9CLDRCQUFROGhCLFlBQVlpQyxZQUFaLENBQXlCN21DLE9BQXpCLEVBQWtDbWxDLElBQWxDLENBQVI7QUFDSDtBQUNKO0FBQ0RrQyxlQUFHd0QsUUFBSCxDQUFZN3FDLE9BQVosRUFBcUJ2UCxHQUFyQixFQUEwQnF5QixLQUExQjtBQUNBdW5CLDBCQUFjaEQsR0FBR3NELHFCQUFILENBQXlCM3FDLE9BQXpCLEVBQWtDOGlCLEtBQWxDLENBQWQ7QUFDQW1vQiwyQkFBZVosWUFBWSxDQUFaLENBQWY7QUFDQUEsMEJBQWNBLFlBQVksQ0FBWixDQUFkOztBQUVBLGdCQUFJcnFDLFFBQVF3bEMsTUFBUixDQUFldUMsS0FBbkIsRUFBMEI7QUFBRXQ0Qyx3QkFBUWsxQyxHQUFSLENBQVk3aEIsUUFBUSxLQUFSLEdBQWdCdW5CLFdBQTVCO0FBQTJDOztBQUV2RSxnQkFBSXo5QyxFQUFFaTBCLFVBQUYsQ0FBYTdnQixRQUFRd2xDLE1BQVIsQ0FBZW9DLE9BQTVCLENBQUosRUFBMEM7QUFDdEM1bkMsd0JBQVF3bEMsTUFBUixDQUFlb0MsT0FBZixDQUF1Qnh2QyxLQUF2QixFQUE4QjtBQUMxQjBxQiwyQkFBT0EsS0FEbUI7QUFFMUJ1bkIsaUNBQWFBLFdBRmE7QUFHMUJZLGtDQUFjQTtBQUhZLGlCQUE5QjtBQUtIO0FBQ0osU0F6Q0Q7O0FBMkNBOW9CLGdCQUFRN2YsSUFBUixHQUFlLFVBQVVvZixRQUFWLEVBQW9CO0FBQy9CLGlCQUFLN3lCLElBQUwsQ0FBVSxVQUFVMmIsR0FBVixFQUFldlosRUFBZixFQUFtQjtBQUN6QjtBQUNBO0FBQ0Esb0JBQUlrNkMsaUJBQWlCditDLEVBQUV5TSxNQUFGLENBQVMsSUFBVCxFQUFlLEVBQWYsRUFBbUJvdUMsY0FBbkIsQ0FBckI7QUFBQSxvQkFDSTJELGVBQWV4K0MsRUFBRXlNLE1BQUYsQ0FBUyxJQUFULEVBQWU4eEMsY0FBZixFQUErQnpwQixRQUEvQixDQURuQjtBQUFBLG9CQUVJanhCLE1BQU03RCxFQUFFcUUsRUFBRixDQUZWOztBQUlBbTZDLDZCQUFhN0QsU0FBYixHQUF5QixFQUF6QjtBQUNBOTJDLG9CQUFJeEMsSUFBSixDQUFTLHVCQUFULEVBQWtDbTlDLFlBQWxDO0FBQ0EzNkMsb0JBQUkwSixFQUFKLENBQU8sT0FBUCxFQUFnQnl0QyxPQUFoQjtBQUNBbjNDLG9CQUFJMEosRUFBSixDQUFPLFFBQVAsRUFBaUJ5dEMsT0FBakI7QUFDQW4zQyxvQkFBSTBKLEVBQUosQ0FBTyxTQUFQLEVBQWtCeXRDLE9BQWxCOztBQUVBUCxtQkFBR3dDLE1BQUgsQ0FBVXVCLFlBQVYsRUFBd0IzNkMsR0FBeEI7QUFDQSxvQkFBSTdELEVBQUVzRSxJQUFGLENBQU9ULElBQUk4TSxHQUFKLEVBQVAsQ0FBSixFQUF1QjtBQUFFO0FBQ3JCOU0sd0JBQUl2QyxPQUFKLENBQVksT0FBWjtBQUNIOztBQUVELG9CQUFJdEIsRUFBRWkwQixVQUFGLENBQWF1cUIsYUFBYTVGLE1BQWIsQ0FBb0JtQyxNQUFqQyxDQUFKLEVBQThDO0FBQzFDeUQsaUNBQWE1RixNQUFiLENBQW9CbUMsTUFBcEI7QUFDSDtBQUNKLGFBckJEOztBQXVCQSxtQkFBTyxJQUFQO0FBQ0gsU0F6QkQ7O0FBMkJBeGxCLGdCQUFRcE0sT0FBUixHQUFrQixZQUFZO0FBQzFCLGlCQUFLbG5CLElBQUwsQ0FBVSxVQUFVMmIsR0FBVixFQUFldlosRUFBZixFQUFtQjtBQUN6QixvQkFBSVIsTUFBTTdELEVBQUVxRSxFQUFGLENBQVY7QUFBQSxvQkFDSStPLFVBQVV2UCxJQUFJeEMsSUFBSixDQUFTLHVCQUFULENBRGQ7QUFBQSxvQkFFSTZ6QyxXQUFXdUYsR0FBRzhCLGFBQUgsQ0FBaUJucEMsT0FBakIsRUFBMEJ2UCxHQUExQixDQUZmO0FBR0FxeEMseUJBQVNzSCxZQUFULENBQXNCajdCLE1BQXRCO0FBQ0EyekIseUJBQVN1SCxRQUFULENBQWtCbDdCLE1BQWxCO0FBQ0EyekIseUJBQVN3SCxPQUFULENBQWlCbjdCLE1BQWpCO0FBQ0ExZCxvQkFBSWpDLFVBQUosQ0FBZSx1QkFBZjtBQUNILGFBUkQ7QUFTSCxTQVZEOztBQVlBMnpCLGdCQUFRa3BCLFdBQVIsR0FBc0IsWUFBWTtBQUM5QixpQkFBS3g4QyxJQUFMLENBQVUsVUFBVTJiLEdBQVYsRUFBZXZaLEVBQWYsRUFBbUI7QUFDekIsb0JBQUltSCxRQUFRLEVBQUVnQyxRQUFRbkosRUFBVixFQUFaO0FBQ0EyMkMsd0JBQVF4dkMsS0FBUjtBQUNILGFBSEQ7QUFJSCxTQUxEOztBQU9BK3BCLGdCQUFRbXBCLE9BQVIsR0FBa0IsVUFBVWorQyxJQUFWLEVBQWdCbUYsTUFBaEIsRUFBd0Jzd0IsS0FBeEIsRUFBK0Jra0IsTUFBL0IsRUFBdUM7QUFDckQsaUJBQUtuNEMsSUFBTCxDQUFVLFVBQVUyYixHQUFWLEVBQWV2WixFQUFmLEVBQW1CO0FBQ3pCLG9CQUFJK08sVUFBVXBULEVBQUVxRSxFQUFGLEVBQU1oRCxJQUFOLENBQVcsdUJBQVgsQ0FBZDs7QUFFQStSLHdCQUFRd1EsS0FBUixDQUFjdTJCLFNBQWQsQ0FBd0IxNUMsSUFBeEIsSUFBZ0MyNUMsTUFBaEM7QUFDQWhuQyx3QkFBUXdRLEtBQVIsQ0FBY3kyQixNQUFkLENBQXFCNTVDLElBQXJCLElBQTZCeTFCLEtBQTdCO0FBQ0E5aUIsd0JBQVF3USxLQUFSLENBQWM0MkIsS0FBZCxDQUFvQi81QyxJQUFwQixJQUE0Qm1GLE1BQTVCO0FBQ0gsYUFORDtBQU9ILFNBUkQ7O0FBVUF3NEMscUJBQWEsb0JBQVVuNkIsSUFBVixFQUFnQnBpQixJQUFoQixFQUFzQitNLEtBQXRCLEVBQTZCO0FBQ3RDLGlCQUFLM00sSUFBTCxDQUFVLFVBQVUyYixHQUFWLEVBQWV2WixFQUFmLEVBQW1CO0FBQ3pCckUsa0JBQUVxRSxFQUFGLEVBQU1oRCxJQUFOLENBQVcsdUJBQVgsRUFBb0N1aUIsS0FBcEMsQ0FBMEMvaEIsSUFBMUMsRUFBZ0RvaUIsSUFBaEQsSUFBd0RyVixLQUF4RDtBQUNILGFBRkQ7QUFHSCxTQUpEOztBQU1BMm1CLGdCQUFRb3BCLFdBQVIsR0FBc0IsVUFBVTE2QixJQUFWLEVBQWdCaVMsS0FBaEIsRUFBdUI7QUFDekNrb0IsdUJBQVcvM0MsSUFBWCxDQUFnQixJQUFoQixFQUFzQjRkLElBQXRCLEVBQTRCLFFBQTVCLEVBQXNDaVMsS0FBdEM7QUFDSCxTQUZEOztBQUlBWCxnQkFBUXFwQixVQUFSLEdBQXFCLFVBQVUzNkIsSUFBVixFQUFnQm0yQixNQUFoQixFQUF3QjtBQUN6Q2dFLHVCQUFXLzNDLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0I0ZCxJQUF0QixFQUE0QixXQUE1QixFQUF5Q20yQixNQUF6QztBQUNILFNBRkQ7O0FBSUFwNkMsVUFBRTJHLEVBQUYsQ0FBS2s0QyxVQUFMLEdBQWtCLFVBQVVqNUMsTUFBVixFQUFrQjtBQUNoQyxnQkFBSTR1QixNQUFKOztBQUVBLGdCQUFJZSxRQUFRM3ZCLE1BQVIsQ0FBSixFQUFxQjtBQUNqQjR1Qix5QkFBU2UsUUFBUTN2QixNQUFSLEVBQWdCRCxLQUFoQixDQUFzQixJQUF0QixFQUE0QlEsTUFBTUMsU0FBTixDQUFnQjlDLEtBQWhCLENBQXNCK0MsSUFBdEIsQ0FBMkJYLFNBQTNCLEVBQXNDLENBQXRDLENBQTVCLENBQVQ7QUFDSCxhQUZELE1BRU8sSUFBSSxRQUFPRSxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQWxCLElBQThCLENBQUNBLE1BQW5DLEVBQTJDO0FBQzlDNHVCLHlCQUFTZSxRQUFRN2YsSUFBUixDQUFhL1AsS0FBYixDQUFtQixJQUFuQixFQUF5QkQsU0FBekIsQ0FBVDtBQUNILGFBRk0sTUFFQTtBQUNIMUYsa0JBQUU4QyxLQUFGLENBQVEsWUFBYThDLE1BQWIsR0FBc0IsaURBQTlCO0FBQ0g7O0FBRUQsbUJBQU80dUIsTUFBUDtBQUNILFNBWkQ7QUFhSCxLQWxJQSxFQWtJQzVyQixNQWxJRCxFQWtJUzJzQixPQWxJVCxDQUFEO0FBbUlDLENBOXBCQSxFQThwQkMzc0IsTUE5cEJELENBQUQiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKCQpIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBGT1VOREFUSU9OX1ZFUlNJT04gPSAnNi4zLjEnO1xuXG4vLyBHbG9iYWwgRm91bmRhdGlvbiBvYmplY3Rcbi8vIFRoaXMgaXMgYXR0YWNoZWQgdG8gdGhlIHdpbmRvdywgb3IgdXNlZCBhcyBhIG1vZHVsZSBmb3IgQU1EL0Jyb3dzZXJpZnlcbnZhciBGb3VuZGF0aW9uID0ge1xuICB2ZXJzaW9uOiBGT1VOREFUSU9OX1ZFUlNJT04sXG5cbiAgLyoqXG4gICAqIFN0b3JlcyBpbml0aWFsaXplZCBwbHVnaW5zLlxuICAgKi9cbiAgX3BsdWdpbnM6IHt9LFxuXG4gIC8qKlxuICAgKiBTdG9yZXMgZ2VuZXJhdGVkIHVuaXF1ZSBpZHMgZm9yIHBsdWdpbiBpbnN0YW5jZXNcbiAgICovXG4gIF91dWlkczogW10sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBib29sZWFuIGZvciBSVEwgc3VwcG9ydFxuICAgKi9cbiAgcnRsOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiAkKCdodG1sJykuYXR0cignZGlyJykgPT09ICdydGwnO1xuICB9LFxuICAvKipcbiAgICogRGVmaW5lcyBhIEZvdW5kYXRpb24gcGx1Z2luLCBhZGRpbmcgaXQgdG8gdGhlIGBGb3VuZGF0aW9uYCBuYW1lc3BhY2UgYW5kIHRoZSBsaXN0IG9mIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZSB3aGVuIHJlZmxvd2luZy5cbiAgICogQHBhcmFtIHtPYmplY3R9IHBsdWdpbiAtIFRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgcGx1Z2luLlxuICAgKi9cbiAgcGx1Z2luOiBmdW5jdGlvbihwbHVnaW4sIG5hbWUpIHtcbiAgICAvLyBPYmplY3Qga2V5IHRvIHVzZSB3aGVuIGFkZGluZyB0byBnbG9iYWwgRm91bmRhdGlvbiBvYmplY3RcbiAgICAvLyBFeGFtcGxlczogRm91bmRhdGlvbi5SZXZlYWwsIEZvdW5kYXRpb24uT2ZmQ2FudmFzXG4gICAgdmFyIGNsYXNzTmFtZSA9IChuYW1lIHx8IGZ1bmN0aW9uTmFtZShwbHVnaW4pKTtcbiAgICAvLyBPYmplY3Qga2V5IHRvIHVzZSB3aGVuIHN0b3JpbmcgdGhlIHBsdWdpbiwgYWxzbyB1c2VkIHRvIGNyZWF0ZSB0aGUgaWRlbnRpZnlpbmcgZGF0YSBhdHRyaWJ1dGUgZm9yIHRoZSBwbHVnaW5cbiAgICAvLyBFeGFtcGxlczogZGF0YS1yZXZlYWwsIGRhdGEtb2ZmLWNhbnZhc1xuICAgIHZhciBhdHRyTmFtZSAgPSBoeXBoZW5hdGUoY2xhc3NOYW1lKTtcblxuICAgIC8vIEFkZCB0byB0aGUgRm91bmRhdGlvbiBvYmplY3QgYW5kIHRoZSBwbHVnaW5zIGxpc3QgKGZvciByZWZsb3dpbmcpXG4gICAgdGhpcy5fcGx1Z2luc1thdHRyTmFtZV0gPSB0aGlzW2NsYXNzTmFtZV0gPSBwbHVnaW47XG4gIH0sXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogUG9wdWxhdGVzIHRoZSBfdXVpZHMgYXJyYXkgd2l0aCBwb2ludGVycyB0byBlYWNoIGluZGl2aWR1YWwgcGx1Z2luIGluc3RhbmNlLlxuICAgKiBBZGRzIHRoZSBgemZQbHVnaW5gIGRhdGEtYXR0cmlidXRlIHRvIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlZCBwbHVnaW5zIHRvIGFsbG93IHVzZSBvZiAkKHNlbGVjdG9yKS5mb3VuZGF0aW9uKG1ldGhvZCkgY2FsbHMuXG4gICAqIEFsc28gZmlyZXMgdGhlIGluaXRpYWxpemF0aW9uIGV2ZW50IGZvciBlYWNoIHBsdWdpbiwgY29uc29saWRhdGluZyByZXBldGl0aXZlIGNvZGUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwbHVnaW4gLSBhbiBpbnN0YW5jZSBvZiBhIHBsdWdpbiwgdXN1YWxseSBgdGhpc2AgaW4gY29udGV4dC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSB0aGUgbmFtZSBvZiB0aGUgcGx1Z2luLCBwYXNzZWQgYXMgYSBjYW1lbENhc2VkIHN0cmluZy5cbiAgICogQGZpcmVzIFBsdWdpbiNpbml0XG4gICAqL1xuICByZWdpc3RlclBsdWdpbjogZnVuY3Rpb24ocGx1Z2luLCBuYW1lKXtcbiAgICB2YXIgcGx1Z2luTmFtZSA9IG5hbWUgPyBoeXBoZW5hdGUobmFtZSkgOiBmdW5jdGlvbk5hbWUocGx1Z2luLmNvbnN0cnVjdG9yKS50b0xvd2VyQ2FzZSgpO1xuICAgIHBsdWdpbi51dWlkID0gdGhpcy5HZXRZb0RpZ2l0cyg2LCBwbHVnaW5OYW1lKTtcblxuICAgIGlmKCFwbHVnaW4uJGVsZW1lbnQuYXR0cihgZGF0YS0ke3BsdWdpbk5hbWV9YCkpeyBwbHVnaW4uJGVsZW1lbnQuYXR0cihgZGF0YS0ke3BsdWdpbk5hbWV9YCwgcGx1Z2luLnV1aWQpOyB9XG4gICAgaWYoIXBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpKXsgcGx1Z2luLiRlbGVtZW50LmRhdGEoJ3pmUGx1Z2luJywgcGx1Z2luKTsgfVxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgaW5pdGlhbGl6ZWQuXG4gICAgICAgICAgICogQGV2ZW50IFBsdWdpbiNpbml0XG4gICAgICAgICAgICovXG4gICAgcGx1Z2luLiRlbGVtZW50LnRyaWdnZXIoYGluaXQuemYuJHtwbHVnaW5OYW1lfWApO1xuXG4gICAgdGhpcy5fdXVpZHMucHVzaChwbHVnaW4udXVpZCk7XG5cbiAgICByZXR1cm47XG4gIH0sXG4gIC8qKlxuICAgKiBAZnVuY3Rpb25cbiAgICogUmVtb3ZlcyB0aGUgcGx1Z2lucyB1dWlkIGZyb20gdGhlIF91dWlkcyBhcnJheS5cbiAgICogUmVtb3ZlcyB0aGUgemZQbHVnaW4gZGF0YSBhdHRyaWJ1dGUsIGFzIHdlbGwgYXMgdGhlIGRhdGEtcGx1Z2luLW5hbWUgYXR0cmlidXRlLlxuICAgKiBBbHNvIGZpcmVzIHRoZSBkZXN0cm95ZWQgZXZlbnQgZm9yIHRoZSBwbHVnaW4sIGNvbnNvbGlkYXRpbmcgcmVwZXRpdGl2ZSBjb2RlLlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGx1Z2luIC0gYW4gaW5zdGFuY2Ugb2YgYSBwbHVnaW4sIHVzdWFsbHkgYHRoaXNgIGluIGNvbnRleHQuXG4gICAqIEBmaXJlcyBQbHVnaW4jZGVzdHJveWVkXG4gICAqL1xuICB1bnJlZ2lzdGVyUGx1Z2luOiBmdW5jdGlvbihwbHVnaW4pe1xuICAgIHZhciBwbHVnaW5OYW1lID0gaHlwaGVuYXRlKGZ1bmN0aW9uTmFtZShwbHVnaW4uJGVsZW1lbnQuZGF0YSgnemZQbHVnaW4nKS5jb25zdHJ1Y3RvcikpO1xuXG4gICAgdGhpcy5fdXVpZHMuc3BsaWNlKHRoaXMuX3V1aWRzLmluZGV4T2YocGx1Z2luLnV1aWQpLCAxKTtcbiAgICBwbHVnaW4uJGVsZW1lbnQucmVtb3ZlQXR0cihgZGF0YS0ke3BsdWdpbk5hbWV9YCkucmVtb3ZlRGF0YSgnemZQbHVnaW4nKVxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgYmVlbiBkZXN0cm95ZWQuXG4gICAgICAgICAgICogQGV2ZW50IFBsdWdpbiNkZXN0cm95ZWRcbiAgICAgICAgICAgKi9cbiAgICAgICAgICAudHJpZ2dlcihgZGVzdHJveWVkLnpmLiR7cGx1Z2luTmFtZX1gKTtcbiAgICBmb3IodmFyIHByb3AgaW4gcGx1Z2luKXtcbiAgICAgIHBsdWdpbltwcm9wXSA9IG51bGw7Ly9jbGVhbiB1cCBzY3JpcHQgdG8gcHJlcCBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxuICAgIH1cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvblxuICAgKiBDYXVzZXMgb25lIG9yIG1vcmUgYWN0aXZlIHBsdWdpbnMgdG8gcmUtaW5pdGlhbGl6ZSwgcmVzZXR0aW5nIGV2ZW50IGxpc3RlbmVycywgcmVjYWxjdWxhdGluZyBwb3NpdGlvbnMsIGV0Yy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBsdWdpbnMgLSBvcHRpb25hbCBzdHJpbmcgb2YgYW4gaW5kaXZpZHVhbCBwbHVnaW4ga2V5LCBhdHRhaW5lZCBieSBjYWxsaW5nIGAkKGVsZW1lbnQpLmRhdGEoJ3BsdWdpbk5hbWUnKWAsIG9yIHN0cmluZyBvZiBhIHBsdWdpbiBjbGFzcyBpLmUuIGAnZHJvcGRvd24nYFxuICAgKiBAZGVmYXVsdCBJZiBubyBhcmd1bWVudCBpcyBwYXNzZWQsIHJlZmxvdyBhbGwgY3VycmVudGx5IGFjdGl2ZSBwbHVnaW5zLlxuICAgKi9cbiAgIHJlSW5pdDogZnVuY3Rpb24ocGx1Z2lucyl7XG4gICAgIHZhciBpc0pRID0gcGx1Z2lucyBpbnN0YW5jZW9mICQ7XG4gICAgIHRyeXtcbiAgICAgICBpZihpc0pRKXtcbiAgICAgICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ3pmUGx1Z2luJykuX2luaXQoKTtcbiAgICAgICAgIH0pO1xuICAgICAgIH1lbHNle1xuICAgICAgICAgdmFyIHR5cGUgPSB0eXBlb2YgcGx1Z2lucyxcbiAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgIGZucyA9IHtcbiAgICAgICAgICAgJ29iamVjdCc6IGZ1bmN0aW9uKHBsZ3Mpe1xuICAgICAgICAgICAgIHBsZ3MuZm9yRWFjaChmdW5jdGlvbihwKXtcbiAgICAgICAgICAgICAgIHAgPSBoeXBoZW5hdGUocCk7XG4gICAgICAgICAgICAgICAkKCdbZGF0YS0nKyBwICsnXScpLmZvdW5kYXRpb24oJ19pbml0Jyk7XG4gICAgICAgICAgICAgfSk7XG4gICAgICAgICAgIH0sXG4gICAgICAgICAgICdzdHJpbmcnOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgIHBsdWdpbnMgPSBoeXBoZW5hdGUocGx1Z2lucyk7XG4gICAgICAgICAgICAgJCgnW2RhdGEtJysgcGx1Z2lucyArJ10nKS5mb3VuZGF0aW9uKCdfaW5pdCcpO1xuICAgICAgICAgICB9LFxuICAgICAgICAgICAndW5kZWZpbmVkJzogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICB0aGlzWydvYmplY3QnXShPYmplY3Qua2V5cyhfdGhpcy5fcGx1Z2lucykpO1xuICAgICAgICAgICB9XG4gICAgICAgICB9O1xuICAgICAgICAgZm5zW3R5cGVdKHBsdWdpbnMpO1xuICAgICAgIH1cbiAgICAgfWNhdGNoKGVycil7XG4gICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICB9ZmluYWxseXtcbiAgICAgICByZXR1cm4gcGx1Z2lucztcbiAgICAgfVxuICAgfSxcblxuICAvKipcbiAgICogcmV0dXJucyBhIHJhbmRvbSBiYXNlLTM2IHVpZCB3aXRoIG5hbWVzcGFjaW5nXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge051bWJlcn0gbGVuZ3RoIC0gbnVtYmVyIG9mIHJhbmRvbSBiYXNlLTM2IGRpZ2l0cyBkZXNpcmVkLiBJbmNyZWFzZSBmb3IgbW9yZSByYW5kb20gc3RyaW5ncy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSAtIG5hbWUgb2YgcGx1Z2luIHRvIGJlIGluY29ycG9yYXRlZCBpbiB1aWQsIG9wdGlvbmFsLlxuICAgKiBAZGVmYXVsdCB7U3RyaW5nfSAnJyAtIGlmIG5vIHBsdWdpbiBuYW1lIGlzIHByb3ZpZGVkLCBub3RoaW5nIGlzIGFwcGVuZGVkIHRvIHRoZSB1aWQuXG4gICAqIEByZXR1cm5zIHtTdHJpbmd9IC0gdW5pcXVlIGlkXG4gICAqL1xuICBHZXRZb0RpZ2l0czogZnVuY3Rpb24obGVuZ3RoLCBuYW1lc3BhY2Upe1xuICAgIGxlbmd0aCA9IGxlbmd0aCB8fCA2O1xuICAgIHJldHVybiBNYXRoLnJvdW5kKChNYXRoLnBvdygzNiwgbGVuZ3RoICsgMSkgLSBNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMzYsIGxlbmd0aCkpKS50b1N0cmluZygzNikuc2xpY2UoMSkgKyAobmFtZXNwYWNlID8gYC0ke25hbWVzcGFjZX1gIDogJycpO1xuICB9LFxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBwbHVnaW5zIG9uIGFueSBlbGVtZW50cyB3aXRoaW4gYGVsZW1gIChhbmQgYGVsZW1gIGl0c2VsZikgdGhhdCBhcmVuJ3QgYWxyZWFkeSBpbml0aWFsaXplZC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW0gLSBqUXVlcnkgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVsZW1lbnQgdG8gY2hlY2sgaW5zaWRlLiBBbHNvIGNoZWNrcyB0aGUgZWxlbWVudCBpdHNlbGYsIHVubGVzcyBpdCdzIHRoZSBgZG9jdW1lbnRgIG9iamVjdC5cbiAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IHBsdWdpbnMgLSBBIGxpc3Qgb2YgcGx1Z2lucyB0byBpbml0aWFsaXplLiBMZWF2ZSB0aGlzIG91dCB0byBpbml0aWFsaXplIGV2ZXJ5dGhpbmcuXG4gICAqL1xuICByZWZsb3c6IGZ1bmN0aW9uKGVsZW0sIHBsdWdpbnMpIHtcblxuICAgIC8vIElmIHBsdWdpbnMgaXMgdW5kZWZpbmVkLCBqdXN0IGdyYWIgZXZlcnl0aGluZ1xuICAgIGlmICh0eXBlb2YgcGx1Z2lucyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHBsdWdpbnMgPSBPYmplY3Qua2V5cyh0aGlzLl9wbHVnaW5zKTtcbiAgICB9XG4gICAgLy8gSWYgcGx1Z2lucyBpcyBhIHN0cmluZywgY29udmVydCBpdCB0byBhbiBhcnJheSB3aXRoIG9uZSBpdGVtXG4gICAgZWxzZSBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBwbHVnaW5zID0gW3BsdWdpbnNdO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBwbHVnaW5cbiAgICAkLmVhY2gocGx1Z2lucywgZnVuY3Rpb24oaSwgbmFtZSkge1xuICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHBsdWdpblxuICAgICAgdmFyIHBsdWdpbiA9IF90aGlzLl9wbHVnaW5zW25hbWVdO1xuXG4gICAgICAvLyBMb2NhbGl6ZSB0aGUgc2VhcmNoIHRvIGFsbCBlbGVtZW50cyBpbnNpZGUgZWxlbSwgYXMgd2VsbCBhcyBlbGVtIGl0c2VsZiwgdW5sZXNzIGVsZW0gPT09IGRvY3VtZW50XG4gICAgICB2YXIgJGVsZW0gPSAkKGVsZW0pLmZpbmQoJ1tkYXRhLScrbmFtZSsnXScpLmFkZEJhY2soJ1tkYXRhLScrbmFtZSsnXScpO1xuXG4gICAgICAvLyBGb3IgZWFjaCBwbHVnaW4gZm91bmQsIGluaXRpYWxpemUgaXRcbiAgICAgICRlbGVtLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciAkZWwgPSAkKHRoaXMpLFxuICAgICAgICAgICAgb3B0cyA9IHt9O1xuICAgICAgICAvLyBEb24ndCBkb3VibGUtZGlwIG9uIHBsdWdpbnNcbiAgICAgICAgaWYgKCRlbC5kYXRhKCd6ZlBsdWdpbicpKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiVHJpZWQgdG8gaW5pdGlhbGl6ZSBcIituYW1lK1wiIG9uIGFuIGVsZW1lbnQgdGhhdCBhbHJlYWR5IGhhcyBhIEZvdW5kYXRpb24gcGx1Z2luLlwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZigkZWwuYXR0cignZGF0YS1vcHRpb25zJykpe1xuICAgICAgICAgIHZhciB0aGluZyA9ICRlbC5hdHRyKCdkYXRhLW9wdGlvbnMnKS5zcGxpdCgnOycpLmZvckVhY2goZnVuY3Rpb24oZSwgaSl7XG4gICAgICAgICAgICB2YXIgb3B0ID0gZS5zcGxpdCgnOicpLm1hcChmdW5jdGlvbihlbCl7IHJldHVybiBlbC50cmltKCk7IH0pO1xuICAgICAgICAgICAgaWYob3B0WzBdKSBvcHRzW29wdFswXV0gPSBwYXJzZVZhbHVlKG9wdFsxXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICRlbC5kYXRhKCd6ZlBsdWdpbicsIG5ldyBwbHVnaW4oJCh0aGlzKSwgb3B0cykpO1xuICAgICAgICB9Y2F0Y2goZXIpe1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXIpO1xuICAgICAgICB9ZmluYWxseXtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICBnZXRGbk5hbWU6IGZ1bmN0aW9uTmFtZSxcbiAgdHJhbnNpdGlvbmVuZDogZnVuY3Rpb24oJGVsZW0pe1xuICAgIHZhciB0cmFuc2l0aW9ucyA9IHtcbiAgICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgJ1dlYmtpdFRyYW5zaXRpb24nOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICAnTW96VHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgICdPVHJhbnNpdGlvbic6ICdvdHJhbnNpdGlvbmVuZCdcbiAgICB9O1xuICAgIHZhciBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICAgIGVuZDtcblxuICAgIGZvciAodmFyIHQgaW4gdHJhbnNpdGlvbnMpe1xuICAgICAgaWYgKHR5cGVvZiBlbGVtLnN0eWxlW3RdICE9PSAndW5kZWZpbmVkJyl7XG4gICAgICAgIGVuZCA9IHRyYW5zaXRpb25zW3RdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZihlbmQpe1xuICAgICAgcmV0dXJuIGVuZDtcbiAgICB9ZWxzZXtcbiAgICAgIGVuZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgJGVsZW0udHJpZ2dlckhhbmRsZXIoJ3RyYW5zaXRpb25lbmQnLCBbJGVsZW1dKTtcbiAgICAgIH0sIDEpO1xuICAgICAgcmV0dXJuICd0cmFuc2l0aW9uZW5kJztcbiAgICB9XG4gIH1cbn07XG5cbkZvdW5kYXRpb24udXRpbCA9IHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGZvciBhcHBseWluZyBhIGRlYm91bmNlIGVmZmVjdCB0byBhIGZ1bmN0aW9uIGNhbGwuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIC0gRnVuY3Rpb24gdG8gYmUgY2FsbGVkIGF0IGVuZCBvZiB0aW1lb3V0LlxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVsYXkgLSBUaW1lIGluIG1zIHRvIGRlbGF5IHRoZSBjYWxsIG9mIGBmdW5jYC5cbiAgICogQHJldHVybnMgZnVuY3Rpb25cbiAgICovXG4gIHRocm90dGxlOiBmdW5jdGlvbiAoZnVuYywgZGVsYXkpIHtcbiAgICB2YXIgdGltZXIgPSBudWxsO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcblxuICAgICAgaWYgKHRpbWVyID09PSBudWxsKSB7XG4gICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICB0aW1lciA9IG51bGw7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG4vLyBUT0RPOiBjb25zaWRlciBub3QgbWFraW5nIHRoaXMgYSBqUXVlcnkgZnVuY3Rpb25cbi8vIFRPRE86IG5lZWQgd2F5IHRvIHJlZmxvdyB2cy4gcmUtaW5pdGlhbGl6ZVxuLyoqXG4gKiBUaGUgRm91bmRhdGlvbiBqUXVlcnkgbWV0aG9kLlxuICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IG1ldGhvZCAtIEFuIGFjdGlvbiB0byBwZXJmb3JtIG9uIHRoZSBjdXJyZW50IGpRdWVyeSBvYmplY3QuXG4gKi9cbnZhciBmb3VuZGF0aW9uID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIG1ldGhvZCxcbiAgICAgICRtZXRhID0gJCgnbWV0YS5mb3VuZGF0aW9uLW1xJyksXG4gICAgICAkbm9KUyA9ICQoJy5uby1qcycpO1xuXG4gIGlmKCEkbWV0YS5sZW5ndGgpe1xuICAgICQoJzxtZXRhIGNsYXNzPVwiZm91bmRhdGlvbi1tcVwiPicpLmFwcGVuZFRvKGRvY3VtZW50LmhlYWQpO1xuICB9XG4gIGlmKCRub0pTLmxlbmd0aCl7XG4gICAgJG5vSlMucmVtb3ZlQ2xhc3MoJ25vLWpzJyk7XG4gIH1cblxuICBpZih0eXBlID09PSAndW5kZWZpbmVkJyl7Ly9uZWVkcyB0byBpbml0aWFsaXplIHRoZSBGb3VuZGF0aW9uIG9iamVjdCwgb3IgYW4gaW5kaXZpZHVhbCBwbHVnaW4uXG4gICAgRm91bmRhdGlvbi5NZWRpYVF1ZXJ5Ll9pbml0KCk7XG4gICAgRm91bmRhdGlvbi5yZWZsb3codGhpcyk7XG4gIH1lbHNlIGlmKHR5cGUgPT09ICdzdHJpbmcnKXsvL2FuIGluZGl2aWR1YWwgbWV0aG9kIHRvIGludm9rZSBvbiBhIHBsdWdpbiBvciBncm91cCBvZiBwbHVnaW5zXG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOy8vY29sbGVjdCBhbGwgdGhlIGFyZ3VtZW50cywgaWYgbmVjZXNzYXJ5XG4gICAgdmFyIHBsdWdDbGFzcyA9IHRoaXMuZGF0YSgnemZQbHVnaW4nKTsvL2RldGVybWluZSB0aGUgY2xhc3Mgb2YgcGx1Z2luXG5cbiAgICBpZihwbHVnQ2xhc3MgIT09IHVuZGVmaW5lZCAmJiBwbHVnQ2xhc3NbbWV0aG9kXSAhPT0gdW5kZWZpbmVkKXsvL21ha2Ugc3VyZSBib3RoIHRoZSBjbGFzcyBhbmQgbWV0aG9kIGV4aXN0XG4gICAgICBpZih0aGlzLmxlbmd0aCA9PT0gMSl7Ly9pZiB0aGVyZSdzIG9ubHkgb25lLCBjYWxsIGl0IGRpcmVjdGx5LlxuICAgICAgICAgIHBsdWdDbGFzc1ttZXRob2RdLmFwcGx5KHBsdWdDbGFzcywgYXJncyk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGksIGVsKXsvL290aGVyd2lzZSBsb29wIHRocm91Z2ggdGhlIGpRdWVyeSBjb2xsZWN0aW9uIGFuZCBpbnZva2UgdGhlIG1ldGhvZCBvbiBlYWNoXG4gICAgICAgICAgcGx1Z0NsYXNzW21ldGhvZF0uYXBwbHkoJChlbCkuZGF0YSgnemZQbHVnaW4nKSwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1lbHNley8vZXJyb3IgZm9yIG5vIGNsYXNzIG9yIG5vIG1ldGhvZFxuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiV2UncmUgc29ycnksICdcIiArIG1ldGhvZCArIFwiJyBpcyBub3QgYW4gYXZhaWxhYmxlIG1ldGhvZCBmb3IgXCIgKyAocGx1Z0NsYXNzID8gZnVuY3Rpb25OYW1lKHBsdWdDbGFzcykgOiAndGhpcyBlbGVtZW50JykgKyAnLicpO1xuICAgIH1cbiAgfWVsc2V7Ly9lcnJvciBmb3IgaW52YWxpZCBhcmd1bWVudCB0eXBlXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgV2UncmUgc29ycnksICR7dHlwZX0gaXMgbm90IGEgdmFsaWQgcGFyYW1ldGVyLiBZb3UgbXVzdCB1c2UgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBtZXRob2QgeW91IHdpc2ggdG8gaW52b2tlLmApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxud2luZG93LkZvdW5kYXRpb24gPSBGb3VuZGF0aW9uO1xuJC5mbi5mb3VuZGF0aW9uID0gZm91bmRhdGlvbjtcblxuLy8gUG9seWZpbGwgZm9yIHJlcXVlc3RBbmltYXRpb25GcmFtZVxuKGZ1bmN0aW9uKCkge1xuICBpZiAoIURhdGUubm93IHx8ICF3aW5kb3cuRGF0ZS5ub3cpXG4gICAgd2luZG93LkRhdGUubm93ID0gRGF0ZS5ub3cgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9O1xuXG4gIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQnLCAnbW96J107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsraSkge1xuICAgICAgdmFyIHZwID0gdmVuZG9yc1tpXTtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdnArJ1JlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gKHdpbmRvd1t2cCsnQ2FuY2VsQW5pbWF0aW9uRnJhbWUnXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgd2luZG93W3ZwKydDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXSk7XG4gIH1cbiAgaWYgKC9pUChhZHxob25lfG9kKS4qT1MgNi8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICB8fCAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAhd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgdmFyIGxhc3RUaW1lID0gMDtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciBuZXh0VGltZSA9IE1hdGgubWF4KGxhc3RUaW1lICsgMTYsIG5vdyk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhsYXN0VGltZSA9IG5leHRUaW1lKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFRpbWUgLSBub3cpO1xuICAgIH07XG4gICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY2xlYXJUaW1lb3V0O1xuICB9XG4gIC8qKlxuICAgKiBQb2x5ZmlsbCBmb3IgcGVyZm9ybWFuY2Uubm93LCByZXF1aXJlZCBieSByQUZcbiAgICovXG4gIGlmKCF3aW5kb3cucGVyZm9ybWFuY2UgfHwgIXdpbmRvdy5wZXJmb3JtYW5jZS5ub3cpe1xuICAgIHdpbmRvdy5wZXJmb3JtYW5jZSA9IHtcbiAgICAgIHN0YXJ0OiBEYXRlLm5vdygpLFxuICAgICAgbm93OiBmdW5jdGlvbigpeyByZXR1cm4gRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnQ7IH1cbiAgICB9O1xuICB9XG59KSgpO1xuaWYgKCFGdW5jdGlvbi5wcm90b3R5cGUuYmluZCkge1xuICBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uKG9UaGlzKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBjbG9zZXN0IHRoaW5nIHBvc3NpYmxlIHRvIHRoZSBFQ01BU2NyaXB0IDVcbiAgICAgIC8vIGludGVybmFsIElzQ2FsbGFibGUgZnVuY3Rpb25cbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIC0gd2hhdCBpcyB0cnlpbmcgdG8gYmUgYm91bmQgaXMgbm90IGNhbGxhYmxlJyk7XG4gICAgfVxuXG4gICAgdmFyIGFBcmdzICAgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICBmVG9CaW5kID0gdGhpcyxcbiAgICAgICAgZk5PUCAgICA9IGZ1bmN0aW9uKCkge30sXG4gICAgICAgIGZCb3VuZCAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZlRvQmluZC5hcHBseSh0aGlzIGluc3RhbmNlb2YgZk5PUFxuICAgICAgICAgICAgICAgICA/IHRoaXNcbiAgICAgICAgICAgICAgICAgOiBvVGhpcyxcbiAgICAgICAgICAgICAgICAgYUFyZ3MuY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgfTtcblxuICAgIGlmICh0aGlzLnByb3RvdHlwZSkge1xuICAgICAgLy8gbmF0aXZlIGZ1bmN0aW9ucyBkb24ndCBoYXZlIGEgcHJvdG90eXBlXG4gICAgICBmTk9QLnByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuICAgIH1cbiAgICBmQm91bmQucHJvdG90eXBlID0gbmV3IGZOT1AoKTtcblxuICAgIHJldHVybiBmQm91bmQ7XG4gIH07XG59XG4vLyBQb2x5ZmlsbCB0byBnZXQgdGhlIG5hbWUgb2YgYSBmdW5jdGlvbiBpbiBJRTlcbmZ1bmN0aW9uIGZ1bmN0aW9uTmFtZShmbikge1xuICBpZiAoRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBmdW5jTmFtZVJlZ2V4ID0gL2Z1bmN0aW9uXFxzKFteKF17MSx9KVxcKC87XG4gICAgdmFyIHJlc3VsdHMgPSAoZnVuY05hbWVSZWdleCkuZXhlYygoZm4pLnRvU3RyaW5nKCkpO1xuICAgIHJldHVybiAocmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCA+IDEpID8gcmVzdWx0c1sxXS50cmltKCkgOiBcIlwiO1xuICB9XG4gIGVsc2UgaWYgKGZuLnByb3RvdHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZuLmNvbnN0cnVjdG9yLm5hbWU7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIGZuLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKHN0cil7XG4gIGlmICgndHJ1ZScgPT09IHN0cikgcmV0dXJuIHRydWU7XG4gIGVsc2UgaWYgKCdmYWxzZScgPT09IHN0cikgcmV0dXJuIGZhbHNlO1xuICBlbHNlIGlmICghaXNOYU4oc3RyICogMSkpIHJldHVybiBwYXJzZUZsb2F0KHN0cik7XG4gIHJldHVybiBzdHI7XG59XG4vLyBDb252ZXJ0IFBhc2NhbENhc2UgdG8ga2ViYWItY2FzZVxuLy8gVGhhbmsgeW91OiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84OTU1NTgwXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgJyQxLSQyJykudG9Mb3dlckNhc2UoKTtcbn1cblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5Gb3VuZGF0aW9uLkJveCA9IHtcbiAgSW1Ob3RUb3VjaGluZ1lvdTogSW1Ob3RUb3VjaGluZ1lvdSxcbiAgR2V0RGltZW5zaW9uczogR2V0RGltZW5zaW9ucyxcbiAgR2V0T2Zmc2V0czogR2V0T2Zmc2V0c1xufVxuXG4vKipcbiAqIENvbXBhcmVzIHRoZSBkaW1lbnNpb25zIG9mIGFuIGVsZW1lbnQgdG8gYSBjb250YWluZXIgYW5kIGRldGVybWluZXMgY29sbGlzaW9uIGV2ZW50cyB3aXRoIGNvbnRhaW5lci5cbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHRlc3QgZm9yIGNvbGxpc2lvbnMuXG4gKiBAcGFyYW0ge2pRdWVyeX0gcGFyZW50IC0galF1ZXJ5IG9iamVjdCB0byB1c2UgYXMgYm91bmRpbmcgY29udGFpbmVyLlxuICogQHBhcmFtIHtCb29sZWFufSBsck9ubHkgLSBzZXQgdG8gdHJ1ZSB0byBjaGVjayBsZWZ0IGFuZCByaWdodCB2YWx1ZXMgb25seS5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gdGJPbmx5IC0gc2V0IHRvIHRydWUgdG8gY2hlY2sgdG9wIGFuZCBib3R0b20gdmFsdWVzIG9ubHkuXG4gKiBAZGVmYXVsdCBpZiBubyBwYXJlbnQgb2JqZWN0IHBhc3NlZCwgZGV0ZWN0cyBjb2xsaXNpb25zIHdpdGggYHdpbmRvd2AuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gLSB0cnVlIGlmIGNvbGxpc2lvbiBmcmVlLCBmYWxzZSBpZiBhIGNvbGxpc2lvbiBpbiBhbnkgZGlyZWN0aW9uLlxuICovXG5mdW5jdGlvbiBJbU5vdFRvdWNoaW5nWW91KGVsZW1lbnQsIHBhcmVudCwgbHJPbmx5LCB0Yk9ubHkpIHtcbiAgdmFyIGVsZURpbXMgPSBHZXREaW1lbnNpb25zKGVsZW1lbnQpLFxuICAgICAgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0O1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICB2YXIgcGFyRGltcyA9IEdldERpbWVuc2lvbnMocGFyZW50KTtcblxuICAgIGJvdHRvbSA9IChlbGVEaW1zLm9mZnNldC50b3AgKyBlbGVEaW1zLmhlaWdodCA8PSBwYXJEaW1zLmhlaWdodCArIHBhckRpbXMub2Zmc2V0LnRvcCk7XG4gICAgdG9wICAgID0gKGVsZURpbXMub2Zmc2V0LnRvcCA+PSBwYXJEaW1zLm9mZnNldC50b3ApO1xuICAgIGxlZnQgICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ID49IHBhckRpbXMub2Zmc2V0LmxlZnQpO1xuICAgIHJpZ2h0ICA9IChlbGVEaW1zLm9mZnNldC5sZWZ0ICsgZWxlRGltcy53aWR0aCA8PSBwYXJEaW1zLndpZHRoICsgcGFyRGltcy5vZmZzZXQubGVmdCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgYm90dG9tID0gKGVsZURpbXMub2Zmc2V0LnRvcCArIGVsZURpbXMuaGVpZ2h0IDw9IGVsZURpbXMud2luZG93RGltcy5oZWlnaHQgKyBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCk7XG4gICAgdG9wICAgID0gKGVsZURpbXMub2Zmc2V0LnRvcCA+PSBlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCk7XG4gICAgbGVmdCAgID0gKGVsZURpbXMub2Zmc2V0LmxlZnQgPj0gZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC5sZWZ0KTtcbiAgICByaWdodCAgPSAoZWxlRGltcy5vZmZzZXQubGVmdCArIGVsZURpbXMud2lkdGggPD0gZWxlRGltcy53aW5kb3dEaW1zLndpZHRoKTtcbiAgfVxuXG4gIHZhciBhbGxEaXJzID0gW2JvdHRvbSwgdG9wLCBsZWZ0LCByaWdodF07XG5cbiAgaWYgKGxyT25seSkge1xuICAgIHJldHVybiBsZWZ0ID09PSByaWdodCA9PT0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0Yk9ubHkpIHtcbiAgICByZXR1cm4gdG9wID09PSBib3R0b20gPT09IHRydWU7XG4gIH1cblxuICByZXR1cm4gYWxsRGlycy5pbmRleE9mKGZhbHNlKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFVzZXMgbmF0aXZlIG1ldGhvZHMgdG8gcmV0dXJuIGFuIG9iamVjdCBvZiBkaW1lbnNpb24gdmFsdWVzLlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeSB8fCBIVE1MfSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCBvciBET00gZWxlbWVudCBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBkaW1lbnNpb25zLiBDYW4gYmUgYW55IGVsZW1lbnQgb3RoZXIgdGhhdCBkb2N1bWVudCBvciB3aW5kb3cuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAtIG5lc3RlZCBvYmplY3Qgb2YgaW50ZWdlciBwaXhlbCB2YWx1ZXNcbiAqIFRPRE8gLSBpZiBlbGVtZW50IGlzIHdpbmRvdywgcmV0dXJuIG9ubHkgdGhvc2UgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBHZXREaW1lbnNpb25zKGVsZW0sIHRlc3Qpe1xuICBlbGVtID0gZWxlbS5sZW5ndGggPyBlbGVtWzBdIDogZWxlbTtcblxuICBpZiAoZWxlbSA9PT0gd2luZG93IHx8IGVsZW0gPT09IGRvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSSdtIHNvcnJ5LCBEYXZlLiBJJ20gYWZyYWlkIEkgY2FuJ3QgZG8gdGhhdC5cIik7XG4gIH1cblxuICB2YXIgcmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICBwYXJSZWN0ID0gZWxlbS5wYXJlbnROb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgd2luUmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICB3aW5ZID0gd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgd2luWCA9IHdpbmRvdy5wYWdlWE9mZnNldDtcblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHQsXG4gICAgb2Zmc2V0OiB7XG4gICAgICB0b3A6IHJlY3QudG9wICsgd2luWSxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpblhcbiAgICB9LFxuICAgIHBhcmVudERpbXM6IHtcbiAgICAgIHdpZHRoOiBwYXJSZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0OiBwYXJSZWN0LmhlaWdodCxcbiAgICAgIG9mZnNldDoge1xuICAgICAgICB0b3A6IHBhclJlY3QudG9wICsgd2luWSxcbiAgICAgICAgbGVmdDogcGFyUmVjdC5sZWZ0ICsgd2luWFxuICAgICAgfVxuICAgIH0sXG4gICAgd2luZG93RGltczoge1xuICAgICAgd2lkdGg6IHdpblJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHdpblJlY3QuaGVpZ2h0LFxuICAgICAgb2Zmc2V0OiB7XG4gICAgICAgIHRvcDogd2luWSxcbiAgICAgICAgbGVmdDogd2luWFxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIHRvcCBhbmQgbGVmdCBpbnRlZ2VyIHBpeGVsIHZhbHVlcyBmb3IgZHluYW1pY2FsbHkgcmVuZGVyZWQgZWxlbWVudHMsXG4gKiBzdWNoIGFzOiBUb29sdGlwLCBSZXZlYWwsIGFuZCBEcm9wZG93blxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBlbGVtZW50IGJlaW5nIHBvc2l0aW9uZWQuXG4gKiBAcGFyYW0ge2pRdWVyeX0gYW5jaG9yIC0galF1ZXJ5IG9iamVjdCBmb3IgdGhlIGVsZW1lbnQncyBhbmNob3IgcG9pbnQuXG4gKiBAcGFyYW0ge1N0cmluZ30gcG9zaXRpb24gLSBhIHN0cmluZyByZWxhdGluZyB0byB0aGUgZGVzaXJlZCBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCwgcmVsYXRpdmUgdG8gaXQncyBhbmNob3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB2T2Zmc2V0IC0gaW50ZWdlciBwaXhlbCB2YWx1ZSBvZiBkZXNpcmVkIHZlcnRpY2FsIHNlcGFyYXRpb24gYmV0d2VlbiBhbmNob3IgYW5kIGVsZW1lbnQuXG4gKiBAcGFyYW0ge051bWJlcn0gaE9mZnNldCAtIGludGVnZXIgcGl4ZWwgdmFsdWUgb2YgZGVzaXJlZCBob3Jpem9udGFsIHNlcGFyYXRpb24gYmV0d2VlbiBhbmNob3IgYW5kIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlzT3ZlcmZsb3cgLSBpZiBhIGNvbGxpc2lvbiBldmVudCBpcyBkZXRlY3RlZCwgc2V0cyB0byB0cnVlIHRvIGRlZmF1bHQgdGhlIGVsZW1lbnQgdG8gZnVsbCB3aWR0aCAtIGFueSBkZXNpcmVkIG9mZnNldC5cbiAqIFRPRE8gYWx0ZXIvcmV3cml0ZSB0byB3b3JrIHdpdGggYGVtYCB2YWx1ZXMgYXMgd2VsbC9pbnN0ZWFkIG9mIHBpeGVsc1xuICovXG5mdW5jdGlvbiBHZXRPZmZzZXRzKGVsZW1lbnQsIGFuY2hvciwgcG9zaXRpb24sIHZPZmZzZXQsIGhPZmZzZXQsIGlzT3ZlcmZsb3cpIHtcbiAgdmFyICRlbGVEaW1zID0gR2V0RGltZW5zaW9ucyhlbGVtZW50KSxcbiAgICAgICRhbmNob3JEaW1zID0gYW5jaG9yID8gR2V0RGltZW5zaW9ucyhhbmNob3IpIDogbnVsbDtcblxuICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IChGb3VuZGF0aW9uLnJ0bCgpID8gJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgLSAkZWxlRGltcy53aWR0aCArICRhbmNob3JEaW1zLndpZHRoIDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgLSAoJGVsZURpbXMuaGVpZ2h0ICsgdk9mZnNldClcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGFuY2hvckRpbXMub2Zmc2V0LmxlZnQgLSAoJGVsZURpbXMud2lkdGggKyBoT2Zmc2V0KSxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICRhbmNob3JEaW1zLndpZHRoICsgaE9mZnNldCxcbiAgICAgICAgdG9wOiAkYW5jaG9yRGltcy5vZmZzZXQudG9wXG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgdG9wJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArICgkYW5jaG9yRGltcy53aWR0aCAvIDIpKSAtICgkZWxlRGltcy53aWR0aCAvIDIpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgLSAoJGVsZURpbXMuaGVpZ2h0ICsgdk9mZnNldClcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlciBib3R0b20nOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogaXNPdmVyZmxvdyA/IGhPZmZzZXQgOiAoKCRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgKCRhbmNob3JEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMikpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjZW50ZXIgbGVmdCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICgkZWxlRGltcy53aWR0aCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICgkYW5jaG9yRGltcy5vZmZzZXQudG9wICsgKCRhbmNob3JEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY2VudGVyIHJpZ2h0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0ICsgMSxcbiAgICAgICAgdG9wOiAoJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICgkYW5jaG9yRGltcy5oZWlnaHQgLyAyKSkgLSAoJGVsZURpbXMuaGVpZ2h0IC8gMilcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiAoJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQubGVmdCArICgkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC8gMikpIC0gKCRlbGVEaW1zLndpZHRoIC8gMiksXG4gICAgICAgIHRvcDogKCRlbGVEaW1zLndpbmRvd0RpbXMub2Zmc2V0LnRvcCArICgkZWxlRGltcy53aW5kb3dEaW1zLmhlaWdodCAvIDIpKSAtICgkZWxlRGltcy5oZWlnaHQgLyAyKVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmV2ZWFsJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICgkZWxlRGltcy53aW5kb3dEaW1zLndpZHRoIC0gJGVsZURpbXMud2lkdGgpIC8gMixcbiAgICAgICAgdG9wOiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3AgKyB2T2Zmc2V0XG4gICAgICB9XG4gICAgY2FzZSAncmV2ZWFsIGZ1bGwnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogJGVsZURpbXMud2luZG93RGltcy5vZmZzZXQubGVmdCxcbiAgICAgICAgdG9wOiAkZWxlRGltcy53aW5kb3dEaW1zLm9mZnNldC50b3BcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2xlZnQgYm90dG9tJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0LFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncmlnaHQgYm90dG9tJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6ICRhbmNob3JEaW1zLm9mZnNldC5sZWZ0ICsgJGFuY2hvckRpbXMud2lkdGggKyBoT2Zmc2V0IC0gJGVsZURpbXMud2lkdGgsXG4gICAgICAgIHRvcDogJGFuY2hvckRpbXMub2Zmc2V0LnRvcCArICRhbmNob3JEaW1zLmhlaWdodCArIHZPZmZzZXRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogKEZvdW5kYXRpb24ucnRsKCkgPyAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCAtICRlbGVEaW1zLndpZHRoICsgJGFuY2hvckRpbXMud2lkdGggOiAkYW5jaG9yRGltcy5vZmZzZXQubGVmdCArIGhPZmZzZXQpLFxuICAgICAgICB0b3A6ICRhbmNob3JEaW1zLm9mZnNldC50b3AgKyAkYW5jaG9yRGltcy5oZWlnaHQgKyB2T2Zmc2V0XG4gICAgICB9XG4gIH1cbn1cblxufShqUXVlcnkpO1xuIiwiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiBUaGlzIHV0aWwgd2FzIGNyZWF0ZWQgYnkgTWFyaXVzIE9sYmVydHogKlxuICogUGxlYXNlIHRoYW5rIE1hcml1cyBvbiBHaXRIdWIgL293bGJlcnR6ICpcbiAqIG9yIHRoZSB3ZWIgaHR0cDovL3d3dy5tYXJpdXNvbGJlcnR6LmRlLyAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG5jb25zdCBrZXlDb2RlcyA9IHtcbiAgOTogJ1RBQicsXG4gIDEzOiAnRU5URVInLFxuICAyNzogJ0VTQ0FQRScsXG4gIDMyOiAnU1BBQ0UnLFxuICAzNzogJ0FSUk9XX0xFRlQnLFxuICAzODogJ0FSUk9XX1VQJyxcbiAgMzk6ICdBUlJPV19SSUdIVCcsXG4gIDQwOiAnQVJST1dfRE9XTidcbn1cblxudmFyIGNvbW1hbmRzID0ge31cblxudmFyIEtleWJvYXJkID0ge1xuICBrZXlzOiBnZXRLZXlDb2RlcyhrZXlDb2RlcyksXG5cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgKGtleWJvYXJkKSBldmVudCBhbmQgcmV0dXJucyBhIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgaXRzIGtleVxuICAgKiBDYW4gYmUgdXNlZCBsaWtlIEZvdW5kYXRpb24ucGFyc2VLZXkoZXZlbnQpID09PSBGb3VuZGF0aW9uLmtleXMuU1BBQ0VcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm4gU3RyaW5nIGtleSAtIFN0cmluZyB0aGF0IHJlcHJlc2VudHMgdGhlIGtleSBwcmVzc2VkXG4gICAqL1xuICBwYXJzZUtleShldmVudCkge1xuICAgIHZhciBrZXkgPSBrZXlDb2Rlc1tldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlXSB8fCBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LndoaWNoKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgLy8gUmVtb3ZlIHVuLXByaW50YWJsZSBjaGFyYWN0ZXJzLCBlLmcuIGZvciBgZnJvbUNoYXJDb2RlYCBjYWxscyBmb3IgQ1RSTCBvbmx5IGV2ZW50c1xuICAgIGtleSA9IGtleS5yZXBsYWNlKC9cXFcrLywgJycpO1xuXG4gICAgaWYgKGV2ZW50LnNoaWZ0S2V5KSBrZXkgPSBgU0hJRlRfJHtrZXl9YDtcbiAgICBpZiAoZXZlbnQuY3RybEtleSkga2V5ID0gYENUUkxfJHtrZXl9YDtcbiAgICBpZiAoZXZlbnQuYWx0S2V5KSBrZXkgPSBgQUxUXyR7a2V5fWA7XG5cbiAgICAvLyBSZW1vdmUgdHJhaWxpbmcgdW5kZXJzY29yZSwgaW4gY2FzZSBvbmx5IG1vZGlmaWVycyB3ZXJlIHVzZWQgKGUuZy4gb25seSBgQ1RSTF9BTFRgKVxuICAgIGtleSA9IGtleS5yZXBsYWNlKC9fJC8sICcnKTtcblxuICAgIHJldHVybiBrZXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIGdpdmVuIChrZXlib2FyZCkgZXZlbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSB0aGUgZXZlbnQgZ2VuZXJhdGVkIGJ5IHRoZSBldmVudCBoYW5kbGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb21wb25lbnQgLSBGb3VuZGF0aW9uIGNvbXBvbmVudCdzIG5hbWUsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcGFyYW0ge09iamVjdHN9IGZ1bmN0aW9ucyAtIGNvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRoYXQgYXJlIHRvIGJlIGV4ZWN1dGVkXG4gICAqL1xuICBoYW5kbGVLZXkoZXZlbnQsIGNvbXBvbmVudCwgZnVuY3Rpb25zKSB7XG4gICAgdmFyIGNvbW1hbmRMaXN0ID0gY29tbWFuZHNbY29tcG9uZW50XSxcbiAgICAgIGtleUNvZGUgPSB0aGlzLnBhcnNlS2V5KGV2ZW50KSxcbiAgICAgIGNtZHMsXG4gICAgICBjb21tYW5kLFxuICAgICAgZm47XG5cbiAgICBpZiAoIWNvbW1hbmRMaXN0KSByZXR1cm4gY29uc29sZS53YXJuKCdDb21wb25lbnQgbm90IGRlZmluZWQhJyk7XG5cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRMaXN0Lmx0ciA9PT0gJ3VuZGVmaW5lZCcpIHsgLy8gdGhpcyBjb21wb25lbnQgZG9lcyBub3QgZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGx0ciBhbmQgcnRsXG4gICAgICAgIGNtZHMgPSBjb21tYW5kTGlzdDsgLy8gdXNlIHBsYWluIGxpc3RcbiAgICB9IGVsc2UgeyAvLyBtZXJnZSBsdHIgYW5kIHJ0bDogaWYgZG9jdW1lbnQgaXMgcnRsLCBydGwgb3ZlcndyaXRlcyBsdHIgYW5kIHZpY2UgdmVyc2FcbiAgICAgICAgaWYgKEZvdW5kYXRpb24ucnRsKCkpIGNtZHMgPSAkLmV4dGVuZCh7fSwgY29tbWFuZExpc3QubHRyLCBjb21tYW5kTGlzdC5ydGwpO1xuXG4gICAgICAgIGVsc2UgY21kcyA9ICQuZXh0ZW5kKHt9LCBjb21tYW5kTGlzdC5ydGwsIGNvbW1hbmRMaXN0Lmx0cik7XG4gICAgfVxuICAgIGNvbW1hbmQgPSBjbWRzW2tleUNvZGVdO1xuXG4gICAgZm4gPSBmdW5jdGlvbnNbY29tbWFuZF07XG4gICAgaWYgKGZuICYmIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykgeyAvLyBleGVjdXRlIGZ1bmN0aW9uICBpZiBleGlzdHNcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IGZuLmFwcGx5KCk7XG4gICAgICBpZiAoZnVuY3Rpb25zLmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy5oYW5kbGVkID09PSAnZnVuY3Rpb24nKSB7IC8vIGV4ZWN1dGUgZnVuY3Rpb24gd2hlbiBldmVudCB3YXMgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy5oYW5kbGVkKHJldHVyblZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGZ1bmN0aW9ucy51bmhhbmRsZWQgfHwgdHlwZW9mIGZ1bmN0aW9ucy51bmhhbmRsZWQgPT09ICdmdW5jdGlvbicpIHsgLy8gZXhlY3V0ZSBmdW5jdGlvbiB3aGVuIGV2ZW50IHdhcyBub3QgaGFuZGxlZFxuICAgICAgICAgIGZ1bmN0aW9ucy51bmhhbmRsZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCBmb2N1c2FibGUgZWxlbWVudHMgd2l0aGluIHRoZSBnaXZlbiBgJGVsZW1lbnRgXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gc2VhcmNoIHdpdGhpblxuICAgKiBAcmV0dXJuIHtqUXVlcnl9ICRmb2N1c2FibGUgLSBhbGwgZm9jdXNhYmxlIGVsZW1lbnRzIHdpdGhpbiBgJGVsZW1lbnRgXG4gICAqL1xuICBmaW5kRm9jdXNhYmxlKCRlbGVtZW50KSB7XG4gICAgaWYoISRlbGVtZW50KSB7cmV0dXJuIGZhbHNlOyB9XG4gICAgcmV0dXJuICRlbGVtZW50LmZpbmQoJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgc2VsZWN0Om5vdChbZGlzYWJsZWRdKSwgdGV4dGFyZWE6bm90KFtkaXNhYmxlZF0pLCBidXR0b246bm90KFtkaXNhYmxlZF0pLCBpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdLCAqW2NvbnRlbnRlZGl0YWJsZV0nKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoISQodGhpcykuaXMoJzp2aXNpYmxlJykgfHwgJCh0aGlzKS5hdHRyKCd0YWJpbmRleCcpIDwgMCkgeyByZXR1cm4gZmFsc2U7IH0gLy9vbmx5IGhhdmUgdmlzaWJsZSBlbGVtZW50cyBhbmQgdGhvc2UgdGhhdCBoYXZlIGEgdGFiaW5kZXggZ3JlYXRlciBvciBlcXVhbCAwXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29tcG9uZW50IG5hbWUgbmFtZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50IC0gRm91bmRhdGlvbiBjb21wb25lbnQsIGUuZy4gU2xpZGVyIG9yIFJldmVhbFxuICAgKiBAcmV0dXJuIFN0cmluZyBjb21wb25lbnROYW1lXG4gICAqL1xuXG4gIHJlZ2lzdGVyKGNvbXBvbmVudE5hbWUsIGNtZHMpIHtcbiAgICBjb21tYW5kc1tjb21wb25lbnROYW1lXSA9IGNtZHM7XG4gIH0sICBcblxuICAvKipcbiAgICogVHJhcHMgdGhlIGZvY3VzIGluIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0gIHtqUXVlcnl9ICRlbGVtZW50ICBqUXVlcnkgb2JqZWN0IHRvIHRyYXAgdGhlIGZvdWNzIGludG8uXG4gICAqL1xuICB0cmFwRm9jdXMoJGVsZW1lbnQpIHtcbiAgICB2YXIgJGZvY3VzYWJsZSA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSgkZWxlbWVudCksXG4gICAgICAgICRmaXJzdEZvY3VzYWJsZSA9ICRmb2N1c2FibGUuZXEoMCksXG4gICAgICAgICRsYXN0Rm9jdXNhYmxlID0gJGZvY3VzYWJsZS5lcSgtMSk7XG5cbiAgICAkZWxlbWVudC5vbigna2V5ZG93bi56Zi50cmFwZm9jdXMnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gJGxhc3RGb2N1c2FibGVbMF0gJiYgRm91bmRhdGlvbi5LZXlib2FyZC5wYXJzZUtleShldmVudCkgPT09ICdUQUInKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICRmaXJzdEZvY3VzYWJsZS5mb2N1cygpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZXZlbnQudGFyZ2V0ID09PSAkZmlyc3RGb2N1c2FibGVbMF0gJiYgRm91bmRhdGlvbi5LZXlib2FyZC5wYXJzZUtleShldmVudCkgPT09ICdTSElGVF9UQUInKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICRsYXN0Rm9jdXNhYmxlLmZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIC8qKlxuICAgKiBSZWxlYXNlcyB0aGUgdHJhcHBlZCBmb2N1cyBmcm9tIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKiBAcGFyYW0gIHtqUXVlcnl9ICRlbGVtZW50ICBqUXVlcnkgb2JqZWN0IHRvIHJlbGVhc2UgdGhlIGZvY3VzIGZvci5cbiAgICovXG4gIHJlbGVhc2VGb2N1cygkZWxlbWVudCkge1xuICAgICRlbGVtZW50Lm9mZigna2V5ZG93bi56Zi50cmFwZm9jdXMnKTtcbiAgfVxufVxuXG4vKlxuICogQ29uc3RhbnRzIGZvciBlYXNpZXIgY29tcGFyaW5nLlxuICogQ2FuIGJlIHVzZWQgbGlrZSBGb3VuZGF0aW9uLnBhcnNlS2V5KGV2ZW50KSA9PT0gRm91bmRhdGlvbi5rZXlzLlNQQUNFXG4gKi9cbmZ1bmN0aW9uIGdldEtleUNvZGVzKGtjcykge1xuICB2YXIgayA9IHt9O1xuICBmb3IgKHZhciBrYyBpbiBrY3MpIGtba2NzW2tjXV0gPSBrY3Nba2NdO1xuICByZXR1cm4gaztcbn1cblxuRm91bmRhdGlvbi5LZXlib2FyZCA9IEtleWJvYXJkO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8vIERlZmF1bHQgc2V0IG9mIG1lZGlhIHF1ZXJpZXNcbmNvbnN0IGRlZmF1bHRRdWVyaWVzID0ge1xuICAnZGVmYXVsdCcgOiAnb25seSBzY3JlZW4nLFxuICBsYW5kc2NhcGUgOiAnb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKScsXG4gIHBvcnRyYWl0IDogJ29ubHkgc2NyZWVuIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KScsXG4gIHJldGluYSA6ICdvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksJyArXG4gICAgJ29ubHkgc2NyZWVuIGFuZCAobWluLS1tb3otZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwnICtcbiAgICAnb25seSBzY3JlZW4gYW5kICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyLzEpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpLCcgK1xuICAgICdvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAyZHBweCknXG59O1xuXG52YXIgTWVkaWFRdWVyeSA9IHtcbiAgcXVlcmllczogW10sXG5cbiAgY3VycmVudDogJycsXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBtZWRpYSBxdWVyeSBoZWxwZXIsIGJ5IGV4dHJhY3RpbmcgdGhlIGJyZWFrcG9pbnQgbGlzdCBmcm9tIHRoZSBDU1MgYW5kIGFjdGl2YXRpbmcgdGhlIGJyZWFrcG9pbnQgd2F0Y2hlci5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGV4dHJhY3RlZFN0eWxlcyA9ICQoJy5mb3VuZGF0aW9uLW1xJykuY3NzKCdmb250LWZhbWlseScpO1xuICAgIHZhciBuYW1lZFF1ZXJpZXM7XG5cbiAgICBuYW1lZFF1ZXJpZXMgPSBwYXJzZVN0eWxlVG9PYmplY3QoZXh0cmFjdGVkU3R5bGVzKTtcblxuICAgIGZvciAodmFyIGtleSBpbiBuYW1lZFF1ZXJpZXMpIHtcbiAgICAgIGlmKG5hbWVkUXVlcmllcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIHNlbGYucXVlcmllcy5wdXNoKHtcbiAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgdmFsdWU6IGBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJHtuYW1lZFF1ZXJpZXNba2V5XX0pYFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnQgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpO1xuXG4gICAgdGhpcy5fd2F0Y2hlcigpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHNjcmVlbiBpcyBhdCBsZWFzdCBhcyB3aWRlIGFzIGEgYnJlYWtwb2ludC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBjaGVjay5cbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgYnJlYWtwb2ludCBtYXRjaGVzLCBgZmFsc2VgIGlmIGl0J3Mgc21hbGxlci5cbiAgICovXG4gIGF0TGVhc3Qoc2l6ZSkge1xuICAgIHZhciBxdWVyeSA9IHRoaXMuZ2V0KHNpemUpO1xuXG4gICAgaWYgKHF1ZXJ5KSB7XG4gICAgICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEocXVlcnkpLm1hdGNoZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHNjcmVlbiBtYXRjaGVzIHRvIGEgYnJlYWtwb2ludC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzaXplIC0gTmFtZSBvZiB0aGUgYnJlYWtwb2ludCB0byBjaGVjaywgZWl0aGVyICdzbWFsbCBvbmx5JyBvciAnc21hbGwnLiBPbWl0dGluZyAnb25seScgZmFsbHMgYmFjayB0byB1c2luZyBhdExlYXN0KCkgbWV0aG9kLlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBicmVha3BvaW50IG1hdGNoZXMsIGBmYWxzZWAgaWYgaXQgZG9lcyBub3QuXG4gICAqL1xuICBpcyhzaXplKSB7XG4gICAgc2l6ZSA9IHNpemUudHJpbSgpLnNwbGl0KCcgJyk7XG4gICAgaWYoc2l6ZS5sZW5ndGggPiAxICYmIHNpemVbMV0gPT09ICdvbmx5Jykge1xuICAgICAgaWYoc2l6ZVswXSA9PT0gdGhpcy5fZ2V0Q3VycmVudFNpemUoKSkgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmF0TGVhc3Qoc2l6ZVswXSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0cyB0aGUgbWVkaWEgcXVlcnkgb2YgYSBicmVha3BvaW50LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNpemUgLSBOYW1lIG9mIHRoZSBicmVha3BvaW50IHRvIGdldC5cbiAgICogQHJldHVybnMge1N0cmluZ3xudWxsfSAtIFRoZSBtZWRpYSBxdWVyeSBvZiB0aGUgYnJlYWtwb2ludCwgb3IgYG51bGxgIGlmIHRoZSBicmVha3BvaW50IGRvZXNuJ3QgZXhpc3QuXG4gICAqL1xuICBnZXQoc2l6ZSkge1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5xdWVyaWVzKSB7XG4gICAgICBpZih0aGlzLnF1ZXJpZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuICAgICAgICBpZiAoc2l6ZSA9PT0gcXVlcnkubmFtZSkgcmV0dXJuIHF1ZXJ5LnZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgbmFtZSBieSB0ZXN0aW5nIGV2ZXJ5IGJyZWFrcG9pbnQgYW5kIHJldHVybmluZyB0aGUgbGFzdCBvbmUgdG8gbWF0Y2ggKHRoZSBiaWdnZXN0IG9uZSkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBOYW1lIG9mIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQuXG4gICAqL1xuICBfZ2V0Q3VycmVudFNpemUoKSB7XG4gICAgdmFyIG1hdGNoZWQ7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyaWVzW2ldO1xuXG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEocXVlcnkudmFsdWUpLm1hdGNoZXMpIHtcbiAgICAgICAgbWF0Y2hlZCA9IHF1ZXJ5O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbWF0Y2hlZCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBtYXRjaGVkLm5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXRjaGVkO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQWN0aXZhdGVzIHRoZSBicmVha3BvaW50IHdhdGNoZXIsIHdoaWNoIGZpcmVzIGFuIGV2ZW50IG9uIHRoZSB3aW5kb3cgd2hlbmV2ZXIgdGhlIGJyZWFrcG9pbnQgY2hhbmdlcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfd2F0Y2hlcigpIHtcbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5tZWRpYXF1ZXJ5JywgKCkgPT4ge1xuICAgICAgdmFyIG5ld1NpemUgPSB0aGlzLl9nZXRDdXJyZW50U2l6ZSgpLCBjdXJyZW50U2l6ZSA9IHRoaXMuY3VycmVudDtcblxuICAgICAgaWYgKG5ld1NpemUgIT09IGN1cnJlbnRTaXplKSB7XG4gICAgICAgIC8vIENoYW5nZSB0aGUgY3VycmVudCBtZWRpYSBxdWVyeVxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBuZXdTaXplO1xuXG4gICAgICAgIC8vIEJyb2FkY2FzdCB0aGUgbWVkaWEgcXVlcnkgY2hhbmdlIG9uIHRoZSB3aW5kb3dcbiAgICAgICAgJCh3aW5kb3cpLnRyaWdnZXIoJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIFtuZXdTaXplLCBjdXJyZW50U2l6ZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG4vLyBtYXRjaE1lZGlhKCkgcG9seWZpbGwgLSBUZXN0IGEgQ1NTIG1lZGlhIHR5cGUvcXVlcnkgaW4gSlMuXG4vLyBBdXRob3JzICYgY29weXJpZ2h0IChjKSAyMDEyOiBTY290dCBKZWhsLCBQYXVsIElyaXNoLCBOaWNob2xhcyBaYWthcywgRGF2aWQgS25pZ2h0LiBEdWFsIE1JVC9CU0QgbGljZW5zZVxud2luZG93Lm1hdGNoTWVkaWEgfHwgKHdpbmRvdy5tYXRjaE1lZGlhID0gZnVuY3Rpb24oKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBGb3IgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IG1hdGNoTWVkaXVtIGFwaSBzdWNoIGFzIElFIDkgYW5kIHdlYmtpdFxuICB2YXIgc3R5bGVNZWRpYSA9ICh3aW5kb3cuc3R5bGVNZWRpYSB8fCB3aW5kb3cubWVkaWEpO1xuXG4gIC8vIEZvciB0aG9zZSB0aGF0IGRvbid0IHN1cHBvcnQgbWF0Y2hNZWRpdW1cbiAgaWYgKCFzdHlsZU1lZGlhKSB7XG4gICAgdmFyIHN0eWxlICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpLFxuICAgIHNjcmlwdCAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdLFxuICAgIGluZm8gICAgICAgID0gbnVsbDtcblxuICAgIHN0eWxlLnR5cGUgID0gJ3RleHQvY3NzJztcbiAgICBzdHlsZS5pZCAgICA9ICdtYXRjaG1lZGlhanMtdGVzdCc7XG5cbiAgICBzY3JpcHQgJiYgc2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBzY3JpcHQpO1xuXG4gICAgLy8gJ3N0eWxlLmN1cnJlbnRTdHlsZScgaXMgdXNlZCBieSBJRSA8PSA4IGFuZCAnd2luZG93LmdldENvbXB1dGVkU3R5bGUnIGZvciBhbGwgb3RoZXIgYnJvd3NlcnNcbiAgICBpbmZvID0gKCdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cpICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHN0eWxlLCBudWxsKSB8fCBzdHlsZS5jdXJyZW50U3R5bGU7XG5cbiAgICBzdHlsZU1lZGlhID0ge1xuICAgICAgbWF0Y2hNZWRpdW0obWVkaWEpIHtcbiAgICAgICAgdmFyIHRleHQgPSBgQG1lZGlhICR7bWVkaWF9eyAjbWF0Y2htZWRpYWpzLXRlc3QgeyB3aWR0aDogMXB4OyB9IH1gO1xuXG4gICAgICAgIC8vICdzdHlsZS5zdHlsZVNoZWV0JyBpcyB1c2VkIGJ5IElFIDw9IDggYW5kICdzdHlsZS50ZXh0Q29udGVudCcgZm9yIGFsbCBvdGhlciBicm93c2Vyc1xuICAgICAgICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgICAgICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHRleHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBpZiBtZWRpYSBxdWVyeSBpcyB0cnVlIG9yIGZhbHNlXG4gICAgICAgIHJldHVybiBpbmZvLndpZHRoID09PSAnMXB4JztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24obWVkaWEpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWF0Y2hlczogc3R5bGVNZWRpYS5tYXRjaE1lZGl1bShtZWRpYSB8fCAnYWxsJyksXG4gICAgICBtZWRpYTogbWVkaWEgfHwgJ2FsbCdcbiAgICB9O1xuICB9XG59KCkpO1xuXG4vLyBUaGFuayB5b3U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvcXVlcnktc3RyaW5nXG5mdW5jdGlvbiBwYXJzZVN0eWxlVG9PYmplY3Qoc3RyKSB7XG4gIHZhciBzdHlsZU9iamVjdCA9IHt9O1xuXG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgfVxuXG4gIHN0ciA9IHN0ci50cmltKCkuc2xpY2UoMSwgLTEpOyAvLyBicm93c2VycyByZS1xdW90ZSBzdHJpbmcgc3R5bGUgdmFsdWVzXG5cbiAgaWYgKCFzdHIpIHtcbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH1cblxuICBzdHlsZU9iamVjdCA9IHN0ci5zcGxpdCgnJicpLnJlZHVjZShmdW5jdGlvbihyZXQsIHBhcmFtKSB7XG4gICAgdmFyIHBhcnRzID0gcGFyYW0ucmVwbGFjZSgvXFwrL2csICcgJykuc3BsaXQoJz0nKTtcbiAgICB2YXIga2V5ID0gcGFydHNbMF07XG4gICAgdmFyIHZhbCA9IHBhcnRzWzFdO1xuICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkpO1xuXG4gICAgLy8gbWlzc2luZyBgPWAgc2hvdWxkIGJlIGBudWxsYDpcbiAgICAvLyBodHRwOi8vdzMub3JnL1RSLzIwMTIvV0QtdXJsLTIwMTIwNTI0LyNjb2xsZWN0LXVybC1wYXJhbWV0ZXJzXG4gICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVjb2RlVVJJQ29tcG9uZW50KHZhbCk7XG5cbiAgICBpZiAoIXJldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXRba2V5XSA9IHZhbDtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmV0W2tleV0pKSB7XG4gICAgICByZXRba2V5XS5wdXNoKHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldFtrZXldID0gW3JldFtrZXldLCB2YWxdO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIHN0eWxlT2JqZWN0O1xufVxuXG5Gb3VuZGF0aW9uLk1lZGlhUXVlcnkgPSBNZWRpYVF1ZXJ5O1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogTW90aW9uIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5tb3Rpb25cbiAqL1xuXG5jb25zdCBpbml0Q2xhc3NlcyAgID0gWydtdWktZW50ZXInLCAnbXVpLWxlYXZlJ107XG5jb25zdCBhY3RpdmVDbGFzc2VzID0gWydtdWktZW50ZXItYWN0aXZlJywgJ211aS1sZWF2ZS1hY3RpdmUnXTtcblxuY29uc3QgTW90aW9uID0ge1xuICBhbmltYXRlSW46IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKHRydWUsIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpO1xuICB9LFxuXG4gIGFuaW1hdGVPdXQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgICBhbmltYXRlKGZhbHNlLCBlbGVtZW50LCBhbmltYXRpb24sIGNiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNb3ZlKGR1cmF0aW9uLCBlbGVtLCBmbil7XG4gIHZhciBhbmltLCBwcm9nLCBzdGFydCA9IG51bGw7XG4gIC8vIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcblxuICBpZiAoZHVyYXRpb24gPT09IDApIHtcbiAgICBmbi5hcHBseShlbGVtKTtcbiAgICBlbGVtLnRyaWdnZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pLnRyaWdnZXJIYW5kbGVyKCdmaW5pc2hlZC56Zi5hbmltYXRlJywgW2VsZW1dKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZlKHRzKXtcbiAgICBpZighc3RhcnQpIHN0YXJ0ID0gdHM7XG4gICAgLy8gY29uc29sZS5sb2coc3RhcnQsIHRzKTtcbiAgICBwcm9nID0gdHMgLSBzdGFydDtcbiAgICBmbi5hcHBseShlbGVtKTtcblxuICAgIGlmKHByb2cgPCBkdXJhdGlvbil7IGFuaW0gPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1vdmUsIGVsZW0pOyB9XG4gICAgZWxzZXtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltKTtcbiAgICAgIGVsZW0udHJpZ2dlcignZmluaXNoZWQuemYuYW5pbWF0ZScsIFtlbGVtXSkudHJpZ2dlckhhbmRsZXIoJ2ZpbmlzaGVkLnpmLmFuaW1hdGUnLCBbZWxlbV0pO1xuICAgIH1cbiAgfVxuICBhbmltID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShtb3ZlKTtcbn1cblxuLyoqXG4gKiBBbmltYXRlcyBhbiBlbGVtZW50IGluIG9yIG91dCB1c2luZyBhIENTUyB0cmFuc2l0aW9uIGNsYXNzLlxuICogQGZ1bmN0aW9uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCb29sZWFufSBpc0luIC0gRGVmaW5lcyBpZiB0aGUgYW5pbWF0aW9uIGlzIGluIG9yIG91dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9yIEhUTUwgb2JqZWN0IHRvIGFuaW1hdGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gYW5pbWF0aW9uIC0gQ1NTIGNsYXNzIHRvIHVzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gQ2FsbGJhY2sgdG8gcnVuIHdoZW4gYW5pbWF0aW9uIGlzIGZpbmlzaGVkLlxuICovXG5mdW5jdGlvbiBhbmltYXRlKGlzSW4sIGVsZW1lbnQsIGFuaW1hdGlvbiwgY2IpIHtcbiAgZWxlbWVudCA9ICQoZWxlbWVudCkuZXEoMCk7XG5cbiAgaWYgKCFlbGVtZW50Lmxlbmd0aCkgcmV0dXJuO1xuXG4gIHZhciBpbml0Q2xhc3MgPSBpc0luID8gaW5pdENsYXNzZXNbMF0gOiBpbml0Q2xhc3Nlc1sxXTtcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNJbiA/IGFjdGl2ZUNsYXNzZXNbMF0gOiBhY3RpdmVDbGFzc2VzWzFdO1xuXG4gIC8vIFNldCB1cCB0aGUgYW5pbWF0aW9uXG4gIHJlc2V0KCk7XG5cbiAgZWxlbWVudFxuICAgIC5hZGRDbGFzcyhhbmltYXRpb24pXG4gICAgLmNzcygndHJhbnNpdGlvbicsICdub25lJyk7XG5cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBlbGVtZW50LmFkZENsYXNzKGluaXRDbGFzcyk7XG4gICAgaWYgKGlzSW4pIGVsZW1lbnQuc2hvdygpO1xuICB9KTtcblxuICAvLyBTdGFydCB0aGUgYW5pbWF0aW9uXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aDtcbiAgICBlbGVtZW50XG4gICAgICAuY3NzKCd0cmFuc2l0aW9uJywgJycpXG4gICAgICAuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpO1xuICB9KTtcblxuICAvLyBDbGVhbiB1cCB0aGUgYW5pbWF0aW9uIHdoZW4gaXQgZmluaXNoZXNcbiAgZWxlbWVudC5vbmUoRm91bmRhdGlvbi50cmFuc2l0aW9uZW5kKGVsZW1lbnQpLCBmaW5pc2gpO1xuXG4gIC8vIEhpZGVzIHRoZSBlbGVtZW50IChmb3Igb3V0IGFuaW1hdGlvbnMpLCByZXNldHMgdGhlIGVsZW1lbnQsIGFuZCBydW5zIGEgY2FsbGJhY2tcbiAgZnVuY3Rpb24gZmluaXNoKCkge1xuICAgIGlmICghaXNJbikgZWxlbWVudC5oaWRlKCk7XG4gICAgcmVzZXQoKTtcbiAgICBpZiAoY2IpIGNiLmFwcGx5KGVsZW1lbnQpO1xuICB9XG5cbiAgLy8gUmVzZXRzIHRyYW5zaXRpb25zIGFuZCByZW1vdmVzIG1vdGlvbi1zcGVjaWZpYyBjbGFzc2VzXG4gIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgIGVsZW1lbnRbMF0uc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gMDtcbiAgICBlbGVtZW50LnJlbW92ZUNsYXNzKGAke2luaXRDbGFzc30gJHthY3RpdmVDbGFzc30gJHthbmltYXRpb259YCk7XG4gIH1cbn1cblxuRm91bmRhdGlvbi5Nb3ZlID0gTW92ZTtcbkZvdW5kYXRpb24uTW90aW9uID0gTW90aW9uO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbiAgICBjb25zdCBOZXN0ID0ge1xuICAgICAgICBGZWF0aGVyKG1lbnUsIHR5cGUgPSAnemYnKSB7XG4gICAgICAgICAgICBtZW51LmF0dHIoJ3JvbGUnLCAnbWVudWJhcicpO1xuXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBtZW51LmZpbmQoJ2xpJykuYXR0cih7J3JvbGUnOiAnbWVudWl0ZW0nfSksXG4gICAgICAgICAgICAgICAgc3ViTWVudUNsYXNzID0gYGlzLSR7dHlwZX0tc3VibWVudWAsXG4gICAgICAgICAgICAgICAgc3ViSXRlbUNsYXNzID0gYCR7c3ViTWVudUNsYXNzfS1pdGVtYCxcbiAgICAgICAgICAgICAgICBoYXNTdWJDbGFzcyA9IGBpcy0ke3R5cGV9LXN1Ym1lbnUtcGFyZW50YCxcbiAgICAgICAgICAgICAgICBhcHBseUFyaWEgPSAodHlwZSAhPT0gJ2FjY29yZGlvbicpOyAvLyBBY2NvcmRpb25zIGhhbmRsZSB0aGVpciBvd24gQVJJQSBhdHRyaXV0ZXMuXG5cbiAgICAgICAgICAgIG1lbnUuZmluZCgnYTpmaXJzdCcpLmF0dHIoJ3RhYmluZGV4JywgMCk7XG5cbiAgICAgICAgICAgIGl0ZW1zLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyICRpdGVtID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgJHN1YiA9ICRpdGVtLmNoaWxkcmVuKCd1bCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCRzdWIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICRpdGVtLmFkZENsYXNzKGhhc1N1YkNsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgJHN1Yi5hZGRDbGFzcyhgc3VibWVudSAke3N1Yk1lbnVDbGFzc31gKS5hdHRyKHsnZGF0YS1zdWJtZW51JzogJyd9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYoYXBwbHlBcmlhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaXRlbS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1oYXNwb3B1cCc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICRpdGVtLmNoaWxkcmVuKCdhOmZpcnN0JykudGV4dCgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHN1Yi5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ21lbnUnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICgkaXRlbS5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICRpdGVtLmFkZENsYXNzKGBpcy1zdWJtZW51LWl0ZW0gJHtzdWJJdGVtQ2xhc3N9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSxcblxuICAgICAgICBCdXJuKG1lbnUsIHR5cGUpIHtcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IG1lbnUuZmluZCgnbGknKS5yZW1vdmVBdHRyKCd0YWJpbmRleCcpLFxuICAgICAgICAgICAgICAgIHN1Yk1lbnVDbGFzcyA9IGBpcy0ke3R5cGV9LXN1Ym1lbnVgLFxuICAgICAgICAgICAgICAgIHN1Ykl0ZW1DbGFzcyA9IGAke3N1Yk1lbnVDbGFzc30taXRlbWAsXG4gICAgICAgICAgICAgICAgaGFzU3ViQ2xhc3MgPSBgaXMtJHt0eXBlfS1zdWJtZW51LXBhcmVudGA7XG5cbiAgICAgICAgICAgIG1lbnVcbiAgICAgICAgICAgICAgICAuZmluZCgnPmxpLCAubWVudSwgLm1lbnUgPiBsaScpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKGAke3N1Yk1lbnVDbGFzc30gJHtzdWJJdGVtQ2xhc3N9ICR7aGFzU3ViQ2xhc3N9IGlzLXN1Ym1lbnUtaXRlbSBzdWJtZW51IGlzLWFjdGl2ZWApXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc3VibWVudScpLmNzcygnZGlzcGxheScsICcnKTtcblxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coICAgICAgbWVudS5maW5kKCcuJyArIHN1Yk1lbnVDbGFzcyArICcsIC4nICsgc3ViSXRlbUNsYXNzICsgJywgLmhhcy1zdWJtZW51LCAuaXMtc3VibWVudS1pdGVtLCAuc3VibWVudSwgW2RhdGEtc3VibWVudV0nKVxuICAgICAgICAgICAgLy8gICAgICAgICAgIC5yZW1vdmVDbGFzcyhzdWJNZW51Q2xhc3MgKyAnICcgKyBzdWJJdGVtQ2xhc3MgKyAnIGhhcy1zdWJtZW51IGlzLXN1Ym1lbnUtaXRlbSBzdWJtZW51JylcbiAgICAgICAgICAgIC8vICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zdWJtZW51JykpO1xuICAgICAgICAgICAgLy8gaXRlbXMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gICB2YXIgJGl0ZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgLy8gICAgICAgJHN1YiA9ICRpdGVtLmNoaWxkcmVuKCd1bCcpO1xuICAgICAgICAgICAgLy8gICBpZigkaXRlbS5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKXtcbiAgICAgICAgICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaXMtc3VibWVudS1pdGVtICcgKyBzdWJJdGVtQ2xhc3MpO1xuICAgICAgICAgICAgLy8gICB9XG4gICAgICAgICAgICAvLyAgIGlmKCRzdWIubGVuZ3RoKXtcbiAgICAgICAgICAgIC8vICAgICAkaXRlbS5yZW1vdmVDbGFzcygnaGFzLXN1Ym1lbnUnKTtcbiAgICAgICAgICAgIC8vICAgICAkc3ViLnJlbW92ZUNsYXNzKCdzdWJtZW51ICcgKyBzdWJNZW51Q2xhc3MpLnJlbW92ZUF0dHIoJ2RhdGEtc3VibWVudScpO1xuICAgICAgICAgICAgLy8gICB9XG4gICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEZvdW5kYXRpb24uTmVzdCA9IE5lc3Q7XG5cbn0oalF1ZXJ5KTsiLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmZ1bmN0aW9uIFRpbWVyKGVsZW0sIG9wdGlvbnMsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24sLy9vcHRpb25zIGlzIGFuIG9iamVjdCBmb3IgZWFzaWx5IGFkZGluZyBmZWF0dXJlcyBsYXRlci5cbiAgICAgIG5hbWVTcGFjZSA9IE9iamVjdC5rZXlzKGVsZW0uZGF0YSgpKVswXSB8fCAndGltZXInLFxuICAgICAgcmVtYWluID0gLTEsXG4gICAgICBzdGFydCxcbiAgICAgIHRpbWVyO1xuXG4gIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcblxuICB0aGlzLnJlc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICByZW1haW4gPSAtMTtcbiAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIHRoaXMuc3RhcnQoKTtcbiAgfVxuXG4gIHRoaXMuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgLy8gaWYoIWVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICByZW1haW4gPSByZW1haW4gPD0gMCA/IGR1cmF0aW9uIDogcmVtYWluO1xuICAgIGVsZW0uZGF0YSgncGF1c2VkJywgZmFsc2UpO1xuICAgIHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIGlmKG9wdGlvbnMuaW5maW5pdGUpe1xuICAgICAgICBfdGhpcy5yZXN0YXJ0KCk7Ly9yZXJ1biB0aGUgdGltZXIuXG4gICAgICB9XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9LCByZW1haW4pO1xuICAgIGVsZW0udHJpZ2dlcihgdGltZXJzdGFydC56Zi4ke25hbWVTcGFjZX1gKTtcbiAgfVxuXG4gIHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAvL2lmKGVsZW0uZGF0YSgncGF1c2VkJykpeyByZXR1cm4gZmFsc2U7IH0vL21heWJlIGltcGxlbWVudCB0aGlzIHNhbml0eSBjaGVjayBpZiB1c2VkIGZvciBvdGhlciB0aGluZ3MuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICBlbGVtLmRhdGEoJ3BhdXNlZCcsIHRydWUpO1xuICAgIHZhciBlbmQgPSBEYXRlLm5vdygpO1xuICAgIHJlbWFpbiA9IHJlbWFpbiAtIChlbmQgLSBzdGFydCk7XG4gICAgZWxlbS50cmlnZ2VyKGB0aW1lcnBhdXNlZC56Zi4ke25hbWVTcGFjZX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnMgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGltYWdlcyBhcmUgZnVsbHkgbG9hZGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGltYWdlcyAtIEltYWdlKHMpIHRvIGNoZWNrIGlmIGxvYWRlZC5cbiAqIEBwYXJhbSB7RnVuY30gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBleGVjdXRlIHdoZW4gaW1hZ2UgaXMgZnVsbHkgbG9hZGVkLlxuICovXG5mdW5jdGlvbiBvbkltYWdlc0xvYWRlZChpbWFnZXMsIGNhbGxiYWNrKXtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgdW5sb2FkZWQgPSBpbWFnZXMubGVuZ3RoO1xuXG4gIGlmICh1bmxvYWRlZCA9PT0gMCkge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBpbWFnZXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAvLyBDaGVjayBpZiBpbWFnZSBpcyBsb2FkZWRcbiAgICBpZiAodGhpcy5jb21wbGV0ZSB8fCAodGhpcy5yZWFkeVN0YXRlID09PSA0KSB8fCAodGhpcy5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSkge1xuICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICB9XG4gICAgLy8gRm9yY2UgbG9hZCB0aGUgaW1hZ2VcbiAgICBlbHNlIHtcbiAgICAgIC8vIGZpeCBmb3IgSUUuIFNlZSBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2pxdWVyeS9maXhpbmctbG9hZC1pbi1pZS1mb3ItY2FjaGVkLWltYWdlcy9cbiAgICAgIHZhciBzcmMgPSAkKHRoaXMpLmF0dHIoJ3NyYycpO1xuICAgICAgJCh0aGlzKS5hdHRyKCdzcmMnLCBzcmMgKyAoc3JjLmluZGV4T2YoJz8nKSA+PSAwID8gJyYnIDogJz8nKSArIChuZXcgRGF0ZSgpLmdldFRpbWUoKSkpO1xuICAgICAgJCh0aGlzKS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2luZ2xlSW1hZ2VMb2FkZWQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2luZ2xlSW1hZ2VMb2FkZWQoKSB7XG4gICAgdW5sb2FkZWQtLTtcbiAgICBpZiAodW5sb2FkZWQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG59XG5cbkZvdW5kYXRpb24uVGltZXIgPSBUaW1lcjtcbkZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQgPSBvbkltYWdlc0xvYWRlZDtcblxufShqUXVlcnkpO1xuIiwiLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKldvcmsgaW5zcGlyZWQgYnkgbXVsdGlwbGUganF1ZXJ5IHN3aXBlIHBsdWdpbnMqKlxuLy8qKkRvbmUgYnkgWW9oYWkgQXJhcmF0ICoqKioqKioqKioqKioqKioqKioqKioqKioqKlxuLy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuKGZ1bmN0aW9uKCQpIHtcblxuICAkLnNwb3RTd2lwZSA9IHtcbiAgICB2ZXJzaW9uOiAnMS4wLjAnLFxuICAgIGVuYWJsZWQ6ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxcbiAgICBwcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gICAgbW92ZVRocmVzaG9sZDogNzUsXG4gICAgdGltZVRocmVzaG9sZDogMjAwXG4gIH07XG5cbiAgdmFyICAgc3RhcnRQb3NYLFxuICAgICAgICBzdGFydFBvc1ksXG4gICAgICAgIHN0YXJ0VGltZSxcbiAgICAgICAgZWxhcHNlZFRpbWUsXG4gICAgICAgIGlzTW92aW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHtcbiAgICAvLyAgYWxlcnQodGhpcyk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSk7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQpO1xuICAgIGlzTW92aW5nID0gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgaWYgKCQuc3BvdFN3aXBlLnByZXZlbnREZWZhdWx0KSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgIGlmKGlzTW92aW5nKSB7XG4gICAgICB2YXIgeCA9IGUudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIHZhciB5ID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgdmFyIGR4ID0gc3RhcnRQb3NYIC0geDtcbiAgICAgIHZhciBkeSA9IHN0YXJ0UG9zWSAtIHk7XG4gICAgICB2YXIgZGlyO1xuICAgICAgZWxhcHNlZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0VGltZTtcbiAgICAgIGlmKE1hdGguYWJzKGR4KSA+PSAkLnNwb3RTd2lwZS5tb3ZlVGhyZXNob2xkICYmIGVsYXBzZWRUaW1lIDw9ICQuc3BvdFN3aXBlLnRpbWVUaHJlc2hvbGQpIHtcbiAgICAgICAgZGlyID0gZHggPiAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgIH1cbiAgICAgIC8vIGVsc2UgaWYoTWF0aC5hYnMoZHkpID49ICQuc3BvdFN3aXBlLm1vdmVUaHJlc2hvbGQgJiYgZWxhcHNlZFRpbWUgPD0gJC5zcG90U3dpcGUudGltZVRocmVzaG9sZCkge1xuICAgICAgLy8gICBkaXIgPSBkeSA+IDAgPyAnZG93bicgOiAndXAnO1xuICAgICAgLy8gfVxuICAgICAgaWYoZGlyKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgb25Ub3VjaEVuZC5jYWxsKHRoaXMpO1xuICAgICAgICAkKHRoaXMpLnRyaWdnZXIoJ3N3aXBlJywgZGlyKS50cmlnZ2VyKGBzd2lwZSR7ZGlyfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVG91Y2hTdGFydChlKSB7XG4gICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPT0gMSkge1xuICAgICAgc3RhcnRQb3NYID0gZS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgc3RhcnRQb3NZID0gZS50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgaXNNb3ZpbmcgPSB0cnVlO1xuICAgICAgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSk7XG4gICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyICYmIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGVhcmRvd24oKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0KTtcbiAgfVxuXG4gICQuZXZlbnQuc3BlY2lhbC5zd2lwZSA9IHsgc2V0dXA6IGluaXQgfTtcblxuICAkLmVhY2goWydsZWZ0JywgJ3VwJywgJ2Rvd24nLCAncmlnaHQnXSwgZnVuY3Rpb24gKCkge1xuICAgICQuZXZlbnQuc3BlY2lhbFtgc3dpcGUke3RoaXN9YF0gPSB7IHNldHVwOiBmdW5jdGlvbigpe1xuICAgICAgJCh0aGlzKS5vbignc3dpcGUnLCAkLm5vb3ApO1xuICAgIH0gfTtcbiAgfSk7XG59KShqUXVlcnkpO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIE1ldGhvZCBmb3IgYWRkaW5nIHBzdWVkbyBkcmFnIGV2ZW50cyB0byBlbGVtZW50cyAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuIWZ1bmN0aW9uKCQpe1xuICAkLmZuLmFkZFRvdWNoID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oaSxlbCl7XG4gICAgICAkKGVsKS5iaW5kKCd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCcsZnVuY3Rpb24oKXtcbiAgICAgICAgLy93ZSBwYXNzIHRoZSBvcmlnaW5hbCBldmVudCBvYmplY3QgYmVjYXVzZSB0aGUgalF1ZXJ5IGV2ZW50XG4gICAgICAgIC8vb2JqZWN0IGlzIG5vcm1hbGl6ZWQgdG8gdzNjIHNwZWNzIGFuZCBkb2VzIG5vdCBwcm92aWRlIHRoZSBUb3VjaExpc3RcbiAgICAgICAgaGFuZGxlVG91Y2goZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgaGFuZGxlVG91Y2ggPSBmdW5jdGlvbihldmVudCl7XG4gICAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICAgIGZpcnN0ID0gdG91Y2hlc1swXSxcbiAgICAgICAgICBldmVudFR5cGVzID0ge1xuICAgICAgICAgICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgICAgICAgICB0b3VjaG1vdmU6ICdtb3VzZW1vdmUnLFxuICAgICAgICAgICAgdG91Y2hlbmQ6ICdtb3VzZXVwJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdHlwZSA9IGV2ZW50VHlwZXNbZXZlbnQudHlwZV0sXG4gICAgICAgICAgc2ltdWxhdGVkRXZlbnRcbiAgICAgICAgO1xuXG4gICAgICBpZignTW91c2VFdmVudCcgaW4gd2luZG93ICYmIHR5cGVvZiB3aW5kb3cuTW91c2VFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IG5ldyB3aW5kb3cuTW91c2VFdmVudCh0eXBlLCB7XG4gICAgICAgICAgJ2J1YmJsZXMnOiB0cnVlLFxuICAgICAgICAgICdjYW5jZWxhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAnc2NyZWVuWCc6IGZpcnN0LnNjcmVlblgsXG4gICAgICAgICAgJ3NjcmVlblknOiBmaXJzdC5zY3JlZW5ZLFxuICAgICAgICAgICdjbGllbnRYJzogZmlyc3QuY2xpZW50WCxcbiAgICAgICAgICAnY2xpZW50WSc6IGZpcnN0LmNsaWVudFlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaW11bGF0ZWRFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgICAgIHNpbXVsYXRlZEV2ZW50LmluaXRNb3VzZUV2ZW50KHR5cGUsIHRydWUsIHRydWUsIHdpbmRvdywgMSwgZmlyc3Quc2NyZWVuWCwgZmlyc3Quc2NyZWVuWSwgZmlyc3QuY2xpZW50WCwgZmlyc3QuY2xpZW50WSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAvKmxlZnQqLywgbnVsbCk7XG4gICAgICB9XG4gICAgICBmaXJzdC50YXJnZXQuZGlzcGF0Y2hFdmVudChzaW11bGF0ZWRFdmVudCk7XG4gICAgfTtcbiAgfTtcbn0oalF1ZXJ5KTtcblxuXG4vLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbi8vKipGcm9tIHRoZSBqUXVlcnkgTW9iaWxlIExpYnJhcnkqKlxuLy8qKm5lZWQgdG8gcmVjcmVhdGUgZnVuY3Rpb25hbGl0eSoqXG4vLyoqYW5kIHRyeSB0byBpbXByb3ZlIGlmIHBvc3NpYmxlKipcbi8vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4vKiBSZW1vdmluZyB0aGUgalF1ZXJ5IGZ1bmN0aW9uICoqKipcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuXG4oZnVuY3Rpb24oICQsIHdpbmRvdywgdW5kZWZpbmVkICkge1xuXG5cdHZhciAkZG9jdW1lbnQgPSAkKCBkb2N1bWVudCApLFxuXHRcdC8vIHN1cHBvcnRUb3VjaCA9ICQubW9iaWxlLnN1cHBvcnQudG91Y2gsXG5cdFx0dG91Y2hTdGFydEV2ZW50ID0gJ3RvdWNoc3RhcnQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoc3RhcnRcIiA6IFwibW91c2Vkb3duXCIsXG5cdFx0dG91Y2hTdG9wRXZlbnQgPSAndG91Y2hlbmQnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNoZW5kXCIgOiBcIm1vdXNldXBcIixcblx0XHR0b3VjaE1vdmVFdmVudCA9ICd0b3VjaG1vdmUnLy9zdXBwb3J0VG91Y2ggPyBcInRvdWNobW92ZVwiIDogXCJtb3VzZW1vdmVcIjtcblxuXHQvLyBzZXR1cCBuZXcgZXZlbnQgc2hvcnRjdXRzXG5cdCQuZWFjaCggKCBcInRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIFwiICtcblx0XHRcInN3aXBlIHN3aXBlbGVmdCBzd2lwZXJpZ2h0XCIgKS5zcGxpdCggXCIgXCIgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0XHQkLmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRyZXR1cm4gZm4gPyB0aGlzLmJpbmQoIG5hbWUsIGZuICkgOiB0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXG5cdFx0Ly8galF1ZXJ5IDwgMS44XG5cdFx0aWYgKCAkLmF0dHJGbiApIHtcblx0XHRcdCQuYXR0ckZuWyBuYW1lIF0gPSB0cnVlO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gdHJpZ2dlckN1c3RvbUV2ZW50KCBvYmosIGV2ZW50VHlwZSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHR2YXIgb3JpZ2luYWxUeXBlID0gZXZlbnQudHlwZTtcblx0XHRldmVudC50eXBlID0gZXZlbnRUeXBlO1xuXHRcdGlmICggYnViYmxlICkge1xuXHRcdFx0JC5ldmVudC50cmlnZ2VyKCBldmVudCwgdW5kZWZpbmVkLCBvYmogKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5ldmVudC5kaXNwYXRjaC5jYWxsKCBvYmosIGV2ZW50ICk7XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSBvcmlnaW5hbFR5cGU7XG5cdH1cblxuXHQvLyBhbHNvIGhhbmRsZXMgdGFwaG9sZFxuXG5cdC8vIEFsc28gaGFuZGxlcyBzd2lwZWxlZnQsIHN3aXBlcmlnaHRcblx0JC5ldmVudC5zcGVjaWFsLnN3aXBlID0ge1xuXG5cdFx0Ly8gTW9yZSB0aGFuIHRoaXMgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQsIGFuZCB3ZSB3aWxsIHN1cHByZXNzIHNjcm9sbGluZy5cblx0XHRzY3JvbGxTdXByZXNzaW9uVGhyZXNob2xkOiAzMCxcblxuXHRcdC8vIE1vcmUgdGltZSB0aGFuIHRoaXMsIGFuZCBpdCBpc24ndCBhIHN3aXBlLlxuXHRcdGR1cmF0aW9uVGhyZXNob2xkOiAxMDAwLFxuXG5cdFx0Ly8gU3dpcGUgaG9yaXpvbnRhbCBkaXNwbGFjZW1lbnQgbXVzdCBiZSBtb3JlIHRoYW4gdGhpcy5cblx0XHRob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQ6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID49IDIgPyAxNSA6IDMwLFxuXG5cdFx0Ly8gU3dpcGUgdmVydGljYWwgZGlzcGxhY2VtZW50IG11c3QgYmUgbGVzcyB0aGFuIHRoaXMuXG5cdFx0dmVydGljYWxEaXN0YW5jZVRocmVzaG9sZDogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPj0gMiA/IDE1IDogMzAsXG5cblx0XHRnZXRMb2NhdGlvbjogZnVuY3Rpb24gKCBldmVudCApIHtcblx0XHRcdHZhciB3aW5QYWdlWCA9IHdpbmRvdy5wYWdlWE9mZnNldCxcblx0XHRcdFx0d2luUGFnZVkgPSB3aW5kb3cucGFnZVlPZmZzZXQsXG5cdFx0XHRcdHggPSBldmVudC5jbGllbnRYLFxuXHRcdFx0XHR5ID0gZXZlbnQuY2xpZW50WTtcblxuXHRcdFx0aWYgKCBldmVudC5wYWdlWSA9PT0gMCAmJiBNYXRoLmZsb29yKCB5ICkgPiBNYXRoLmZsb29yKCBldmVudC5wYWdlWSApIHx8XG5cdFx0XHRcdGV2ZW50LnBhZ2VYID09PSAwICYmIE1hdGguZmxvb3IoIHggKSA+IE1hdGguZmxvb3IoIGV2ZW50LnBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gaU9TNCBjbGllbnRYL2NsaWVudFkgaGF2ZSB0aGUgdmFsdWUgdGhhdCBzaG91bGQgaGF2ZSBiZWVuXG5cdFx0XHRcdC8vIGluIHBhZ2VYL3BhZ2VZLiBXaGlsZSBwYWdlWC9wYWdlLyBoYXZlIHRoZSB2YWx1ZSAwXG5cdFx0XHRcdHggPSB4IC0gd2luUGFnZVg7XG5cdFx0XHRcdHkgPSB5IC0gd2luUGFnZVk7XG5cdFx0XHR9IGVsc2UgaWYgKCB5IDwgKCBldmVudC5wYWdlWSAtIHdpblBhZ2VZKSB8fCB4IDwgKCBldmVudC5wYWdlWCAtIHdpblBhZ2VYICkgKSB7XG5cblx0XHRcdFx0Ly8gU29tZSBBbmRyb2lkIGJyb3dzZXJzIGhhdmUgdG90YWxseSBib2d1cyB2YWx1ZXMgZm9yIGNsaWVudFgvWVxuXHRcdFx0XHQvLyB3aGVuIHNjcm9sbGluZy96b29taW5nIGEgcGFnZS4gRGV0ZWN0YWJsZSBzaW5jZSBjbGllbnRYL2NsaWVudFlcblx0XHRcdFx0Ly8gc2hvdWxkIG5ldmVyIGJlIHNtYWxsZXIgdGhhbiBwYWdlWC9wYWdlWSBtaW51cyBwYWdlIHNjcm9sbFxuXHRcdFx0XHR4ID0gZXZlbnQucGFnZVggLSB3aW5QYWdlWDtcblx0XHRcdFx0eSA9IGV2ZW50LnBhZ2VZIC0gd2luUGFnZVk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHg6IHgsXG5cdFx0XHRcdHk6IHlcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgZGF0YSA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA/XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWyAwIF0gOiBldmVudCxcblx0XHRcdFx0bG9jYXRpb24gPSAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZ2V0TG9jYXRpb24oIGRhdGEgKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0aW1lOiAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCksXG5cdFx0XHRcdFx0XHRjb29yZHM6IFsgbG9jYXRpb24ueCwgbG9jYXRpb24ueSBdLFxuXHRcdFx0XHRcdFx0b3JpZ2luOiAkKCBldmVudC50YXJnZXQgKVxuXHRcdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdHN0b3A6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBkYXRhID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzID9cblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbIDAgXSA6IGV2ZW50LFxuXHRcdFx0XHRsb2NhdGlvbiA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5nZXRMb2NhdGlvbiggZGF0YSApO1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRpbWU6ICggbmV3IERhdGUoKSApLmdldFRpbWUoKSxcblx0XHRcdFx0XHRcdGNvb3JkczogWyBsb2NhdGlvbi54LCBsb2NhdGlvbi55IF1cblx0XHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRoYW5kbGVTd2lwZTogZnVuY3Rpb24oIHN0YXJ0LCBzdG9wLCB0aGlzT2JqZWN0LCBvcmlnVGFyZ2V0ICkge1xuXHRcdFx0aWYgKCBzdG9wLnRpbWUgLSBzdGFydC50aW1lIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLmR1cmF0aW9uVGhyZXNob2xkICYmXG5cdFx0XHRcdE1hdGguYWJzKCBzdGFydC5jb29yZHNbIDAgXSAtIHN0b3AuY29vcmRzWyAwIF0gKSA+ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5ob3Jpem9udGFsRGlzdGFuY2VUaHJlc2hvbGQgJiZcblx0XHRcdFx0TWF0aC5hYnMoIHN0YXJ0LmNvb3Jkc1sgMSBdIC0gc3RvcC5jb29yZHNbIDEgXSApIDwgJC5ldmVudC5zcGVjaWFsLnN3aXBlLnZlcnRpY2FsRGlzdGFuY2VUaHJlc2hvbGQgKSB7XG5cdFx0XHRcdHZhciBkaXJlY3Rpb24gPSBzdGFydC5jb29yZHNbMF0gPiBzdG9wLmNvb3Jkc1sgMCBdID8gXCJzd2lwZWxlZnRcIiA6IFwic3dpcGVyaWdodFwiO1xuXG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgXCJzd2lwZVwiLCAkLkV2ZW50KCBcInN3aXBlXCIsIHsgdGFyZ2V0OiBvcmlnVGFyZ2V0LCBzd2lwZXN0YXJ0OiBzdGFydCwgc3dpcGVzdG9wOiBzdG9wIH0pLCB0cnVlICk7XG5cdFx0XHRcdHRyaWdnZXJDdXN0b21FdmVudCggdGhpc09iamVjdCwgZGlyZWN0aW9uLCQuRXZlbnQoIGRpcmVjdGlvbiwgeyB0YXJnZXQ6IG9yaWdUYXJnZXQsIHN3aXBlc3RhcnQ6IHN0YXJ0LCBzd2lwZXN0b3A6IHN0b3AgfSApLCB0cnVlICk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblxuXHRcdC8vIFRoaXMgc2VydmVzIGFzIGEgZmxhZyB0byBlbnN1cmUgdGhhdCBhdCBtb3N0IG9uZSBzd2lwZSBldmVudCBldmVudCBpc1xuXHRcdC8vIGluIHdvcmsgYXQgYW55IGdpdmVuIHRpbWVcblx0XHRldmVudEluUHJvZ3Jlc3M6IGZhbHNlLFxuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGV2ZW50cyxcblx0XHRcdFx0dGhpc09iamVjdCA9IHRoaXMsXG5cdFx0XHRcdCR0aGlzID0gJCggdGhpc09iamVjdCApLFxuXHRcdFx0XHRjb250ZXh0ID0ge307XG5cblx0XHRcdC8vIFJldHJpZXZlIHRoZSBldmVudHMgZGF0YSBmb3IgdGhpcyBlbGVtZW50IGFuZCBhZGQgdGhlIHN3aXBlIGNvbnRleHRcblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggIWV2ZW50cyApIHtcblx0XHRcdFx0ZXZlbnRzID0geyBsZW5ndGg6IDAgfTtcblx0XHRcdFx0JC5kYXRhKCB0aGlzLCBcIm1vYmlsZS1ldmVudHNcIiwgZXZlbnRzICk7XG5cdFx0XHR9XG5cdFx0XHRldmVudHMubGVuZ3RoKys7XG5cdFx0XHRldmVudHMuc3dpcGUgPSBjb250ZXh0O1xuXG5cdFx0XHRjb250ZXh0LnN0YXJ0ID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIEJhaWwgaWYgd2UncmUgYWxyZWFkeSB3b3JraW5nIG9uIGEgc3dpcGUgZXZlbnRcblx0XHRcdFx0aWYgKCAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gdHJ1ZTtcblxuXHRcdFx0XHR2YXIgc3RvcCxcblx0XHRcdFx0XHRzdGFydCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdGFydCggZXZlbnQgKSxcblx0XHRcdFx0XHRvcmlnVGFyZ2V0ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHRcdGVtaXR0ZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjb250ZXh0Lm1vdmUgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhcnQgfHwgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c3RvcCA9ICQuZXZlbnQuc3BlY2lhbC5zd2lwZS5zdG9wKCBldmVudCApO1xuXHRcdFx0XHRcdGlmICggIWVtaXR0ZWQgKSB7XG5cdFx0XHRcdFx0XHRlbWl0dGVkID0gJC5ldmVudC5zcGVjaWFsLnN3aXBlLmhhbmRsZVN3aXBlKCBzdGFydCwgc3RvcCwgdGhpc09iamVjdCwgb3JpZ1RhcmdldCApO1xuXHRcdFx0XHRcdFx0aWYgKCBlbWl0dGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0XHQkLmV2ZW50LnNwZWNpYWwuc3dpcGUuZXZlbnRJblByb2dyZXNzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHByZXZlbnQgc2Nyb2xsaW5nXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggc3RhcnQuY29vcmRzWyAwIF0gLSBzdG9wLmNvb3Jkc1sgMCBdICkgPiAkLmV2ZW50LnNwZWNpYWwuc3dpcGUuc2Nyb2xsU3VwcmVzc2lvblRocmVzaG9sZCApIHtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdGNvbnRleHQuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0ZW1pdHRlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdC8vIFJlc2V0IHRoZSBjb250ZXh0IHRvIG1ha2Ugd2F5IGZvciB0aGUgbmV4dCBzd2lwZSBldmVudFxuXHRcdFx0XHRcdFx0JC5ldmVudC5zcGVjaWFsLnN3aXBlLmV2ZW50SW5Qcm9ncmVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlID0gbnVsbDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQkZG9jdW1lbnQub24oIHRvdWNoTW92ZUV2ZW50LCBjb250ZXh0Lm1vdmUgKVxuXHRcdFx0XHRcdC5vbmUoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdH07XG5cdFx0XHQkdGhpcy5vbiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0fSxcblxuXHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBldmVudHMsIGNvbnRleHQ7XG5cblx0XHRcdGV2ZW50cyA9ICQuZGF0YSggdGhpcywgXCJtb2JpbGUtZXZlbnRzXCIgKTtcblx0XHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0XHRjb250ZXh0ID0gZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRkZWxldGUgZXZlbnRzLnN3aXBlO1xuXHRcdFx0XHRldmVudHMubGVuZ3RoLS07XG5cdFx0XHRcdGlmICggZXZlbnRzLmxlbmd0aCA9PT0gMCApIHtcblx0XHRcdFx0XHQkLnJlbW92ZURhdGEoIHRoaXMsIFwibW9iaWxlLWV2ZW50c1wiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjb250ZXh0ICkge1xuXHRcdFx0XHRpZiAoIGNvbnRleHQuc3RhcnQgKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLm9mZiggdG91Y2hTdGFydEV2ZW50LCBjb250ZXh0LnN0YXJ0ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBjb250ZXh0Lm1vdmUgKSB7XG5cdFx0XHRcdFx0JGRvY3VtZW50Lm9mZiggdG91Y2hNb3ZlRXZlbnQsIGNvbnRleHQubW92ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggY29udGV4dC5zdG9wICkge1xuXHRcdFx0XHRcdCRkb2N1bWVudC5vZmYoIHRvdWNoU3RvcEV2ZW50LCBjb250ZXh0LnN0b3AgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0JC5lYWNoKHtcblx0XHRzd2lwZWxlZnQ6IFwic3dpcGUubGVmdFwiLFxuXHRcdHN3aXBlcmlnaHQ6IFwic3dpcGUucmlnaHRcIlxuXHR9LCBmdW5jdGlvbiggZXZlbnQsIHNvdXJjZUV2ZW50ICkge1xuXG5cdFx0JC5ldmVudC5zcGVjaWFsWyBldmVudCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkKCB0aGlzICkuYmluZCggc291cmNlRXZlbnQsICQubm9vcCApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0JCggdGhpcyApLnVuYmluZCggc291cmNlRXZlbnQgKTtcblx0XHRcdH1cblx0XHR9O1xuXHR9KTtcbn0pKCBqUXVlcnksIHRoaXMgKTtcbiovXG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbmNvbnN0IE11dGF0aW9uT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcHJlZml4ZXMgPSBbJ1dlYktpdCcsICdNb3onLCAnTycsICdNcycsICcnXTtcbiAgZm9yICh2YXIgaT0wOyBpIDwgcHJlZml4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYCR7cHJlZml4ZXNbaV19TXV0YXRpb25PYnNlcnZlcmAgaW4gd2luZG93KSB7XG4gICAgICByZXR1cm4gd2luZG93W2Ake3ByZWZpeGVzW2ldfU11dGF0aW9uT2JzZXJ2ZXJgXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSgpKTtcblxuY29uc3QgdHJpZ2dlcnMgPSAoZWwsIHR5cGUpID0+IHtcbiAgZWwuZGF0YSh0eXBlKS5zcGxpdCgnICcpLmZvckVhY2goaWQgPT4ge1xuICAgICQoYCMke2lkfWApWyB0eXBlID09PSAnY2xvc2UnID8gJ3RyaWdnZXInIDogJ3RyaWdnZXJIYW5kbGVyJ10oYCR7dHlwZX0uemYudHJpZ2dlcmAsIFtlbF0pO1xuICB9KTtcbn07XG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLW9wZW5dIHdpbGwgcmV2ZWFsIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtb3Blbl0nLCBmdW5jdGlvbigpIHtcbiAgdHJpZ2dlcnMoJCh0aGlzKSwgJ29wZW4nKTtcbn0pO1xuXG4vLyBFbGVtZW50cyB3aXRoIFtkYXRhLWNsb3NlXSB3aWxsIGNsb3NlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuLy8gSWYgdXNlZCB3aXRob3V0IGEgdmFsdWUgb24gW2RhdGEtY2xvc2VdLCB0aGUgZXZlbnQgd2lsbCBidWJibGUsIGFsbG93aW5nIGl0IHRvIGNsb3NlIGEgcGFyZW50IGNvbXBvbmVudC5cbiQoZG9jdW1lbnQpLm9uKCdjbGljay56Zi50cmlnZ2VyJywgJ1tkYXRhLWNsb3NlXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ2Nsb3NlJyk7XG4gIGlmIChpZCkge1xuICAgIHRyaWdnZXJzKCQodGhpcyksICdjbG9zZScpO1xuICB9XG4gIGVsc2Uge1xuICAgICQodGhpcykudHJpZ2dlcignY2xvc2UuemYudHJpZ2dlcicpO1xuICB9XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS10b2dnbGVdIHdpbGwgdG9nZ2xlIGEgcGx1Z2luIHRoYXQgc3VwcG9ydHMgaXQgd2hlbiBjbGlja2VkLlxuJChkb2N1bWVudCkub24oJ2NsaWNrLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZScpO1xuICBpZiAoaWQpIHtcbiAgICB0cmlnZ2VycygkKHRoaXMpLCAndG9nZ2xlJyk7XG4gIH0gZWxzZSB7XG4gICAgJCh0aGlzKS50cmlnZ2VyKCd0b2dnbGUuemYudHJpZ2dlcicpO1xuICB9XG59KTtcblxuLy8gRWxlbWVudHMgd2l0aCBbZGF0YS1jbG9zYWJsZV0gd2lsbCByZXNwb25kIHRvIGNsb3NlLnpmLnRyaWdnZXIgZXZlbnRzLlxuJChkb2N1bWVudCkub24oJ2Nsb3NlLnpmLnRyaWdnZXInLCAnW2RhdGEtY2xvc2FibGVdJywgZnVuY3Rpb24oZSl7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGxldCBhbmltYXRpb24gPSAkKHRoaXMpLmRhdGEoJ2Nsb3NhYmxlJyk7XG5cbiAgaWYoYW5pbWF0aW9uICE9PSAnJyl7XG4gICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCgkKHRoaXMpLCBhbmltYXRpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgJCh0aGlzKS50cmlnZ2VyKCdjbG9zZWQuemYnKTtcbiAgICB9KTtcbiAgfWVsc2V7XG4gICAgJCh0aGlzKS5mYWRlT3V0KCkudHJpZ2dlcignY2xvc2VkLnpmJyk7XG4gIH1cbn0pO1xuXG4kKGRvY3VtZW50KS5vbignZm9jdXMuemYudHJpZ2dlciBibHVyLnpmLnRyaWdnZXInLCAnW2RhdGEtdG9nZ2xlLWZvY3VzXScsIGZ1bmN0aW9uKCkge1xuICBsZXQgaWQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZS1mb2N1cycpO1xuICAkKGAjJHtpZH1gKS50cmlnZ2VySGFuZGxlcigndG9nZ2xlLnpmLnRyaWdnZXInLCBbJCh0aGlzKV0pO1xufSk7XG5cbi8qKlxuKiBGaXJlcyBvbmNlIGFmdGVyIGFsbCBvdGhlciBzY3JpcHRzIGhhdmUgbG9hZGVkXG4qIEBmdW5jdGlvblxuKiBAcHJpdmF0ZVxuKi9cbiQod2luZG93KS5vbignbG9hZCcsICgpID0+IHtcbiAgY2hlY2tMaXN0ZW5lcnMoKTtcbn0pO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVycygpIHtcbiAgZXZlbnRzTGlzdGVuZXIoKTtcbiAgcmVzaXplTGlzdGVuZXIoKTtcbiAgc2Nyb2xsTGlzdGVuZXIoKTtcbiAgY2xvc2VtZUxpc3RlbmVyKCk7XG59XG5cbi8vKioqKioqKiogb25seSBmaXJlcyB0aGlzIGZ1bmN0aW9uIG9uY2Ugb24gbG9hZCwgaWYgdGhlcmUncyBzb21ldGhpbmcgdG8gd2F0Y2ggKioqKioqKipcbmZ1bmN0aW9uIGNsb3NlbWVMaXN0ZW5lcihwbHVnaW5OYW1lKSB7XG4gIHZhciB5ZXRpQm94ZXMgPSAkKCdbZGF0YS15ZXRpLWJveF0nKSxcbiAgICAgIHBsdWdOYW1lcyA9IFsnZHJvcGRvd24nLCAndG9vbHRpcCcsICdyZXZlYWwnXTtcblxuICBpZihwbHVnaW5OYW1lKXtcbiAgICBpZih0eXBlb2YgcGx1Z2luTmFtZSA9PT0gJ3N0cmluZycpe1xuICAgICAgcGx1Z05hbWVzLnB1c2gocGx1Z2luTmFtZSk7XG4gICAgfWVsc2UgaWYodHlwZW9mIHBsdWdpbk5hbWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwbHVnaW5OYW1lWzBdID09PSAnc3RyaW5nJyl7XG4gICAgICBwbHVnTmFtZXMuY29uY2F0KHBsdWdpbk5hbWUpO1xuICAgIH1lbHNle1xuICAgICAgY29uc29sZS5lcnJvcignUGx1Z2luIG5hbWVzIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH1cbiAgfVxuICBpZih5ZXRpQm94ZXMubGVuZ3RoKXtcbiAgICBsZXQgbGlzdGVuZXJzID0gcGx1Z05hbWVzLm1hcCgobmFtZSkgPT4ge1xuICAgICAgcmV0dXJuIGBjbG9zZW1lLnpmLiR7bmFtZX1gO1xuICAgIH0pLmpvaW4oJyAnKTtcblxuICAgICQod2luZG93KS5vZmYobGlzdGVuZXJzKS5vbihsaXN0ZW5lcnMsIGZ1bmN0aW9uKGUsIHBsdWdpbklkKXtcbiAgICAgIGxldCBwbHVnaW4gPSBlLm5hbWVzcGFjZS5zcGxpdCgnLicpWzBdO1xuICAgICAgbGV0IHBsdWdpbnMgPSAkKGBbZGF0YS0ke3BsdWdpbn1dYCkubm90KGBbZGF0YS15ZXRpLWJveD1cIiR7cGx1Z2luSWR9XCJdYCk7XG5cbiAgICAgIHBsdWdpbnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICBsZXQgX3RoaXMgPSAkKHRoaXMpO1xuXG4gICAgICAgIF90aGlzLnRyaWdnZXJIYW5kbGVyKCdjbG9zZS56Zi50cmlnZ2VyJywgW190aGlzXSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNpemVMaXN0ZW5lcihkZWJvdW5jZSl7XG4gIGxldCB0aW1lcixcbiAgICAgICRub2RlcyA9ICQoJ1tkYXRhLXJlc2l6ZV0nKTtcbiAgaWYoJG5vZGVzLmxlbmd0aCl7XG4gICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnpmLnRyaWdnZXInKVxuICAgIC5vbigncmVzaXplLnpmLnRyaWdnZXInLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAodGltZXIpIHsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgfVxuXG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcblxuICAgICAgICBpZighTXV0YXRpb25PYnNlcnZlcil7Ly9mYWxsYmFjayBmb3IgSUUgOVxuICAgICAgICAgICRub2Rlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAkKHRoaXMpLnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy90cmlnZ2VyIGFsbCBsaXN0ZW5pbmcgZWxlbWVudHMgYW5kIHNpZ25hbCBhIHJlc2l6ZSBldmVudFxuICAgICAgICAkbm9kZXMuYXR0cignZGF0YS1ldmVudHMnLCBcInJlc2l6ZVwiKTtcbiAgICAgIH0sIGRlYm91bmNlIHx8IDEwKTsvL2RlZmF1bHQgdGltZSB0byBlbWl0IHJlc2l6ZSBldmVudFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbExpc3RlbmVyKGRlYm91bmNlKXtcbiAgbGV0IHRpbWVyLFxuICAgICAgJG5vZGVzID0gJCgnW2RhdGEtc2Nyb2xsXScpO1xuICBpZigkbm9kZXMubGVuZ3RoKXtcbiAgICAkKHdpbmRvdykub2ZmKCdzY3JvbGwuemYudHJpZ2dlcicpXG4gICAgLm9uKCdzY3JvbGwuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUpe1xuICAgICAgaWYodGltZXIpeyBjbGVhclRpbWVvdXQodGltZXIpOyB9XG5cbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuXG4gICAgICAgIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsvL2ZhbGxiYWNrIGZvciBJRSA5XG4gICAgICAgICAgJG5vZGVzLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICQodGhpcykudHJpZ2dlckhhbmRsZXIoJ3Njcm9sbG1lLnpmLnRyaWdnZXInKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvL3RyaWdnZXIgYWxsIGxpc3RlbmluZyBlbGVtZW50cyBhbmQgc2lnbmFsIGEgc2Nyb2xsIGV2ZW50XG4gICAgICAgICRub2Rlcy5hdHRyKCdkYXRhLWV2ZW50cycsIFwic2Nyb2xsXCIpO1xuICAgICAgfSwgZGVib3VuY2UgfHwgMTApOy8vZGVmYXVsdCB0aW1lIHRvIGVtaXQgc2Nyb2xsIGV2ZW50XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXZlbnRzTGlzdGVuZXIoKSB7XG4gIGlmKCFNdXRhdGlvbk9ic2VydmVyKXsgcmV0dXJuIGZhbHNlOyB9XG4gIGxldCBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXJlc2l6ZV0sIFtkYXRhLXNjcm9sbF0sIFtkYXRhLW11dGF0ZV0nKTtcblxuICAvL2VsZW1lbnQgY2FsbGJhY2tcbiAgdmFyIGxpc3RlbmluZ0VsZW1lbnRzTXV0YXRpb24gPSBmdW5jdGlvbiAobXV0YXRpb25SZWNvcmRzTGlzdCkge1xuICAgICAgdmFyICR0YXJnZXQgPSAkKG11dGF0aW9uUmVjb3Jkc0xpc3RbMF0udGFyZ2V0KTtcblxuXHQgIC8vdHJpZ2dlciB0aGUgZXZlbnQgaGFuZGxlciBmb3IgdGhlIGVsZW1lbnQgZGVwZW5kaW5nIG9uIHR5cGVcbiAgICAgIHN3aXRjaCAobXV0YXRpb25SZWNvcmRzTGlzdFswXS50eXBlKSB7XG5cbiAgICAgICAgY2FzZSBcImF0dHJpYnV0ZXNcIjpcbiAgICAgICAgICBpZiAoJHRhcmdldC5hdHRyKFwiZGF0YS1ldmVudHNcIikgPT09IFwic2Nyb2xsXCIgJiYgbXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcImRhdGEtZXZlbnRzXCIpIHtcblx0XHQgIFx0JHRhcmdldC50cmlnZ2VySGFuZGxlcignc2Nyb2xsbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LCB3aW5kb3cucGFnZVlPZmZzZXRdKTtcblx0XHQgIH1cblx0XHQgIGlmICgkdGFyZ2V0LmF0dHIoXCJkYXRhLWV2ZW50c1wiKSA9PT0gXCJyZXNpemVcIiAmJiBtdXRhdGlvblJlY29yZHNMaXN0WzBdLmF0dHJpYnV0ZU5hbWUgPT09IFwiZGF0YS1ldmVudHNcIikge1xuXHRcdCAgXHQkdGFyZ2V0LnRyaWdnZXJIYW5kbGVyKCdyZXNpemVtZS56Zi50cmlnZ2VyJywgWyR0YXJnZXRdKTtcblx0XHQgICB9XG5cdFx0ICBpZiAobXV0YXRpb25SZWNvcmRzTGlzdFswXS5hdHRyaWJ1dGVOYW1lID09PSBcInN0eWxlXCIpIHtcblx0XHRcdCAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS5hdHRyKFwiZGF0YS1ldmVudHNcIixcIm11dGF0ZVwiKTtcblx0XHRcdCAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpXSk7XG5cdFx0ICB9XG5cdFx0ICBicmVhaztcblxuICAgICAgICBjYXNlIFwiY2hpbGRMaXN0XCI6XG5cdFx0ICAkdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpLmF0dHIoXCJkYXRhLWV2ZW50c1wiLFwibXV0YXRlXCIpO1xuXHRcdCAgJHRhcmdldC5jbG9zZXN0KFwiW2RhdGEtbXV0YXRlXVwiKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicsIFskdGFyZ2V0LmNsb3Nlc3QoXCJbZGF0YS1tdXRhdGVdXCIpXSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIC8vbm90aGluZ1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAobm9kZXMubGVuZ3RoKSB7XG4gICAgICAvL2ZvciBlYWNoIGVsZW1lbnQgdGhhdCBuZWVkcyB0byBsaXN0ZW4gZm9yIHJlc2l6aW5nLCBzY3JvbGxpbmcsIG9yIG11dGF0aW9uIGFkZCBhIHNpbmdsZSBvYnNlcnZlclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbm9kZXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHZhciBlbGVtZW50T2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihsaXN0ZW5pbmdFbGVtZW50c011dGF0aW9uKTtcbiAgICAgICAgZWxlbWVudE9ic2VydmVyLm9ic2VydmUobm9kZXNbaV0sIHsgYXR0cmlidXRlczogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlLCBjaGFyYWN0ZXJEYXRhOiBmYWxzZSwgc3VidHJlZTogdHJ1ZSwgYXR0cmlidXRlRmlsdGVyOiBbXCJkYXRhLWV2ZW50c1wiLCBcInN0eWxlXCJdIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gW1BIXVxuLy8gRm91bmRhdGlvbi5DaGVja1dhdGNoZXJzID0gY2hlY2tXYXRjaGVycztcbkZvdW5kYXRpb24uSUhlYXJZb3UgPSBjaGVja0xpc3RlbmVycztcbi8vIEZvdW5kYXRpb24uSVNlZVlvdSA9IHNjcm9sbExpc3RlbmVyO1xuLy8gRm91bmRhdGlvbi5JRmVlbFlvdSA9IGNsb3NlbWVMaXN0ZW5lcjtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEFiaWRlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5hYmlkZVxuICovXG5cbmNsYXNzIEFiaWRlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgQWJpZGUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWJpZGUjaW5pdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gYWRkIHRoZSB0cmlnZ2VyIHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgID0gJC5leHRlbmQoe30sIEFiaWRlLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdBYmlkZScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBBYmlkZSBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgQWJpZGUgZnVuY3Rpb25pbmcgb24gbG9hZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuJGlucHV0cyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QnKTtcblxuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgQWJpZGUuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuYWJpZGUnKVxuICAgICAgLm9uKCdyZXNldC56Zi5hYmlkZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5yZXNldEZvcm0oKTtcbiAgICAgIH0pXG4gICAgICAub24oJ3N1Ym1pdC56Zi5hYmlkZScsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVGb3JtKCk7XG4gICAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMudmFsaWRhdGVPbiA9PT0gJ2ZpZWxkQ2hhbmdlJykge1xuICAgICAgdGhpcy4kaW5wdXRzXG4gICAgICAgIC5vZmYoJ2NoYW5nZS56Zi5hYmlkZScpXG4gICAgICAgIC5vbignY2hhbmdlLnpmLmFiaWRlJywgKGUpID0+IHtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRlSW5wdXQoJChlLnRhcmdldCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmxpdmVWYWxpZGF0ZSkge1xuICAgICAgdGhpcy4kaW5wdXRzXG4gICAgICAgIC5vZmYoJ2lucHV0LnpmLmFiaWRlJylcbiAgICAgICAgLm9uKCdpbnB1dC56Zi5hYmlkZScsIChlKSA9PiB7XG4gICAgICAgICAgdGhpcy52YWxpZGF0ZUlucHV0KCQoZS50YXJnZXQpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy52YWxpZGF0ZU9uQmx1cikge1xuICAgICAgdGhpcy4kaW5wdXRzXG4gICAgICAgIC5vZmYoJ2JsdXIuemYuYWJpZGUnKVxuICAgICAgICAub24oJ2JsdXIuemYuYWJpZGUnLCAoZSkgPT4ge1xuICAgICAgICAgIHRoaXMudmFsaWRhdGVJbnB1dCgkKGUudGFyZ2V0KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBBYmlkZSB1cG9uIERPTSBjaGFuZ2VcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZWZsb3coKSB7XG4gICAgdGhpcy5faW5pdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCBhIGZvcm0gZWxlbWVudCBoYXMgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZSBhbmQgaWYgaXQncyBjaGVja2VkIG9yIG5vdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gY2hlY2sgZm9yIHJlcXVpcmVkIGF0dHJpYnV0ZVxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gQm9vbGVhbiB2YWx1ZSBkZXBlbmRzIG9uIHdoZXRoZXIgb3Igbm90IGF0dHJpYnV0ZSBpcyBjaGVja2VkIG9yIGVtcHR5XG4gICAqL1xuICByZXF1aXJlZENoZWNrKCRlbCkge1xuICAgIGlmICghJGVsLmF0dHIoJ3JlcXVpcmVkJykpIHJldHVybiB0cnVlO1xuXG4gICAgdmFyIGlzR29vZCA9IHRydWU7XG5cbiAgICBzd2l0Y2ggKCRlbFswXS50eXBlKSB7XG4gICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgIGlzR29vZCA9ICRlbFswXS5jaGVja2VkO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGNhc2UgJ3NlbGVjdC1vbmUnOlxuICAgICAgY2FzZSAnc2VsZWN0LW11bHRpcGxlJzpcbiAgICAgICAgdmFyIG9wdCA9ICRlbC5maW5kKCdvcHRpb246c2VsZWN0ZWQnKTtcbiAgICAgICAgaWYgKCFvcHQubGVuZ3RoIHx8ICFvcHQudmFsKCkpIGlzR29vZCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYoISRlbC52YWwoKSB8fCAhJGVsLnZhbCgpLmxlbmd0aCkgaXNHb29kID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzR29vZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQ6XG4gICAqIC0gQmFzZWQgb24gJGVsLCB0aGUgZmlyc3QgZWxlbWVudChzKSBjb3JyZXNwb25kaW5nIHRvIGBmb3JtRXJyb3JTZWxlY3RvcmAgaW4gdGhpcyBvcmRlcjpcbiAgICogICAxLiBUaGUgZWxlbWVudCdzIGRpcmVjdCBzaWJsaW5nKCdzKS5cbiAgICogICAyLiBUaGUgZWxlbWVudCdzIHBhcmVudCdzIGNoaWxkcmVuLlxuICAgKiAtIEVsZW1lbnQocykgd2l0aCB0aGUgYXR0cmlidXRlIGBbZGF0YS1mb3JtLWVycm9yLWZvcl1gIHNldCB3aXRoIHRoZSBlbGVtZW50J3MgaWQuXG4gICAqXG4gICAqIFRoaXMgYWxsb3dzIGZvciBtdWx0aXBsZSBmb3JtIGVycm9ycyBwZXIgaW5wdXQsIHRob3VnaCBpZiBub25lIGFyZSBmb3VuZCwgbm8gZm9ybSBlcnJvcnMgd2lsbCBiZSBzaG93bi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBvYmplY3QgdG8gdXNlIGFzIHJlZmVyZW5jZSB0byBmaW5kIHRoZSBmb3JtIGVycm9yIHNlbGVjdG9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBqUXVlcnkgb2JqZWN0IHdpdGggdGhlIHNlbGVjdG9yLlxuICAgKi9cbiAgZmluZEZvcm1FcnJvcigkZWwpIHtcbiAgICB2YXIgaWQgPSAkZWxbMF0uaWQ7XG4gICAgdmFyICRlcnJvciA9ICRlbC5zaWJsaW5ncyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yU2VsZWN0b3IpO1xuXG4gICAgaWYgKCEkZXJyb3IubGVuZ3RoKSB7XG4gICAgICAkZXJyb3IgPSAkZWwucGFyZW50KCkuZmluZCh0aGlzLm9wdGlvbnMuZm9ybUVycm9yU2VsZWN0b3IpO1xuICAgIH1cblxuICAgICRlcnJvciA9ICRlcnJvci5hZGQodGhpcy4kZWxlbWVudC5maW5kKGBbZGF0YS1mb3JtLWVycm9yLWZvcj1cIiR7aWR9XCJdYCkpO1xuXG4gICAgcmV0dXJuICRlcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhpcyBvcmRlcjpcbiAgICogMi4gVGhlIDxsYWJlbD4gd2l0aCB0aGUgYXR0cmlidXRlIGBbZm9yPVwic29tZUlucHV0SWRcIl1gXG4gICAqIDMuIFRoZSBgLmNsb3Nlc3QoKWAgPGxhYmVsPlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gJGVsIC0galF1ZXJ5IG9iamVjdCB0byBjaGVjayBmb3IgcmVxdWlyZWQgYXR0cmlidXRlXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXR0cmlidXRlIGlzIGNoZWNrZWQgb3IgZW1wdHlcbiAgICovXG4gIGZpbmRMYWJlbCgkZWwpIHtcbiAgICB2YXIgaWQgPSAkZWxbMF0uaWQ7XG4gICAgdmFyICRsYWJlbCA9IHRoaXMuJGVsZW1lbnQuZmluZChgbGFiZWxbZm9yPVwiJHtpZH1cIl1gKTtcblxuICAgIGlmICghJGxhYmVsLmxlbmd0aCkge1xuICAgICAgcmV0dXJuICRlbC5jbG9zZXN0KCdsYWJlbCcpO1xuICAgIH1cblxuICAgIHJldHVybiAkbGFiZWw7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzZXQgb2YgbGFiZWxzIGFzc29jaWF0ZWQgd2l0aCBhIHNldCBvZiByYWRpbyBlbHMgaW4gdGhpcyBvcmRlclxuICAgKiAyLiBUaGUgPGxhYmVsPiB3aXRoIHRoZSBhdHRyaWJ1dGUgYFtmb3I9XCJzb21lSW5wdXRJZFwiXWBcbiAgICogMy4gVGhlIGAuY2xvc2VzdCgpYCA8bGFiZWw+XG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGNoZWNrIGZvciByZXF1aXJlZCBhdHRyaWJ1dGVcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCBhdHRyaWJ1dGUgaXMgY2hlY2tlZCBvciBlbXB0eVxuICAgKi9cbiAgZmluZFJhZGlvTGFiZWxzKCRlbHMpIHtcbiAgICB2YXIgbGFiZWxzID0gJGVscy5tYXAoKGksIGVsKSA9PiB7XG4gICAgICB2YXIgaWQgPSBlbC5pZDtcbiAgICAgIHZhciAkbGFiZWwgPSB0aGlzLiRlbGVtZW50LmZpbmQoYGxhYmVsW2Zvcj1cIiR7aWR9XCJdYCk7XG5cbiAgICAgIGlmICghJGxhYmVsLmxlbmd0aCkge1xuICAgICAgICAkbGFiZWwgPSAkKGVsKS5jbG9zZXN0KCdsYWJlbCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICRsYWJlbFswXTtcbiAgICB9KTtcblxuICAgIHJldHVybiAkKGxhYmVscyk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0aGUgQ1NTIGVycm9yIGNsYXNzIGFzIHNwZWNpZmllZCBieSB0aGUgQWJpZGUgc2V0dGluZ3MgdG8gdGhlIGxhYmVsLCBpbnB1dCwgYW5kIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgY2xhc3MgdG9cbiAgICovXG4gIGFkZEVycm9yQ2xhc3NlcygkZWwpIHtcbiAgICB2YXIgJGxhYmVsID0gdGhpcy5maW5kTGFiZWwoJGVsKTtcbiAgICB2YXIgJGZvcm1FcnJvciA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWwpO1xuXG4gICAgaWYgKCRsYWJlbC5sZW5ndGgpIHtcbiAgICAgICRsYWJlbC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvci5sZW5ndGgpIHtcbiAgICAgICRmb3JtRXJyb3IuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmZvcm1FcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICAkZWwuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykuYXR0cignZGF0YS1pbnZhbGlkJywgJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBDU1MgZXJyb3IgY2xhc3NlcyBldGMgZnJvbSBhbiBlbnRpcmUgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBncm91cE5hbWUgLSBBIHN0cmluZyB0aGF0IHNwZWNpZmllcyB0aGUgbmFtZSBvZiBhIHJhZGlvIGJ1dHRvbiBncm91cFxuICAgKlxuICAgKi9cblxuICByZW1vdmVSYWRpb0Vycm9yQ2xhc3Nlcyhncm91cE5hbWUpIHtcbiAgICB2YXIgJGVscyA9IHRoaXMuJGVsZW1lbnQuZmluZChgOnJhZGlvW25hbWU9XCIke2dyb3VwTmFtZX1cIl1gKTtcbiAgICB2YXIgJGxhYmVscyA9IHRoaXMuZmluZFJhZGlvTGFiZWxzKCRlbHMpO1xuICAgIHZhciAkZm9ybUVycm9ycyA9IHRoaXMuZmluZEZvcm1FcnJvcigkZWxzKTtcblxuICAgIGlmICgkbGFiZWxzLmxlbmd0aCkge1xuICAgICAgJGxhYmVscy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubGFiZWxFcnJvckNsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoJGZvcm1FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAkZm9ybUVycm9ycy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZm9ybUVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgICRlbHMucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmlucHV0RXJyb3JDbGFzcykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIENTUyBlcnJvciBjbGFzcyBhcyBzcGVjaWZpZWQgYnkgdGhlIEFiaWRlIHNldHRpbmdzIGZyb20gdGhlIGxhYmVsLCBpbnB1dCwgYW5kIHRoZSBmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHJlbW92ZSB0aGUgY2xhc3MgZnJvbVxuICAgKi9cbiAgcmVtb3ZlRXJyb3JDbGFzc2VzKCRlbCkge1xuICAgIC8vIHJhZGlvcyBuZWVkIHRvIGNsZWFyIGFsbCBvZiB0aGUgZWxzXG4gICAgaWYoJGVsWzBdLnR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlUmFkaW9FcnJvckNsYXNzZXMoJGVsLmF0dHIoJ25hbWUnKSk7XG4gICAgfVxuXG4gICAgdmFyICRsYWJlbCA9IHRoaXMuZmluZExhYmVsKCRlbCk7XG4gICAgdmFyICRmb3JtRXJyb3IgPSB0aGlzLmZpbmRGb3JtRXJyb3IoJGVsKTtcblxuICAgIGlmICgkbGFiZWwubGVuZ3RoKSB7XG4gICAgICAkbGFiZWwucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxhYmVsRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKCRmb3JtRXJyb3IubGVuZ3RoKSB7XG4gICAgICAkZm9ybUVycm9yLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5mb3JtRXJyb3JDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVsLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5pbnB1dEVycm9yQ2xhc3MpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdvZXMgdGhyb3VnaCBhIGZvcm0gdG8gZmluZCBpbnB1dHMgYW5kIHByb2NlZWRzIHRvIHZhbGlkYXRlIHRoZW0gaW4gd2F5cyBzcGVjaWZpYyB0byB0aGVpciB0eXBlLiBcbiAgICogSWdub3JlcyBpbnB1dHMgd2l0aCBkYXRhLWFiaWRlLWlnbm9yZSwgdHlwZT1cImhpZGRlblwiIG9yIGRpc2FibGVkIGF0dHJpYnV0ZXMgc2V0XG4gICAqIEBmaXJlcyBBYmlkZSNpbnZhbGlkXG4gICAqIEBmaXJlcyBBYmlkZSN2YWxpZFxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gdmFsaWRhdGUsIHNob3VsZCBiZSBhbiBIVE1MIGlucHV0XG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBnb29kVG9HbyAtIElmIHRoZSBpbnB1dCBpcyB2YWxpZCBvciBub3QuXG4gICAqL1xuICB2YWxpZGF0ZUlucHV0KCRlbCkge1xuICAgIHZhciBjbGVhclJlcXVpcmUgPSB0aGlzLnJlcXVpcmVkQ2hlY2soJGVsKSxcbiAgICAgICAgdmFsaWRhdGVkID0gZmFsc2UsXG4gICAgICAgIGN1c3RvbVZhbGlkYXRvciA9IHRydWUsXG4gICAgICAgIHZhbGlkYXRvciA9ICRlbC5hdHRyKCdkYXRhLXZhbGlkYXRvcicpLFxuICAgICAgICBlcXVhbFRvID0gdHJ1ZTtcblxuICAgIC8vIGRvbid0IHZhbGlkYXRlIGlnbm9yZWQgaW5wdXRzIG9yIGhpZGRlbiBpbnB1dHMgb3IgZGlzYWJsZWQgaW5wdXRzXG4gICAgaWYgKCRlbC5pcygnW2RhdGEtYWJpZGUtaWdub3JlXScpIHx8ICRlbC5pcygnW3R5cGU9XCJoaWRkZW5cIl0nKSB8fCAkZWwuaXMoJ1tkaXNhYmxlZF0nKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgc3dpdGNoICgkZWxbMF0udHlwZSkge1xuICAgICAgY2FzZSAncmFkaW8nOlxuICAgICAgICB2YWxpZGF0ZWQgPSB0aGlzLnZhbGlkYXRlUmFkaW8oJGVsLmF0dHIoJ25hbWUnKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgIHZhbGlkYXRlZCA9IGNsZWFyUmVxdWlyZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBjYXNlICdzZWxlY3Qtb25lJzpcbiAgICAgIGNhc2UgJ3NlbGVjdC1tdWx0aXBsZSc6XG4gICAgICAgIHZhbGlkYXRlZCA9IGNsZWFyUmVxdWlyZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhbGlkYXRlZCA9IHRoaXMudmFsaWRhdGVUZXh0KCRlbCk7XG4gICAgfVxuXG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY3VzdG9tVmFsaWRhdG9yID0gdGhpcy5tYXRjaFZhbGlkYXRpb24oJGVsLCB2YWxpZGF0b3IsICRlbC5hdHRyKCdyZXF1aXJlZCcpKTtcbiAgICB9XG5cbiAgICBpZiAoJGVsLmF0dHIoJ2RhdGEtZXF1YWx0bycpKSB7XG4gICAgICBlcXVhbFRvID0gdGhpcy5vcHRpb25zLnZhbGlkYXRvcnMuZXF1YWxUbygkZWwpO1xuICAgIH1cblxuXG4gICAgdmFyIGdvb2RUb0dvID0gW2NsZWFyUmVxdWlyZSwgdmFsaWRhdGVkLCBjdXN0b21WYWxpZGF0b3IsIGVxdWFsVG9dLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbiAgICB2YXIgbWVzc2FnZSA9IChnb29kVG9HbyA/ICd2YWxpZCcgOiAnaW52YWxpZCcpICsgJy56Zi5hYmlkZSc7XG5cbiAgICBpZiAoZ29vZFRvR28pIHtcbiAgICAgIC8vIFJlLXZhbGlkYXRlIGlucHV0cyB0aGF0IGRlcGVuZCBvbiB0aGlzIG9uZSB3aXRoIGVxdWFsdG9cbiAgICAgIGNvbnN0IGRlcGVuZGVudEVsZW1lbnRzID0gdGhpcy4kZWxlbWVudC5maW5kKGBbZGF0YS1lcXVhbHRvPVwiJHskZWwuYXR0cignaWQnKX1cIl1gKTtcbiAgICAgIGlmIChkZXBlbmRlbnRFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgZGVwZW5kZW50RWxlbWVudHMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoJCh0aGlzKS52YWwoKSkge1xuICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVJbnB1dCgkKHRoaXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXNbZ29vZFRvR28gPyAncmVtb3ZlRXJyb3JDbGFzc2VzJyA6ICdhZGRFcnJvckNsYXNzZXMnXSgkZWwpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgaW5wdXQgaXMgZG9uZSBjaGVja2luZyBmb3IgdmFsaWRhdGlvbi4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYHZhbGlkLnpmLmFiaWRlYCBvciBgaW52YWxpZC56Zi5hYmlkZWBcbiAgICAgKiBUcmlnZ2VyIGluY2x1ZGVzIHRoZSBET00gZWxlbWVudCBvZiB0aGUgaW5wdXQuXG4gICAgICogQGV2ZW50IEFiaWRlI3ZhbGlkXG4gICAgICogQGV2ZW50IEFiaWRlI2ludmFsaWRcbiAgICAgKi9cbiAgICAkZWwudHJpZ2dlcihtZXNzYWdlLCBbJGVsXSk7XG5cbiAgICByZXR1cm4gZ29vZFRvR287XG4gIH1cblxuICAvKipcbiAgICogR29lcyB0aHJvdWdoIGEgZm9ybSBhbmQgaWYgdGhlcmUgYXJlIGFueSBpbnZhbGlkIGlucHV0cywgaXQgd2lsbCBkaXNwbGF5IHRoZSBmb3JtIGVycm9yIGVsZW1lbnRcbiAgICogQHJldHVybnMge0Jvb2xlYW59IG5vRXJyb3IgLSB0cnVlIGlmIG5vIGVycm9ycyB3ZXJlIGRldGVjdGVkLi4uXG4gICAqIEBmaXJlcyBBYmlkZSNmb3JtdmFsaWRcbiAgICogQGZpcmVzIEFiaWRlI2Zvcm1pbnZhbGlkXG4gICAqL1xuICB2YWxpZGF0ZUZvcm0oKSB7XG4gICAgdmFyIGFjYyA9IFtdO1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRpbnB1dHMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIGFjYy5wdXNoKF90aGlzLnZhbGlkYXRlSW5wdXQoJCh0aGlzKSkpO1xuICAgIH0pO1xuXG4gICAgdmFyIG5vRXJyb3IgPSBhY2MuaW5kZXhPZihmYWxzZSkgPT09IC0xO1xuXG4gICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1hYmlkZS1lcnJvcl0nKS5jc3MoJ2Rpc3BsYXknLCAobm9FcnJvciA/ICdub25lJyA6ICdibG9jaycpKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGZvcm0gaXMgZmluaXNoZWQgdmFsaWRhdGluZy4gRXZlbnQgdHJpZ2dlciBpcyBlaXRoZXIgYGZvcm12YWxpZC56Zi5hYmlkZWAgb3IgYGZvcm1pbnZhbGlkLnpmLmFiaWRlYC5cbiAgICAgKiBUcmlnZ2VyIGluY2x1ZGVzIHRoZSBlbGVtZW50IG9mIHRoZSBmb3JtLlxuICAgICAqIEBldmVudCBBYmlkZSNmb3JtdmFsaWRcbiAgICAgKiBAZXZlbnQgQWJpZGUjZm9ybWludmFsaWRcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoKG5vRXJyb3IgPyAnZm9ybXZhbGlkJyA6ICdmb3JtaW52YWxpZCcpICsgJy56Zi5hYmlkZScsIFt0aGlzLiRlbGVtZW50XSk7XG5cbiAgICByZXR1cm4gbm9FcnJvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3IgYSBub3QgYSB0ZXh0IGlucHV0IGlzIHZhbGlkIGJhc2VkIG9uIHRoZSBwYXR0ZXJuIHNwZWNpZmllZCBpbiB0aGUgYXR0cmlidXRlLiBJZiBubyBtYXRjaGluZyBwYXR0ZXJuIGlzIGZvdW5kLCByZXR1cm5zIHRydWUuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSAkZWwgLSBqUXVlcnkgb2JqZWN0IHRvIHZhbGlkYXRlLCBzaG91bGQgYmUgYSB0ZXh0IGlucHV0IEhUTUwgZWxlbWVudFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0dGVybiAtIHN0cmluZyB2YWx1ZSBvZiBvbmUgb2YgdGhlIFJlZ0V4IHBhdHRlcm5zIGluIEFiaWRlLm9wdGlvbnMucGF0dGVybnNcbiAgICogQHJldHVybnMge0Jvb2xlYW59IEJvb2xlYW4gdmFsdWUgZGVwZW5kcyBvbiB3aGV0aGVyIG9yIG5vdCB0aGUgaW5wdXQgdmFsdWUgbWF0Y2hlcyB0aGUgcGF0dGVybiBzcGVjaWZpZWRcbiAgICovXG4gIHZhbGlkYXRlVGV4dCgkZWwsIHBhdHRlcm4pIHtcbiAgICAvLyBBIHBhdHRlcm4gY2FuIGJlIHBhc3NlZCB0byB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGJlIGluZmVyZWQgZnJvbSB0aGUgaW5wdXQncyBcInBhdHRlcm5cIiBhdHRyaWJ1dGUsIG9yIGl0J3MgXCJ0eXBlXCIgYXR0cmlidXRlXG4gICAgcGF0dGVybiA9IChwYXR0ZXJuIHx8ICRlbC5hdHRyKCdwYXR0ZXJuJykgfHwgJGVsLmF0dHIoJ3R5cGUnKSk7XG4gICAgdmFyIGlucHV0VGV4dCA9ICRlbC52YWwoKTtcbiAgICB2YXIgdmFsaWQgPSBmYWxzZTtcblxuICAgIGlmIChpbnB1dFRleHQubGVuZ3RoKSB7XG4gICAgICAvLyBJZiB0aGUgcGF0dGVybiBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaXMgaW4gQWJpZGUncyBsaXN0IG9mIHBhdHRlcm5zLCB0aGVuIHRlc3QgdGhhdCByZWdleHBcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucGF0dGVybnMuaGFzT3duUHJvcGVydHkocGF0dGVybikpIHtcbiAgICAgICAgdmFsaWQgPSB0aGlzLm9wdGlvbnMucGF0dGVybnNbcGF0dGVybl0udGVzdChpbnB1dFRleHQpO1xuICAgICAgfVxuICAgICAgLy8gSWYgdGhlIHBhdHRlcm4gbmFtZSBpc24ndCBhbHNvIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiB0aGUgZmllbGQsIHRoZW4gdGVzdCBpdCBhcyBhIHJlZ2V4cFxuICAgICAgZWxzZSBpZiAocGF0dGVybiAhPT0gJGVsLmF0dHIoJ3R5cGUnKSkge1xuICAgICAgICB2YWxpZCA9IG5ldyBSZWdFeHAocGF0dGVybikudGVzdChpbnB1dFRleHQpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQW4gZW1wdHkgZmllbGQgaXMgdmFsaWQgaWYgaXQncyBub3QgcmVxdWlyZWRcbiAgICBlbHNlIGlmICghJGVsLnByb3AoJ3JlcXVpcmVkJykpIHtcbiAgICAgIHZhbGlkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWQ7XG4gICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBhIG5vdCBhIHJhZGlvIGlucHV0IGlzIHZhbGlkIGJhc2VkIG9uIHdoZXRoZXIgb3Igbm90IGl0IGlzIHJlcXVpcmVkIGFuZCBzZWxlY3RlZC4gQWx0aG91Z2ggdGhlIGZ1bmN0aW9uIHRhcmdldHMgYSBzaW5nbGUgYDxpbnB1dD5gLCBpdCB2YWxpZGF0ZXMgYnkgY2hlY2tpbmcgdGhlIGByZXF1aXJlZGAgYW5kIGBjaGVja2VkYCBwcm9wZXJ0aWVzIG9mIGFsbCByYWRpbyBidXR0b25zIGluIGl0cyBncm91cC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGdyb3VwTmFtZSAtIEEgc3RyaW5nIHRoYXQgc3BlY2lmaWVzIHRoZSBuYW1lIG9mIGEgcmFkaW8gYnV0dG9uIGdyb3VwXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBCb29sZWFuIHZhbHVlIGRlcGVuZHMgb24gd2hldGhlciBvciBub3QgYXQgbGVhc3Qgb25lIHJhZGlvIGlucHV0IGhhcyBiZWVuIHNlbGVjdGVkIChpZiBpdCdzIHJlcXVpcmVkKVxuICAgKi9cbiAgdmFsaWRhdGVSYWRpbyhncm91cE5hbWUpIHtcbiAgICAvLyBJZiBhdCBsZWFzdCBvbmUgcmFkaW8gaW4gdGhlIGdyb3VwIGhhcyB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUsIHRoZSBncm91cCBpcyBjb25zaWRlcmVkIHJlcXVpcmVkXG4gICAgLy8gUGVyIFczQyBzcGVjLCBhbGwgcmFkaW8gYnV0dG9ucyBpbiBhIGdyb3VwIHNob3VsZCBoYXZlIGByZXF1aXJlZGAsIGJ1dCB3ZSdyZSBiZWluZyBuaWNlXG4gICAgdmFyICRncm91cCA9IHRoaXMuJGVsZW1lbnQuZmluZChgOnJhZGlvW25hbWU9XCIke2dyb3VwTmFtZX1cIl1gKTtcbiAgICB2YXIgdmFsaWQgPSBmYWxzZSwgcmVxdWlyZWQgPSBmYWxzZTtcblxuICAgIC8vIEZvciB0aGUgZ3JvdXAgdG8gYmUgcmVxdWlyZWQsIGF0IGxlYXN0IG9uZSByYWRpbyBuZWVkcyB0byBiZSByZXF1aXJlZFxuICAgICRncm91cC5lYWNoKChpLCBlKSA9PiB7XG4gICAgICBpZiAoJChlKS5hdHRyKCdyZXF1aXJlZCcpKSB7XG4gICAgICAgIHJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZighcmVxdWlyZWQpIHZhbGlkPXRydWU7XG5cbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAvLyBGb3IgdGhlIGdyb3VwIHRvIGJlIHZhbGlkLCBhdCBsZWFzdCBvbmUgcmFkaW8gbmVlZHMgdG8gYmUgY2hlY2tlZFxuICAgICAgJGdyb3VwLmVhY2goKGksIGUpID0+IHtcbiAgICAgICAgaWYgKCQoZSkucHJvcCgnY2hlY2tlZCcpKSB7XG4gICAgICAgICAgdmFsaWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHZhbGlkO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYSBzZWxlY3RlZCBpbnB1dCBwYXNzZXMgYSBjdXN0b20gdmFsaWRhdGlvbiBmdW5jdGlvbi4gTXVsdGlwbGUgdmFsaWRhdGlvbnMgY2FuIGJlIHVzZWQsIGlmIHBhc3NlZCB0byB0aGUgZWxlbWVudCB3aXRoIGBkYXRhLXZhbGlkYXRvcj1cImZvbyBiYXIgYmF6XCJgIGluIGEgc3BhY2Ugc2VwYXJhdGVkIGxpc3RlZC5cbiAgICogQHBhcmFtIHtPYmplY3R9ICRlbCAtIGpRdWVyeSBpbnB1dCBlbGVtZW50LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsaWRhdG9ycyAtIGEgc3RyaW5nIG9mIGZ1bmN0aW9uIG5hbWVzIG1hdGNoaW5nIGZ1bmN0aW9ucyBpbiB0aGUgQWJpZGUub3B0aW9ucy52YWxpZGF0b3JzIG9iamVjdC5cbiAgICogQHBhcmFtIHtCb29sZWFufSByZXF1aXJlZCAtIHNlbGYgZXhwbGFuYXRvcnk/XG4gICAqIEByZXR1cm5zIHtCb29sZWFufSAtIHRydWUgaWYgdmFsaWRhdGlvbnMgcGFzc2VkLlxuICAgKi9cbiAgbWF0Y2hWYWxpZGF0aW9uKCRlbCwgdmFsaWRhdG9ycywgcmVxdWlyZWQpIHtcbiAgICByZXF1aXJlZCA9IHJlcXVpcmVkID8gdHJ1ZSA6IGZhbHNlO1xuXG4gICAgdmFyIGNsZWFyID0gdmFsaWRhdG9ycy5zcGxpdCgnICcpLm1hcCgodikgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy52YWxpZGF0b3JzW3ZdKCRlbCwgcmVxdWlyZWQsICRlbC5wYXJlbnQoKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsZWFyLmluZGV4T2YoZmFsc2UpID09PSAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgZm9ybSBpbnB1dHMgYW5kIHN0eWxlc1xuICAgKiBAZmlyZXMgQWJpZGUjZm9ybXJlc2V0XG4gICAqL1xuICByZXNldEZvcm0oKSB7XG4gICAgdmFyICRmb3JtID0gdGhpcy4kZWxlbWVudCxcbiAgICAgICAgb3B0cyA9IHRoaXMub3B0aW9ucztcblxuICAgICQoYC4ke29wdHMubGFiZWxFcnJvckNsYXNzfWAsICRmb3JtKS5ub3QoJ3NtYWxsJykucmVtb3ZlQ2xhc3Mob3B0cy5sYWJlbEVycm9yQ2xhc3MpO1xuICAgICQoYC4ke29wdHMuaW5wdXRFcnJvckNsYXNzfWAsICRmb3JtKS5ub3QoJ3NtYWxsJykucmVtb3ZlQ2xhc3Mob3B0cy5pbnB1dEVycm9yQ2xhc3MpO1xuICAgICQoYCR7b3B0cy5mb3JtRXJyb3JTZWxlY3Rvcn0uJHtvcHRzLmZvcm1FcnJvckNsYXNzfWApLnJlbW92ZUNsYXNzKG9wdHMuZm9ybUVycm9yQ2xhc3MpO1xuICAgICRmb3JtLmZpbmQoJ1tkYXRhLWFiaWRlLWVycm9yXScpLmNzcygnZGlzcGxheScsICdub25lJyk7XG4gICAgJCgnOmlucHV0JywgJGZvcm0pLm5vdCgnOmJ1dHRvbiwgOnN1Ym1pdCwgOnJlc2V0LCA6aGlkZGVuLCA6cmFkaW8sIDpjaGVja2JveCwgW2RhdGEtYWJpZGUtaWdub3JlXScpLnZhbCgnJykucmVtb3ZlQXR0cignZGF0YS1pbnZhbGlkJyk7XG4gICAgJCgnOmlucHV0OnJhZGlvJywgJGZvcm0pLm5vdCgnW2RhdGEtYWJpZGUtaWdub3JlXScpLnByb3AoJ2NoZWNrZWQnLGZhbHNlKS5yZW1vdmVBdHRyKCdkYXRhLWludmFsaWQnKTtcbiAgICAkKCc6aW5wdXQ6Y2hlY2tib3gnLCAkZm9ybSkubm90KCdbZGF0YS1hYmlkZS1pZ25vcmVdJykucHJvcCgnY2hlY2tlZCcsZmFsc2UpLnJlbW92ZUF0dHIoJ2RhdGEtaW52YWxpZCcpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGZvcm0gaGFzIGJlZW4gcmVzZXQuXG4gICAgICogQGV2ZW50IEFiaWRlI2Zvcm1yZXNldFxuICAgICAqL1xuICAgICRmb3JtLnRyaWdnZXIoJ2Zvcm1yZXNldC56Zi5hYmlkZScsIFskZm9ybV0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIEFiaWRlLlxuICAgKiBSZW1vdmVzIGVycm9yIHN0eWxlcyBhbmQgY2xhc3NlcyBmcm9tIGVsZW1lbnRzLCB3aXRob3V0IHJlc2V0dGluZyB0aGVpciB2YWx1ZXMuXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9mZignLmFiaWRlJylcbiAgICAgIC5maW5kKCdbZGF0YS1hYmlkZS1lcnJvcl0nKVxuICAgICAgICAuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcblxuICAgIHRoaXMuJGlucHV0c1xuICAgICAgLm9mZignLmFiaWRlJylcbiAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5yZW1vdmVFcnJvckNsYXNzZXMoJCh0aGlzKSk7XG4gICAgICB9KTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5BYmlkZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IGV2ZW50IHRvIHZhbGlkYXRlIGlucHV0cy4gQ2hlY2tib3hlcyBhbmQgcmFkaW9zIHZhbGlkYXRlIGltbWVkaWF0ZWx5LlxuICAgKiBSZW1vdmUgb3IgY2hhbmdlIHRoaXMgdmFsdWUgZm9yIG1hbnVhbCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnZmllbGRDaGFuZ2UnXG4gICAqL1xuICB2YWxpZGF0ZU9uOiAnZmllbGRDaGFuZ2UnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyB0byBiZSBhcHBsaWVkIHRvIGlucHV0IGxhYmVscyBvbiBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaXMtaW52YWxpZC1sYWJlbCdcbiAgICovXG4gIGxhYmVsRXJyb3JDbGFzczogJ2lzLWludmFsaWQtbGFiZWwnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyB0byBiZSBhcHBsaWVkIHRvIGlucHV0cyBvbiBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaXMtaW52YWxpZC1pbnB1dCdcbiAgICovXG4gIGlucHV0RXJyb3JDbGFzczogJ2lzLWludmFsaWQtaW5wdXQnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBzZWxlY3RvciB0byB1c2UgdG8gdGFyZ2V0IEZvcm0gRXJyb3JzIGZvciBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJy5mb3JtLWVycm9yJ1xuICAgKi9cbiAgZm9ybUVycm9yU2VsZWN0b3I6ICcuZm9ybS1lcnJvcicsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFkZGVkIHRvIEZvcm0gRXJyb3JzIG9uIGZhaWxlZCB2YWxpZGF0aW9uLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdpcy12aXNpYmxlJ1xuICAgKi9cbiAgZm9ybUVycm9yQ2xhc3M6ICdpcy12aXNpYmxlJyxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgdG8gdmFsaWRhdGUgdGV4dCBpbnB1dHMgb24gYW55IHZhbHVlIGNoYW5nZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGxpdmVWYWxpZGF0ZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIHRvIHZhbGlkYXRlIGlucHV0cyBvbiBibHVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdmFsaWRhdGVPbkJsdXI6IGZhbHNlLFxuXG4gIHBhdHRlcm5zOiB7XG4gICAgYWxwaGEgOiAvXlthLXpBLVpdKyQvLFxuICAgIGFscGhhX251bWVyaWMgOiAvXlthLXpBLVowLTldKyQvLFxuICAgIGludGVnZXIgOiAvXlstK10/XFxkKyQvLFxuICAgIG51bWJlciA6IC9eWy0rXT9cXGQqKD86W1xcLlxcLF1cXGQrKT8kLyxcblxuICAgIC8vIGFtZXgsIHZpc2EsIGRpbmVyc1xuICAgIGNhcmQgOiAvXig/OjRbMC05XXsxMn0oPzpbMC05XXszfSk/fDVbMS01XVswLTldezE0fXw2KD86MDExfDVbMC05XVswLTldKVswLTldezEyfXwzWzQ3XVswLTldezEzfXwzKD86MFswLTVdfFs2OF1bMC05XSlbMC05XXsxMX18KD86MjEzMXwxODAwfDM1XFxkezN9KVxcZHsxMX0pJC8sXG4gICAgY3Z2IDogL14oWzAtOV0pezMsNH0kLyxcblxuICAgIC8vIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3N0YXRlcy1vZi10aGUtdHlwZS1hdHRyaWJ1dGUuaHRtbCN2YWxpZC1lLW1haWwtYWRkcmVzc1xuICAgIGVtYWlsIDogL15bYS16QS1aMC05LiEjJCUmJyorXFwvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykrJC8sXG5cbiAgICB1cmwgOiAvXihodHRwcz98ZnRwfGZpbGV8c3NoKTpcXC9cXC8oKCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OikqQCk/KCgoXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pKXwoKChbYS16QS1aXXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2EtekEtWl18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpBLVpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2EtekEtWl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4/KSg6XFxkKik/KShcXC8oKChbYS16QS1aXXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKyhcXC8oKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkqKSopPyk/KFxcPygoKFthLXpBLVpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8W1xcdUUwMDAtXFx1RjhGRl18XFwvfFxcPykqKT8oXFwjKCgoW2EtekEtWl18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxcXC98XFw/KSopPyQvLFxuICAgIC8vIGFiYy5kZVxuICAgIGRvbWFpbiA6IC9eKFthLXpBLVowLTldKFthLXpBLVowLTlcXC1dezAsNjF9W2EtekEtWjAtOV0pP1xcLikrW2EtekEtWl17Miw4fSQvLFxuXG4gICAgZGF0ZXRpbWUgOiAvXihbMC0yXVswLTldezN9KVxcLShbMC0xXVswLTldKVxcLShbMC0zXVswLTldKVQoWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSlcXDooWzAtNV1bMC05XSkoWnwoW1xcLVxcK10oWzAtMV1bMC05XSlcXDowMCkpJC8sXG4gICAgLy8gWVlZWS1NTS1ERFxuICAgIGRhdGUgOiAvKD86MTl8MjApWzAtOV17Mn0tKD86KD86MFsxLTldfDFbMC0yXSktKD86MFsxLTldfDFbMC05XXwyWzAtOV0pfCg/Oig/ITAyKSg/OjBbMS05XXwxWzAtMl0pLSg/OjMwKSl8KD86KD86MFsxMzU3OF18MVswMl0pLTMxKSkkLyxcbiAgICAvLyBISDpNTTpTU1xuICAgIHRpbWUgOiAvXigwWzAtOV18MVswLTldfDJbMC0zXSkoOlswLTVdWzAtOV0pezJ9JC8sXG4gICAgZGF0ZUlTTyA6IC9eXFxkezR9W1xcL1xcLV1cXGR7MSwyfVtcXC9cXC1dXFxkezEsMn0kLyxcbiAgICAvLyBNTS9ERC9ZWVlZXG4gICAgbW9udGhfZGF5X3llYXIgOiAvXigwWzEtOV18MVswMTJdKVstIFxcLy5dKDBbMS05XXxbMTJdWzAtOV18M1swMV0pWy0gXFwvLl1cXGR7NH0kLyxcbiAgICAvLyBERC9NTS9ZWVlZXG4gICAgZGF5X21vbnRoX3llYXIgOiAvXigwWzEtOV18WzEyXVswLTldfDNbMDFdKVstIFxcLy5dKDBbMS05XXwxWzAxMl0pWy0gXFwvLl1cXGR7NH0kLyxcblxuICAgIC8vICNGRkYgb3IgI0ZGRkZGRlxuICAgIGNvbG9yIDogL14jPyhbYS1mQS1GMC05XXs2fXxbYS1mQS1GMC05XXszfSkkL1xuICB9LFxuXG4gIC8qKlxuICAgKiBPcHRpb25hbCB2YWxpZGF0aW9uIGZ1bmN0aW9ucyB0byBiZSB1c2VkLiBgZXF1YWxUb2AgYmVpbmcgdGhlIG9ubHkgZGVmYXVsdCBpbmNsdWRlZCBmdW5jdGlvbi5cbiAgICogRnVuY3Rpb25zIHNob3VsZCByZXR1cm4gb25seSBhIGJvb2xlYW4gaWYgdGhlIGlucHV0IGlzIHZhbGlkIG9yIG5vdC4gRnVuY3Rpb25zIGFyZSBnaXZlbiB0aGUgZm9sbG93aW5nIGFyZ3VtZW50czpcbiAgICogZWwgOiBUaGUgalF1ZXJ5IGVsZW1lbnQgdG8gdmFsaWRhdGUuXG4gICAqIHJlcXVpcmVkIDogQm9vbGVhbiB2YWx1ZSBvZiB0aGUgcmVxdWlyZWQgYXR0cmlidXRlIGJlIHByZXNlbnQgb3Igbm90LlxuICAgKiBwYXJlbnQgOiBUaGUgZGlyZWN0IHBhcmVudCBvZiB0aGUgaW5wdXQuXG4gICAqIEBvcHRpb25cbiAgICovXG4gIHZhbGlkYXRvcnM6IHtcbiAgICBlcXVhbFRvOiBmdW5jdGlvbiAoZWwsIHJlcXVpcmVkLCBwYXJlbnQpIHtcbiAgICAgIHJldHVybiAkKGAjJHtlbC5hdHRyKCdkYXRhLWVxdWFsdG8nKX1gKS52YWwoKSA9PT0gZWwudmFsKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihBYmlkZSwgJ0FiaWRlJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBBY2NvcmRpb24gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLmFjY29yZGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tb3Rpb25cbiAqL1xuXG5jbGFzcyBBY2NvcmRpb24ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBhY2NvcmRpb24uXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgQWNjb3JkaW9uI2luaXRcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIG1ha2UgaW50byBhbiBhY2NvcmRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYSBwbGFpbiBvYmplY3Qgd2l0aCBzZXR0aW5ncyB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBY2NvcmRpb24uZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0FjY29yZGlvbicpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbicsIHtcbiAgICAgICdFTlRFUic6ICd0b2dnbGUnLFxuICAgICAgJ1NQQUNFJzogJ3RvZ2dsZScsXG4gICAgICAnQVJST1dfRE9XTic6ICduZXh0JyxcbiAgICAgICdBUlJPV19VUCc6ICdwcmV2aW91cydcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgYWNjb3JkaW9uIGJ5IGFuaW1hdGluZyB0aGUgcHJlc2V0IGFjdGl2ZSBwYW5lKHMpLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKTtcbiAgICB0aGlzLiR0YWJzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignW2RhdGEtYWNjb3JkaW9uLWl0ZW1dJyk7XG5cbiAgICB0aGlzLiR0YWJzLmVhY2goZnVuY3Rpb24oaWR4LCBlbCkge1xuICAgICAgdmFyICRlbCA9ICQoZWwpLFxuICAgICAgICAgICRjb250ZW50ID0gJGVsLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKSxcbiAgICAgICAgICBpZCA9ICRjb250ZW50WzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjY29yZGlvbicpLFxuICAgICAgICAgIGxpbmtJZCA9IGVsLmlkIHx8IGAke2lkfS1sYWJlbGA7XG5cbiAgICAgICRlbC5maW5kKCdhOmZpcnN0JykuYXR0cih7XG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogaWQsXG4gICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICdpZCc6IGxpbmtJZCxcbiAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSxcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICAgICRjb250ZW50LmF0dHIoeydyb2xlJzogJ3RhYnBhbmVsJywgJ2FyaWEtbGFiZWxsZWRieSc6IGxpbmtJZCwgJ2FyaWEtaGlkZGVuJzogdHJ1ZSwgJ2lkJzogaWR9KTtcbiAgICB9KTtcbiAgICB2YXIgJGluaXRBY3RpdmUgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY3RpdmUnKS5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJyk7XG4gICAgdGhpcy5maXJzdFRpbWVJbml0ID0gdHJ1ZTtcbiAgICBpZigkaW5pdEFjdGl2ZS5sZW5ndGgpe1xuICAgICAgdGhpcy5kb3duKCRpbml0QWN0aXZlLCB0aGlzLmZpcnN0VGltZUluaXQpO1xuICAgICAgdGhpcy5maXJzdFRpbWVJbml0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fY2hlY2tEZWVwTGluayA9ICgpID0+IHtcbiAgICAgIHZhciBhbmNob3IgPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICAgIC8vbmVlZCBhIGhhc2ggYW5kIGEgcmVsZXZhbnQgYW5jaG9yIGluIHRoaXMgdGFic2V0XG4gICAgICBpZihhbmNob3IubGVuZ3RoKSB7XG4gICAgICAgIHZhciAkbGluayA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2hyZWYkPVwiJythbmNob3IrJ1wiXScpLFxuICAgICAgICAkYW5jaG9yID0gJChhbmNob3IpO1xuXG4gICAgICAgIGlmICgkbGluay5sZW5ndGggJiYgJGFuY2hvcikge1xuICAgICAgICAgIGlmICghJGxpbmsucGFyZW50KCdbZGF0YS1hY2NvcmRpb24taXRlbV0nKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgICAgICAgIHRoaXMuZG93bigkYW5jaG9yLCB0aGlzLmZpcnN0VGltZUluaXQpO1xuICAgICAgICAgICAgdGhpcy5maXJzdFRpbWVJbml0ID0gZmFsc2U7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vcm9sbCB1cCBhIGxpdHRsZSB0byBzaG93IHRoZSB0aXRsZXNcbiAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rU211ZGdlKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgJCh3aW5kb3cpLmxvYWQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBfdGhpcy4kZWxlbWVudC5vZmZzZXQoKTtcbiAgICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IG9mZnNldC50b3AgfSwgX3RoaXMub3B0aW9ucy5kZWVwTGlua1NtdWRnZURlbGF5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB6cGx1Z2luIGhhcyBkZWVwbGlua2VkIGF0IHBhZ2Vsb2FkXG4gICAgICAgICAgICAqIEBldmVudCBBY2NvcmRpb24jZGVlcGxpbmtcbiAgICAgICAgICAgICovXG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdkZWVwbGluay56Zi5hY2NvcmRpb24nLCBbJGxpbmssICRhbmNob3JdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vdXNlIGJyb3dzZXIgdG8gb3BlbiBhIHRhYiwgaWYgaXQgZXhpc3RzIGluIHRoaXMgdGFic2V0XG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgdGhpcy5fY2hlY2tEZWVwTGluaygpO1xuICAgIH1cblxuICAgIHRoaXMuX2V2ZW50cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgYWNjb3JkaW9uLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy4kdGFicy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyICRlbGVtID0gJCh0aGlzKTtcbiAgICAgIHZhciAkdGFiQ29udGVudCA9ICRlbGVtLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgIGlmICgkdGFiQ29udGVudC5sZW5ndGgpIHtcbiAgICAgICAgJGVsZW0uY2hpbGRyZW4oJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbiBrZXlkb3duLnpmLmFjY29yZGlvbicpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnpmLmFjY29yZGlvbicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMudG9nZ2xlKCR0YWJDb250ZW50KTtcbiAgICAgICAgfSkub24oJ2tleWRvd24uemYuYWNjb3JkaW9uJywgZnVuY3Rpb24oZSl7XG4gICAgICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ0FjY29yZGlvbicsIHtcbiAgICAgICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIF90aGlzLnRvZ2dsZSgkdGFiQ29udGVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciAkYSA9ICRlbGVtLm5leHQoKS5maW5kKCdhJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLm11bHRpRXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgJGEudHJpZ2dlcignY2xpY2suemYuYWNjb3JkaW9uJylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdmFyICRhID0gJGVsZW0ucHJldigpLmZpbmQoJ2EnKS5mb2N1cygpO1xuICAgICAgICAgICAgICBpZiAoIV90aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQpIHtcbiAgICAgICAgICAgICAgICAkYS50cmlnZ2VyKCdjbGljay56Zi5hY2NvcmRpb24nKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAkKHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhpcy5fY2hlY2tEZWVwTGluayk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHNlbGVjdGVkIGNvbnRlbnQgcGFuZSdzIG9wZW4vY2xvc2Ugc3RhdGUuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0galF1ZXJ5IG9iamVjdCBvZiB0aGUgcGFuZSB0byB0b2dnbGUgKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICB0b2dnbGUoJHRhcmdldCkge1xuICAgIGlmKCR0YXJnZXQucGFyZW50KCkuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB7XG4gICAgICB0aGlzLnVwKCR0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRvd24oJHRhcmdldCk7XG4gICAgfVxuICAgIC8vZWl0aGVyIHJlcGxhY2Ugb3IgdXBkYXRlIGJyb3dzZXIgaGlzdG9yeVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgIHZhciBhbmNob3IgPSAkdGFyZ2V0LnByZXYoJ2EnKS5hdHRyKCdocmVmJyk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBkYXRlSGlzdG9yeSkge1xuICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7fSwgJycsIGFuY2hvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgJycsIGFuY2hvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBhY2NvcmRpb24gdGFiIGRlZmluZWQgYnkgYCR0YXJnZXRgLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gJHRhcmdldCAtIEFjY29yZGlvbiBwYW5lIHRvIG9wZW4gKGAuYWNjb3JkaW9uLWNvbnRlbnRgKS5cbiAgICogQHBhcmFtIHtCb29sZWFufSBmaXJzdFRpbWUgLSBmbGFnIHRvIGRldGVybWluZSBpZiByZWZsb3cgc2hvdWxkIGhhcHBlbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbiNkb3duXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZG93bigkdGFyZ2V0LCBmaXJzdFRpbWUpIHtcbiAgICAkdGFyZ2V0XG4gICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSlcbiAgICAgIC5wYXJlbnQoJ1tkYXRhLXRhYi1jb250ZW50XScpXG4gICAgICAuYWRkQmFjaygpXG4gICAgICAucGFyZW50KCkuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubXVsdGlFeHBhbmQgJiYgIWZpcnN0VGltZSkge1xuICAgICAgdmFyICRjdXJyZW50QWN0aXZlID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLmlzLWFjdGl2ZScpLmNoaWxkcmVuKCdbZGF0YS10YWItY29udGVudF0nKTtcbiAgICAgIGlmICgkY3VycmVudEFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy51cCgkY3VycmVudEFjdGl2ZS5ub3QoJHRhcmdldCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgICR0YXJnZXQuc2xpZGVEb3duKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAoKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIHdoZW4gdGhlIHRhYiBpcyBkb25lIG9wZW5pbmcuXG4gICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI2Rvd25cbiAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdkb3duLnpmLmFjY29yZGlvbicsIFskdGFyZ2V0XSk7XG4gICAgfSk7XG5cbiAgICAkKGAjJHskdGFyZ2V0LmF0dHIoJ2FyaWEtbGFiZWxsZWRieScpfWApLmF0dHIoe1xuICAgICAgJ2FyaWEtZXhwYW5kZWQnOiB0cnVlLFxuICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSB0YWIgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gQWNjb3JkaW9uIHRhYiB0byBjbG9zZSAoYC5hY2NvcmRpb24tY29udGVudGApLlxuICAgKiBAZmlyZXMgQWNjb3JkaW9uI3VwXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgdXAoJHRhcmdldCkge1xuICAgIHZhciAkYXVudHMgPSAkdGFyZ2V0LnBhcmVudCgpLnNpYmxpbmdzKCksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIGlmKCghdGhpcy5vcHRpb25zLmFsbG93QWxsQ2xvc2VkICYmICEkYXVudHMuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpKSB8fCAhJHRhcmdldC5wYXJlbnQoKS5oYXNDbGFzcygnaXMtYWN0aXZlJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBGb3VuZGF0aW9uLk1vdmUodGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsICR0YXJnZXQsIGZ1bmN0aW9uKCl7XG4gICAgICAkdGFyZ2V0LnNsaWRlVXAoX3RoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB0YWIgaXMgZG9uZSBjb2xsYXBzaW5nIHVwLlxuICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uI3VwXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCd1cC56Zi5hY2NvcmRpb24nLCBbJHRhcmdldF0pO1xuICAgICAgfSk7XG4gICAgLy8gfSk7XG5cbiAgICAkdGFyZ2V0LmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICAgICAgICAgLnBhcmVudCgpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcblxuICAgICQoYCMkeyR0YXJnZXQuYXR0cignYXJpYS1sYWJlbGxlZGJ5Jyl9YCkuYXR0cih7XG4gICAgICdhcmlhLWV4cGFuZGVkJzogZmFsc2UsXG4gICAgICdhcmlhLXNlbGVjdGVkJzogZmFsc2VcbiAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFuIGFjY29yZGlvbi5cbiAgICogQGZpcmVzIEFjY29yZGlvbiNkZXN0cm95ZWRcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtdGFiLWNvbnRlbnRdJykuc3RvcCh0cnVlKS5zbGlkZVVwKDApLmNzcygnZGlzcGxheScsICcnKTtcbiAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJy56Zi5hY2NvcmRpb24nKTtcbiAgICBpZih0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICQod2luZG93KS5vZmYoJ3BvcHN0YXRlJywgdGhpcy5fY2hlY2tEZWVwTGluayk7XG4gICAgfVxuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbkFjY29yZGlvbi5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFtb3VudCBvZiB0aW1lIHRvIGFuaW1hdGUgdGhlIG9wZW5pbmcgb2YgYW4gYWNjb3JkaW9uIHBhbmUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMjUwXG4gICAqL1xuICBzbGlkZVNwZWVkOiAyNTAsXG4gIC8qKlxuICAgKiBBbGxvdyB0aGUgYWNjb3JkaW9uIHRvIGhhdmUgbXVsdGlwbGUgb3BlbiBwYW5lcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpRXhwYW5kOiBmYWxzZSxcbiAgLyoqXG4gICAqIEFsbG93IHRoZSBhY2NvcmRpb24gdG8gY2xvc2UgYWxsIHBhbmVzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgYWxsb3dBbGxDbG9zZWQ6IGZhbHNlLFxuICAvKipcbiAgICogQWxsb3dzIHRoZSB3aW5kb3cgdG8gc2Nyb2xsIHRvIGNvbnRlbnQgb2YgcGFuZSBzcGVjaWZpZWQgYnkgaGFzaCBhbmNob3JcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5rOiBmYWxzZSxcblxuICAvKipcbiAgICogQWRqdXN0IHRoZSBkZWVwIGxpbmsgc2Nyb2xsIHRvIG1ha2Ugc3VyZSB0aGUgdG9wIG9mIHRoZSBhY2NvcmRpb24gcGFuZWwgaXMgdmlzaWJsZVxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbmtTbXVkZ2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbmltYXRpb24gdGltZSAobXMpIGZvciB0aGUgZGVlcCBsaW5rIGFkanVzdG1lbnRcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAzMDBcbiAgICovXG4gIGRlZXBMaW5rU211ZGdlRGVsYXk6IDMwMCxcblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBicm93c2VyIGhpc3Rvcnkgd2l0aCB0aGUgb3BlbiBhY2NvcmRpb25cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHVwZGF0ZUhpc3Rvcnk6IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oQWNjb3JkaW9uLCAnQWNjb3JkaW9uJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuICAgIC8qKlxuICAgICAqIEFjY29yZGlvbk1lbnUgbW9kdWxlLlxuICAgICAqIEBtb2R1bGUgZm91bmRhdGlvbi5hY2NvcmRpb25NZW51XG4gICAgICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICAgICAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gICAgICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5uZXN0XG4gICAgICovXG5cbiAgICBjbGFzcyBBY2NvcmRpb25NZW51IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAgICAgICAqIEBjbGFzc1xuICAgICAgICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSNpbml0XG4gICAgICAgICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gYW4gYWNjb3JkaW9uIG1lbnUuXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFjY29yZGlvbk1lbnUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgICAgICAgICAgRm91bmRhdGlvbi5OZXN0LkZlYXRoZXIodGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuXG4gICAgICAgICAgICB0aGlzLl9pbml0KCk7XG5cbiAgICAgICAgICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0FjY29yZGlvbk1lbnUnKTtcbiAgICAgICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ0FjY29yZGlvbk1lbnUnLCB7XG4gICAgICAgICAgICAgICAgJ0VOVEVSJzogJ3RvZ2dsZScsXG4gICAgICAgICAgICAgICAgJ1NQQUNFJzogJ3RvZ2dsZScsXG4gICAgICAgICAgICAgICAgJ0FSUk9XX1JJR0hUJzogJ29wZW4nLFxuICAgICAgICAgICAgICAgICdBUlJPV19VUCc6ICd1cCcsXG4gICAgICAgICAgICAgICAgJ0FSUk9XX0RPV04nOiAnZG93bicsXG4gICAgICAgICAgICAgICAgJ0FSUk9XX0xFRlQnOiAnY2xvc2UnLFxuICAgICAgICAgICAgICAgICdFU0NBUEUnOiAnY2xvc2VBbGwnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5pdGlhbGl6ZXMgdGhlIGFjY29yZGlvbiBtZW51IGJ5IGhpZGluZyBhbGwgbmVzdGVkIG1lbnVzLlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgX2luaXQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykubm90KCcuaXMtYWN0aXZlJykuc2xpZGVVcCgwKTsvLy5maW5kKCdhJykuY3NzKCdwYWRkaW5nLWxlZnQnLCAnMXJlbScpO1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICAgICAgICAgICAncm9sZSc6ICdtZW51JyxcbiAgICAgICAgICAgICAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUnOiB0aGlzLm9wdGlvbnMubXVsdGlPcGVuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy4kbWVudUxpbmtzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50Jyk7XG4gICAgICAgICAgICB0aGlzLiRtZW51TGlua3MuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHZhciBsaW5rSWQgPSB0aGlzLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjYy1tZW51LWxpbmsnKSxcbiAgICAgICAgICAgICAgICAgICAgJGVsZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAkc3ViID0gJGVsZW0uY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyksXG4gICAgICAgICAgICAgICAgICAgIHN1YklkID0gJHN1YlswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdhY2MtbWVudScpLFxuICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSA9ICRzdWIuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuXG5cbiAgICAgICAgICAgICAgICBpZihfdGhpcy5vcHRpb25zLnN1Ym1lbnVUb2dnbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsZW0uYWRkQ2xhc3MoJ2hhcy1zdWJtZW51LXRvZ2dsZScpO1xuICAgICAgICAgICAgICAgICAgICAkZWxlbS5jaGlsZHJlbignYScpLmFmdGVyKCc8YnV0dG9uIGlkPVwiJyArIGxpbmtJZCArICdcIiBjbGFzcz1cInN1Ym1lbnUtdG9nZ2xlXCIgYXJpYS1jb250cm9scz1cIicgKyBzdWJJZCArICdcIiBhcmlhLWV4cGFuZGVkPVwiJyArIGlzQWN0aXZlICsgJ1wiPjxzcGFuIGNsYXNzPVwic3VibWVudS10b2dnbGUtdGV4dFwiPicgKyBfdGhpcy5vcHRpb25zLnN1Ym1lbnVUb2dnbGVUZXh0ICsgJzwvc3Bhbj48L2J1dHRvbj4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkZWxlbS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWNvbnRyb2xzJzogc3ViSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1leHBhbmRlZCc6IGlzQWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAnbWVudWl0ZW0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogbGlua0lkXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAkc3ViLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAhaXNBY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ21lbnUnLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiBzdWJJZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgaW5pdFBhbmVzID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXMtYWN0aXZlJyk7XG4gICAgICAgICAgICBpZihpbml0UGFuZXMubGVuZ3RoKXtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgIGluaXRQYW5lcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRvd24oJCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ldmVudHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciBpdGVtcyB3aXRoaW4gdGhlIG1lbnUuXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfZXZlbnRzKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyICRzdWJtZW51ID0gJCh0aGlzKS5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKTtcblxuICAgICAgICAgICAgICAgIGlmICgkc3VibWVudS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoX3RoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCcuc3VibWVudS10b2dnbGUnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKS5vbignY2xpY2suemYuYWNjb3JkaW9uTWVudScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50b2dnbGUoJHN1Ym1lbnUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNoaWxkcmVuKCdhJykub2ZmKCdjbGljay56Zi5hY2NvcmRpb25NZW51Jykub24oJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnRvZ2dsZSgkc3VibWVudSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLm9uKCdrZXlkb3duLnpmLmFjY29yZGlvbm1lbnUnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAkZWxlbWVudHMgPSAkZWxlbWVudC5wYXJlbnQoJ3VsJykuY2hpbGRyZW4oJ2xpJyksXG4gICAgICAgICAgICAgICAgICAgICRwcmV2RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgJG5leHRFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0ID0gJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJyk7XG5cbiAgICAgICAgICAgICAgICAkZWxlbWVudHMuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCRlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWF4KDAsIGktMSkpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnRzLmVxKE1hdGgubWluKGkrMSwgJGVsZW1lbnRzLmxlbmd0aC0xKSkuZmluZCgnYScpLmZpcnN0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XTp2aXNpYmxlJykubGVuZ3RoKSB7IC8vIGhhcyBvcGVuIHN1YiBtZW51XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5leHRFbGVtZW50ID0gJGVsZW1lbnQuZmluZCgnbGk6Zmlyc3QtY2hpbGQnKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Zmlyc3QtY2hpbGQnKSkgeyAvLyBpcyBmaXJzdCBlbGVtZW50IG9mIHN1YiBtZW51XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gJGVsZW1lbnQucGFyZW50cygnbGknKS5maXJzdCgpLmZpbmQoJ2EnKS5maXJzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkcHJldkVsZW1lbnQucGFyZW50cygnbGknKS5maXJzdCgpLmNoaWxkcmVuKCdbZGF0YS1zdWJtZW51XTp2aXNpYmxlJykubGVuZ3RoKSB7IC8vIGlmIHByZXZpb3VzIGVsZW1lbnQgaGFzIG9wZW4gc3ViIG1lbnVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkcHJldkVsZW1lbnQucGFyZW50cygnbGknKS5maW5kKCdsaTpsYXN0LWNoaWxkJykuZmluZCgnYScpLmZpcnN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5pcygnOmxhc3QtY2hpbGQnKSkgeyAvLyBpcyBsYXN0IGVsZW1lbnQgb2Ygc3ViIG1lbnVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudC5wYXJlbnRzKCdsaScpLmZpcnN0KCkubmV4dCgnbGknKS5maW5kKCdhJykuZmlyc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBGb3VuZGF0aW9uLktleWJvYXJkLmhhbmRsZUtleShlLCAnQWNjb3JkaW9uTWVudScsIHtcbiAgICAgICAgICAgICAgICAgICAgb3BlbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZG93bigkdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGFyZ2V0LmZpbmQoJ2xpJykuZmlyc3QoKS5maW5kKCdhJykuZmlyc3QoKS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHRhcmdldC5sZW5ndGggJiYgISR0YXJnZXQuaXMoJzpoaWRkZW4nKSkgeyAvLyBjbG9zZSBhY3RpdmUgc3ViIG9mIHRoaXMgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnVwKCR0YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN1Ym1lbnVdJykubGVuZ3RoKSB7IC8vIGNsb3NlIGN1cnJlbnRseSBvcGVuIHN1YlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnVwKCRlbGVtZW50LnBhcmVudCgnW2RhdGEtc3VibWVudV0nKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGVsZW1lbnQucGFyZW50cygnbGknKS5maXJzdCgpLmZpbmQoJ2EnKS5maXJzdCgpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRwcmV2RWxlbWVudC5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJG5leHRFbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZWxlbWVudC5jaGlsZHJlbignW2RhdGEtc3VibWVudV0nKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50b2dnbGUoJGVsZW1lbnQuY2hpbGRyZW4oJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjbG9zZUFsbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5oaWRlQWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZWQ6IGZ1bmN0aW9uKHByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTsvLy5hdHRyKCd0YWJpbmRleCcsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENsb3NlcyBhbGwgcGFuZXMgb2YgdGhlIG1lbnUuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgaGlkZUFsbCgpIHtcbiAgICAgICAgICAgIHRoaXMudXAodGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcGVucyBhbGwgcGFuZXMgb2YgdGhlIG1lbnUuXG4gICAgICAgICAqIEBmdW5jdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0FsbCgpIHtcbiAgICAgICAgICAgIHRoaXMuZG93bih0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLXN1Ym1lbnVdJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRvZ2dsZXMgdGhlIG9wZW4vY2xvc2Ugc3RhdGUgb2YgYSBzdWJtZW51LlxuICAgICAgICAgKiBAZnVuY3Rpb25cbiAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSB0aGUgc3VibWVudSB0byB0b2dnbGVcbiAgICAgICAgICovXG4gICAgICAgIHRvZ2dsZSgkdGFyZ2V0KXtcbiAgICAgICAgICAgIGlmKCEkdGFyZ2V0LmlzKCc6YW5pbWF0ZWQnKSkge1xuICAgICAgICAgICAgICAgIGlmICghJHRhcmdldC5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXAoJHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvd24oJHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9wZW5zIHRoZSBzdWItbWVudSBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC5cbiAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBTdWItbWVudSB0byBvcGVuLlxuICAgICAgICAgKiBAZmlyZXMgQWNjb3JkaW9uTWVudSNkb3duXG4gICAgICAgICAqL1xuICAgICAgICBkb3duKCR0YXJnZXQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgICAgIGlmKCF0aGlzLm9wdGlvbnMubXVsdGlPcGVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cCh0aGlzLiRlbGVtZW50LmZpbmQoJy5pcy1hY3RpdmUnKS5ub3QoJHRhcmdldC5wYXJlbnRzVW50aWwodGhpcy4kZWxlbWVudCkuYWRkKCR0YXJnZXQpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICR0YXJnZXQuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpLmF0dHIoeydhcmlhLWhpZGRlbic6IGZhbHNlfSk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgICAgICAgICAgJHRhcmdldC5wcmV2KCcuc3VibWVudS10b2dnbGUnKS5hdHRyKHsnYXJpYS1leHBhbmRlZCc6IHRydWV9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICR0YXJnZXQucGFyZW50KCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50JykuYXR0cih7J2FyaWEtZXhwYW5kZWQnOiB0cnVlfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vRm91bmRhdGlvbi5Nb3ZlKHRoaXMub3B0aW9ucy5zbGlkZVNwZWVkLCAkdGFyZ2V0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICR0YXJnZXQuc2xpZGVEb3duKF90aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIG1lbnUgaXMgZG9uZSBvcGVuaW5nLlxuICAgICAgICAgICAgICAgICAqIEBldmVudCBBY2NvcmRpb25NZW51I2Rvd25cbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBfdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdkb3duLnpmLmFjY29yZGlvbk1lbnUnLCBbJHRhcmdldF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvL30pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENsb3NlcyB0aGUgc3ViLW1lbnUgZGVmaW5lZCBieSBgJHRhcmdldGAuIEFsbCBzdWItbWVudXMgaW5zaWRlIHRoZSB0YXJnZXQgd2lsbCBiZSBjbG9zZWQgYXMgd2VsbC5cbiAgICAgICAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBTdWItbWVudSB0byBjbG9zZS5cbiAgICAgICAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjdXBcbiAgICAgICAgICovXG4gICAgICAgIHVwKCR0YXJnZXQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICAvL0ZvdW5kYXRpb24uTW92ZSh0aGlzLm9wdGlvbnMuc2xpZGVTcGVlZCwgJHRhcmdldCwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICR0YXJnZXQuc2xpZGVVcChfdGhpcy5vcHRpb25zLnNsaWRlU3BlZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBtZW51IGlzIGRvbmUgY29sbGFwc2luZyB1cC5cbiAgICAgICAgICAgICAgICAgKiBAZXZlbnQgQWNjb3JkaW9uTWVudSN1cFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwLnpmLmFjY29yZGlvbk1lbnUnLCBbJHRhcmdldF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvL30pO1xuXG4gICAgICAgICAgICB2YXIgJG1lbnVzID0gJHRhcmdldC5maW5kKCdbZGF0YS1zdWJtZW51XScpLnNsaWRlVXAoMCkuYWRkQmFjaygpLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9ucy5zdWJtZW51VG9nZ2xlKSB7XG4gICAgICAgICAgICAgICAgJG1lbnVzLnByZXYoJy5zdWJtZW51LXRvZ2dsZScpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAkbWVudXMucGFyZW50KCcuaXMtYWNjb3JkaW9uLXN1Ym1lbnUtcGFyZW50JykuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBhY2NvcmRpb24gbWVudS5cbiAgICAgICAgICogQGZpcmVzIEFjY29yZGlvbk1lbnUjZGVzdHJveWVkXG4gICAgICAgICAqL1xuICAgICAgICBkZXN0cm95KCkge1xuICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1zdWJtZW51XScpLnNsaWRlRG93bigwKS5jc3MoJ2Rpc3BsYXknLCAnJyk7XG4gICAgICAgICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJ2EnKS5vZmYoJ2NsaWNrLnpmLmFjY29yZGlvbk1lbnUnKTtcblxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zLnN1Ym1lbnVUb2dnbGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRlbGVtZW50LmZpbmQoJy5oYXMtc3VibWVudS10b2dnbGUnKS5yZW1vdmVDbGFzcygnaGFzLXN1Ym1lbnUtdG9nZ2xlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kZWxlbWVudC5maW5kKCcuc3VibWVudS10b2dnbGUnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRm91bmRhdGlvbi5OZXN0LkJ1cm4odGhpcy4kZWxlbWVudCwgJ2FjY29yZGlvbicpO1xuICAgICAgICAgICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQWNjb3JkaW9uTWVudS5kZWZhdWx0cyA9IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFtb3VudCBvZiB0aW1lIHRvIGFuaW1hdGUgdGhlIG9wZW5pbmcgb2YgYSBzdWJtZW51IGluIG1zLlxuICAgICAgICAgKiBAb3B0aW9uXG4gICAgICAgICAqIEBleGFtcGxlIDI1MFxuICAgICAgICAgKi9cbiAgICAgICAgc2xpZGVTcGVlZDogMjUwLFxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBhIHNlcGFyYXRlIHN1Ym1lbnUgdG9nZ2xlIGJ1dHRvbi4gVGhpcyBhbGxvd3MgdGhlIHBhcmVudCBpdGVtIHRvIGhhdmUgYSBsaW5rLlxuICAgICAgICAgKiBAb3B0aW9uXG4gICAgICAgICAqIEBleGFtcGxlIHRydWVcbiAgICAgICAgICovXG4gICAgICAgIHN1Ym1lbnVUb2dnbGU6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRleHQgdXNlZCBmb3IgdGhlIHN1Ym1lbnUgdG9nZ2xlIGlmIGVuYWJsZWQuIFRoaXMgaXMgdXNlZCBmb3Igc2NyZWVuIHJlYWRlcnMgb25seS5cbiAgICAgICAgICogQG9wdGlvblxuICAgICAgICAgKiBAZXhhbXBsZSB0cnVlXG4gICAgICAgICAqL1xuICAgICAgICBzdWJtZW51VG9nZ2xlVGV4dDogJ1RvZ2dsZSBtZW51JyxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFsbG93IHRoZSBtZW51IHRvIGhhdmUgbXVsdGlwbGUgb3BlbiBwYW5lcy5cbiAgICAgICAgICogQG9wdGlvblxuICAgICAgICAgKiBAZXhhbXBsZSB0cnVlXG4gICAgICAgICAqL1xuICAgICAgICBtdWx0aU9wZW46IHRydWVcbiAgICB9O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuICAgIEZvdW5kYXRpb24ucGx1Z2luKEFjY29yZGlvbk1lbnUsICdBY2NvcmRpb25NZW51Jyk7XG5cbn0oalF1ZXJ5KTsiLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogRXF1YWxpemVyIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5lcXVhbGl6ZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyIGlmIGVxdWFsaXplciBjb250YWlucyBpbWFnZXNcbiAqL1xuXG5jbGFzcyBFcXVhbGl6ZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBFcXVhbGl6ZXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgRXF1YWxpemVyI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucyl7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zICA9ICQuZXh0ZW5kKHt9LCBFcXVhbGl6ZXIuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0VxdWFsaXplcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBFcXVhbGl6ZXIgcGx1Z2luIGFuZCBjYWxscyBmdW5jdGlvbnMgdG8gZ2V0IGVxdWFsaXplciBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGVxSWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtZXF1YWxpemVyJykgfHwgJyc7XG4gICAgdmFyICR3YXRjaGVkID0gdGhpcy4kZWxlbWVudC5maW5kKGBbZGF0YS1lcXVhbGl6ZXItd2F0Y2g9XCIke2VxSWR9XCJdYCk7XG5cbiAgICB0aGlzLiR3YXRjaGVkID0gJHdhdGNoZWQubGVuZ3RoID8gJHdhdGNoZWQgOiB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWVxdWFsaXplci13YXRjaF0nKTtcbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtcmVzaXplJywgKGVxSWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnZXEnKSkpO1xuXHR0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtbXV0YXRlJywgKGVxSWQgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAnZXEnKSkpO1xuXG4gICAgdGhpcy5oYXNOZXN0ZWQgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ1tkYXRhLWVxdWFsaXplcl0nKS5sZW5ndGggPiAwO1xuICAgIHRoaXMuaXNOZXN0ZWQgPSB0aGlzLiRlbGVtZW50LnBhcmVudHNVbnRpbChkb2N1bWVudC5ib2R5LCAnW2RhdGEtZXF1YWxpemVyXScpLmxlbmd0aCA+IDA7XG4gICAgdGhpcy5pc09uID0gZmFsc2U7XG4gICAgdGhpcy5fYmluZEhhbmRsZXIgPSB7XG4gICAgICBvblJlc2l6ZU1lQm91bmQ6IHRoaXMuX29uUmVzaXplTWUuYmluZCh0aGlzKSxcbiAgICAgIG9uUG9zdEVxdWFsaXplZEJvdW5kOiB0aGlzLl9vblBvc3RFcXVhbGl6ZWQuYmluZCh0aGlzKVxuICAgIH07XG5cbiAgICB2YXIgaW1ncyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW1nJyk7XG4gICAgdmFyIHRvb1NtYWxsO1xuICAgIGlmKHRoaXMub3B0aW9ucy5lcXVhbGl6ZU9uKXtcbiAgICAgIHRvb1NtYWxsID0gdGhpcy5fY2hlY2tNUSgpO1xuICAgICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCB0aGlzLl9jaGVja01RLmJpbmQodGhpcykpO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy5fZXZlbnRzKCk7XG4gICAgfVxuICAgIGlmKCh0b29TbWFsbCAhPT0gdW5kZWZpbmVkICYmIHRvb1NtYWxsID09PSBmYWxzZSkgfHwgdG9vU21hbGwgPT09IHVuZGVmaW5lZCl7XG4gICAgICBpZihpbWdzLmxlbmd0aCl7XG4gICAgICAgIEZvdW5kYXRpb24ub25JbWFnZXNMb2FkZWQoaW1ncywgdGhpcy5fcmVmbG93LmJpbmQodGhpcykpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuX3JlZmxvdygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGV2ZW50IGxpc3RlbmVycyBpZiB0aGUgYnJlYWtwb2ludCBpcyB0b28gc21hbGwuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcGF1c2VFdmVudHMoKSB7XG4gICAgdGhpcy5pc09uID0gZmFsc2U7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoe1xuICAgICAgJy56Zi5lcXVhbGl6ZXInOiB0aGlzLl9iaW5kSGFuZGxlci5vblBvc3RFcXVhbGl6ZWRCb3VuZCxcbiAgICAgICdyZXNpemVtZS56Zi50cmlnZ2VyJzogdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kLFxuXHQgICdtdXRhdGVtZS56Zi50cmlnZ2VyJzogdGhpcy5fYmluZEhhbmRsZXIub25SZXNpemVNZUJvdW5kXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogZnVuY3Rpb24gdG8gaGFuZGxlICRlbGVtZW50cyByZXNpemVtZS56Zi50cmlnZ2VyLCB3aXRoIGJvdW5kIHRoaXMgb24gX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX29uUmVzaXplTWUoZSkge1xuICAgIHRoaXMuX3JlZmxvdygpO1xuICB9XG5cbiAgLyoqXG4gICAqIGZ1bmN0aW9uIHRvIGhhbmRsZSAkZWxlbWVudHMgcG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXIsIHdpdGggYm91bmQgdGhpcyBvbiBfYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9vblBvc3RFcXVhbGl6ZWQoZSkge1xuICAgIGlmKGUudGFyZ2V0ICE9PSB0aGlzLiRlbGVtZW50WzBdKXsgdGhpcy5fcmVmbG93KCk7IH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIEVxdWFsaXplci5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgIGlmKHRoaXMuaGFzTmVzdGVkKXtcbiAgICAgIHRoaXMuJGVsZW1lbnQub24oJ3Bvc3RlcXVhbGl6ZWQuemYuZXF1YWxpemVyJywgdGhpcy5fYmluZEhhbmRsZXIub25Qb3N0RXF1YWxpemVkQm91bmQpO1xuICAgIH1lbHNle1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZCk7XG5cdCAgdGhpcy4kZWxlbWVudC5vbignbXV0YXRlbWUuemYudHJpZ2dlcicsIHRoaXMuX2JpbmRIYW5kbGVyLm9uUmVzaXplTWVCb3VuZCk7XG4gICAgfVxuICAgIHRoaXMuaXNPbiA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgdG8gdGhlIG1pbmltdW0gcmVxdWlyZWQgc2l6ZS5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja01RKCkge1xuICAgIHZhciB0b29TbWFsbCA9ICFGb3VuZGF0aW9uLk1lZGlhUXVlcnkuaXModGhpcy5vcHRpb25zLmVxdWFsaXplT24pO1xuICAgIGlmKHRvb1NtYWxsKXtcbiAgICAgIGlmKHRoaXMuaXNPbil7XG4gICAgICAgIHRoaXMuX3BhdXNlRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgaWYoIXRoaXMuaXNPbil7XG4gICAgICAgIHRoaXMuX2V2ZW50cygpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG9vU21hbGw7XG4gIH1cblxuICAvKipcbiAgICogQSBub29wIHZlcnNpb24gZm9yIHRoZSBwbHVnaW5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9raWxsc3dpdGNoKCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBFcXVhbGl6ZXIgdXBvbiBET00gY2hhbmdlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVmbG93KCkge1xuICAgIGlmKCF0aGlzLm9wdGlvbnMuZXF1YWxpemVPblN0YWNrKXtcbiAgICAgIGlmKHRoaXMuX2lzU3RhY2tlZCgpKXtcbiAgICAgICAgdGhpcy4kd2F0Y2hlZC5jc3MoJ2hlaWdodCcsICdhdXRvJyk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lcXVhbGl6ZUJ5Um93KSB7XG4gICAgICB0aGlzLmdldEhlaWdodHNCeVJvdyh0aGlzLmFwcGx5SGVpZ2h0QnlSb3cuYmluZCh0aGlzKSk7XG4gICAgfWVsc2V7XG4gICAgICB0aGlzLmdldEhlaWdodHModGhpcy5hcHBseUhlaWdodC5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWFudWFsbHkgZGV0ZXJtaW5lcyBpZiB0aGUgZmlyc3QgMiBlbGVtZW50cyBhcmUgKk5PVCogc3RhY2tlZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pc1N0YWNrZWQoKSB7XG4gICAgaWYgKCF0aGlzLiR3YXRjaGVkWzBdIHx8ICF0aGlzLiR3YXRjaGVkWzFdKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJHdhdGNoZWRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wICE9PSB0aGlzLiR3YXRjaGVkWzFdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgb3V0ZXIgaGVpZ2h0cyBvZiBjaGlsZHJlbiBjb250YWluZWQgd2l0aGluIGFuIEVxdWFsaXplciBwYXJlbnQgYW5kIHJldHVybnMgdGhlbSBpbiBhbiBhcnJheVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIEEgbm9uLW9wdGlvbmFsIGNhbGxiYWNrIHRvIHJldHVybiB0aGUgaGVpZ2h0cyBhcnJheSB0by5cbiAgICogQHJldHVybnMge0FycmF5fSBoZWlnaHRzIC0gQW4gYXJyYXkgb2YgaGVpZ2h0cyBvZiBjaGlsZHJlbiB3aXRoaW4gRXF1YWxpemVyIGNvbnRhaW5lclxuICAgKi9cbiAgZ2V0SGVpZ2h0cyhjYikge1xuICAgIHZhciBoZWlnaHRzID0gW107XG4gICAgZm9yKHZhciBpID0gMCwgbGVuID0gdGhpcy4kd2F0Y2hlZC5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICB0aGlzLiR3YXRjaGVkW2ldLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgIGhlaWdodHMucHVzaCh0aGlzLiR3YXRjaGVkW2ldLm9mZnNldEhlaWdodCk7XG4gICAgfVxuICAgIGNiKGhlaWdodHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbmRzIHRoZSBvdXRlciBoZWlnaHRzIG9mIGNoaWxkcmVuIGNvbnRhaW5lZCB3aXRoaW4gYW4gRXF1YWxpemVyIHBhcmVudCBhbmQgcmV0dXJucyB0aGVtIGluIGFuIGFycmF5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gQSBub24tb3B0aW9uYWwgY2FsbGJhY2sgdG8gcmV0dXJuIHRoZSBoZWlnaHRzIGFycmF5IHRvLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGdyb3VwcyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXIgZ3JvdXBlZCBieSByb3cgd2l0aCBlbGVtZW50LGhlaWdodCBhbmQgbWF4IGFzIGxhc3QgY2hpbGRcbiAgICovXG4gIGdldEhlaWdodHNCeVJvdyhjYikge1xuICAgIHZhciBsYXN0RWxUb3BPZmZzZXQgPSAodGhpcy4kd2F0Y2hlZC5sZW5ndGggPyB0aGlzLiR3YXRjaGVkLmZpcnN0KCkub2Zmc2V0KCkudG9wIDogMCksXG4gICAgICAgIGdyb3VwcyA9IFtdLFxuICAgICAgICBncm91cCA9IDA7XG4gICAgLy9ncm91cCBieSBSb3dcbiAgICBncm91cHNbZ3JvdXBdID0gW107XG4gICAgZm9yKHZhciBpID0gMCwgbGVuID0gdGhpcy4kd2F0Y2hlZC5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICB0aGlzLiR3YXRjaGVkW2ldLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcbiAgICAgIC8vbWF5YmUgY291bGQgdXNlIHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0VG9wXG4gICAgICB2YXIgZWxPZmZzZXRUb3AgPSAkKHRoaXMuJHdhdGNoZWRbaV0pLm9mZnNldCgpLnRvcDtcbiAgICAgIGlmIChlbE9mZnNldFRvcCE9bGFzdEVsVG9wT2Zmc2V0KSB7XG4gICAgICAgIGdyb3VwKys7XG4gICAgICAgIGdyb3Vwc1tncm91cF0gPSBbXTtcbiAgICAgICAgbGFzdEVsVG9wT2Zmc2V0PWVsT2Zmc2V0VG9wO1xuICAgICAgfVxuICAgICAgZ3JvdXBzW2dyb3VwXS5wdXNoKFt0aGlzLiR3YXRjaGVkW2ldLHRoaXMuJHdhdGNoZWRbaV0ub2Zmc2V0SGVpZ2h0XSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IDAsIGxuID0gZ3JvdXBzLmxlbmd0aDsgaiA8IGxuOyBqKyspIHtcbiAgICAgIHZhciBoZWlnaHRzID0gJChncm91cHNbal0pLm1hcChmdW5jdGlvbigpeyByZXR1cm4gdGhpc1sxXTsgfSkuZ2V0KCk7XG4gICAgICB2YXIgbWF4ICAgICAgICAgPSBNYXRoLm1heC5hcHBseShudWxsLCBoZWlnaHRzKTtcbiAgICAgIGdyb3Vwc1tqXS5wdXNoKG1heCk7XG4gICAgfVxuICAgIGNiKGdyb3Vwcyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlcyB0aGUgQ1NTIGhlaWdodCBwcm9wZXJ0eSBvZiBlYWNoIGNoaWxkIGluIGFuIEVxdWFsaXplciBwYXJlbnQgdG8gbWF0Y2ggdGhlIHRhbGxlc3RcbiAgICogQHBhcmFtIHthcnJheX0gaGVpZ2h0cyAtIEFuIGFycmF5IG9mIGhlaWdodHMgb2YgY2hpbGRyZW4gd2l0aGluIEVxdWFsaXplciBjb250YWluZXJcbiAgICogQGZpcmVzIEVxdWFsaXplciNwcmVlcXVhbGl6ZWRcbiAgICogQGZpcmVzIEVxdWFsaXplciNwb3N0ZXF1YWxpemVkXG4gICAqL1xuICBhcHBseUhlaWdodChoZWlnaHRzKSB7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGJlZm9yZSB0aGUgaGVpZ2h0cyBhcmUgYXBwbGllZFxuICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG5cbiAgICB0aGlzLiR3YXRjaGVkLmNzcygnaGVpZ2h0JywgbWF4KTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgaGF2ZSBiZWVuIGFwcGxpZWRcbiAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICAgKi9cbiAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkLnpmLmVxdWFsaXplcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZXMgdGhlIENTUyBoZWlnaHQgcHJvcGVydHkgb2YgZWFjaCBjaGlsZCBpbiBhbiBFcXVhbGl6ZXIgcGFyZW50IHRvIG1hdGNoIHRoZSB0YWxsZXN0IGJ5IHJvd1xuICAgKiBAcGFyYW0ge2FycmF5fSBncm91cHMgLSBBbiBhcnJheSBvZiBoZWlnaHRzIG9mIGNoaWxkcmVuIHdpdGhpbiBFcXVhbGl6ZXIgY29udGFpbmVyIGdyb3VwZWQgYnkgcm93IHdpdGggZWxlbWVudCxoZWlnaHQgYW5kIG1heCBhcyBsYXN0IGNoaWxkXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkXG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcHJlZXF1YWxpemVkcm93XG4gICAqIEBmaXJlcyBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZHJvd1xuICAgKiBAZmlyZXMgRXF1YWxpemVyI3Bvc3RlcXVhbGl6ZWRcbiAgICovXG4gIGFwcGx5SGVpZ2h0QnlSb3coZ3JvdXBzKSB7XG4gICAgLyoqXG4gICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIGFyZSBhcHBsaWVkXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWQuemYuZXF1YWxpemVyJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsZW4gOyBpKyspIHtcbiAgICAgIHZhciBncm91cHNJTGVuZ3RoID0gZ3JvdXBzW2ldLmxlbmd0aCxcbiAgICAgICAgICBtYXggPSBncm91cHNbaV1bZ3JvdXBzSUxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGdyb3Vwc0lMZW5ndGg8PTIpIHtcbiAgICAgICAgJChncm91cHNbaV1bMF1bMF0pLmNzcyh7J2hlaWdodCc6J2F1dG8nfSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgICogRmlyZXMgYmVmb3JlIHRoZSBoZWlnaHRzIHBlciByb3cgYXJlIGFwcGxpZWRcbiAgICAgICAgKiBAZXZlbnQgRXF1YWxpemVyI3ByZWVxdWFsaXplZHJvd1xuICAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwcmVlcXVhbGl6ZWRyb3cuemYuZXF1YWxpemVyJyk7XG4gICAgICBmb3IgKHZhciBqID0gMCwgbGVuSiA9IChncm91cHNJTGVuZ3RoLTEpOyBqIDwgbGVuSiA7IGorKykge1xuICAgICAgICAkKGdyb3Vwc1tpXVtqXVswXSkuY3NzKHsnaGVpZ2h0JzptYXh9KTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICAqIEZpcmVzIHdoZW4gdGhlIGhlaWdodHMgcGVyIHJvdyBoYXZlIGJlZW4gYXBwbGllZFxuICAgICAgICAqIEBldmVudCBFcXVhbGl6ZXIjcG9zdGVxdWFsaXplZHJvd1xuICAgICAgICAqL1xuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdwb3N0ZXF1YWxpemVkcm93LnpmLmVxdWFsaXplcicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIHRoZSBoZWlnaHRzIGhhdmUgYmVlbiBhcHBsaWVkXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncG9zdGVxdWFsaXplZC56Zi5lcXVhbGl6ZXInKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBFcXVhbGl6ZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLl9wYXVzZUV2ZW50cygpO1xuICAgIHRoaXMuJHdhdGNoZWQuY3NzKCdoZWlnaHQnLCAnYXV0bycpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogRGVmYXVsdCBzZXR0aW5ncyBmb3IgcGx1Z2luXG4gKi9cbkVxdWFsaXplci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEVuYWJsZSBoZWlnaHQgZXF1YWxpemF0aW9uIHdoZW4gc3RhY2tlZCBvbiBzbWFsbGVyIHNjcmVlbnMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBlcXVhbGl6ZU9uU3RhY2s6IGZhbHNlLFxuICAvKipcbiAgICogRW5hYmxlIGhlaWdodCBlcXVhbGl6YXRpb24gcm93IGJ5IHJvdy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGVxdWFsaXplQnlSb3c6IGZhbHNlLFxuICAvKipcbiAgICogU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbWluaW11bSBicmVha3BvaW50IHNpemUgdGhlIHBsdWdpbiBzaG91bGQgZXF1YWxpemUgaGVpZ2h0cyBvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgZXF1YWxpemVPbjogJydcbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihFcXVhbGl6ZXIsICdFcXVhbGl6ZXInKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIEludGVyY2hhbmdlIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5pbnRlcmNoYW5nZVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRpbWVyQW5kSW1hZ2VMb2FkZXJcbiAqL1xuXG5jbGFzcyBJbnRlcmNoYW5nZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEludGVyY2hhbmdlLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIEludGVyY2hhbmdlI2luaXRcbiAgICogQHBhcmFtIHtPYmplY3R9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIGFkZCB0aGUgdHJpZ2dlciB0by5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBJbnRlcmNoYW5nZS5kZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgdGhpcy5ydWxlcyA9IFtdO1xuICAgIHRoaXMuY3VycmVudFBhdGggPSAnJztcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ0ludGVyY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIEludGVyY2hhbmdlIHBsdWdpbiBhbmQgY2FsbHMgZnVuY3Rpb25zIHRvIGdldCBpbnRlcmNoYW5nZSBmdW5jdGlvbmluZyBvbiBsb2FkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHRoaXMuX2FkZEJyZWFrcG9pbnRzKCk7XG4gICAgdGhpcy5fZ2VuZXJhdGVSdWxlcygpO1xuICAgIHRoaXMuX3JlZmxvdygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgSW50ZXJjaGFuZ2UuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5pbnRlcmNoYW5nZScsIEZvdW5kYXRpb24udXRpbC50aHJvdHRsZSgoKSA9PiB7XG4gICAgICB0aGlzLl9yZWZsb3coKTtcbiAgICB9LCA1MCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxzIG5lY2Vzc2FyeSBmdW5jdGlvbnMgdG8gdXBkYXRlIEludGVyY2hhbmdlIHVwb24gRE9NIGNoYW5nZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZWZsb3coKSB7XG4gICAgdmFyIG1hdGNoO1xuXG4gICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGVhY2ggcnVsZSwgYnV0IG9ubHkgc2F2ZSB0aGUgbGFzdCBtYXRjaFxuICAgIGZvciAodmFyIGkgaW4gdGhpcy5ydWxlcykge1xuICAgICAgaWYodGhpcy5ydWxlcy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXNbaV07XG4gICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShydWxlLnF1ZXJ5KS5tYXRjaGVzKSB7XG4gICAgICAgICAgbWF0Y2ggPSBydWxlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB0aGlzLnJlcGxhY2UobWF0Y2gucGF0aCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIEZvdW5kYXRpb24gYnJlYWtwb2ludHMgYW5kIGFkZHMgdGhlbSB0byB0aGUgSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTIG9iamVjdC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkQnJlYWtwb2ludHMoKSB7XG4gICAgZm9yICh2YXIgaSBpbiBGb3VuZGF0aW9uLk1lZGlhUXVlcnkucXVlcmllcykge1xuICAgICAgaWYgKEZvdW5kYXRpb24uTWVkaWFRdWVyeS5xdWVyaWVzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIHZhciBxdWVyeSA9IEZvdW5kYXRpb24uTWVkaWFRdWVyeS5xdWVyaWVzW2ldO1xuICAgICAgICBJbnRlcmNoYW5nZS5TUEVDSUFMX1FVRVJJRVNbcXVlcnkubmFtZV0gPSBxdWVyeS52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBJbnRlcmNoYW5nZSBlbGVtZW50IGZvciB0aGUgcHJvdmlkZWQgbWVkaWEgcXVlcnkgKyBjb250ZW50IHBhaXJpbmdzXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdGhhdCBpcyBhbiBJbnRlcmNoYW5nZSBpbnN0YW5jZVxuICAgKiBAcmV0dXJucyB7QXJyYXl9IHNjZW5hcmlvcyAtIEFycmF5IG9mIG9iamVjdHMgdGhhdCBoYXZlICdtcScgYW5kICdwYXRoJyBrZXlzIHdpdGggY29ycmVzcG9uZGluZyBrZXlzXG4gICAqL1xuICBfZ2VuZXJhdGVSdWxlcyhlbGVtZW50KSB7XG4gICAgdmFyIHJ1bGVzTGlzdCA9IFtdO1xuICAgIHZhciBydWxlcztcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucnVsZXMpIHtcbiAgICAgIHJ1bGVzID0gdGhpcy5vcHRpb25zLnJ1bGVzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJ1bGVzID0gdGhpcy4kZWxlbWVudC5kYXRhKCdpbnRlcmNoYW5nZScpO1xuICAgIH1cbiAgICBcbiAgICBydWxlcyA9ICB0eXBlb2YgcnVsZXMgPT09ICdzdHJpbmcnID8gcnVsZXMubWF0Y2goL1xcWy4qP1xcXS9nKSA6IHJ1bGVzO1xuXG4gICAgZm9yICh2YXIgaSBpbiBydWxlcykge1xuICAgICAgaWYocnVsZXMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tpXS5zbGljZSgxLCAtMSkuc3BsaXQoJywgJyk7XG4gICAgICAgIHZhciBwYXRoID0gcnVsZS5zbGljZSgwLCAtMSkuam9pbignJyk7XG4gICAgICAgIHZhciBxdWVyeSA9IHJ1bGVbcnVsZS5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAoSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5XSkge1xuICAgICAgICAgIHF1ZXJ5ID0gSW50ZXJjaGFuZ2UuU1BFQ0lBTF9RVUVSSUVTW3F1ZXJ5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bGVzTGlzdC5wdXNoKHtcbiAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJ1bGVzID0gcnVsZXNMaXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYHNyY2AgcHJvcGVydHkgb2YgYW4gaW1hZ2UsIG9yIGNoYW5nZSB0aGUgSFRNTCBvZiBhIGNvbnRhaW5lciwgdG8gdGhlIHNwZWNpZmllZCBwYXRoLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGggLSBQYXRoIHRvIHRoZSBpbWFnZSBvciBIVE1MIHBhcnRpYWwuXG4gICAqIEBmaXJlcyBJbnRlcmNoYW5nZSNyZXBsYWNlZFxuICAgKi9cbiAgcmVwbGFjZShwYXRoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFBhdGggPT09IHBhdGgpIHJldHVybjtcblxuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIHRyaWdnZXIgPSAncmVwbGFjZWQuemYuaW50ZXJjaGFuZ2UnO1xuXG4gICAgLy8gUmVwbGFjaW5nIGltYWdlc1xuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdLm5vZGVOYW1lID09PSAnSU1HJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdzcmMnLCBwYXRoKS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy5jdXJyZW50UGF0aCA9IHBhdGg7XG4gICAgICB9KVxuICAgICAgLnRyaWdnZXIodHJpZ2dlcik7XG4gICAgfVxuICAgIC8vIFJlcGxhY2luZyBiYWNrZ3JvdW5kIGltYWdlc1xuICAgIGVsc2UgaWYgKHBhdGgubWF0Y2goL1xcLihnaWZ8anBnfGpwZWd8cG5nfHN2Z3x0aWZmKShbPyNdLiopPy9pKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5jc3MoeyAnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoJytwYXRoKycpJyB9KVxuICAgICAgICAgIC50cmlnZ2VyKHRyaWdnZXIpO1xuICAgIH1cbiAgICAvLyBSZXBsYWNpbmcgSFRNTFxuICAgIGVsc2Uge1xuICAgICAgJC5nZXQocGF0aCwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgX3RoaXMuJGVsZW1lbnQuaHRtbChyZXNwb25zZSlcbiAgICAgICAgICAgICAudHJpZ2dlcih0cmlnZ2VyKTtcbiAgICAgICAgJChyZXNwb25zZSkuZm91bmRhdGlvbigpO1xuICAgICAgICBfdGhpcy5jdXJyZW50UGF0aCA9IHBhdGg7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIGNvbnRlbnQgaW4gYW4gSW50ZXJjaGFuZ2UgZWxlbWVudCBpcyBkb25lIGJlaW5nIGxvYWRlZC5cbiAgICAgKiBAZXZlbnQgSW50ZXJjaGFuZ2UjcmVwbGFjZWRcbiAgICAgKi9cbiAgICAvLyB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3JlcGxhY2VkLnpmLmludGVyY2hhbmdlJyk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgYW4gaW5zdGFuY2Ugb2YgaW50ZXJjaGFuZ2UuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICAvL1RPRE8gdGhpcy5cbiAgfVxufVxuXG4vKipcbiAqIERlZmF1bHQgc2V0dGluZ3MgZm9yIHBsdWdpblxuICovXG5JbnRlcmNoYW5nZS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFJ1bGVzIHRvIGJlIGFwcGxpZWQgdG8gSW50ZXJjaGFuZ2UgZWxlbWVudHMuIFNldCB3aXRoIHRoZSBgZGF0YS1pbnRlcmNoYW5nZWAgYXJyYXkgbm90YXRpb24uXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUgez9hcnJheX1cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgcnVsZXM6IG51bGxcbn07XG5cbkludGVyY2hhbmdlLlNQRUNJQUxfUVVFUklFUyA9IHtcbiAgJ2xhbmRzY2FwZSc6ICdzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKScsXG4gICdwb3J0cmFpdCc6ICdzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpJyxcbiAgJ3JldGluYSc6ICdvbmx5IHNjcmVlbiBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksIG9ubHkgc2NyZWVuIGFuZCAobWluLS1tb3otZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSwgb25seSBzY3JlZW4gYW5kICgtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyLzEpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAxOTJkcGkpLCBvbmx5IHNjcmVlbiBhbmQgKG1pbi1yZXNvbHV0aW9uOiAyZHBweCknXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oSW50ZXJjaGFuZ2UsICdJbnRlcmNoYW5nZScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogTWFnZWxsYW4gbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLm1hZ2VsbGFuXG4gKi9cblxuY2xhc3MgTWFnZWxsYW4ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBNYWdlbGxhbi5cbiAgICogQGNsYXNzXG4gICAqIEBmaXJlcyBNYWdlbGxhbiNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgID0gJC5leHRlbmQoe30sIE1hZ2VsbGFuLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5jYWxjUG9pbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdNYWdlbGxhbicpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBNYWdlbGxhbiBwbHVnaW4gYW5kIGNhbGxzIGZ1bmN0aW9ucyB0byBnZXQgZXF1YWxpemVyIGZ1bmN0aW9uaW5nIG9uIGxvYWQuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ21hZ2VsbGFuJyk7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLiR0YXJnZXRzID0gJCgnW2RhdGEtbWFnZWxsYW4tdGFyZ2V0XScpO1xuICAgIHRoaXMuJGxpbmtzID0gdGhpcy4kZWxlbWVudC5maW5kKCdhJyk7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKHtcbiAgICAgICdkYXRhLXJlc2l6ZSc6IGlkLFxuICAgICAgJ2RhdGEtc2Nyb2xsJzogaWQsXG4gICAgICAnaWQnOiBpZFxuICAgIH0pO1xuICAgIHRoaXMuJGFjdGl2ZSA9ICQoKTtcbiAgICB0aGlzLnNjcm9sbFBvcyA9IHBhcnNlSW50KHdpbmRvdy5wYWdlWU9mZnNldCwgMTApO1xuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyBhbiBhcnJheSBvZiBwaXhlbCB2YWx1ZXMgdGhhdCBhcmUgdGhlIGRlbWFyY2F0aW9uIGxpbmVzIGJldHdlZW4gbG9jYXRpb25zIG9uIHRoZSBwYWdlLlxuICAgKiBDYW4gYmUgaW52b2tlZCBpZiBuZXcgZWxlbWVudHMgYXJlIGFkZGVkIG9yIHRoZSBzaXplIG9mIGEgbG9jYXRpb24gY2hhbmdlcy5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBjYWxjUG9pbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGJvZHkgPSBkb2N1bWVudC5ib2R5LFxuICAgICAgICBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG4gICAgdGhpcy5wb2ludHMgPSBbXTtcbiAgICB0aGlzLndpbkhlaWdodCA9IE1hdGgucm91bmQoTWF0aC5tYXgod2luZG93LmlubmVySGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCkpO1xuICAgIHRoaXMuZG9jSGVpZ2h0ID0gTWF0aC5yb3VuZChNYXRoLm1heChib2R5LnNjcm9sbEhlaWdodCwgYm9keS5vZmZzZXRIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5vZmZzZXRIZWlnaHQpKTtcblxuICAgIHRoaXMuJHRhcmdldHMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgdmFyICR0YXIgPSAkKHRoaXMpLFxuICAgICAgICAgIHB0ID0gTWF0aC5yb3VuZCgkdGFyLm9mZnNldCgpLnRvcCAtIF90aGlzLm9wdGlvbnMudGhyZXNob2xkKTtcbiAgICAgICR0YXIudGFyZ2V0UG9pbnQgPSBwdDtcbiAgICAgIF90aGlzLnBvaW50cy5wdXNoKHB0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIE1hZ2VsbGFuLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAkYm9keSA9ICQoJ2h0bWwsIGJvZHknKSxcbiAgICAgICAgb3B0cyA9IHtcbiAgICAgICAgICBkdXJhdGlvbjogX3RoaXMub3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbixcbiAgICAgICAgICBlYXNpbmc6ICAgX3RoaXMub3B0aW9ucy5hbmltYXRpb25FYXNpbmdcbiAgICAgICAgfTtcbiAgICAkKHdpbmRvdykub25lKCdsb2FkJywgZnVuY3Rpb24oKXtcbiAgICAgIGlmKF90aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpe1xuICAgICAgICBpZihsb2NhdGlvbi5oYXNoKXtcbiAgICAgICAgICBfdGhpcy5zY3JvbGxUb0xvYyhsb2NhdGlvbi5oYXNoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3RoaXMuY2FsY1BvaW50cygpO1xuICAgICAgX3RoaXMuX3VwZGF0ZUFjdGl2ZSgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy4kZWxlbWVudC5vbih7XG4gICAgICAncmVzaXplbWUuemYudHJpZ2dlcic6IHRoaXMucmVmbG93LmJpbmQodGhpcyksXG4gICAgICAnc2Nyb2xsbWUuemYudHJpZ2dlcic6IHRoaXMuX3VwZGF0ZUFjdGl2ZS5iaW5kKHRoaXMpXG4gICAgfSkub24oJ2NsaWNrLnpmLm1hZ2VsbGFuJywgJ2FbaHJlZl49XCIjXCJdJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBhcnJpdmFsICAgPSB0aGlzLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICBfdGhpcy5zY3JvbGxUb0xvYyhhcnJpdmFsKTtcbiAgICAgIH0pO1xuICAgICQod2luZG93KS5vbigncG9wc3RhdGUnLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZihfdGhpcy5vcHRpb25zLmRlZXBMaW5raW5nKSB7XG4gICAgICAgIF90aGlzLnNjcm9sbFRvTG9jKHdpbmRvdy5sb2NhdGlvbi5oYXNoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBzY3JvbGwgdG8gYSBnaXZlbiBsb2NhdGlvbiBvbiB0aGUgcGFnZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGxvYyAtIGEgcHJvcGVybHkgZm9ybWF0dGVkIGpRdWVyeSBpZCBzZWxlY3Rvci4gRXhhbXBsZTogJyNmb28nXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgc2Nyb2xsVG9Mb2MobG9jKSB7XG4gICAgLy8gRG8gbm90aGluZyBpZiB0YXJnZXQgZG9lcyBub3QgZXhpc3QgdG8gcHJldmVudCBlcnJvcnNcbiAgICBpZiAoISQobG9jKS5sZW5ndGgpIHtyZXR1cm4gZmFsc2U7fVxuICAgIHRoaXMuX2luVHJhbnNpdGlvbiA9IHRydWU7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc2Nyb2xsUG9zID0gTWF0aC5yb3VuZCgkKGxvYykub2Zmc2V0KCkudG9wIC0gdGhpcy5vcHRpb25zLnRocmVzaG9sZCAvIDIgLSB0aGlzLm9wdGlvbnMuYmFyT2Zmc2V0KTtcblxuICAgICQoJ2h0bWwsIGJvZHknKS5zdG9wKHRydWUpLmFuaW1hdGUoXG4gICAgICB7IHNjcm9sbFRvcDogc2Nyb2xsUG9zIH0sXG4gICAgICB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24sXG4gICAgICB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uRWFzaW5nLFxuICAgICAgZnVuY3Rpb24oKSB7X3RoaXMuX2luVHJhbnNpdGlvbiA9IGZhbHNlOyBfdGhpcy5fdXBkYXRlQWN0aXZlKCl9XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyBuZWNlc3NhcnkgZnVuY3Rpb25zIHRvIHVwZGF0ZSBNYWdlbGxhbiB1cG9uIERPTSBjaGFuZ2VcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICByZWZsb3coKSB7XG4gICAgdGhpcy5jYWxjUG9pbnRzKCk7XG4gICAgdGhpcy5fdXBkYXRlQWN0aXZlKCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdmlzaWJpbGl0eSBvZiBhbiBhY3RpdmUgbG9jYXRpb24gbGluaywgYW5kIHVwZGF0ZXMgdGhlIHVybCBoYXNoIGZvciB0aGUgcGFnZSwgaWYgZGVlcExpbmtpbmcgZW5hYmxlZC5cbiAgICogQHByaXZhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBNYWdlbGxhbiN1cGRhdGVcbiAgICovXG4gIF91cGRhdGVBY3RpdmUoLypldnQsIGVsZW0sIHNjcm9sbFBvcyovKSB7XG4gICAgaWYodGhpcy5faW5UcmFuc2l0aW9uKSB7cmV0dXJuO31cbiAgICB2YXIgd2luUG9zID0gLypzY3JvbGxQb3MgfHwqLyBwYXJzZUludCh3aW5kb3cucGFnZVlPZmZzZXQsIDEwKSxcbiAgICAgICAgY3VySWR4O1xuXG4gICAgaWYod2luUG9zICsgdGhpcy53aW5IZWlnaHQgPT09IHRoaXMuZG9jSGVpZ2h0KXsgY3VySWR4ID0gdGhpcy5wb2ludHMubGVuZ3RoIC0gMTsgfVxuICAgIGVsc2UgaWYod2luUG9zIDwgdGhpcy5wb2ludHNbMF0peyBjdXJJZHggPSB1bmRlZmluZWQ7IH1cbiAgICBlbHNle1xuICAgICAgdmFyIGlzRG93biA9IHRoaXMuc2Nyb2xsUG9zIDwgd2luUG9zLFxuICAgICAgICAgIF90aGlzID0gdGhpcyxcbiAgICAgICAgICBjdXJWaXNpYmxlID0gdGhpcy5wb2ludHMuZmlsdGVyKGZ1bmN0aW9uKHAsIGkpe1xuICAgICAgICAgICAgcmV0dXJuIGlzRG93biA/IHAgLSBfdGhpcy5vcHRpb25zLmJhck9mZnNldCA8PSB3aW5Qb3MgOiBwIC0gX3RoaXMub3B0aW9ucy5iYXJPZmZzZXQgLSBfdGhpcy5vcHRpb25zLnRocmVzaG9sZCA8PSB3aW5Qb3M7XG4gICAgICAgICAgfSk7XG4gICAgICBjdXJJZHggPSBjdXJWaXNpYmxlLmxlbmd0aCA/IGN1clZpc2libGUubGVuZ3RoIC0gMSA6IDA7XG4gICAgfVxuXG4gICAgdGhpcy4kYWN0aXZlLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG4gICAgdGhpcy4kYWN0aXZlID0gdGhpcy4kbGlua3MuZmlsdGVyKCdbaHJlZj1cIiMnICsgdGhpcy4kdGFyZ2V0cy5lcShjdXJJZHgpLmRhdGEoJ21hZ2VsbGFuLXRhcmdldCcpICsgJ1wiXScpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpe1xuICAgICAgdmFyIGhhc2ggPSBcIlwiO1xuICAgICAgaWYoY3VySWR4ICE9IHVuZGVmaW5lZCl7XG4gICAgICAgIGhhc2ggPSB0aGlzLiRhY3RpdmVbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICB9XG4gICAgICBpZihoYXNoICE9PSB3aW5kb3cubG9jYXRpb24uaGFzaCkge1xuICAgICAgICBpZih3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpe1xuICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBoYXNoKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zY3JvbGxQb3MgPSB3aW5Qb3M7XG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiBtYWdlbGxhbiBpcyBmaW5pc2hlZCB1cGRhdGluZyB0byB0aGUgbmV3IGFjdGl2ZSBlbGVtZW50LlxuICAgICAqIEBldmVudCBNYWdlbGxhbiN1cGRhdGVcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3VwZGF0ZS56Zi5tYWdlbGxhbicsIFt0aGlzLiRhY3RpdmVdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBhbiBpbnN0YW5jZSBvZiBNYWdlbGxhbiBhbmQgcmVzZXRzIHRoZSB1cmwgb2YgdGhlIHdpbmRvdy5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYubWFnZWxsYW4nKVxuICAgICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzfWApLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5hY3RpdmVDbGFzcyk7XG5cbiAgICBpZih0aGlzLm9wdGlvbnMuZGVlcExpbmtpbmcpe1xuICAgICAgdmFyIGhhc2ggPSB0aGlzLiRhY3RpdmVbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKGhhc2gsICcnKTtcbiAgICB9XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWZhdWx0IHNldHRpbmdzIGZvciBwbHVnaW5cbiAqL1xuTWFnZWxsYW4uZGVmYXVsdHMgPSB7XG4gIC8qKlxuICAgKiBBbW91bnQgb2YgdGltZSwgaW4gbXMsIHRoZSBhbmltYXRlZCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgYmV0d2VlbiBsb2NhdGlvbnMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgNTAwXG4gICAqL1xuICBhbmltYXRpb25EdXJhdGlvbjogNTAwLFxuICAvKipcbiAgICogQW5pbWF0aW9uIHN0eWxlIHRvIHVzZSB3aGVuIHNjcm9sbGluZyBiZXR3ZWVuIGxvY2F0aW9ucy4gQ2FuIGJlIGAnc3dpbmcnYCBvciBgJ2xpbmVhcidgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdsaW5lYXInXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vYW5pbWF0ZXxKcXVlcnkgYW5pbWF0ZX1cbiAgICovXG4gIGFuaW1hdGlvbkVhc2luZzogJ2xpbmVhcicsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIHRvIHVzZSBhcyBhIG1hcmtlciBmb3IgbG9jYXRpb24gY2hhbmdlcy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCA1MFxuICAgKi9cbiAgdGhyZXNob2xkOiA1MCxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gdGhlIGFjdGl2ZSBsb2NhdGlvbnMgbGluayBvbiB0aGUgbWFnZWxsYW4gY29udGFpbmVyLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdhY3RpdmUnXG4gICAqL1xuICBhY3RpdmVDbGFzczogJ2FjdGl2ZScsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHNjcmlwdCB0byBtYW5pcHVsYXRlIHRoZSB1cmwgb2YgdGhlIGN1cnJlbnQgcGFnZSwgYW5kIGlmIHN1cHBvcnRlZCwgYWx0ZXIgdGhlIGhpc3RvcnkuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBkZWVwTGlua2luZzogZmFsc2UsXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGl4ZWxzIHRvIG9mZnNldCB0aGUgc2Nyb2xsIG9mIHRoZSBwYWdlIG9uIGl0ZW0gY2xpY2sgaWYgdXNpbmcgYSBzdGlja3kgbmF2IGJhci5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICBiYXJPZmZzZXQ6IDBcbn1cblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKE1hZ2VsbGFuLCAnTWFnZWxsYW4nKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIE9mZkNhbnZhcyBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ub2ZmY2FudmFzXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1lZGlhUXVlcnlcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKi9cblxuY2xhc3MgT2ZmQ2FudmFzIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYW4gb2ZmLWNhbnZhcyB3cmFwcGVyLlxuICAgKiBAY2xhc3NcbiAgICogQGZpcmVzIE9mZkNhbnZhcyNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBpbml0aWFsaXplLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE9mZkNhbnZhcy5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuJGxhc3RUcmlnZ2VyID0gJCgpO1xuICAgIHRoaXMuJHRyaWdnZXJzID0gJCgpO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnT2ZmQ2FudmFzJylcbiAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlZ2lzdGVyKCdPZmZDYW52YXMnLCB7XG4gICAgICAnRVNDQVBFJzogJ2Nsb3NlJ1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG9mZi1jYW52YXMgd3JhcHBlciBieSBhZGRpbmcgdGhlIGV4aXQgb3ZlcmxheSAoaWYgbmVlZGVkKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoYGlzLXRyYW5zaXRpb24tJHt0aGlzLm9wdGlvbnMudHJhbnNpdGlvbn1gKTtcblxuICAgIC8vIEZpbmQgdHJpZ2dlcnMgdGhhdCBhZmZlY3QgdGhpcyBlbGVtZW50IGFuZCBhZGQgYXJpYS1leHBhbmRlZCB0byB0aGVtXG4gICAgdGhpcy4kdHJpZ2dlcnMgPSAkKGRvY3VtZW50KVxuICAgICAgLmZpbmQoJ1tkYXRhLW9wZW49XCInK2lkKydcIl0sIFtkYXRhLWNsb3NlPVwiJytpZCsnXCJdLCBbZGF0YS10b2dnbGU9XCInK2lkKydcIl0nKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKVxuICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG5cbiAgICAvLyBBZGQgYW4gb3ZlcmxheSBvdmVyIHRoZSBjb250ZW50IGlmIG5lY2Vzc2FyeVxuICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudE92ZXJsYXkgPT09IHRydWUpIHtcbiAgICAgIHZhciBvdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB2YXIgb3ZlcmxheVBvc2l0aW9uID0gJCh0aGlzLiRlbGVtZW50KS5jc3MoXCJwb3NpdGlvblwiKSA9PT0gJ2ZpeGVkJyA/ICdpcy1vdmVybGF5LWZpeGVkJyA6ICdpcy1vdmVybGF5LWFic29sdXRlJztcbiAgICAgIG92ZXJsYXkuc2V0QXR0cmlidXRlKCdjbGFzcycsICdqcy1vZmYtY2FudmFzLW92ZXJsYXkgJyArIG92ZXJsYXlQb3NpdGlvbik7XG4gICAgICB0aGlzLiRvdmVybGF5ID0gJChvdmVybGF5KTtcbiAgICAgIGlmKG92ZXJsYXlQb3NpdGlvbiA9PT0gJ2lzLW92ZXJsYXktZml4ZWQnKSB7XG4gICAgICAgICQoJ2JvZHknKS5hcHBlbmQodGhpcy4kb3ZlcmxheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbGVtZW50LnNpYmxpbmdzKCdbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdJykuYXBwZW5kKHRoaXMuJG92ZXJsYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucy5pc1JldmVhbGVkID0gdGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgfHwgbmV3IFJlZ0V4cCh0aGlzLm9wdGlvbnMucmV2ZWFsQ2xhc3MsICdnJykudGVzdCh0aGlzLiRlbGVtZW50WzBdLmNsYXNzTmFtZSk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmlzUmV2ZWFsZWQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5yZXZlYWxPbiA9IHRoaXMub3B0aW9ucy5yZXZlYWxPbiB8fCB0aGlzLiRlbGVtZW50WzBdLmNsYXNzTmFtZS5tYXRjaCgvKHJldmVhbC1mb3ItbWVkaXVtfHJldmVhbC1mb3ItbGFyZ2UpL2cpWzBdLnNwbGl0KCctJylbMl07XG4gICAgICB0aGlzLl9zZXRNUUNoZWNrZXIoKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMudHJhbnNpdGlvblRpbWUgPT09IHRydWUpIHtcbiAgICAgIHRoaXMub3B0aW9ucy50cmFuc2l0aW9uVGltZSA9IHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoJCgnW2RhdGEtb2ZmLWNhbnZhc10nKVswXSkudHJhbnNpdGlvbkR1cmF0aW9uKSAqIDEwMDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXZlbnQgaGFuZGxlcnMgdG8gdGhlIG9mZi1jYW52YXMgd3JhcHBlciBhbmQgdGhlIGV4aXQgb3ZlcmxheS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYudHJpZ2dlciAuemYub2ZmY2FudmFzJykub24oe1xuICAgICAgJ29wZW4uemYudHJpZ2dlcic6IHRoaXMub3Blbi5iaW5kKHRoaXMpLFxuICAgICAgJ2Nsb3NlLnpmLnRyaWdnZXInOiB0aGlzLmNsb3NlLmJpbmQodGhpcyksXG4gICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgJ2tleWRvd24uemYub2ZmY2FudmFzJzogdGhpcy5faGFuZGxlS2V5Ym9hcmQuYmluZCh0aGlzKVxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgPT09IHRydWUpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID8gdGhpcy4kb3ZlcmxheSA6ICQoJ1tkYXRhLW9mZi1jYW52YXMtY29udGVudF0nKTtcbiAgICAgICR0YXJnZXQub24oeydjbGljay56Zi5vZmZjYW52YXMnOiB0aGlzLmNsb3NlLmJpbmQodGhpcyl9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBldmVudCBsaXN0ZW5lciBmb3IgZWxlbWVudHMgdGhhdCB3aWxsIHJldmVhbCBhdCBjZXJ0YWluIGJyZWFrcG9pbnRzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldE1RQ2hlY2tlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdChfdGhpcy5vcHRpb25zLnJldmVhbE9uKSkge1xuICAgICAgICBfdGhpcy5yZXZlYWwodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5yZXZlYWwoZmFsc2UpO1xuICAgICAgfVxuICAgIH0pLm9uZSgnbG9hZC56Zi5vZmZjYW52YXMnLCBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdChfdGhpcy5vcHRpb25zLnJldmVhbE9uKSkge1xuICAgICAgICBfdGhpcy5yZXZlYWwodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyB0aGUgcmV2ZWFsaW5nL2hpZGluZyB0aGUgb2ZmLWNhbnZhcyBhdCBicmVha3BvaW50cywgbm90IHRoZSBzYW1lIGFzIG9wZW4uXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZXZlYWxlZCAtIHRydWUgaWYgZWxlbWVudCBzaG91bGQgYmUgcmV2ZWFsZWQuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgcmV2ZWFsKGlzUmV2ZWFsZWQpIHtcbiAgICB2YXIgJGNsb3NlciA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtY2xvc2VdJyk7XG4gICAgaWYgKGlzUmV2ZWFsZWQpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIHRoaXMuaXNSZXZlYWxlZCA9IHRydWU7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZignb3Blbi56Zi50cmlnZ2VyIHRvZ2dsZS56Zi50cmlnZ2VyJyk7XG4gICAgICBpZiAoJGNsb3Nlci5sZW5ndGgpIHsgJGNsb3Nlci5oaWRlKCk7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc1JldmVhbGVkID0gZmFsc2U7XG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdvcGVuLnpmLnRyaWdnZXIgdG9nZ2xlLnpmLnRyaWdnZXInKS5vbih7XG4gICAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICAgJ3RvZ2dsZS56Zi50cmlnZ2VyJzogdGhpcy50b2dnbGUuYmluZCh0aGlzKVxuICAgICAgfSk7XG4gICAgICBpZiAoJGNsb3Nlci5sZW5ndGgpIHtcbiAgICAgICAgJGNsb3Nlci5zaG93KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIHNjcm9sbGluZyBvZiB0aGUgYm9keSB3aGVuIG9mZmNhbnZhcyBpcyBvcGVuIG9uIG1vYmlsZSBTYWZhcmkgYW5kIG90aGVyIHRyb3VibGVzb21lIGJyb3dzZXJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N0b3BTY3JvbGxpbmcoZXZlbnQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUYWtlbiBhbmQgYWRhcHRlZCBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTY4ODk0NDcvcHJldmVudC1mdWxsLXBhZ2Utc2Nyb2xsaW5nLWlvc1xuICAvLyBPbmx5IHJlYWxseSB3b3JrcyBmb3IgeSwgbm90IHN1cmUgaG93IHRvIGV4dGVuZCB0byB4IG9yIGlmIHdlIG5lZWQgdG8uXG4gIF9yZWNvcmRTY3JvbGxhYmxlKGV2ZW50KSB7XG4gICAgbGV0IGVsZW0gPSB0aGlzOyAvLyBjYWxsZWQgZnJvbSBldmVudCBoYW5kbGVyIGNvbnRleHQgd2l0aCB0aGlzIGFzIGVsZW1cblxuICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBzY3JvbGxhYmxlIChjb250ZW50IG92ZXJmbG93cyksIHRoZW4uLi5cbiAgICBpZiAoZWxlbS5zY3JvbGxIZWlnaHQgIT09IGVsZW0uY2xpZW50SGVpZ2h0KSB7XG4gICAgICAvLyBJZiB3ZSdyZSBhdCB0aGUgdG9wLCBzY3JvbGwgZG93biBvbmUgcGl4ZWwgdG8gYWxsb3cgc2Nyb2xsaW5nIHVwXG4gICAgICBpZiAoZWxlbS5zY3JvbGxUb3AgPT09IDApIHtcbiAgICAgICAgZWxlbS5zY3JvbGxUb3AgPSAxO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UncmUgYXQgdGhlIGJvdHRvbSwgc2Nyb2xsIHVwIG9uZSBwaXhlbCB0byBhbGxvdyBzY3JvbGxpbmcgZG93blxuICAgICAgaWYgKGVsZW0uc2Nyb2xsVG9wID09PSBlbGVtLnNjcm9sbEhlaWdodCAtIGVsZW0uY2xpZW50SGVpZ2h0KSB7XG4gICAgICAgIGVsZW0uc2Nyb2xsVG9wID0gZWxlbS5zY3JvbGxIZWlnaHQgLSBlbGVtLmNsaWVudEhlaWdodCAtIDE7XG4gICAgICB9XG4gICAgfVxuICAgIGVsZW0uYWxsb3dVcCA9IGVsZW0uc2Nyb2xsVG9wID4gMDtcbiAgICBlbGVtLmFsbG93RG93biA9IGVsZW0uc2Nyb2xsVG9wIDwgKGVsZW0uc2Nyb2xsSGVpZ2h0IC0gZWxlbS5jbGllbnRIZWlnaHQpO1xuICAgIGVsZW0ubGFzdFkgPSBldmVudC5vcmlnaW5hbEV2ZW50LnBhZ2VZO1xuICB9XG5cbiAgX3N0b3BTY3JvbGxQcm9wYWdhdGlvbihldmVudCkge1xuICAgIGxldCBlbGVtID0gdGhpczsgLy8gY2FsbGVkIGZyb20gZXZlbnQgaGFuZGxlciBjb250ZXh0IHdpdGggdGhpcyBhcyBlbGVtXG4gICAgbGV0IHVwID0gZXZlbnQucGFnZVkgPCBlbGVtLmxhc3RZO1xuICAgIGxldCBkb3duID0gIXVwO1xuICAgIGVsZW0ubGFzdFkgPSBldmVudC5wYWdlWTtcblxuICAgIGlmKCh1cCAmJiBlbGVtLmFsbG93VXApIHx8IChkb3duICYmIGVsZW0uYWxsb3dEb3duKSkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnQgLSBFdmVudCBvYmplY3QgcGFzc2VkIGZyb20gbGlzdGVuZXIuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSB0cmlnZ2VyIC0gZWxlbWVudCB0aGF0IHRyaWdnZXJlZCB0aGUgb2ZmLWNhbnZhcyB0byBvcGVuLlxuICAgKiBAZmlyZXMgT2ZmQ2FudmFzI29wZW5lZFxuICAgKi9cbiAgb3BlbihldmVudCwgdHJpZ2dlcikge1xuICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykgfHwgdGhpcy5pc1JldmVhbGVkKSB7IHJldHVybjsgfVxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodHJpZ2dlcikge1xuICAgICAgdGhpcy4kbGFzdFRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZm9yY2VUbyA9PT0gJ3RvcCcpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5mb3JjZVRvID09PSAnYm90dG9tJykge1xuICAgICAgd2luZG93LnNjcm9sbFRvKDAsZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIG9mZi1jYW52YXMgbWVudSBvcGVucy5cbiAgICAgKiBAZXZlbnQgT2ZmQ2FudmFzI29wZW5lZFxuICAgICAqL1xuICAgIF90aGlzLiRlbGVtZW50LmFkZENsYXNzKCdpcy1vcGVuJylcblxuICAgIHRoaXMuJHRyaWdnZXJzLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKVxuICAgICAgICAudHJpZ2dlcignb3BlbmVkLnpmLm9mZmNhbnZhcycpO1xuXG4gICAgLy8gSWYgYGNvbnRlbnRTY3JvbGxgIGlzIHNldCB0byBmYWxzZSwgYWRkIGNsYXNzIGFuZCBkaXNhYmxlIHNjcm9sbGluZyBvbiB0b3VjaCBkZXZpY2VzLlxuICAgIGlmICh0aGlzLm9wdGlvbnMuY29udGVudFNjcm9sbCA9PT0gZmFsc2UpIHtcbiAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnaXMtb2ZmLWNhbnZhcy1vcGVuJykub24oJ3RvdWNobW92ZScsIHRoaXMuX3N0b3BTY3JvbGxpbmcpO1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigndG91Y2hzdGFydCcsIHRoaXMuX3JlY29yZFNjcm9sbGFibGUpO1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbFByb3BhZ2F0aW9uKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdpcy12aXNpYmxlJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2sgPT09IHRydWUgJiYgdGhpcy5vcHRpb25zLmNvbnRlbnRPdmVybGF5ID09PSB0cnVlKSB7XG4gICAgICB0aGlzLiRvdmVybGF5LmFkZENsYXNzKCdpcy1jbG9zYWJsZScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuYXV0b0ZvY3VzID09PSB0cnVlKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9uZShGb3VuZGF0aW9uLnRyYW5zaXRpb25lbmQodGhpcy4kZWxlbWVudCksIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FudmFzRm9jdXMgPSBfdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1hdXRvZm9jdXNdJyk7XG4gICAgICAgIGlmIChjYW52YXNGb2N1cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhbnZhc0ZvY3VzLmVxKDApLmZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy4kZWxlbWVudC5maW5kKCdhLCBidXR0b24nKS5lcSgwKS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cyA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5zaWJsaW5ncygnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLmF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLnRyYXBGb2N1cyh0aGlzLiRlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBvZmYtY2FudmFzIG1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIG9wdGlvbmFsIGNiIHRvIGZpcmUgYWZ0ZXIgY2xvc3VyZS5cbiAgICogQGZpcmVzIE9mZkNhbnZhcyNjbG9zZWRcbiAgICovXG4gIGNsb3NlKGNiKSB7XG4gICAgaWYgKCF0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykgfHwgdGhpcy5pc1JldmVhbGVkKSB7IHJldHVybjsgfVxuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKCdpcy1vcGVuJyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKVxuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyB3aGVuIHRoZSBvZmYtY2FudmFzIG1lbnUgb3BlbnMuXG4gICAgICAgKiBAZXZlbnQgT2ZmQ2FudmFzI2Nsb3NlZFxuICAgICAgICovXG4gICAgICAgIC50cmlnZ2VyKCdjbG9zZWQuemYub2ZmY2FudmFzJyk7XG5cbiAgICAvLyBJZiBgY29udGVudFNjcm9sbGAgaXMgc2V0IHRvIGZhbHNlLCByZW1vdmUgY2xhc3MgYW5kIHJlLWVuYWJsZSBzY3JvbGxpbmcgb24gdG91Y2ggZGV2aWNlcy5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbnRlbnRTY3JvbGwgPT09IGZhbHNlKSB7XG4gICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ2lzLW9mZi1jYW52YXMtb3BlbicpLm9mZigndG91Y2htb3ZlJywgdGhpcy5fc3RvcFNjcm9sbGluZyk7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZigndG91Y2hzdGFydCcsIHRoaXMuX3JlY29yZFNjcm9sbGFibGUpO1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmYoJ3RvdWNobW92ZScsIHRoaXMuX3N0b3BTY3JvbGxQcm9wYWdhdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5yZW1vdmVDbGFzcygnaXMtdmlzaWJsZScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrID09PSB0cnVlICYmIHRoaXMub3B0aW9ucy5jb250ZW50T3ZlcmxheSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5yZW1vdmVDbGFzcygnaXMtY2xvc2FibGUnKTtcbiAgICB9XG5cbiAgICB0aGlzLiR0cmlnZ2Vycy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnRyYXBGb2N1cyA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5zaWJsaW5ncygnW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XScpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICBGb3VuZGF0aW9uLktleWJvYXJkLnJlbGVhc2VGb2N1cyh0aGlzLiRlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVG9nZ2xlcyB0aGUgb2ZmLWNhbnZhcyBtZW51IG9wZW4gb3IgY2xvc2VkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gRXZlbnQgb2JqZWN0IHBhc3NlZCBmcm9tIGxpc3RlbmVyLlxuICAgKiBAcGFyYW0ge2pRdWVyeX0gdHJpZ2dlciAtIGVsZW1lbnQgdGhhdCB0cmlnZ2VyZWQgdGhlIG9mZi1jYW52YXMgdG8gb3Blbi5cbiAgICovXG4gIHRvZ2dsZShldmVudCwgdHJpZ2dlcikge1xuICAgIGlmICh0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpcy1vcGVuJykpIHtcbiAgICAgIHRoaXMuY2xvc2UoZXZlbnQsIHRyaWdnZXIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMub3BlbihldmVudCwgdHJpZ2dlcik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZXMga2V5Ym9hcmQgaW5wdXQgd2hlbiBkZXRlY3RlZC4gV2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLCB0aGUgb2ZmLWNhbnZhcyBtZW51IGNsb3NlcywgYW5kIGZvY3VzIGlzIHJlc3RvcmVkIHRvIHRoZSBlbGVtZW50IHRoYXQgb3BlbmVkIHRoZSBtZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9oYW5kbGVLZXlib2FyZChlKSB7XG4gICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ09mZkNhbnZhcycsIHtcbiAgICAgIGNsb3NlOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgdGhpcy4kbGFzdFRyaWdnZXIuZm9jdXMoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgICAgaGFuZGxlZDogKCkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIG9mZmNhbnZhcyBwbHVnaW4uXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmNsb3NlKCk7XG4gICAgdGhpcy4kZWxlbWVudC5vZmYoJy56Zi50cmlnZ2VyIC56Zi5vZmZjYW52YXMnKTtcbiAgICB0aGlzLiRvdmVybGF5Lm9mZignLnpmLm9mZmNhbnZhcycpO1xuXG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cbk9mZkNhbnZhcy5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEFsbG93IHRoZSB1c2VyIHRvIGNsaWNrIG91dHNpZGUgb2YgdGhlIG1lbnUgdG8gY2xvc2UgaXQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsb3NlT25DbGljazogdHJ1ZSxcblxuICAvKipcbiAgICogQWRkcyBhbiBvdmVybGF5IG9uIHRvcCBvZiBgW2RhdGEtb2ZmLWNhbnZhcy1jb250ZW50XWAuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNvbnRlbnRPdmVybGF5OiB0cnVlLFxuXG4gIC8qKlxuICAgKiBFbmFibGUvZGlzYWJsZSBzY3JvbGxpbmcgb2YgdGhlIG1haW4gY29udGVudCB3aGVuIGFuIG9mZiBjYW52YXMgcGFuZWwgaXMgb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgY29udGVudFNjcm9sbDogdHJ1ZSxcblxuICAvKipcbiAgICogQW1vdW50IG9mIHRpbWUgaW4gbXMgdGhlIG9wZW4gYW5kIGNsb3NlIHRyYW5zaXRpb24gcmVxdWlyZXMuIElmIG5vbmUgc2VsZWN0ZWQsIHB1bGxzIGZyb20gYm9keSBzdHlsZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAwXG4gICAqL1xuICB0cmFuc2l0aW9uVGltZTogMCxcblxuICAvKipcbiAgICogVHlwZSBvZiB0cmFuc2l0aW9uIGZvciB0aGUgb2ZmY2FudmFzIG1lbnUuIE9wdGlvbnMgYXJlICdwdXNoJywgJ2RldGFjaGVkJyBvciAnc2xpZGUnLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0IHB1c2hcbiAgICovXG4gIHRyYW5zaXRpb246ICdwdXNoJyxcblxuICAvKipcbiAgICogRm9yY2UgdGhlIHBhZ2UgdG8gc2Nyb2xsIHRvIHRvcCBvciBib3R0b20gb24gb3Blbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7P3N0cmluZ31cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgZm9yY2VUbzogbnVsbCxcblxuICAvKipcbiAgICogQWxsb3cgdGhlIG9mZmNhbnZhcyB0byByZW1haW4gb3BlbiBmb3IgY2VydGFpbiBicmVha3BvaW50cy5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGlzUmV2ZWFsZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBCcmVha3BvaW50IGF0IHdoaWNoIHRvIHJldmVhbC4gSlMgd2lsbCB1c2UgYSBSZWdFeHAgdG8gdGFyZ2V0IHN0YW5kYXJkIGNsYXNzZXMsIGlmIGNoYW5naW5nIGNsYXNzbmFtZXMsIHBhc3MgeW91ciBjbGFzcyB3aXRoIHRoZSBgcmV2ZWFsQ2xhc3NgIG9wdGlvbi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7P3N0cmluZ31cbiAgICogQGRlZmF1bHQgbnVsbFxuICAgKi9cbiAgcmV2ZWFsT246IG51bGwsXG5cbiAgLyoqXG4gICAqIEZvcmNlIGZvY3VzIHRvIHRoZSBvZmZjYW52YXMgb24gb3Blbi4gSWYgdHJ1ZSwgd2lsbCBmb2N1cyB0aGUgb3BlbmluZyB0cmlnZ2VyIG9uIGNsb3NlLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBhdXRvRm9jdXM6IHRydWUsXG5cbiAgLyoqXG4gICAqIENsYXNzIHVzZWQgdG8gZm9yY2UgYW4gb2ZmY2FudmFzIHRvIHJlbWFpbiBvcGVuLiBGb3VuZGF0aW9uIGRlZmF1bHRzIGZvciB0aGlzIGFyZSBgcmV2ZWFsLWZvci1sYXJnZWAgJiBgcmV2ZWFsLWZvci1tZWRpdW1gLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0IHJldmVhbC1mb3ItXG4gICAqIEB0b2RvIGltcHJvdmUgdGhlIHJlZ2V4IHRlc3RpbmcgZm9yIHRoaXMuXG4gICAqL1xuICByZXZlYWxDbGFzczogJ3JldmVhbC1mb3ItJyxcblxuICAvKipcbiAgICogVHJpZ2dlcnMgb3B0aW9uYWwgZm9jdXMgdHJhcHBpbmcgd2hlbiBvcGVuaW5nIGFuIG9mZmNhbnZhcy4gU2V0cyB0YWJpbmRleCBvZiBbZGF0YS1vZmYtY2FudmFzLWNvbnRlbnRdIHRvIC0xIGZvciBhY2Nlc3NpYmlsaXR5IHB1cnBvc2VzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgdHJhcEZvY3VzOiBmYWxzZVxufVxuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oT2ZmQ2FudmFzLCAnT2ZmQ2FudmFzJyk7XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBSZXNwb25zaXZlTWVudSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmVzcG9uc2l2ZU1lbnVcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudHJpZ2dlcnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubWVkaWFRdWVyeVxuICovXG5cbmNsYXNzIFJlc3BvbnNpdmVNZW51IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSByZXNwb25zaXZlIG1lbnUuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZU1lbnUjaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgZHJvcGRvd24gbWVudS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgIHRoaXMucnVsZXMgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtbWVudScpO1xuICAgIHRoaXMuY3VycmVudE1xID0gbnVsbDtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBudWxsO1xuXG4gICAgdGhpcy5faW5pdCgpO1xuICAgIHRoaXMuX2V2ZW50cygpO1xuXG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnUmVzcG9uc2l2ZU1lbnUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgTWVudSBieSBwYXJzaW5nIHRoZSBjbGFzc2VzIGZyb20gdGhlICdkYXRhLVJlc3BvbnNpdmVNZW51JyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgLy8gVGhlIGZpcnN0IHRpbWUgYW4gSW50ZXJjaGFuZ2UgcGx1Z2luIGlzIGluaXRpYWxpemVkLCB0aGlzLnJ1bGVzIGlzIGNvbnZlcnRlZCBmcm9tIGEgc3RyaW5nIG9mIFwiY2xhc3Nlc1wiIHRvIGFuIG9iamVjdCBvZiBydWxlc1xuICAgIGlmICh0eXBlb2YgdGhpcy5ydWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBydWxlc1RyZWUgPSB7fTtcblxuICAgICAgLy8gUGFyc2UgcnVsZXMgZnJvbSBcImNsYXNzZXNcIiBwdWxsZWQgZnJvbSBkYXRhIGF0dHJpYnV0ZVxuICAgICAgbGV0IHJ1bGVzID0gdGhpcy5ydWxlcy5zcGxpdCgnICcpO1xuXG4gICAgICAvLyBJdGVyYXRlIHRocm91Z2ggZXZlcnkgcnVsZSBmb3VuZFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcnVsZSA9IHJ1bGVzW2ldLnNwbGl0KCctJyk7XG4gICAgICAgIGxldCBydWxlU2l6ZSA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMF0gOiAnc21hbGwnO1xuICAgICAgICBsZXQgcnVsZVBsdWdpbiA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMV0gOiBydWxlWzBdO1xuXG4gICAgICAgIGlmIChNZW51UGx1Z2luc1tydWxlUGx1Z2luXSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJ1bGVzVHJlZVtydWxlU2l6ZV0gPSBNZW51UGx1Z2luc1tydWxlUGx1Z2luXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJ1bGVzID0gcnVsZXNUcmVlO1xuICAgIH1cblxuICAgIGlmICghJC5pc0VtcHR5T2JqZWN0KHRoaXMucnVsZXMpKSB7XG4gICAgICB0aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH1cbiAgICAvLyBBZGQgZGF0YS1tdXRhdGUgc2luY2UgY2hpbGRyZW4gbWF5IG5lZWQgaXQuXG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdkYXRhLW11dGF0ZScsICh0aGlzLiRlbGVtZW50LmF0dHIoJ2RhdGEtbXV0YXRlJykgfHwgRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAncmVzcG9uc2l2ZS1tZW51JykpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudHMgZm9yIHRoZSBNZW51LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmVudHMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICQod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgZnVuY3Rpb24oKSB7XG4gICAgICBfdGhpcy5fY2hlY2tNZWRpYVF1ZXJpZXMoKTtcbiAgICB9KTtcbiAgICAvLyAkKHdpbmRvdykub24oJ3Jlc2l6ZS56Zi5SZXNwb25zaXZlTWVudScsIGZ1bmN0aW9uKCkge1xuICAgIC8vICAgX3RoaXMuX2NoZWNrTWVkaWFRdWVyaWVzKCk7XG4gICAgLy8gfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBjdXJyZW50IHNjcmVlbiB3aWR0aCBhZ2FpbnN0IGF2YWlsYWJsZSBtZWRpYSBxdWVyaWVzLiBJZiB0aGUgbWVkaWEgcXVlcnkgaGFzIGNoYW5nZWQsIGFuZCB0aGUgcGx1Z2luIG5lZWRlZCBoYXMgY2hhbmdlZCwgdGhlIHBsdWdpbnMgd2lsbCBzd2FwIG91dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfY2hlY2tNZWRpYVF1ZXJpZXMoKSB7XG4gICAgdmFyIG1hdGNoZWRNcSwgX3RoaXMgPSB0aGlzO1xuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBlYWNoIHJ1bGUgYW5kIGZpbmQgdGhlIGxhc3QgbWF0Y2hpbmcgcnVsZVxuICAgICQuZWFjaCh0aGlzLnJ1bGVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIGlmIChGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdChrZXkpKSB7XG4gICAgICAgIG1hdGNoZWRNcSA9IGtleTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIE5vIG1hdGNoPyBObyBkaWNlXG4gICAgaWYgKCFtYXRjaGVkTXEpIHJldHVybjtcblxuICAgIC8vIFBsdWdpbiBhbHJlYWR5IGluaXRpYWxpemVkPyBXZSBnb29kXG4gICAgaWYgKHRoaXMuY3VycmVudFBsdWdpbiBpbnN0YW5jZW9mIHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5wbHVnaW4pIHJldHVybjtcblxuICAgIC8vIFJlbW92ZSBleGlzdGluZyBwbHVnaW4tc3BlY2lmaWMgQ1NTIGNsYXNzZXNcbiAgICAkLmVhY2goTWVudVBsdWdpbnMsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIF90aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHZhbHVlLmNzc0NsYXNzKTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCB0aGUgQ1NTIGNsYXNzIGZvciB0aGUgbmV3IHBsdWdpblxuICAgIHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5ydWxlc1ttYXRjaGVkTXFdLmNzc0NsYXNzKTtcblxuICAgIC8vIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgbmV3IHBsdWdpblxuICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4pIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbmV3IHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5wbHVnaW4odGhpcy4kZWxlbWVudCwge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBpbnN0YW5jZSBvZiB0aGUgY3VycmVudCBwbHVnaW4gb24gdGhpcyBlbGVtZW50LCBhcyB3ZWxsIGFzIHRoZSB3aW5kb3cgcmVzaXplIGhhbmRsZXIgdGhhdCBzd2l0Y2hlcyB0aGUgcGx1Z2lucyBvdXQuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4uZGVzdHJveSgpO1xuICAgICQod2luZG93KS5vZmYoJy56Zi5SZXNwb25zaXZlTWVudScpO1xuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5SZXNwb25zaXZlTWVudS5kZWZhdWx0cyA9IHt9O1xuXG4vLyBUaGUgcGx1Z2luIG1hdGNoZXMgdGhlIHBsdWdpbiBjbGFzc2VzIHdpdGggdGhlc2UgcGx1Z2luIGluc3RhbmNlcy5cbnZhciBNZW51UGx1Z2lucyA9IHtcbiAgZHJvcGRvd246IHtcbiAgICBjc3NDbGFzczogJ2Ryb3Bkb3duJyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnNbJ2Ryb3Bkb3duLW1lbnUnXSB8fCBudWxsXG4gIH0sXG4gZHJpbGxkb3duOiB7XG4gICAgY3NzQ2xhc3M6ICdkcmlsbGRvd24nLFxuICAgIHBsdWdpbjogRm91bmRhdGlvbi5fcGx1Z2luc1snZHJpbGxkb3duJ10gfHwgbnVsbFxuICB9LFxuICBhY2NvcmRpb246IHtcbiAgICBjc3NDbGFzczogJ2FjY29yZGlvbi1tZW51JyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnNbJ2FjY29yZGlvbi1tZW51J10gfHwgbnVsbFxuICB9XG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oUmVzcG9uc2l2ZU1lbnUsICdSZXNwb25zaXZlTWVudScpO1xuXG59KGpRdWVyeSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbiFmdW5jdGlvbigkKSB7XG5cbi8qKlxuICogUmVzcG9uc2l2ZVRvZ2dsZSBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmVzcG9uc2l2ZVRvZ2dsZVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxuY2xhc3MgUmVzcG9uc2l2ZVRvZ2dsZSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFRhYiBCYXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZVRvZ2dsZSNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhdHRhY2ggdGFiIGJhciBmdW5jdGlvbmFsaXR5IHRvLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlcyB0byB0aGUgZGVmYXVsdCBwbHVnaW4gc2V0dGluZ3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFJlc3BvbnNpdmVUb2dnbGUuZGVmYXVsdHMsIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1Jlc3BvbnNpdmVUb2dnbGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgdGFiIGJhciBieSBmaW5kaW5nIHRoZSB0YXJnZXQgZWxlbWVudCwgdG9nZ2xpbmcgZWxlbWVudCwgYW5kIHJ1bm5pbmcgdXBkYXRlKCkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIHRhcmdldElEID0gdGhpcy4kZWxlbWVudC5kYXRhKCdyZXNwb25zaXZlLXRvZ2dsZScpO1xuICAgIGlmICghdGFyZ2V0SUQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1lvdXIgdGFiIGJhciBuZWVkcyBhbiBJRCBvZiBhIE1lbnUgYXMgdGhlIHZhbHVlIG9mIGRhdGEtdGFiLWJhci4nKTtcbiAgICB9XG5cbiAgICB0aGlzLiR0YXJnZXRNZW51ID0gJChgIyR7dGFyZ2V0SUR9YCk7XG4gICAgdGhpcy4kdG9nZ2xlciA9IHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtdG9nZ2xlXScpLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLmRhdGEoJ3RvZ2dsZScpO1xuICAgICAgcmV0dXJuICh0YXJnZXQgPT09IHRhcmdldElEIHx8IHRhcmdldCA9PT0gXCJcIik7XG4gICAgfSk7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9ucywgdGhpcy4kdGFyZ2V0TWVudS5kYXRhKCkpO1xuXG4gICAgLy8gSWYgdGhleSB3ZXJlIHNldCwgcGFyc2UgdGhlIGFuaW1hdGlvbiBjbGFzc2VzXG4gICAgaWYodGhpcy5vcHRpb25zLmFuaW1hdGUpIHtcbiAgICAgIGxldCBpbnB1dCA9IHRoaXMub3B0aW9ucy5hbmltYXRlLnNwbGl0KCcgJyk7XG5cbiAgICAgIHRoaXMuYW5pbWF0aW9uSW4gPSBpbnB1dFswXTtcbiAgICAgIHRoaXMuYW5pbWF0aW9uT3V0ID0gaW5wdXRbMV0gfHwgbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIG5lY2Vzc2FyeSBldmVudCBoYW5kbGVycyBmb3IgdGhlIHRhYiBiYXIgdG8gd29yay5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLl91cGRhdGVNcUhhbmRsZXIgPSB0aGlzLl91cGRhdGUuYmluZCh0aGlzKTtcblxuICAgICQod2luZG93KS5vbignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fdXBkYXRlTXFIYW5kbGVyKTtcblxuICAgIHRoaXMuJHRvZ2dsZXIub24oJ2NsaWNrLnpmLnJlc3BvbnNpdmVUb2dnbGUnLCB0aGlzLnRvZ2dsZU1lbnUuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHRoZSBjdXJyZW50IG1lZGlhIHF1ZXJ5IHRvIGRldGVybWluZSBpZiB0aGUgdGFiIGJhciBzaG91bGQgYmUgdmlzaWJsZSBvciBoaWRkZW4uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZSgpIHtcbiAgICAvLyBNb2JpbGVcbiAgICBpZiAoIUZvdW5kYXRpb24uTWVkaWFRdWVyeS5hdExlYXN0KHRoaXMub3B0aW9ucy5oaWRlRm9yKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5zaG93KCk7XG4gICAgICB0aGlzLiR0YXJnZXRNZW51LmhpZGUoKTtcbiAgICB9XG5cbiAgICAvLyBEZXNrdG9wXG4gICAgZWxzZSB7XG4gICAgICB0aGlzLiRlbGVtZW50LmhpZGUoKTtcbiAgICAgIHRoaXMuJHRhcmdldE1lbnUuc2hvdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBlbGVtZW50IGF0dGFjaGVkIHRvIHRoZSB0YWIgYmFyLiBUaGUgdG9nZ2xlIG9ubHkgaGFwcGVucyBpZiB0aGUgc2NyZWVuIGlzIHNtYWxsIGVub3VnaCB0byBhbGxvdyBpdC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBSZXNwb25zaXZlVG9nZ2xlI3RvZ2dsZWRcbiAgICovXG4gIHRvZ2dsZU1lbnUoKSB7XG4gICAgaWYgKCFGb3VuZGF0aW9uLk1lZGlhUXVlcnkuYXRMZWFzdCh0aGlzLm9wdGlvbnMuaGlkZUZvcikpIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgd2hlbiB0aGUgZWxlbWVudCBhdHRhY2hlZCB0byB0aGUgdGFiIGJhciB0b2dnbGVzLlxuICAgICAgICogQGV2ZW50IFJlc3BvbnNpdmVUb2dnbGUjdG9nZ2xlZFxuICAgICAgICovXG4gICAgICBpZih0aGlzLm9wdGlvbnMuYW5pbWF0ZSkge1xuICAgICAgICBpZiAodGhpcy4kdGFyZ2V0TWVudS5pcygnOmhpZGRlbicpKSB7XG4gICAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKHRoaXMuJHRhcmdldE1lbnUsIHRoaXMuYW5pbWF0aW9uSW4sICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgICAgICAgICB0aGlzLiR0YXJnZXRNZW51LmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VySGFuZGxlcignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIEZvdW5kYXRpb24uTW90aW9uLmFuaW1hdGVPdXQodGhpcy4kdGFyZ2V0TWVudSwgdGhpcy5hbmltYXRpb25PdXQsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigndG9nZ2xlZC56Zi5yZXNwb25zaXZlVG9nZ2xlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLiR0YXJnZXRNZW51LnRvZ2dsZSgwKTtcbiAgICAgICAgdGhpcy4kdGFyZ2V0TWVudS5maW5kKCdbZGF0YS1tdXRhdGVdJykudHJpZ2dlcignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ3RvZ2dsZWQuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCcuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuICAgIHRoaXMuJHRvZ2dsZXIub2ZmKCcuemYucmVzcG9uc2l2ZVRvZ2dsZScpO1xuXG4gICAgJCh3aW5kb3cpLm9mZignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fdXBkYXRlTXFIYW5kbGVyKTtcblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5SZXNwb25zaXZlVG9nZ2xlLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogVGhlIGJyZWFrcG9pbnQgYWZ0ZXIgd2hpY2ggdGhlIG1lbnUgaXMgYWx3YXlzIHNob3duLCBhbmQgdGhlIHRhYiBiYXIgaXMgaGlkZGVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdtZWRpdW0nXG4gICAqL1xuICBoaWRlRm9yOiAnbWVkaXVtJyxcblxuICAvKipcbiAgICogVG8gZGVjaWRlIGlmIHRoZSB0b2dnbGUgc2hvdWxkIGJlIGFuaW1hdGVkIG9yIG5vdC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFuaW1hdGU6IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oUmVzcG9uc2l2ZVRvZ2dsZSwgJ1Jlc3BvbnNpdmVUb2dnbGUnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFJldmVhbCBtb2R1bGUuXG4gKiBAbW9kdWxlIGZvdW5kYXRpb24ucmV2ZWFsXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmtleWJvYXJkXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLmJveFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvbiBpZiB1c2luZyBhbmltYXRpb25zXG4gKi9cblxuY2xhc3MgUmV2ZWFsIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgUmV2ZWFsLlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtqUXVlcnl9IGVsZW1lbnQgLSBqUXVlcnkgb2JqZWN0IHRvIHVzZSBmb3IgdGhlIG1vZGFsLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIG9wdGlvbmFsIHBhcmFtZXRlcnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIFJldmVhbC5kZWZhdWx0cywgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuX2luaXQoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1JldmVhbCcpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ1JldmVhbCcsIHtcbiAgICAgICdFTlRFUic6ICdvcGVuJyxcbiAgICAgICdTUEFDRSc6ICdvcGVuJyxcbiAgICAgICdFU0NBUEUnOiAnY2xvc2UnLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBtb2RhbCBieSBhZGRpbmcgdGhlIG92ZXJsYXkgYW5kIGNsb3NlIGJ1dHRvbnMsIChpZiBzZWxlY3RlZCkuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfaW5pdCgpIHtcbiAgICB0aGlzLmlkID0gdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpO1xuICAgIHRoaXMuaXNBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLmNhY2hlZCA9IHttcTogRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmN1cnJlbnR9O1xuICAgIHRoaXMuaXNNb2JpbGUgPSBtb2JpbGVTbmlmZigpO1xuXG4gICAgdGhpcy4kYW5jaG9yID0gJChgW2RhdGEtb3Blbj1cIiR7dGhpcy5pZH1cIl1gKS5sZW5ndGggPyAkKGBbZGF0YS1vcGVuPVwiJHt0aGlzLmlkfVwiXWApIDogJChgW2RhdGEtdG9nZ2xlPVwiJHt0aGlzLmlkfVwiXWApO1xuICAgIHRoaXMuJGFuY2hvci5hdHRyKHtcbiAgICAgICdhcmlhLWNvbnRyb2xzJzogdGhpcy5pZCxcbiAgICAgICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSxcbiAgICAgICd0YWJpbmRleCc6IDBcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbiB8fCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmdWxsJykpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5mdWxsU2NyZWVuID0gdHJ1ZTtcbiAgICAgIHRoaXMub3B0aW9ucy5vdmVybGF5ID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiAhdGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheSA9IHRoaXMuX21ha2VPdmVybGF5KHRoaXMuaWQpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ2RpYWxvZycsXG4gICAgICAgICdhcmlhLWhpZGRlbic6IHRydWUsXG4gICAgICAgICdkYXRhLXlldGktYm94JzogdGhpcy5pZCxcbiAgICAgICAgJ2RhdGEtcmVzaXplJzogdGhpcy5pZFxuICAgIH0pO1xuXG4gICAgaWYodGhpcy4kb3ZlcmxheSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5kZXRhY2goKS5hcHBlbmRUbyh0aGlzLiRvdmVybGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5kZXRhY2goKS5hcHBlbmRUbygkKHRoaXMub3B0aW9ucy5hcHBlbmRUbykpO1xuICAgICAgdGhpcy4kZWxlbWVudC5hZGRDbGFzcygnd2l0aG91dC1vdmVybGF5Jyk7XG4gICAgfVxuICAgIHRoaXMuX2V2ZW50cygpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmsgJiYgd2luZG93LmxvY2F0aW9uLmhhc2ggPT09ICggYCMke3RoaXMuaWR9YCkpIHtcbiAgICAgICQod2luZG93KS5vbmUoJ2xvYWQuemYucmV2ZWFsJywgdGhpcy5vcGVuLmJpbmQodGhpcykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIG92ZXJsYXkgZGl2IHRvIGRpc3BsYXkgYmVoaW5kIHRoZSBtb2RhbC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tYWtlT3ZlcmxheSgpIHtcbiAgICByZXR1cm4gJCgnPGRpdj48L2Rpdj4nKVxuICAgICAgLmFkZENsYXNzKCdyZXZlYWwtb3ZlcmxheScpXG4gICAgICAuYXBwZW5kVG8odGhpcy5vcHRpb25zLmFwcGVuZFRvKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHBvc2l0aW9uIG9mIG1vZGFsXG4gICAqIFRPRE86ICBGaWd1cmUgb3V0IGlmIHdlIGFjdHVhbGx5IG5lZWQgdG8gY2FjaGUgdGhlc2UgdmFsdWVzIG9yIGlmIGl0IGRvZXNuJ3QgbWF0dGVyXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfdXBkYXRlUG9zaXRpb24oKSB7XG4gICAgdmFyIHdpZHRoID0gdGhpcy4kZWxlbWVudC5vdXRlcldpZHRoKCk7XG4gICAgdmFyIG91dGVyV2lkdGggPSAkKHdpbmRvdykud2lkdGgoKTtcbiAgICB2YXIgaGVpZ2h0ID0gdGhpcy4kZWxlbWVudC5vdXRlckhlaWdodCgpO1xuICAgIHZhciBvdXRlckhlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTtcbiAgICB2YXIgbGVmdCwgdG9wO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuaE9mZnNldCA9PT0gJ2F1dG8nKSB7XG4gICAgICBsZWZ0ID0gcGFyc2VJbnQoKG91dGVyV2lkdGggLSB3aWR0aCkgLyAyLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSBwYXJzZUludCh0aGlzLm9wdGlvbnMuaE9mZnNldCwgMTApO1xuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLnZPZmZzZXQgPT09ICdhdXRvJykge1xuICAgICAgaWYgKGhlaWdodCA+IG91dGVySGVpZ2h0KSB7XG4gICAgICAgIHRvcCA9IHBhcnNlSW50KE1hdGgubWluKDEwMCwgb3V0ZXJIZWlnaHQgLyAxMCksIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvcCA9IHBhcnNlSW50KChvdXRlckhlaWdodCAtIGhlaWdodCkgLyA0LCAxMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvcCA9IHBhcnNlSW50KHRoaXMub3B0aW9ucy52T2Zmc2V0LCAxMCk7XG4gICAgfVxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHt0b3A6IHRvcCArICdweCd9KTtcbiAgICAvLyBvbmx5IHdvcnJ5IGFib3V0IGxlZnQgaWYgd2UgZG9uJ3QgaGF2ZSBhbiBvdmVybGF5IG9yIHdlIGhhdmVhICBob3Jpem9udGFsIG9mZnNldCxcbiAgICAvLyBvdGhlcndpc2Ugd2UncmUgcGVyZmVjdGx5IGluIHRoZSBtaWRkbGVcbiAgICBpZighdGhpcy4kb3ZlcmxheSB8fCAodGhpcy5vcHRpb25zLmhPZmZzZXQgIT09ICdhdXRvJykpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtsZWZ0OiBsZWZ0ICsgJ3B4J30pO1xuICAgICAgdGhpcy4kZWxlbWVudC5jc3Moe21hcmdpbjogJzBweCd9KTtcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgbW9kYWwuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZXZlbnRzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKHtcbiAgICAgICdvcGVuLnpmLnRyaWdnZXInOiB0aGlzLm9wZW4uYmluZCh0aGlzKSxcbiAgICAgICdjbG9zZS56Zi50cmlnZ2VyJzogKGV2ZW50LCAkZWxlbWVudCkgPT4ge1xuICAgICAgICBpZiAoKGV2ZW50LnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0pIHx8XG4gICAgICAgICAgICAoJChldmVudC50YXJnZXQpLnBhcmVudHMoJ1tkYXRhLWNsb3NhYmxlXScpWzBdID09PSAkZWxlbWVudCkpIHsgLy8gb25seSBjbG9zZSByZXZlYWwgd2hlbiBpdCdzIGV4cGxpY2l0bHkgY2FsbGVkXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2UuYXBwbHkodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAndG9nZ2xlLnpmLnRyaWdnZXInOiB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpLFxuICAgICAgJ3Jlc2l6ZW1lLnpmLnRyaWdnZXInOiBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgdGhpcy4kYW5jaG9yLm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUud2hpY2ggPT09IDEzIHx8IGUud2hpY2ggPT09IDMyKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljayAmJiB0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgdGhpcy4kb3ZlcmxheS5vZmYoJy56Zi5yZXZlYWwnKS5vbignY2xpY2suemYucmV2ZWFsJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQgPT09IF90aGlzLiRlbGVtZW50WzBdIHx8XG4gICAgICAgICAgJC5jb250YWlucyhfdGhpcy4kZWxlbWVudFswXSwgZS50YXJnZXQpIHx8XG4gICAgICAgICAgICAhJC5jb250YWlucyhkb2N1bWVudCwgZS50YXJnZXQpKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgICQod2luZG93KS5vbihgcG9wc3RhdGUuemYucmV2ZWFsOiR7dGhpcy5pZH1gLCB0aGlzLl9oYW5kbGVTdGF0ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBtb2RhbCBtZXRob2RzIG9uIGJhY2svZm9yd2FyZCBidXR0b24gY2xpY2tzIG9yIGFueSBvdGhlciBldmVudCB0aGF0IHRyaWdnZXJzIHBvcHN0YXRlLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2hhbmRsZVN0YXRlKGUpIHtcbiAgICBpZih3aW5kb3cubG9jYXRpb24uaGFzaCA9PT0gKCAnIycgKyB0aGlzLmlkKSAmJiAhdGhpcy5pc0FjdGl2ZSl7IHRoaXMub3BlbigpOyB9XG4gICAgZWxzZXsgdGhpcy5jbG9zZSgpOyB9XG4gIH1cblxuXG4gIC8qKlxuICAgKiBPcGVucyB0aGUgbW9kYWwgY29udHJvbGxlZCBieSBgdGhpcy4kYW5jaG9yYCwgYW5kIGNsb3NlcyBhbGwgb3RoZXJzIGJ5IGRlZmF1bHQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAZmlyZXMgUmV2ZWFsI2Nsb3NlbWVcbiAgICogQGZpcmVzIFJldmVhbCNvcGVuXG4gICAqL1xuICBvcGVuKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmspIHtcbiAgICAgIHZhciBoYXNoID0gYCMke3RoaXMuaWR9YDtcblxuICAgICAgaWYgKHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgaGFzaCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7XG5cbiAgICAvLyBNYWtlIGVsZW1lbnRzIGludmlzaWJsZSwgYnV0IHJlbW92ZSBkaXNwbGF5OiBub25lIHNvIHdlIGNhbiBnZXQgc2l6ZSBhbmQgcG9zaXRpb25pbmdcbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5jc3MoeyAndmlzaWJpbGl0eSc6ICdoaWRkZW4nIH0pXG4gICAgICAgIC5zaG93KClcbiAgICAgICAgLnNjcm9sbFRvcCgwKTtcbiAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIHRoaXMuJG92ZXJsYXkuY3NzKHsndmlzaWJpbGl0eSc6ICdoaWRkZW4nfSkuc2hvdygpO1xuICAgIH1cblxuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKCk7XG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuaGlkZSgpXG4gICAgICAuY3NzKHsgJ3Zpc2liaWxpdHknOiAnJyB9KTtcblxuICAgIGlmKHRoaXMuJG92ZXJsYXkpIHtcbiAgICAgIHRoaXMuJG92ZXJsYXkuY3NzKHsndmlzaWJpbGl0eSc6ICcnfSkuaGlkZSgpO1xuICAgICAgaWYodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFzdCcpKSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoJ2Zhc3QnKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnc2xvdycpKSB7XG4gICAgICAgIHRoaXMuJG92ZXJsYXkuYWRkQ2xhc3MoJ3Nsb3cnKTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGlmICghdGhpcy5vcHRpb25zLm11bHRpcGxlT3BlbmVkKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZpcmVzIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgbW9kYWwgb3BlbnMuXG4gICAgICAgKiBDbG9zZXMgYW55IG90aGVyIG1vZGFscyB0aGF0IGFyZSBjdXJyZW50bHkgb3BlblxuICAgICAgICogQGV2ZW50IFJldmVhbCNjbG9zZW1lXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY2xvc2VtZS56Zi5yZXZlYWwnLCB0aGlzLmlkKTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgZnVuY3Rpb24gYWRkUmV2ZWFsT3BlbkNsYXNzZXMoKSB7XG4gICAgICBpZiAoX3RoaXMuaXNNb2JpbGUpIHtcbiAgICAgICAgaWYoIV90aGlzLm9yaWdpbmFsU2Nyb2xsUG9zKSB7XG4gICAgICAgICAgX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgJCgnaHRtbCwgYm9keScpLmFkZENsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gTW90aW9uIFVJIG1ldGhvZCBvZiByZXZlYWxcbiAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGlvbkluKSB7XG4gICAgICBmdW5jdGlvbiBhZnRlckFuaW1hdGlvbigpe1xuICAgICAgICBfdGhpcy4kZWxlbWVudFxuICAgICAgICAgIC5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6IGZhbHNlLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogLTFcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5mb2N1cygpO1xuICAgICAgICBhZGRSZXZlYWxPcGVuQ2xhc3NlcygpO1xuICAgICAgICBGb3VuZGF0aW9uLktleWJvYXJkLnRyYXBGb2N1cyhfdGhpcy4kZWxlbWVudCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZUluKHRoaXMuJG92ZXJsYXksICdmYWRlLWluJyk7XG4gICAgICB9XG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kZWxlbWVudCwgdGhpcy5vcHRpb25zLmFuaW1hdGlvbkluLCAoKSA9PiB7XG4gICAgICAgIGlmKHRoaXMuJGVsZW1lbnQpIHsgLy8gcHJvdGVjdCBhZ2FpbnN0IG9iamVjdCBoYXZpbmcgYmVlbiByZW1vdmVkXG4gICAgICAgICAgdGhpcy5mb2N1c2FibGVFbGVtZW50cyA9IEZvdW5kYXRpb24uS2V5Ym9hcmQuZmluZEZvY3VzYWJsZSh0aGlzLiRlbGVtZW50KTtcbiAgICAgICAgICBhZnRlckFuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8galF1ZXJ5IG1ldGhvZCBvZiByZXZlYWxcbiAgICBlbHNlIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LnNob3coMCk7XG4gICAgICB9XG4gICAgICB0aGlzLiRlbGVtZW50LnNob3codGhpcy5vcHRpb25zLnNob3dEZWxheSk7XG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIGFjY2Vzc2liaWxpdHlcbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuYXR0cih7XG4gICAgICAgICdhcmlhLWhpZGRlbic6IGZhbHNlLFxuICAgICAgICAndGFiaW5kZXgnOiAtMVxuICAgICAgfSlcbiAgICAgIC5mb2N1cygpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQudHJhcEZvY3VzKHRoaXMuJGVsZW1lbnQpO1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgd2hlbiB0aGUgbW9kYWwgaGFzIHN1Y2Nlc3NmdWxseSBvcGVuZWQuXG4gICAgICogQGV2ZW50IFJldmVhbCNvcGVuXG4gICAgICovXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdvcGVuLnpmLnJldmVhbCcpO1xuXG4gICAgYWRkUmV2ZWFsT3BlbkNsYXNzZXMoKTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5fZXh0cmFIYW5kbGVycygpO1xuICAgIH0sIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgZXh0cmEgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBib2R5IGFuZCB3aW5kb3cgaWYgbmVjZXNzYXJ5LlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V4dHJhSGFuZGxlcnMoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBpZighdGhpcy4kZWxlbWVudCkgeyByZXR1cm47IH0gLy8gSWYgd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBjbGVhbnVwLCBkb24ndCBmcmVhayBvdXRcbiAgICB0aGlzLmZvY3VzYWJsZUVsZW1lbnRzID0gRm91bmRhdGlvbi5LZXlib2FyZC5maW5kRm9jdXNhYmxlKHRoaXMuJGVsZW1lbnQpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMub3ZlcmxheSAmJiB0aGlzLm9wdGlvbnMuY2xvc2VPbkNsaWNrICYmICF0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbikge1xuICAgICAgJCgnYm9keScpLm9uKCdjbGljay56Zi5yZXZlYWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmIChlLnRhcmdldCA9PT0gX3RoaXMuJGVsZW1lbnRbMF0gfHxcbiAgICAgICAgICAkLmNvbnRhaW5zKF90aGlzLiRlbGVtZW50WzBdLCBlLnRhcmdldCkgfHxcbiAgICAgICAgICAgICEkLmNvbnRhaW5zKGRvY3VtZW50LCBlLnRhcmdldCkpIHsgcmV0dXJuOyB9XG4gICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICQod2luZG93KS5vbigna2V5ZG93bi56Zi5yZXZlYWwnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgICAgICAgICBfdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGxvY2sgZm9jdXMgd2l0aGluIG1vZGFsIHdoaWxlIHRhYmJpbmdcbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdrZXlkb3duLnpmLnJldmVhbCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciAkdGFyZ2V0ID0gJCh0aGlzKTtcbiAgICAgIC8vIGhhbmRsZSBrZXlib2FyZCBldmVudCB3aXRoIGtleWJvYXJkIHV0aWxcbiAgICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQuaGFuZGxlS2V5KGUsICdSZXZlYWwnLCB7XG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy4kZWxlbWVudC5maW5kKCc6Zm9jdXMnKS5pcyhfdGhpcy4kZWxlbWVudC5maW5kKCdbZGF0YS1jbG9zZV0nKSkpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IC8vIHNldCBmb2N1cyBiYWNrIHRvIGFuY2hvciBpZiBjbG9zZSBidXR0b24gaGFzIGJlZW4gYWN0aXZhdGVkXG4gICAgICAgICAgICAgIF90aGlzLiRhbmNob3IuZm9jdXMoKTtcbiAgICAgICAgICAgIH0sIDEpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoJHRhcmdldC5pcyhfdGhpcy5mb2N1c2FibGVFbGVtZW50cykpIHsgLy8gZG9udCd0IHRyaWdnZXIgaWYgYWN1YWwgZWxlbWVudCBoYXMgZm9jdXMgKGkuZS4gaW5wdXRzLCBsaW5rcywgLi4uKVxuICAgICAgICAgICAgX3RoaXMub3BlbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNsb3NlT25Fc2MpIHtcbiAgICAgICAgICAgIF90aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICBfdGhpcy4kYW5jaG9yLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVkOiBmdW5jdGlvbihwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgIGlmIChwcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSBtb2RhbC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBSZXZlYWwjY2xvc2VkXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNBY3RpdmUgfHwgIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIC8vIE1vdGlvbiBVSSBtZXRob2Qgb2YgaGlkaW5nXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJG92ZXJsYXksICdmYWRlLW91dCcsIGZpbmlzaFVwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmaW5pc2hVcCgpO1xuICAgICAgfVxuXG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlT3V0KHRoaXMuJGVsZW1lbnQsIHRoaXMub3B0aW9ucy5hbmltYXRpb25PdXQpO1xuICAgIH1cbiAgICAvLyBqUXVlcnkgbWV0aG9kIG9mIGhpZGluZ1xuICAgIGVsc2Uge1xuXG4gICAgICB0aGlzLiRlbGVtZW50LmhpZGUodGhpcy5vcHRpb25zLmhpZGVEZWxheSk7XG5cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMub3ZlcmxheSkge1xuICAgICAgICB0aGlzLiRvdmVybGF5LmhpZGUoMCwgZmluaXNoVXApO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZpbmlzaFVwKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29uZGl0aW9uYWxzIHRvIHJlbW92ZSBleHRyYSBldmVudCBsaXN0ZW5lcnMgYWRkZWQgb24gb3BlblxuICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VPbkVzYykge1xuICAgICAgJCh3aW5kb3cpLm9mZigna2V5ZG93bi56Zi5yZXZlYWwnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5vdmVybGF5ICYmIHRoaXMub3B0aW9ucy5jbG9zZU9uQ2xpY2spIHtcbiAgICAgICQoJ2JvZHknKS5vZmYoJ2NsaWNrLnpmLnJldmVhbCcpO1xuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdrZXlkb3duLnpmLnJldmVhbCcpO1xuXG4gICAgZnVuY3Rpb24gZmluaXNoVXAoKSB7XG4gICAgICBpZiAoX3RoaXMuaXNNb2JpbGUpIHtcbiAgICAgICAgaWYgKCQoJy5yZXZlYWw6dmlzaWJsZScpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5yZW1vdmVDbGFzcygnaXMtcmV2ZWFsLW9wZW4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZihfdGhpcy5vcmlnaW5hbFNjcm9sbFBvcykge1xuICAgICAgICAgICQoJ2JvZHknKS5zY3JvbGxUb3AoX3RoaXMub3JpZ2luYWxTY3JvbGxQb3MpO1xuICAgICAgICAgIF90aGlzLm9yaWdpbmFsU2Nyb2xsUG9zID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICgkKCcucmV2ZWFsOnZpc2libGUnKS5sZW5ndGggID09PSAwKSB7XG4gICAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdpcy1yZXZlYWwtb3BlbicpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5yZWxlYXNlRm9jdXMoX3RoaXMuJGVsZW1lbnQpO1xuXG4gICAgICBfdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICAvKipcbiAgICAgICogRmlyZXMgd2hlbiB0aGUgbW9kYWwgaXMgZG9uZSBjbG9zaW5nLlxuICAgICAgKiBAZXZlbnQgUmV2ZWFsI2Nsb3NlZFxuICAgICAgKi9cbiAgICAgIF90aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2Nsb3NlZC56Zi5yZXZlYWwnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFJlc2V0cyB0aGUgbW9kYWwgY29udGVudFxuICAgICogVGhpcyBwcmV2ZW50cyBhIHJ1bm5pbmcgdmlkZW8gdG8ga2VlcCBnb2luZyBpbiB0aGUgYmFja2dyb3VuZFxuICAgICovXG4gICAgaWYgKHRoaXMub3B0aW9ucy5yZXNldE9uQ2xvc2UpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuaHRtbCh0aGlzLiRlbGVtZW50Lmh0bWwoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5pc0FjdGl2ZSA9IGZhbHNlO1xuICAgICBpZiAoX3RoaXMub3B0aW9ucy5kZWVwTGluaykge1xuICAgICAgIGlmICh3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSgnJywgZG9jdW1lbnQudGl0bGUsIHdpbmRvdy5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoYCMke3RoaXMuaWR9YCwgJycpKTtcbiAgICAgICB9IGVsc2Uge1xuICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICAgICB9XG4gICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSBvcGVuL2Nsb3NlZCBzdGF0ZSBvZiBhIG1vZGFsLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGEgbW9kYWwuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm92ZXJsYXkpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQuYXBwZW5kVG8oJCh0aGlzLm9wdGlvbnMuYXBwZW5kVG8pKTsgLy8gbW92ZSAkZWxlbWVudCBvdXRzaWRlIG9mICRvdmVybGF5IHRvIHByZXZlbnQgZXJyb3IgdW5yZWdpc3RlclBsdWdpbigpXG4gICAgICB0aGlzLiRvdmVybGF5LmhpZGUoKS5vZmYoKS5yZW1vdmUoKTtcbiAgICB9XG4gICAgdGhpcy4kZWxlbWVudC5oaWRlKCkub2ZmKCk7XG4gICAgdGhpcy4kYW5jaG9yLm9mZignLnpmJyk7XG4gICAgJCh3aW5kb3cpLm9mZihgLnpmLnJldmVhbDoke3RoaXMuaWR9YCk7XG5cbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH07XG59XG5cblJldmVhbC5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIE1vdGlvbi1VSSBjbGFzcyB0byB1c2UgZm9yIGFuaW1hdGVkIGVsZW1lbnRzLiBJZiBub25lIHVzZWQsIGRlZmF1bHRzIHRvIHNpbXBsZSBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIGFuaW1hdGlvbkluOiAnJyxcbiAgLyoqXG4gICAqIE1vdGlvbi1VSSBjbGFzcyB0byB1c2UgZm9yIGFuaW1hdGVkIGVsZW1lbnRzLiBJZiBub25lIHVzZWQsIGRlZmF1bHRzIHRvIHNpbXBsZSBzaG93L2hpZGUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIGFuaW1hdGlvbk91dDogJycsXG4gIC8qKlxuICAgKiBUaW1lLCBpbiBtcywgdG8gZGVsYXkgdGhlIG9wZW5pbmcgb2YgYSBtb2RhbCBhZnRlciBhIGNsaWNrIGlmIG5vIGFuaW1hdGlvbiB1c2VkLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDBcbiAgICovXG4gIHNob3dEZWxheTogMCxcbiAgLyoqXG4gICAqIFRpbWUsIGluIG1zLCB0byBkZWxheSB0aGUgY2xvc2luZyBvZiBhIG1vZGFsIGFmdGVyIGEgY2xpY2sgaWYgbm8gYW5pbWF0aW9uIHVzZWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMFxuICAgKi9cbiAgaGlkZURlbGF5OiAwLFxuICAvKipcbiAgICogQWxsb3dzIGEgY2xpY2sgb24gdGhlIGJvZHkvb3ZlcmxheSB0byBjbG9zZSB0aGUgbW9kYWwuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIGNsb3NlT25DbGljazogdHJ1ZSxcbiAgLyoqXG4gICAqIEFsbG93cyB0aGUgbW9kYWwgdG8gY2xvc2UgaWYgdGhlIHVzZXIgcHJlc3NlcyB0aGUgYEVTQ0FQRWAga2V5LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICBjbG9zZU9uRXNjOiB0cnVlLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgYWxsb3dzIG11bHRpcGxlIG1vZGFscyB0byBiZSBkaXNwbGF5ZWQgYXQgb25jZS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIG11bHRpcGxlT3BlbmVkOiBmYWxzZSxcbiAgLyoqXG4gICAqIERpc3RhbmNlLCBpbiBwaXhlbHMsIHRoZSBtb2RhbCBzaG91bGQgcHVzaCBkb3duIGZyb20gdGhlIHRvcCBvZiB0aGUgc2NyZWVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ8c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBhdXRvXG4gICAqL1xuICB2T2Zmc2V0OiAnYXV0bycsXG4gIC8qKlxuICAgKiBEaXN0YW5jZSwgaW4gcGl4ZWxzLCB0aGUgbW9kYWwgc2hvdWxkIHB1c2ggaW4gZnJvbSB0aGUgc2lkZSBvZiB0aGUgc2NyZWVuLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ8c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBhdXRvXG4gICAqL1xuICBoT2Zmc2V0OiAnYXV0bycsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGJlIGZ1bGxzY3JlZW4sIGNvbXBsZXRlbHkgYmxvY2tpbmcgb3V0IHRoZSByZXN0IG9mIHRoZSB2aWV3LiBKUyBjaGVja3MgZm9yIHRoaXMgYXMgd2VsbC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGZ1bGxTY3JlZW46IGZhbHNlLFxuICAvKipcbiAgICogUGVyY2VudGFnZSBvZiBzY3JlZW4gaGVpZ2h0IHRoZSBtb2RhbCBzaG91bGQgcHVzaCB1cCBmcm9tIHRoZSBib3R0b20gb2YgdGhlIHZpZXcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgMTBcbiAgICovXG4gIGJ0bU9mZnNldFBjdDogMTAsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGdlbmVyYXRlIGFuIG92ZXJsYXkgZGl2LCB3aGljaCB3aWxsIGNvdmVyIHRoZSB2aWV3IHdoZW4gbW9kYWwgb3BlbnMuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IHRydWVcbiAgICovXG4gIG92ZXJsYXk6IHRydWUsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIHJlbW92ZSBhbmQgcmVpbmplY3QgbWFya3VwIG9uIGNsb3NlLiBTaG91bGQgYmUgdHJ1ZSBpZiB1c2luZyB2aWRlbyBlbGVtZW50cyB3L28gdXNpbmcgcHJvdmlkZXIncyBhcGksIG90aGVyd2lzZSwgdmlkZW9zIHdpbGwgY29udGludWUgdG8gcGxheSBpbiB0aGUgYmFja2dyb3VuZC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlc2V0T25DbG9zZTogZmFsc2UsXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIG1vZGFsIHRvIGFsdGVyIHRoZSB1cmwgb24gb3Blbi9jbG9zZSwgYW5kIGFsbG93cyB0aGUgdXNlIG9mIHRoZSBgYmFja2AgYnV0dG9uIHRvIGNsb3NlIG1vZGFscy4gQUxTTywgYWxsb3dzIGEgbW9kYWwgdG8gYXV0by1tYW5pYWNhbGx5IG9wZW4gb24gcGFnZSBsb2FkIElGIHRoZSBoYXNoID09PSB0aGUgbW9kYWwncyB1c2VyLXNldCBpZC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5rOiBmYWxzZSxcbiAgICAvKipcbiAgICogQWxsb3dzIHRoZSBtb2RhbCB0byBhcHBlbmQgdG8gY3VzdG9tIGRpdi5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCBcImJvZHlcIlxuICAgKi9cbiAgYXBwZW5kVG86IFwiYm9keVwiXG5cbn07XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihSZXZlYWwsICdSZXZlYWwnKTtcblxuZnVuY3Rpb24gaVBob25lU25pZmYoKSB7XG4gIHJldHVybiAvaVAoYWR8aG9uZXxvZCkuKk9TLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbn1cblxuZnVuY3Rpb24gYW5kcm9pZFNuaWZmKCkge1xuICByZXR1cm4gL0FuZHJvaWQvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xufVxuXG5mdW5jdGlvbiBtb2JpbGVTbmlmZigpIHtcbiAgcmV0dXJuIGlQaG9uZVNuaWZmKCkgfHwgYW5kcm9pZFNuaWZmKCk7XG59XG5cbn0oalF1ZXJ5KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuIWZ1bmN0aW9uKCQpIHtcblxuLyoqXG4gKiBTdGlja3kgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnN0aWNreVxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50cmlnZ2Vyc1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5tZWRpYVF1ZXJ5XG4gKi9cblxuY2xhc3MgU3RpY2t5IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBzdGlja3kgdGhpbmcuXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBzdGlja3kuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyBvYmplY3QgcGFzc2VkIHdoZW4gY3JlYXRpbmcgdGhlIGVsZW1lbnQgcHJvZ3JhbW1hdGljYWxseS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgU3RpY2t5LmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdTdGlja3knKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgc3RpY2t5IGVsZW1lbnQgYnkgYWRkaW5nIGNsYXNzZXMsIGdldHRpbmcvc2V0dGluZyBkaW1lbnNpb25zLCBicmVha3BvaW50cyBhbmQgYXR0cmlidXRlc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9pbml0KCkge1xuICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5wYXJlbnQoJ1tkYXRhLXN0aWNreS1jb250YWluZXJdJyksXG4gICAgICAgIGlkID0gdGhpcy4kZWxlbWVudFswXS5pZCB8fCBGb3VuZGF0aW9uLkdldFlvRGlnaXRzKDYsICdzdGlja3knKSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCEkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgdGhpcy53YXNXcmFwcGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy4kY29udGFpbmVyID0gJHBhcmVudC5sZW5ndGggPyAkcGFyZW50IDogJCh0aGlzLm9wdGlvbnMuY29udGFpbmVyKS53cmFwSW5uZXIodGhpcy4kZWxlbWVudCk7XG4gICAgdGhpcy4kY29udGFpbmVyLmFkZENsYXNzKHRoaXMub3B0aW9ucy5jb250YWluZXJDbGFzcyk7XG5cbiAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5zdGlja3lDbGFzcykuYXR0cih7ICdkYXRhLXJlc2l6ZSc6IGlkLCAnZGF0YS1tdXRhdGUnOiBpZCB9KTtcbiAgICBpZiAodGhpcy5vcHRpb25zLmFuY2hvciAhPT0gJycpIHtcbiAgICAgICAgJCgnIycgKyBfdGhpcy5vcHRpb25zLmFuY2hvcikuYXR0cih7ICdkYXRhLW11dGF0ZSc6IGlkIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2Nyb2xsQ291bnQgPSB0aGlzLm9wdGlvbnMuY2hlY2tFdmVyeTtcbiAgICB0aGlzLmlzU3R1Y2sgPSBmYWxzZTtcbiAgICAkKHdpbmRvdykub25lKCdsb2FkLnpmLnN0aWNreScsIGZ1bmN0aW9uKCl7XG4gICAgICAvL1dlIGNhbGN1bGF0ZSB0aGUgY29udGFpbmVyIGhlaWdodCB0byBoYXZlIGNvcnJlY3QgdmFsdWVzIGZvciBhbmNob3IgcG9pbnRzIG9mZnNldCBjYWxjdWxhdGlvbi5cbiAgICAgIF90aGlzLmNvbnRhaW5lckhlaWdodCA9IF90aGlzLiRlbGVtZW50LmNzcyhcImRpc3BsYXlcIikgPT0gXCJub25lXCIgPyAwIDogX3RoaXMuJGVsZW1lbnRbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgX3RoaXMuJGNvbnRhaW5lci5jc3MoJ2hlaWdodCcsIF90aGlzLmNvbnRhaW5lckhlaWdodCk7XG4gICAgICBfdGhpcy5lbGVtSGVpZ2h0ID0gX3RoaXMuY29udGFpbmVySGVpZ2h0O1xuICAgICAgaWYoX3RoaXMub3B0aW9ucy5hbmNob3IgIT09ICcnKXtcbiAgICAgICAgX3RoaXMuJGFuY2hvciA9ICQoJyMnICsgX3RoaXMub3B0aW9ucy5hbmNob3IpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIF90aGlzLl9wYXJzZVBvaW50cygpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5fc2V0U2l6ZXMoZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHNjcm9sbCA9IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHNjcm9sbCk7XG4gICAgICAgIC8vVW5zdGljayB0aGUgZWxlbWVudCB3aWxsIGVuc3VyZSB0aGF0IHByb3BlciBjbGFzc2VzIGFyZSBzZXQuXG4gICAgICAgIGlmICghX3RoaXMuaXNTdHVjaykge1xuICAgICAgICAgIF90aGlzLl9yZW1vdmVTdGlja3koKHNjcm9sbCA+PSBfdGhpcy50b3BQb2ludCkgPyBmYWxzZSA6IHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIF90aGlzLl9ldmVudHMoaWQuc3BsaXQoJy0nKS5yZXZlcnNlKCkuam9pbignLScpKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtdWx0aXBsZSBlbGVtZW50cyBhcyBhbmNob3JzLCBjYWxjdWxhdGVzIHRoZSB0b3AgYW5kIGJvdHRvbSBwaXhlbCB2YWx1ZXMgdGhlIHN0aWNreSB0aGluZyBzaG91bGQgc3RpY2sgYW5kIHVuc3RpY2sgb24uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3BhcnNlUG9pbnRzKCkge1xuICAgIHZhciB0b3AgPSB0aGlzLm9wdGlvbnMudG9wQW5jaG9yID09IFwiXCIgPyAxIDogdGhpcy5vcHRpb25zLnRvcEFuY2hvcixcbiAgICAgICAgYnRtID0gdGhpcy5vcHRpb25zLmJ0bUFuY2hvcj09IFwiXCIgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0IDogdGhpcy5vcHRpb25zLmJ0bUFuY2hvcixcbiAgICAgICAgcHRzID0gW3RvcCwgYnRtXSxcbiAgICAgICAgYnJlYWtzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHB0cy5sZW5ndGg7IGkgPCBsZW4gJiYgcHRzW2ldOyBpKyspIHtcbiAgICAgIHZhciBwdDtcbiAgICAgIGlmICh0eXBlb2YgcHRzW2ldID09PSAnbnVtYmVyJykge1xuICAgICAgICBwdCA9IHB0c1tpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwbGFjZSA9IHB0c1tpXS5zcGxpdCgnOicpLFxuICAgICAgICAgICAgYW5jaG9yID0gJChgIyR7cGxhY2VbMF19YCk7XG5cbiAgICAgICAgcHQgPSBhbmNob3Iub2Zmc2V0KCkudG9wO1xuICAgICAgICBpZiAocGxhY2VbMV0gJiYgcGxhY2VbMV0udG9Mb3dlckNhc2UoKSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICBwdCArPSBhbmNob3JbMF0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVha3NbaV0gPSBwdDtcbiAgICB9XG5cblxuICAgIHRoaXMucG9pbnRzID0gYnJlYWtzO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgc2Nyb2xsaW5nIGVsZW1lbnQuXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHBzdWVkby1yYW5kb20gaWQgZm9yIHVuaXF1ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIuXG4gICAqL1xuICBfZXZlbnRzKGlkKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc2Nyb2xsTGlzdGVuZXIgPSB0aGlzLnNjcm9sbExpc3RlbmVyID0gYHNjcm9sbC56Zi4ke2lkfWA7XG4gICAgaWYgKHRoaXMuaXNPbikgeyByZXR1cm47IH1cbiAgICBpZiAodGhpcy5jYW5TdGljaykge1xuICAgICAgdGhpcy5pc09uID0gdHJ1ZTtcbiAgICAgICQod2luZG93KS5vZmYoc2Nyb2xsTGlzdGVuZXIpXG4gICAgICAgICAgICAgICAub24oc2Nyb2xsTGlzdGVuZXIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnNjcm9sbENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQgPSBfdGhpcy5vcHRpb25zLmNoZWNrRXZlcnk7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuX3NldFNpemVzKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NhbGMoZmFsc2UsIHdpbmRvdy5wYWdlWU9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ291bnQtLTtcbiAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSwgd2luZG93LnBhZ2VZT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLiRlbGVtZW50Lm9mZigncmVzaXplbWUuemYudHJpZ2dlcicpXG4gICAgICAgICAgICAgICAgIC5vbigncmVzaXplbWUuemYudHJpZ2dlcicsIGZ1bmN0aW9uKGUsIGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9ldmVudHNIYW5kbGVyKGlkKTtcbiAgICB9KTtcblxuICAgIHRoaXMuJGVsZW1lbnQub24oJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoZSwgZWwpIHtcbiAgICAgICAgX3RoaXMuX2V2ZW50c0hhbmRsZXIoaWQpO1xuICAgIH0pO1xuXG4gICAgaWYodGhpcy4kYW5jaG9yKSB7XG4gICAgICB0aGlzLiRhbmNob3Iub24oJ211dGF0ZW1lLnpmLnRyaWdnZXInLCBmdW5jdGlvbiAoZSwgZWwpIHtcbiAgICAgICAgICBfdGhpcy5fZXZlbnRzSGFuZGxlcihpZCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlciBmb3IgZXZlbnRzLlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSBwc3VlZG8tcmFuZG9tIGlkIGZvciB1bmlxdWUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyLlxuICAgKi9cbiAgX2V2ZW50c0hhbmRsZXIoaWQpIHtcbiAgICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBzY3JvbGxMaXN0ZW5lciA9IHRoaXMuc2Nyb2xsTGlzdGVuZXIgPSBgc2Nyb2xsLnpmLiR7aWR9YDtcblxuICAgICAgIF90aGlzLl9zZXRTaXplcyhmdW5jdGlvbigpIHtcbiAgICAgICBfdGhpcy5fY2FsYyhmYWxzZSk7XG4gICAgICAgaWYgKF90aGlzLmNhblN0aWNrKSB7XG4gICAgICAgICBpZiAoIV90aGlzLmlzT24pIHtcbiAgICAgICAgICAgX3RoaXMuX2V2ZW50cyhpZCk7XG4gICAgICAgICB9XG4gICAgICAgfSBlbHNlIGlmIChfdGhpcy5pc09uKSB7XG4gICAgICAgICBfdGhpcy5fcGF1c2VMaXN0ZW5lcnMoc2Nyb2xsTGlzdGVuZXIpO1xuICAgICAgIH1cbiAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBldmVudCBoYW5kbGVycyBmb3Igc2Nyb2xsIGFuZCBjaGFuZ2UgZXZlbnRzIG9uIGFuY2hvci5cbiAgICogQGZpcmVzIFN0aWNreSNwYXVzZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2Nyb2xsTGlzdGVuZXIgLSB1bmlxdWUsIG5hbWVzcGFjZWQgc2Nyb2xsIGxpc3RlbmVyIGF0dGFjaGVkIHRvIGB3aW5kb3dgXG4gICAqL1xuICBfcGF1c2VMaXN0ZW5lcnMoc2Nyb2xsTGlzdGVuZXIpIHtcbiAgICB0aGlzLmlzT24gPSBmYWxzZTtcbiAgICAkKHdpbmRvdykub2ZmKHNjcm9sbExpc3RlbmVyKTtcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBpcyBwYXVzZWQgZHVlIHRvIHJlc2l6ZSBldmVudCBzaHJpbmtpbmcgdGhlIHZpZXcuXG4gICAgICogQGV2ZW50IFN0aWNreSNwYXVzZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigncGF1c2UuemYuc3RpY2t5Jyk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIG9uIGV2ZXJ5IGBzY3JvbGxgIGV2ZW50IGFuZCBvbiBgX2luaXRgXG4gICAqIGZpcmVzIGZ1bmN0aW9ucyBiYXNlZCBvbiBib29sZWFucyBhbmQgY2FjaGVkIHZhbHVlc1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGNoZWNrU2l6ZXMgLSB0cnVlIGlmIHBsdWdpbiBzaG91bGQgcmVjYWxjdWxhdGUgc2l6ZXMgYW5kIGJyZWFrcG9pbnRzLlxuICAgKiBAcGFyYW0ge051bWJlcn0gc2Nyb2xsIC0gY3VycmVudCBzY3JvbGwgcG9zaXRpb24gcGFzc2VkIGZyb20gc2Nyb2xsIGV2ZW50IGNiIGZ1bmN0aW9uLiBJZiBub3QgcGFzc2VkLCBkZWZhdWx0cyB0byBgd2luZG93LnBhZ2VZT2Zmc2V0YC5cbiAgICovXG4gIF9jYWxjKGNoZWNrU2l6ZXMsIHNjcm9sbCkge1xuICAgIGlmIChjaGVja1NpemVzKSB7IHRoaXMuX3NldFNpemVzKCk7IH1cblxuICAgIGlmICghdGhpcy5jYW5TdGljaykge1xuICAgICAgaWYgKHRoaXMuaXNTdHVjaykge1xuICAgICAgICB0aGlzLl9yZW1vdmVTdGlja3kodHJ1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFzY3JvbGwpIHsgc2Nyb2xsID0gd2luZG93LnBhZ2VZT2Zmc2V0OyB9XG5cbiAgICBpZiAoc2Nyb2xsID49IHRoaXMudG9wUG9pbnQpIHtcbiAgICAgIGlmIChzY3JvbGwgPD0gdGhpcy5ib3R0b21Qb2ludCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdHVjaykge1xuICAgICAgICAgIHRoaXMuX3NldFN0aWNreSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgICAgdGhpcy5fcmVtb3ZlU3RpY2t5KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5pc1N0dWNrKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVN0aWNreSh0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2F1c2VzIHRoZSAkZWxlbWVudCB0byBiZWNvbWUgc3R1Y2suXG4gICAqIEFkZHMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBmaXJlcyBTdGlja3kjc3R1Y2t0b1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRTdGlja3koKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgc3RpY2tUbyA9IHRoaXMub3B0aW9ucy5zdGlja1RvLFxuICAgICAgICBtcmduID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUbyA9PT0gJ3RvcCcgPyAnYm90dG9tJyA6ICd0b3AnLFxuICAgICAgICBjc3MgPSB7fTtcblxuICAgIGNzc1ttcmduXSA9IGAke3RoaXMub3B0aW9uc1ttcmduXX1lbWA7XG4gICAgY3NzW3N0aWNrVG9dID0gMDtcbiAgICBjc3Nbbm90U3R1Y2tUb10gPSAnYXV0byc7XG4gICAgdGhpcy5pc1N0dWNrID0gdHJ1ZTtcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGBpcy1hbmNob3JlZCBpcy1hdC0ke25vdFN0dWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmFkZENsYXNzKGBpcy1zdHVjayBpcy1hdC0ke3N0aWNrVG99YClcbiAgICAgICAgICAgICAgICAgLmNzcyhjc3MpXG4gICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSAkZWxlbWVudCBoYXMgYmVjb21lIGBwb3NpdGlvbjogZml4ZWQ7YFxuICAgICAgICAgICAgICAgICAgKiBOYW1lc3BhY2VkIHRvIGB0b3BgIG9yIGBib3R0b21gLCBlLmcuIGBzdGlja3kuemYuc3R1Y2t0bzp0b3BgXG4gICAgICAgICAgICAgICAgICAqIEBldmVudCBTdGlja3kjc3R1Y2t0b1xuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgLnRyaWdnZXIoYHN0aWNreS56Zi5zdHVja3RvOiR7c3RpY2tUb31gKTtcbiAgICB0aGlzLiRlbGVtZW50Lm9uKFwidHJhbnNpdGlvbmVuZCB3ZWJraXRUcmFuc2l0aW9uRW5kIG9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kIE1TVHJhbnNpdGlvbkVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9zZXRTaXplcygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhdXNlcyB0aGUgJGVsZW1lbnQgdG8gYmVjb21lIHVuc3R1Y2suXG4gICAqIFJlbW92ZXMgYHBvc2l0aW9uOiBmaXhlZDtgLCBhbmQgaGVscGVyIGNsYXNzZXMuXG4gICAqIEFkZHMgb3RoZXIgaGVscGVyIGNsYXNzZXMuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNUb3AgLSB0ZWxscyB0aGUgZnVuY3Rpb24gaWYgdGhlICRlbGVtZW50IHNob3VsZCBhbmNob3IgdG8gdGhlIHRvcCBvciBib3R0b20gb2YgaXRzICRhbmNob3IgZWxlbWVudC5cbiAgICogQGZpcmVzIFN0aWNreSN1bnN0dWNrZnJvbVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbW92ZVN0aWNreShpc1RvcCkge1xuICAgIHZhciBzdGlja1RvID0gdGhpcy5vcHRpb25zLnN0aWNrVG8sXG4gICAgICAgIHN0aWNrVG9Ub3AgPSBzdGlja1RvID09PSAndG9wJyxcbiAgICAgICAgY3NzID0ge30sXG4gICAgICAgIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLnBvaW50c1swXSA6IHRoaXMuYW5jaG9ySGVpZ2h0KSAtIHRoaXMuZWxlbUhlaWdodCxcbiAgICAgICAgbXJnbiA9IHN0aWNrVG9Ub3AgPyAnbWFyZ2luVG9wJyA6ICdtYXJnaW5Cb3R0b20nLFxuICAgICAgICBub3RTdHVja1RvID0gc3RpY2tUb1RvcCA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgICAgIHRvcE9yQm90dG9tID0gaXNUb3AgPyAndG9wJyA6ICdib3R0b20nO1xuXG4gICAgY3NzW21yZ25dID0gMDtcblxuICAgIGNzc1snYm90dG9tJ10gPSAnYXV0byc7XG4gICAgaWYoaXNUb3ApIHtcbiAgICAgIGNzc1sndG9wJ10gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NbJ3RvcCddID0gYW5jaG9yUHQ7XG4gICAgfVxuXG4gICAgdGhpcy5pc1N0dWNrID0gZmFsc2U7XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhgaXMtc3R1Y2sgaXMtYXQtJHtzdGlja1RvfWApXG4gICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgaXMtYW5jaG9yZWQgaXMtYXQtJHt0b3BPckJvdHRvbX1gKVxuICAgICAgICAgICAgICAgICAuY3NzKGNzcylcbiAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAqIEZpcmVzIHdoZW4gdGhlICRlbGVtZW50IGhhcyBiZWNvbWUgYW5jaG9yZWQuXG4gICAgICAgICAgICAgICAgICAqIE5hbWVzcGFjZWQgdG8gYHRvcGAgb3IgYGJvdHRvbWAsIGUuZy4gYHN0aWNreS56Zi51bnN0dWNrZnJvbTpib3R0b21gXG4gICAgICAgICAgICAgICAgICAqIEBldmVudCBTdGlja3kjdW5zdHVja2Zyb21cbiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgIC50cmlnZ2VyKGBzdGlja3kuemYudW5zdHVja2Zyb206JHt0b3BPckJvdHRvbX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSAkZWxlbWVudCBhbmQgJGNvbnRhaW5lciBzaXplcyBmb3IgcGx1Z2luLlxuICAgKiBDYWxscyBgX3NldEJyZWFrUG9pbnRzYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBvcHRpb25hbCBjYWxsYmFjayBmdW5jdGlvbiB0byBmaXJlIG9uIGNvbXBsZXRpb24gb2YgYF9zZXRCcmVha1BvaW50c2AuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0U2l6ZXMoY2IpIHtcbiAgICB0aGlzLmNhblN0aWNrID0gRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmlzKHRoaXMub3B0aW9ucy5zdGlja3lPbik7XG4gICAgaWYgKCF0aGlzLmNhblN0aWNrKSB7XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9XG4gICAgdmFyIF90aGlzID0gdGhpcyxcbiAgICAgICAgbmV3RWxlbVdpZHRoID0gdGhpcy4kY29udGFpbmVyWzBdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLFxuICAgICAgICBjb21wID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy4kY29udGFpbmVyWzBdKSxcbiAgICAgICAgcGRuZ2wgPSBwYXJzZUludChjb21wWydwYWRkaW5nLWxlZnQnXSwgMTApLFxuICAgICAgICBwZG5nciA9IHBhcnNlSW50KGNvbXBbJ3BhZGRpbmctcmlnaHQnXSwgMTApO1xuXG4gICAgaWYgKHRoaXMuJGFuY2hvciAmJiB0aGlzLiRhbmNob3IubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFuY2hvckhlaWdodCA9IHRoaXMuJGFuY2hvclswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcnNlUG9pbnRzKCk7XG4gICAgfVxuXG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgJ21heC13aWR0aCc6IGAke25ld0VsZW1XaWR0aCAtIHBkbmdsIC0gcGRuZ3J9cHhgXG4gICAgfSk7XG5cbiAgICB2YXIgbmV3Q29udGFpbmVySGVpZ2h0ID0gdGhpcy4kZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQgfHwgdGhpcy5jb250YWluZXJIZWlnaHQ7XG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuY3NzKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIikge1xuICAgICAgbmV3Q29udGFpbmVySGVpZ2h0ID0gMDtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXJIZWlnaHQgPSBuZXdDb250YWluZXJIZWlnaHQ7XG4gICAgdGhpcy4kY29udGFpbmVyLmNzcyh7XG4gICAgICBoZWlnaHQ6IG5ld0NvbnRhaW5lckhlaWdodFxuICAgIH0pO1xuICAgIHRoaXMuZWxlbUhlaWdodCA9IG5ld0NvbnRhaW5lckhlaWdodDtcblxuICAgIGlmICghdGhpcy5pc1N0dWNrKSB7XG4gICAgICBpZiAodGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaXMtYXQtYm90dG9tJykpIHtcbiAgICAgICAgdmFyIGFuY2hvclB0ID0gKHRoaXMucG9pbnRzID8gdGhpcy5wb2ludHNbMV0gLSB0aGlzLiRjb250YWluZXIub2Zmc2V0KCkudG9wIDogdGhpcy5hbmNob3JIZWlnaHQpIC0gdGhpcy5lbGVtSGVpZ2h0O1xuICAgICAgICB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgYW5jaG9yUHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3NldEJyZWFrUG9pbnRzKG5ld0NvbnRhaW5lckhlaWdodCwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7IGNiKCk7IH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB1cHBlciBhbmQgbG93ZXIgYnJlYWtwb2ludHMgZm9yIHRoZSBlbGVtZW50IHRvIGJlY29tZSBzdGlja3kvdW5zdGlja3kuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbGVtSGVpZ2h0IC0gcHggdmFsdWUgZm9yIHN0aWNreS4kZWxlbWVudCBoZWlnaHQsIGNhbGN1bGF0ZWQgYnkgYF9zZXRTaXplc2AuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gb3B0aW9uYWwgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIG9uIGNvbXBsZXRpb24uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0QnJlYWtQb2ludHMoZWxlbUhlaWdodCwgY2IpIHtcbiAgICBpZiAoIXRoaXMuY2FuU3RpY2spIHtcbiAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICAgICAgZWxzZSB7IHJldHVybiBmYWxzZTsgfVxuICAgIH1cbiAgICB2YXIgbVRvcCA9IGVtQ2FsYyh0aGlzLm9wdGlvbnMubWFyZ2luVG9wKSxcbiAgICAgICAgbUJ0bSA9IGVtQ2FsYyh0aGlzLm9wdGlvbnMubWFyZ2luQm90dG9tKSxcbiAgICAgICAgdG9wUG9pbnQgPSB0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzBdIDogdGhpcy4kYW5jaG9yLm9mZnNldCgpLnRvcCxcbiAgICAgICAgYm90dG9tUG9pbnQgPSB0aGlzLnBvaW50cyA/IHRoaXMucG9pbnRzWzFdIDogdG9wUG9pbnQgKyB0aGlzLmFuY2hvckhlaWdodCxcbiAgICAgICAgLy8gdG9wUG9pbnQgPSB0aGlzLiRhbmNob3Iub2Zmc2V0KCkudG9wIHx8IHRoaXMucG9pbnRzWzBdLFxuICAgICAgICAvLyBib3R0b21Qb2ludCA9IHRvcFBvaW50ICsgdGhpcy5hbmNob3JIZWlnaHQgfHwgdGhpcy5wb2ludHNbMV0sXG4gICAgICAgIHdpbkhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMuc3RpY2tUbyA9PT0gJ3RvcCcpIHtcbiAgICAgIHRvcFBvaW50IC09IG1Ub3A7XG4gICAgICBib3R0b21Qb2ludCAtPSAoZWxlbUhlaWdodCArIG1Ub3ApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnN0aWNrVG8gPT09ICdib3R0b20nKSB7XG4gICAgICB0b3BQb2ludCAtPSAod2luSGVpZ2h0IC0gKGVsZW1IZWlnaHQgKyBtQnRtKSk7XG4gICAgICBib3R0b21Qb2ludCAtPSAod2luSGVpZ2h0IC0gbUJ0bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vdGhpcyB3b3VsZCBiZSB0aGUgc3RpY2tUbzogYm90aCBvcHRpb24uLi4gdHJpY2t5XG4gICAgfVxuXG4gICAgdGhpcy50b3BQb2ludCA9IHRvcFBvaW50O1xuICAgIHRoaXMuYm90dG9tUG9pbnQgPSBib3R0b21Qb2ludDtcblxuICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHsgY2IoKTsgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBjdXJyZW50IHN0aWNreSBlbGVtZW50LlxuICAgKiBSZXNldHMgdGhlIGVsZW1lbnQgdG8gdGhlIHRvcCBwb3NpdGlvbiBmaXJzdC5cbiAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMsIEpTLWFkZGVkIGNzcyBwcm9wZXJ0aWVzIGFuZCBjbGFzc2VzLCBhbmQgdW53cmFwcyB0aGUgJGVsZW1lbnQgaWYgdGhlIEpTIGFkZGVkIHRoZSAkY29udGFpbmVyLlxuICAgKiBAZnVuY3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5fcmVtb3ZlU3RpY2t5KHRydWUpO1xuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhgJHt0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3N9IGlzLWFuY2hvcmVkIGlzLWF0LXRvcGApXG4gICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgIGhlaWdodDogJycsXG4gICAgICAgICAgICAgICAgICAgdG9wOiAnJyxcbiAgICAgICAgICAgICAgICAgICBib3R0b206ICcnLFxuICAgICAgICAgICAgICAgICAgICdtYXgtd2lkdGgnOiAnJ1xuICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAub2ZmKCdyZXNpemVtZS56Zi50cmlnZ2VyJylcbiAgICAgICAgICAgICAgICAgLm9mZignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgIGlmICh0aGlzLiRhbmNob3IgJiYgdGhpcy4kYW5jaG9yLmxlbmd0aCkge1xuICAgICAgdGhpcy4kYW5jaG9yLm9mZignY2hhbmdlLnpmLnN0aWNreScpO1xuICAgIH1cbiAgICAkKHdpbmRvdykub2ZmKHRoaXMuc2Nyb2xsTGlzdGVuZXIpO1xuXG4gICAgaWYgKHRoaXMud2FzV3JhcHBlZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC51bndyYXAoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kY29udGFpbmVyLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5jb250YWluZXJDbGFzcylcbiAgICAgICAgICAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcnXG4gICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblN0aWNreS5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIEN1c3RvbWl6YWJsZSBjb250YWluZXIgdGVtcGxhdGUuIEFkZCB5b3VyIG93biBjbGFzc2VzIGZvciBzdHlsaW5nIGFuZCBzaXppbmcuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJyZsdDtkaXYgZGF0YS1zdGlja3ktY29udGFpbmVyJmd0OyZsdDsvZGl2Jmd0OydcbiAgICovXG4gIGNvbnRhaW5lcjogJzxkaXYgZGF0YS1zdGlja3ktY29udGFpbmVyPjwvZGl2PicsXG4gIC8qKlxuICAgKiBMb2NhdGlvbiBpbiB0aGUgdmlldyB0aGUgZWxlbWVudCBzdGlja3MgdG8uIENhbiBiZSBgJ3RvcCdgIG9yIGAnYm90dG9tJ2AuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3RvcCdcbiAgICovXG4gIHN0aWNrVG86ICd0b3AnLFxuICAvKipcbiAgICogSWYgYW5jaG9yZWQgdG8gYSBzaW5nbGUgZWxlbWVudCwgdGhlIGlkIG9mIHRoYXQgZWxlbWVudC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnJ1xuICAgKi9cbiAgYW5jaG9yOiAnJyxcbiAgLyoqXG4gICAqIElmIHVzaW5nIG1vcmUgdGhhbiBvbmUgZWxlbWVudCBhcyBhbmNob3IgcG9pbnRzLCB0aGUgaWQgb2YgdGhlIHRvcCBhbmNob3IuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJydcbiAgICovXG4gIHRvcEFuY2hvcjogJycsXG4gIC8qKlxuICAgKiBJZiB1c2luZyBtb3JlIHRoYW4gb25lIGVsZW1lbnQgYXMgYW5jaG9yIHBvaW50cywgdGhlIGlkIG9mIHRoZSBib3R0b20gYW5jaG9yLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICcnXG4gICAqL1xuICBidG1BbmNob3I6ICcnLFxuICAvKipcbiAgICogTWFyZ2luLCBpbiBgZW1gJ3MgdG8gYXBwbHkgdG8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCB3aGVuIGl0IGJlY29tZXMgc3RpY2t5LlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEBkZWZhdWx0IDFcbiAgICovXG4gIG1hcmdpblRvcDogMSxcbiAgLyoqXG4gICAqIE1hcmdpbiwgaW4gYGVtYCdzIHRvIGFwcGx5IHRvIHRoZSBib3R0b20gb2YgdGhlIGVsZW1lbnQgd2hlbiBpdCBiZWNvbWVzIHN0aWNreS5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAxXG4gICAqL1xuICBtYXJnaW5Cb3R0b206IDEsXG4gIC8qKlxuICAgKiBCcmVha3BvaW50IHN0cmluZyB0aGF0IGlzIHRoZSBtaW5pbXVtIHNjcmVlbiBzaXplIGFuIGVsZW1lbnQgc2hvdWxkIGJlY29tZSBzdGlja3kuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ21lZGl1bSdcbiAgICovXG4gIHN0aWNreU9uOiAnbWVkaXVtJyxcbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gc3RpY2t5IGVsZW1lbnQsIGFuZCByZW1vdmVkIG9uIGRlc3RydWN0aW9uLiBGb3VuZGF0aW9uIGRlZmF1bHRzIHRvIGBzdGlja3lgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdzdGlja3knXG4gICAqL1xuICBzdGlja3lDbGFzczogJ3N0aWNreScsXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHN0aWNreSBjb250YWluZXIuIEZvdW5kYXRpb24gZGVmYXVsdHMgdG8gYHN0aWNreS1jb250YWluZXJgLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICdzdGlja3ktY29udGFpbmVyJ1xuICAgKi9cbiAgY29udGFpbmVyQ2xhc3M6ICdzdGlja3ktY29udGFpbmVyJyxcbiAgLyoqXG4gICAqIE51bWJlciBvZiBzY3JvbGwgZXZlbnRzIGJldHdlZW4gdGhlIHBsdWdpbidzIHJlY2FsY3VsYXRpbmcgc3RpY2t5IHBvaW50cy4gU2V0dGluZyBpdCB0byBgMGAgd2lsbCBjYXVzZSBpdCB0byByZWNhbGMgZXZlcnkgc2Nyb2xsIGV2ZW50LCBzZXR0aW5nIGl0IHRvIGAtMWAgd2lsbCBwcmV2ZW50IHJlY2FsYyBvbiBzY3JvbGwuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQGRlZmF1bHQgLTFcbiAgICovXG4gIGNoZWNrRXZlcnk6IC0xXG59O1xuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBjYWxjdWxhdGUgZW0gdmFsdWVzXG4gKiBAcGFyYW0gTnVtYmVyIHtlbX0gLSBudW1iZXIgb2YgZW0ncyB0byBjYWxjdWxhdGUgaW50byBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZW1DYWxjKGVtKSB7XG4gIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5LCBudWxsKS5mb250U2l6ZSwgMTApICogZW07XG59XG5cbi8vIFdpbmRvdyBleHBvcnRzXG5Gb3VuZGF0aW9uLnBsdWdpbihTdGlja3ksICdTdGlja3knKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFRhYnMgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRhYnNcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwua2V5Ym9hcmRcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwudGltZXJBbmRJbWFnZUxvYWRlciBpZiB0YWJzIGNvbnRhaW4gaW1hZ2VzXG4gKi9cblxuY2xhc3MgVGFicyB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIHRhYnMuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgVGFicyNpbml0XG4gICAqIEBwYXJhbSB7alF1ZXJ5fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBtYWtlIGludG8gdGFicy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBUYWJzLmRlZmF1bHRzLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgRm91bmRhdGlvbi5yZWdpc3RlclBsdWdpbih0aGlzLCAnVGFicycpO1xuICAgIEZvdW5kYXRpb24uS2V5Ym9hcmQucmVnaXN0ZXIoJ1RhYnMnLCB7XG4gICAgICAnRU5URVInOiAnb3BlbicsXG4gICAgICAnU1BBQ0UnOiAnb3BlbicsXG4gICAgICAnQVJST1dfUklHSFQnOiAnbmV4dCcsXG4gICAgICAnQVJST1dfVVAnOiAncHJldmlvdXMnLFxuICAgICAgJ0FSUk9XX0RPV04nOiAnbmV4dCcsXG4gICAgICAnQVJST1dfTEVGVCc6ICdwcmV2aW91cydcbiAgICAgIC8vICdUQUInOiAnbmV4dCcsXG4gICAgICAvLyAnU0hJRlRfVEFCJzogJ3ByZXZpb3VzJ1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSB0YWJzIGJ5IHNob3dpbmcgYW5kIGZvY3VzaW5nIChpZiBhdXRvRm9jdXM9dHJ1ZSkgdGhlIHByZXNldCBhY3RpdmUgdGFiLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cih7J3JvbGUnOiAndGFibGlzdCd9KTtcbiAgICB0aGlzLiR0YWJUaXRsZXMgPSB0aGlzLiRlbGVtZW50LmZpbmQoYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9YCk7XG4gICAgdGhpcy4kdGFiQ29udGVudCA9ICQoYFtkYXRhLXRhYnMtY29udGVudD1cIiR7dGhpcy4kZWxlbWVudFswXS5pZH1cIl1gKTtcblxuICAgIHRoaXMuJHRhYlRpdGxlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpLFxuICAgICAgICAgICRsaW5rID0gJGVsZW0uZmluZCgnYScpLFxuICAgICAgICAgIGlzQWN0aXZlID0gJGVsZW0uaGFzQ2xhc3MoYCR7X3RoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3N9YCksXG4gICAgICAgICAgaGFzaCA9ICRsaW5rWzBdLmhhc2guc2xpY2UoMSksXG4gICAgICAgICAgbGlua0lkID0gJGxpbmtbMF0uaWQgPyAkbGlua1swXS5pZCA6IGAke2hhc2h9LWxhYmVsYCxcbiAgICAgICAgICAkdGFiQ29udGVudCA9ICQoYCMke2hhc2h9YCk7XG5cbiAgICAgICRlbGVtLmF0dHIoeydyb2xlJzogJ3ByZXNlbnRhdGlvbid9KTtcblxuICAgICAgJGxpbmsuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICdhcmlhLWNvbnRyb2xzJzogaGFzaCxcbiAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBpc0FjdGl2ZSxcbiAgICAgICAgJ2lkJzogbGlua0lkXG4gICAgICB9KTtcblxuICAgICAgJHRhYkNvbnRlbnQuYXR0cih7XG4gICAgICAgICdyb2xlJzogJ3RhYnBhbmVsJyxcbiAgICAgICAgJ2FyaWEtaGlkZGVuJzogIWlzQWN0aXZlLFxuICAgICAgICAnYXJpYS1sYWJlbGxlZGJ5JzogbGlua0lkXG4gICAgICB9KTtcblxuICAgICAgaWYoaXNBY3RpdmUgJiYgX3RoaXMub3B0aW9ucy5hdXRvRm9jdXMpe1xuICAgICAgICAkKHdpbmRvdykubG9hZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7IHNjcm9sbFRvcDogJGVsZW0ub2Zmc2V0KCkudG9wIH0sIF90aGlzLm9wdGlvbnMuZGVlcExpbmtTbXVkZ2VEZWxheSwgKCkgPT4ge1xuICAgICAgICAgICAgJGxpbmsuZm9jdXMoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYodGhpcy5vcHRpb25zLm1hdGNoSGVpZ2h0KSB7XG4gICAgICB2YXIgJGltYWdlcyA9IHRoaXMuJHRhYkNvbnRlbnQuZmluZCgnaW1nJyk7XG5cbiAgICAgIGlmICgkaW1hZ2VzLmxlbmd0aCkge1xuICAgICAgICBGb3VuZGF0aW9uLm9uSW1hZ2VzTG9hZGVkKCRpbWFnZXMsIHRoaXMuX3NldEhlaWdodC5iaW5kKHRoaXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NldEhlaWdodCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgICAvL2N1cnJlbnQgY29udGV4dC1ib3VuZCBmdW5jdGlvbiB0byBvcGVuIHRhYnMgb24gcGFnZSBsb2FkIG9yIGhpc3RvcnkgcG9wc3RhdGVcbiAgICB0aGlzLl9jaGVja0RlZXBMaW5rID0gKCkgPT4ge1xuICAgICAgdmFyIGFuY2hvciA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgLy9uZWVkIGEgaGFzaCBhbmQgYSByZWxldmFudCBhbmNob3IgaW4gdGhpcyB0YWJzZXRcbiAgICAgIGlmKGFuY2hvci5sZW5ndGgpIHtcbiAgICAgICAgdmFyICRsaW5rID0gdGhpcy4kZWxlbWVudC5maW5kKCdbaHJlZiQ9XCInK2FuY2hvcisnXCJdJyk7XG4gICAgICAgIGlmICgkbGluay5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdFRhYigkKGFuY2hvciksIHRydWUpO1xuXG4gICAgICAgICAgLy9yb2xsIHVwIGEgbGl0dGxlIHRvIHNob3cgdGhlIHRpdGxlc1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmtTbXVkZ2UpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLiRlbGVtZW50Lm9mZnNldCgpO1xuICAgICAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IG9mZnNldC50b3AgfSwgdGhpcy5vcHRpb25zLmRlZXBMaW5rU211ZGdlRGVsYXkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSB6cGx1Z2luIGhhcyBkZWVwbGlua2VkIGF0IHBhZ2Vsb2FkXG4gICAgICAgICAgICAqIEBldmVudCBUYWJzI2RlZXBsaW5rXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2RlZXBsaW5rLnpmLnRhYnMnLCBbJGxpbmssICQoYW5jaG9yKV0pO1xuICAgICAgICAgfVxuICAgICAgIH1cbiAgICAgfVxuXG4gICAgLy91c2UgYnJvd3NlciB0byBvcGVuIGEgdGFiLCBpZiBpdCBleGlzdHMgaW4gdGhpcyB0YWJzZXRcbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICB0aGlzLl9jaGVja0RlZXBMaW5rKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZXZlbnRzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBoYW5kbGVycyBmb3IgaXRlbXMgd2l0aGluIHRoZSB0YWJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLl9hZGRLZXlIYW5kbGVyKCk7XG4gICAgdGhpcy5fYWRkQ2xpY2tIYW5kbGVyKCk7XG4gICAgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyID0gbnVsbDtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpIHtcbiAgICAgIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlciA9IHRoaXMuX3NldEhlaWdodC5iaW5kKHRoaXMpO1xuXG4gICAgICAkKHdpbmRvdykub24oJ2NoYW5nZWQuemYubWVkaWFxdWVyeScsIHRoaXMuX3NldEhlaWdodE1xSGFuZGxlcik7XG4gICAgfVxuXG4gICAgaWYodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAkKHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhpcy5fY2hlY2tEZWVwTGluayk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgY2xpY2sgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRDbGlja0hhbmRsZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5vZmYoJ2NsaWNrLnpmLnRhYnMnKVxuICAgICAgLm9uKCdjbGljay56Zi50YWJzJywgYC4ke3RoaXMub3B0aW9ucy5saW5rQ2xhc3N9YCwgZnVuY3Rpb24oZSl7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkKHRoaXMpKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMga2V5Ym9hcmQgZXZlbnQgaGFuZGxlcnMgZm9yIGl0ZW1zIHdpdGhpbiB0aGUgdGFicy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9hZGRLZXlIYW5kbGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLiR0YWJUaXRsZXMub2ZmKCdrZXlkb3duLnpmLnRhYnMnKS5vbigna2V5ZG93bi56Zi50YWJzJywgZnVuY3Rpb24oZSl7XG4gICAgICBpZiAoZS53aGljaCA9PT0gOSkgcmV0dXJuO1xuXG5cbiAgICAgIHZhciAkZWxlbWVudCA9ICQodGhpcyksXG4gICAgICAgICRlbGVtZW50cyA9ICRlbGVtZW50LnBhcmVudCgndWwnKS5jaGlsZHJlbignbGknKSxcbiAgICAgICAgJHByZXZFbGVtZW50LFxuICAgICAgICAkbmV4dEVsZW1lbnQ7XG5cbiAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgaWYgKCQodGhpcykuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMud3JhcE9uS2V5cykge1xuICAgICAgICAgICAgJHByZXZFbGVtZW50ID0gaSA9PT0gMCA/ICRlbGVtZW50cy5sYXN0KCkgOiAkZWxlbWVudHMuZXEoaS0xKTtcbiAgICAgICAgICAgICRuZXh0RWxlbWVudCA9IGkgPT09ICRlbGVtZW50cy5sZW5ndGggLTEgPyAkZWxlbWVudHMuZmlyc3QoKSA6ICRlbGVtZW50cy5lcShpKzEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkcHJldkVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5tYXgoMCwgaS0xKSk7XG4gICAgICAgICAgICAkbmV4dEVsZW1lbnQgPSAkZWxlbWVudHMuZXEoTWF0aC5taW4oaSsxLCAkZWxlbWVudHMubGVuZ3RoLTEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gaGFuZGxlIGtleWJvYXJkIGV2ZW50IHdpdGgga2V5Ym9hcmQgdXRpbFxuICAgICAgRm91bmRhdGlvbi5LZXlib2FyZC5oYW5kbGVLZXkoZSwgJ1RhYnMnLCB7XG4gICAgICAgIG9wZW46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRlbGVtZW50LmZpbmQoJ1tyb2xlPVwidGFiXCJdJykuZm9jdXMoKTtcbiAgICAgICAgICBfdGhpcy5faGFuZGxlVGFiQ2hhbmdlKCRlbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgcHJldmlvdXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRwcmV2RWxlbWVudC5maW5kKCdbcm9sZT1cInRhYlwiXScpLmZvY3VzKCk7XG4gICAgICAgICAgX3RoaXMuX2hhbmRsZVRhYkNoYW5nZSgkcHJldkVsZW1lbnQpO1xuICAgICAgICB9LFxuICAgICAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkbmV4dEVsZW1lbnQuZmluZCgnW3JvbGU9XCJ0YWJcIl0nKS5mb2N1cygpO1xuICAgICAgICAgIF90aGlzLl9oYW5kbGVUYWJDaGFuZ2UoJG5leHRFbGVtZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZGxlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSB0YWIgYCR0YXJnZXRDb250ZW50YCBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC4gQ29sbGFwc2VzIGFjdGl2ZSB0YWIuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gVGFiIHRvIG9wZW4uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGlzdG9yeUhhbmRsZWQgLSBicm93c2VyIGhhcyBhbHJlYWR5IGhhbmRsZWQgYSBoaXN0b3J5IHVwZGF0ZVxuICAgKiBAZmlyZXMgVGFicyNjaGFuZ2VcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfaGFuZGxlVGFiQ2hhbmdlKCR0YXJnZXQsIGhpc3RvcnlIYW5kbGVkKSB7XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBmb3IgYWN0aXZlIGNsYXNzIG9uIHRhcmdldC4gQ29sbGFwc2UgaWYgZXhpc3RzLlxuICAgICAqL1xuICAgIGlmICgkdGFyZ2V0Lmhhc0NsYXNzKGAke3RoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3N9YCkpIHtcbiAgICAgICAgaWYodGhpcy5vcHRpb25zLmFjdGl2ZUNvbGxhcHNlKSB7XG4gICAgICAgICAgICB0aGlzLl9jb2xsYXBzZVRhYigkdGFyZ2V0KTtcblxuICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgenBsdWdpbiBoYXMgc3VjY2Vzc2Z1bGx5IGNvbGxhcHNlZCB0YWJzLlxuICAgICAgICAgICAgKiBAZXZlbnQgVGFicyNjb2xsYXBzZVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignY29sbGFwc2UuemYudGFicycsIFskdGFyZ2V0XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciAkb2xkVGFiID0gdGhpcy4kZWxlbWVudC5cbiAgICAgICAgICBmaW5kKGAuJHt0aGlzLm9wdGlvbnMubGlua0NsYXNzfS4ke3RoaXMub3B0aW9ucy5saW5rQWN0aXZlQ2xhc3N9YCksXG4gICAgICAgICAgJHRhYkxpbmsgPSAkdGFyZ2V0LmZpbmQoJ1tyb2xlPVwidGFiXCJdJyksXG4gICAgICAgICAgaGFzaCA9ICR0YWJMaW5rWzBdLmhhc2gsXG4gICAgICAgICAgJHRhcmdldENvbnRlbnQgPSB0aGlzLiR0YWJDb250ZW50LmZpbmQoaGFzaCk7XG5cbiAgICAvL2Nsb3NlIG9sZCB0YWJcbiAgICB0aGlzLl9jb2xsYXBzZVRhYigkb2xkVGFiKTtcblxuICAgIC8vb3BlbiBuZXcgdGFiXG4gICAgdGhpcy5fb3BlblRhYigkdGFyZ2V0KTtcblxuICAgIC8vZWl0aGVyIHJlcGxhY2Ugb3IgdXBkYXRlIGJyb3dzZXIgaGlzdG9yeVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVlcExpbmsgJiYgIWhpc3RvcnlIYW5kbGVkKSB7XG4gICAgICB2YXIgYW5jaG9yID0gJHRhcmdldC5maW5kKCdhJykuYXR0cignaHJlZicpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnVwZGF0ZUhpc3RvcnkpIHtcbiAgICAgICAgaGlzdG9yeS5wdXNoU3RhdGUoe30sICcnLCBhbmNob3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sICcnLCBhbmNob3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHdoZW4gdGhlIHBsdWdpbiBoYXMgc3VjY2Vzc2Z1bGx5IGNoYW5nZWQgdGFicy5cbiAgICAgKiBAZXZlbnQgVGFicyNjaGFuZ2VcbiAgICAgKi9cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2NoYW5nZS56Zi50YWJzJywgWyR0YXJnZXQsICR0YXJnZXRDb250ZW50XSk7XG5cbiAgICAvL2ZpcmUgdG8gY2hpbGRyZW4gYSBtdXRhdGlvbiBldmVudFxuICAgICR0YXJnZXRDb250ZW50LmZpbmQoXCJbZGF0YS1tdXRhdGVdXCIpLnRyaWdnZXIoXCJtdXRhdGVtZS56Zi50cmlnZ2VyXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSB0YWIgYCR0YXJnZXRDb250ZW50YCBkZWZpbmVkIGJ5IGAkdGFyZ2V0YC5cbiAgICogQHBhcmFtIHtqUXVlcnl9ICR0YXJnZXQgLSBUYWIgdG8gT3Blbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBfb3BlblRhYigkdGFyZ2V0KSB7XG4gICAgICB2YXIgJHRhYkxpbmsgPSAkdGFyZ2V0LmZpbmQoJ1tyb2xlPVwidGFiXCJdJyksXG4gICAgICAgICAgaGFzaCA9ICR0YWJMaW5rWzBdLmhhc2gsXG4gICAgICAgICAgJHRhcmdldENvbnRlbnQgPSB0aGlzLiR0YWJDb250ZW50LmZpbmQoaGFzaCk7XG5cbiAgICAgICR0YXJnZXQuYWRkQ2xhc3MoYCR7dGhpcy5vcHRpb25zLmxpbmtBY3RpdmVDbGFzc31gKTtcblxuICAgICAgJHRhYkxpbmsuYXR0cih7J2FyaWEtc2VsZWN0ZWQnOiAndHJ1ZSd9KTtcblxuICAgICAgJHRhcmdldENvbnRlbnRcbiAgICAgICAgLmFkZENsYXNzKGAke3RoaXMub3B0aW9ucy5wYW5lbEFjdGl2ZUNsYXNzfWApXG4gICAgICAgIC5hdHRyKHsnYXJpYS1oaWRkZW4nOiAnZmFsc2UnfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29sbGFwc2VzIGAkdGFyZ2V0Q29udGVudGAgZGVmaW5lZCBieSBgJHRhcmdldGAuXG4gICAqIEBwYXJhbSB7alF1ZXJ5fSAkdGFyZ2V0IC0gVGFiIHRvIE9wZW4uXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgX2NvbGxhcHNlVGFiKCR0YXJnZXQpIHtcbiAgICB2YXIgJHRhcmdldF9hbmNob3IgPSAkdGFyZ2V0XG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7dGhpcy5vcHRpb25zLmxpbmtBY3RpdmVDbGFzc31gKVxuICAgICAgLmZpbmQoJ1tyb2xlPVwidGFiXCJdJylcbiAgICAgIC5hdHRyKHsgJ2FyaWEtc2VsZWN0ZWQnOiAnZmFsc2UnIH0pO1xuXG4gICAgJChgIyR7JHRhcmdldF9hbmNob3IuYXR0cignYXJpYS1jb250cm9scycpfWApXG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7dGhpcy5vcHRpb25zLnBhbmVsQWN0aXZlQ2xhc3N9YClcbiAgICAgIC5hdHRyKHsgJ2FyaWEtaGlkZGVuJzogJ3RydWUnIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1YmxpYyBtZXRob2QgZm9yIHNlbGVjdGluZyBhIGNvbnRlbnQgcGFuZSB0byBkaXNwbGF5LlxuICAgKiBAcGFyYW0ge2pRdWVyeSB8IFN0cmluZ30gZWxlbSAtIGpRdWVyeSBvYmplY3Qgb3Igc3RyaW5nIG9mIHRoZSBpZCBvZiB0aGUgcGFuZSB0byBkaXNwbGF5LlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhpc3RvcnlIYW5kbGVkIC0gYnJvd3NlciBoYXMgYWxyZWFkeSBoYW5kbGVkIGEgaGlzdG9yeSB1cGRhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBzZWxlY3RUYWIoZWxlbSwgaGlzdG9yeUhhbmRsZWQpIHtcbiAgICB2YXIgaWRTdHI7XG5cbiAgICBpZiAodHlwZW9mIGVsZW0gPT09ICdvYmplY3QnKSB7XG4gICAgICBpZFN0ciA9IGVsZW1bMF0uaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlkU3RyID0gZWxlbTtcbiAgICB9XG5cbiAgICBpZiAoaWRTdHIuaW5kZXhPZignIycpIDwgMCkge1xuICAgICAgaWRTdHIgPSBgIyR7aWRTdHJ9YDtcbiAgICB9XG5cbiAgICB2YXIgJHRhcmdldCA9IHRoaXMuJHRhYlRpdGxlcy5maW5kKGBbaHJlZiQ9XCIke2lkU3RyfVwiXWApLnBhcmVudChgLiR7dGhpcy5vcHRpb25zLmxpbmtDbGFzc31gKTtcblxuICAgIHRoaXMuX2hhbmRsZVRhYkNoYW5nZSgkdGFyZ2V0LCBoaXN0b3J5SGFuZGxlZCk7XG4gIH07XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBoZWlnaHQgb2YgZWFjaCBwYW5lbCB0byB0aGUgaGVpZ2h0IG9mIHRoZSB0YWxsZXN0IHBhbmVsLlxuICAgKiBJZiBlbmFibGVkIGluIG9wdGlvbnMsIGdldHMgY2FsbGVkIG9uIG1lZGlhIHF1ZXJ5IGNoYW5nZS5cbiAgICogSWYgbG9hZGluZyBjb250ZW50IHZpYSBleHRlcm5hbCBzb3VyY2UsIGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgb3Igd2l0aCBfcmVmbG93LlxuICAgKiBJZiBlbmFibGVkIHdpdGggYGRhdGEtbWF0Y2gtaGVpZ2h0PVwidHJ1ZVwiYCwgdGFicyBzZXRzIHRvIGVxdWFsIGhlaWdodFxuICAgKiBAZnVuY3Rpb25cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRIZWlnaHQoKSB7XG4gICAgdmFyIG1heCA9IDAsXG4gICAgICAgIF90aGlzID0gdGhpczsgLy8gTG9jayBkb3duIHRoZSBgdGhpc2AgdmFsdWUgZm9yIHRoZSByb290IHRhYnMgb2JqZWN0XG5cbiAgICB0aGlzLiR0YWJDb250ZW50XG4gICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLnBhbmVsQ2xhc3N9YClcbiAgICAgIC5jc3MoJ2hlaWdodCcsICcnKVxuICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHBhbmVsID0gJCh0aGlzKSxcbiAgICAgICAgICAgIGlzQWN0aXZlID0gcGFuZWwuaGFzQ2xhc3MoYCR7X3RoaXMub3B0aW9ucy5wYW5lbEFjdGl2ZUNsYXNzfWApOyAvLyBnZXQgdGhlIG9wdGlvbnMgZnJvbSB0aGUgcGFyZW50IGluc3RlYWQgb2YgdHJ5aW5nIHRvIGdldCB0aGVtIGZyb20gdGhlIGNoaWxkXG5cbiAgICAgICAgaWYgKCFpc0FjdGl2ZSkge1xuICAgICAgICAgIHBhbmVsLmNzcyh7J3Zpc2liaWxpdHknOiAnaGlkZGVuJywgJ2Rpc3BsYXknOiAnYmxvY2snfSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGVtcCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXG4gICAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgICBwYW5lbC5jc3Moe1xuICAgICAgICAgICAgJ3Zpc2liaWxpdHknOiAnJyxcbiAgICAgICAgICAgICdkaXNwbGF5JzogJydcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1heCA9IHRlbXAgPiBtYXggPyB0ZW1wIDogbWF4O1xuICAgICAgfSlcbiAgICAgIC5jc3MoJ2hlaWdodCcsIGAke21heH1weGApO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIGFuIGluc3RhbmNlIG9mIGFuIHRhYnMuXG4gICAqIEBmaXJlcyBUYWJzI2Rlc3Ryb3llZFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAuZmluZChgLiR7dGhpcy5vcHRpb25zLmxpbmtDbGFzc31gKVxuICAgICAgLm9mZignLnpmLnRhYnMnKS5oaWRlKCkuZW5kKClcbiAgICAgIC5maW5kKGAuJHt0aGlzLm9wdGlvbnMucGFuZWxDbGFzc31gKVxuICAgICAgLmhpZGUoKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMubWF0Y2hIZWlnaHQpIHtcbiAgICAgIGlmICh0aGlzLl9zZXRIZWlnaHRNcUhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgJCh3aW5kb3cpLm9mZignY2hhbmdlZC56Zi5tZWRpYXF1ZXJ5JywgdGhpcy5fc2V0SGVpZ2h0TXFIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmRlZXBMaW5rKSB7XG4gICAgICAkKHdpbmRvdykub2ZmKCdwb3BzdGF0ZScsIHRoaXMuX2NoZWNrRGVlcExpbmspO1xuICAgIH1cblxuICAgIEZvdW5kYXRpb24udW5yZWdpc3RlclBsdWdpbih0aGlzKTtcbiAgfVxufVxuXG5UYWJzLmRlZmF1bHRzID0ge1xuICAvKipcbiAgICogQWxsb3dzIHRoZSB3aW5kb3cgdG8gc2Nyb2xsIHRvIGNvbnRlbnQgb2YgcGFuZSBzcGVjaWZpZWQgYnkgaGFzaCBhbmNob3JcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGRlZXBMaW5rOiBmYWxzZSxcblxuICAvKipcbiAgICogQWRqdXN0IHRoZSBkZWVwIGxpbmsgc2Nyb2xsIHRvIG1ha2Ugc3VyZSB0aGUgdG9wIG9mIHRoZSB0YWIgcGFuZWwgaXMgdmlzaWJsZVxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgZGVlcExpbmtTbXVkZ2U6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbmltYXRpb24gdGltZSAobXMpIGZvciB0aGUgZGVlcCBsaW5rIGFkanVzdG1lbnRcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAZGVmYXVsdCAzMDBcbiAgICovXG4gIGRlZXBMaW5rU211ZGdlRGVsYXk6IDMwMCxcblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBicm93c2VyIGhpc3Rvcnkgd2l0aCB0aGUgb3BlbiB0YWJcbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHVwZGF0ZUhpc3Rvcnk6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHdpbmRvdyB0byBzY3JvbGwgdG8gY29udGVudCBvZiBhY3RpdmUgcGFuZSBvbiBsb2FkIGlmIHNldCB0byB0cnVlLlxuICAgKiBOb3QgcmVjb21tZW5kZWQgaWYgbW9yZSB0aGFuIG9uZSB0YWIgcGFuZWwgcGVyIHBhZ2UuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhdXRvRm9jdXM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3Mga2V5Ym9hcmQgaW5wdXQgdG8gJ3dyYXAnIGFyb3VuZCB0aGUgdGFiIGxpbmtzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAZGVmYXVsdCB0cnVlXG4gICAqL1xuICB3cmFwT25LZXlzOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgdGhlIHRhYiBjb250ZW50IHBhbmVzIHRvIG1hdGNoIGhlaWdodHMgaWYgc2V0IHRvIHRydWUuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBtYXRjaEhlaWdodDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEFsbG93cyBhY3RpdmUgdGFicyB0byBjb2xsYXBzZSB3aGVuIGNsaWNrZWQuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBhY3RpdmVDb2xsYXBzZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIENsYXNzIGFwcGxpZWQgdG8gYGxpYCdzIGluIHRhYiBsaW5rIGxpc3QuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ3RhYnMtdGl0bGUnXG4gICAqL1xuICBsaW5rQ2xhc3M6ICd0YWJzLXRpdGxlJyxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgYWN0aXZlIGBsaWAgaW4gdGFiIGxpbmsgbGlzdC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAZGVmYXVsdCAnaXMtYWN0aXZlJ1xuICAgKi9cbiAgbGlua0FjdGl2ZUNsYXNzOiAnaXMtYWN0aXZlJyxcblxuICAvKipcbiAgICogQ2xhc3MgYXBwbGllZCB0byB0aGUgY29udGVudCBjb250YWluZXJzLlxuICAgKiBAb3B0aW9uXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqIEBkZWZhdWx0ICd0YWJzLXBhbmVsJ1xuICAgKi9cbiAgcGFuZWxDbGFzczogJ3RhYnMtcGFuZWwnLFxuXG4gIC8qKlxuICAgKiBDbGFzcyBhcHBsaWVkIHRvIHRoZSBhY3RpdmUgY29udGVudCBjb250YWluZXIuXG4gICAqIEBvcHRpb25cbiAgICogQHR5cGUge3N0cmluZ31cbiAgICogQGRlZmF1bHQgJ2lzLWFjdGl2ZSdcbiAgICovXG4gIHBhbmVsQWN0aXZlQ2xhc3M6ICdpcy1hY3RpdmUnXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oVGFicywgJ1RhYnMnKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFRvZ2dsZXIgbW9kdWxlLlxuICogQG1vZHVsZSBmb3VuZGF0aW9uLnRvZ2dsZXJcbiAqIEByZXF1aXJlcyBmb3VuZGF0aW9uLnV0aWwubW90aW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLnRyaWdnZXJzXG4gKi9cblxuY2xhc3MgVG9nZ2xlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFRvZ2dsZXIuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgVG9nZ2xlciNpbml0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0galF1ZXJ5IG9iamVjdCB0byBhZGQgdGhlIHRyaWdnZXIgdG8uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGVzIHRvIHRoZSBkZWZhdWx0IHBsdWdpbiBzZXR0aW5ncy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVG9nZ2xlci5kZWZhdWx0cywgZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMuY2xhc3NOYW1lID0gJyc7XG5cbiAgICB0aGlzLl9pbml0KCk7XG4gICAgdGhpcy5fZXZlbnRzKCk7XG5cbiAgICBGb3VuZGF0aW9uLnJlZ2lzdGVyUGx1Z2luKHRoaXMsICdUb2dnbGVyJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIFRvZ2dsZXIgcGx1Z2luIGJ5IHBhcnNpbmcgdGhlIHRvZ2dsZSBjbGFzcyBmcm9tIGRhdGEtdG9nZ2xlciwgb3IgYW5pbWF0aW9uIGNsYXNzZXMgZnJvbSBkYXRhLWFuaW1hdGUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgdmFyIGlucHV0O1xuICAgIC8vIFBhcnNlIGFuaW1hdGlvbiBjbGFzc2VzIGlmIHRoZXkgd2VyZSBzZXRcbiAgICBpZiAodGhpcy5vcHRpb25zLmFuaW1hdGUpIHtcbiAgICAgIGlucHV0ID0gdGhpcy5vcHRpb25zLmFuaW1hdGUuc3BsaXQoJyAnKTtcblxuICAgICAgdGhpcy5hbmltYXRpb25JbiA9IGlucHV0WzBdO1xuICAgICAgdGhpcy5hbmltYXRpb25PdXQgPSBpbnB1dFsxXSB8fCBudWxsO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIHBhcnNlIHRvZ2dsZSBjbGFzc1xuICAgIGVsc2Uge1xuICAgICAgaW5wdXQgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3RvZ2dsZXInKTtcbiAgICAgIC8vIEFsbG93IGZvciBhIC4gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgc3RyaW5nXG4gICAgICB0aGlzLmNsYXNzTmFtZSA9IGlucHV0WzBdID09PSAnLicgPyBpbnB1dC5zbGljZSgxKSA6IGlucHV0O1xuICAgIH1cblxuICAgIC8vIEFkZCBBUklBIGF0dHJpYnV0ZXMgdG8gdHJpZ2dlcnNcbiAgICB2YXIgaWQgPSB0aGlzLiRlbGVtZW50WzBdLmlkO1xuICAgICQoYFtkYXRhLW9wZW49XCIke2lkfVwiXSwgW2RhdGEtY2xvc2U9XCIke2lkfVwiXSwgW2RhdGEtdG9nZ2xlPVwiJHtpZH1cIl1gKVxuICAgICAgLmF0dHIoJ2FyaWEtY29udHJvbHMnLCBpZCk7XG4gICAgLy8gSWYgdGhlIHRhcmdldCBpcyBoaWRkZW4sIGFkZCBhcmlhLWhpZGRlblxuICAgIHRoaXMuJGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIHRoaXMuJGVsZW1lbnQuaXMoJzpoaWRkZW4nKSA/IGZhbHNlIDogdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgZXZlbnRzIGZvciB0aGUgdG9nZ2xlIHRyaWdnZXIuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZigndG9nZ2xlLnpmLnRyaWdnZXInKS5vbigndG9nZ2xlLnpmLnRyaWdnZXInLCB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb2dnbGVzIHRoZSB0YXJnZXQgY2xhc3Mgb24gdGhlIHRhcmdldCBlbGVtZW50LiBBbiBldmVudCBpcyBmaXJlZCBmcm9tIHRoZSBvcmlnaW5hbCB0cmlnZ2VyIGRlcGVuZGluZyBvbiBpZiB0aGUgcmVzdWx0YW50IHN0YXRlIHdhcyBcIm9uXCIgb3IgXCJvZmZcIi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBmaXJlcyBUb2dnbGVyI29uXG4gICAqIEBmaXJlcyBUb2dnbGVyI29mZlxuICAgKi9cbiAgdG9nZ2xlKCkge1xuICAgIHRoaXNbIHRoaXMub3B0aW9ucy5hbmltYXRlID8gJ190b2dnbGVBbmltYXRlJyA6ICdfdG9nZ2xlQ2xhc3MnXSgpO1xuICB9XG5cbiAgX3RvZ2dsZUNsYXNzKCkge1xuICAgIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5jbGFzc05hbWUpO1xuXG4gICAgdmFyIGlzT24gPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKHRoaXMuY2xhc3NOYW1lKTtcbiAgICBpZiAoaXNPbikge1xuICAgICAgLyoqXG4gICAgICAgKiBGaXJlcyBpZiB0aGUgdGFyZ2V0IGVsZW1lbnQgaGFzIHRoZSBjbGFzcyBhZnRlciBhIHRvZ2dsZS5cbiAgICAgICAqIEBldmVudCBUb2dnbGVyI29uXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb24uemYudG9nZ2xlcicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8qKlxuICAgICAgICogRmlyZXMgaWYgdGhlIHRhcmdldCBlbGVtZW50IGRvZXMgbm90IGhhdmUgdGhlIGNsYXNzIGFmdGVyIGEgdG9nZ2xlLlxuICAgICAgICogQGV2ZW50IFRvZ2dsZXIjb2ZmXG4gICAgICAgKi9cbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignb2ZmLnpmLnRvZ2dsZXInKTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVBUklBKGlzT24pO1xuICAgIHRoaXMuJGVsZW1lbnQuZmluZCgnW2RhdGEtbXV0YXRlXScpLnRyaWdnZXIoJ211dGF0ZW1lLnpmLnRyaWdnZXInKTtcbiAgfVxuXG4gIF90b2dnbGVBbmltYXRlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5pcygnOmhpZGRlbicpKSB7XG4gICAgICBGb3VuZGF0aW9uLk1vdGlvbi5hbmltYXRlSW4odGhpcy4kZWxlbWVudCwgdGhpcy5hbmltYXRpb25JbiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLl91cGRhdGVBUklBKHRydWUpO1xuICAgICAgICB0aGlzLnRyaWdnZXIoJ29uLnpmLnRvZ2dsZXInKTtcbiAgICAgICAgdGhpcy5maW5kKCdbZGF0YS1tdXRhdGVdJykudHJpZ2dlcignbXV0YXRlbWUuemYudHJpZ2dlcicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgRm91bmRhdGlvbi5Nb3Rpb24uYW5pbWF0ZU91dCh0aGlzLiRlbGVtZW50LCB0aGlzLmFuaW1hdGlvbk91dCwgZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLl91cGRhdGVBUklBKGZhbHNlKTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdvZmYuemYudG9nZ2xlcicpO1xuICAgICAgICB0aGlzLmZpbmQoJ1tkYXRhLW11dGF0ZV0nKS50cmlnZ2VyKCdtdXRhdGVtZS56Zi50cmlnZ2VyJyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBfdXBkYXRlQVJJQShpc09uKSB7XG4gICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPbiA/IHRydWUgOiBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIFRvZ2dsZXIgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiRlbGVtZW50Lm9mZignLnpmLnRvZ2dsZXInKTtcbiAgICBGb3VuZGF0aW9uLnVucmVnaXN0ZXJQbHVnaW4odGhpcyk7XG4gIH1cbn1cblxuVG9nZ2xlci5kZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFRlbGxzIHRoZSBwbHVnaW4gaWYgdGhlIGVsZW1lbnQgc2hvdWxkIGFuaW1hdGVkIHdoZW4gdG9nZ2xlZC5cbiAgICogQG9wdGlvblxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIGFuaW1hdGU6IGZhbHNlXG59O1xuXG4vLyBXaW5kb3cgZXhwb3J0c1xuRm91bmRhdGlvbi5wbHVnaW4oVG9nZ2xlciwgJ1RvZ2dsZXInKTtcblxufShqUXVlcnkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4hZnVuY3Rpb24oJCkge1xuXG4vKipcbiAqIFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzIG1vZHVsZS5cbiAqIEBtb2R1bGUgZm91bmRhdGlvbi5yZXNwb25zaXZlQWNjb3JkaW9uVGFic1xuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC5rZXlib2FyZFxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24udXRpbC50aW1lckFuZEltYWdlTG9hZGVyXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi51dGlsLm1vdGlvblxuICogQHJlcXVpcmVzIGZvdW5kYXRpb24uYWNjb3JkaW9uXG4gKiBAcmVxdWlyZXMgZm91bmRhdGlvbi50YWJzXG4gKi9cblxuY2xhc3MgUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHJlc3BvbnNpdmUgYWNjb3JkaW9uIHRhYnMuXG4gICAqIEBjbGFzc1xuICAgKiBAZmlyZXMgUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMjaW5pdFxuICAgKiBAcGFyYW0ge2pRdWVyeX0gZWxlbWVudCAtIGpRdWVyeSBvYmplY3QgdG8gbWFrZSBpbnRvIGEgZHJvcGRvd24gbWVudS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBPdmVycmlkZXMgdG8gdGhlIGRlZmF1bHQgcGx1Z2luIHNldHRpbmdzLlxuICAgKi9cbiAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkKGVsZW1lbnQpO1xuICAgIHRoaXMub3B0aW9ucyAgPSAkLmV4dGVuZCh7fSwgdGhpcy4kZWxlbWVudC5kYXRhKCksIG9wdGlvbnMpO1xuICAgIHRoaXMucnVsZXMgPSB0aGlzLiRlbGVtZW50LmRhdGEoJ3Jlc3BvbnNpdmUtYWNjb3JkaW9uLXRhYnMnKTtcbiAgICB0aGlzLmN1cnJlbnRNcSA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50UGx1Z2luID0gbnVsbDtcbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuYXR0cignaWQnKSkge1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcsRm91bmRhdGlvbi5HZXRZb0RpZ2l0cyg2LCAncmVzcG9uc2l2ZWFjY29yZGlvbnRhYnMnKSk7XG4gICAgfTtcblxuICAgIHRoaXMuX2luaXQoKTtcbiAgICB0aGlzLl9ldmVudHMoKTtcblxuICAgIEZvdW5kYXRpb24ucmVnaXN0ZXJQbHVnaW4odGhpcywgJ1Jlc3BvbnNpdmVBY2NvcmRpb25UYWJzJyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIE1lbnUgYnkgcGFyc2luZyB0aGUgY2xhc3NlcyBmcm9tIHRoZSAnZGF0YS1yZXNwb25zaXZlLWFjY29yZGlvbi10YWJzJyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2luaXQoKSB7XG4gICAgLy8gVGhlIGZpcnN0IHRpbWUgYW4gSW50ZXJjaGFuZ2UgcGx1Z2luIGlzIGluaXRpYWxpemVkLCB0aGlzLnJ1bGVzIGlzIGNvbnZlcnRlZCBmcm9tIGEgc3RyaW5nIG9mIFwiY2xhc3Nlc1wiIHRvIGFuIG9iamVjdCBvZiBydWxlc1xuICAgIGlmICh0eXBlb2YgdGhpcy5ydWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBydWxlc1RyZWUgPSB7fTtcblxuICAgICAgLy8gUGFyc2UgcnVsZXMgZnJvbSBcImNsYXNzZXNcIiBwdWxsZWQgZnJvbSBkYXRhIGF0dHJpYnV0ZVxuICAgICAgbGV0IHJ1bGVzID0gdGhpcy5ydWxlcy5zcGxpdCgnICcpO1xuXG4gICAgICAvLyBJdGVyYXRlIHRocm91Z2ggZXZlcnkgcnVsZSBmb3VuZFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcnVsZSA9IHJ1bGVzW2ldLnNwbGl0KCctJyk7XG4gICAgICAgIGxldCBydWxlU2l6ZSA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMF0gOiAnc21hbGwnO1xuICAgICAgICBsZXQgcnVsZVBsdWdpbiA9IHJ1bGUubGVuZ3RoID4gMSA/IHJ1bGVbMV0gOiBydWxlWzBdO1xuXG4gICAgICAgIGlmIChNZW51UGx1Z2luc1tydWxlUGx1Z2luXSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJ1bGVzVHJlZVtydWxlU2l6ZV0gPSBNZW51UGx1Z2luc1tydWxlUGx1Z2luXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJ1bGVzID0gcnVsZXNUcmVlO1xuICAgIH1cblxuICAgIHRoaXMuX2dldEFsbE9wdGlvbnMoKTtcblxuICAgIGlmICghJC5pc0VtcHR5T2JqZWN0KHRoaXMucnVsZXMpKSB7XG4gICAgICB0aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRBbGxPcHRpb25zKCkge1xuICAgIC8vZ2V0IGFsbCBkZWZhdWx0cyBhbmQgb3B0aW9uc1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuYWxsT3B0aW9ucyA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBNZW51UGx1Z2lucykge1xuICAgICAgaWYgKE1lbnVQbHVnaW5zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIG9iaiA9IE1lbnVQbHVnaW5zW2tleV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIGR1bW15UGx1Z2luID0gJCgnPHVsPjwvdWw+Jyk7XG4gICAgICAgICAgdmFyIHRtcFBsdWdpbiA9IG5ldyBvYmoucGx1Z2luKGR1bW15UGx1Z2luLF90aGlzLm9wdGlvbnMpO1xuICAgICAgICAgIGZvciAodmFyIGtleUtleSBpbiB0bXBQbHVnaW4ub3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKHRtcFBsdWdpbi5vcHRpb25zLmhhc093blByb3BlcnR5KGtleUtleSkgJiYga2V5S2V5ICE9PSAnemZQbHVnaW4nKSB7XG4gICAgICAgICAgICAgIHZhciBvYmpPYmogPSB0bXBQbHVnaW4ub3B0aW9uc1trZXlLZXldO1xuICAgICAgICAgICAgICBfdGhpcy5hbGxPcHRpb25zW2tleUtleV0gPSBvYmpPYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRtcFBsdWdpbi5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZSkge1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGV2ZW50cyBmb3IgdGhlIE1lbnUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2V2ZW50cygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdjaGFuZ2VkLnpmLm1lZGlhcXVlcnknLCBmdW5jdGlvbigpIHtcbiAgICAgIF90aGlzLl9jaGVja01lZGlhUXVlcmllcygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGUgY3VycmVudCBzY3JlZW4gd2lkdGggYWdhaW5zdCBhdmFpbGFibGUgbWVkaWEgcXVlcmllcy4gSWYgdGhlIG1lZGlhIHF1ZXJ5IGhhcyBjaGFuZ2VkLCBhbmQgdGhlIHBsdWdpbiBuZWVkZWQgaGFzIGNoYW5nZWQsIHRoZSBwbHVnaW5zIHdpbGwgc3dhcCBvdXQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2NoZWNrTWVkaWFRdWVyaWVzKCkge1xuICAgIHZhciBtYXRjaGVkTXEsIF90aGlzID0gdGhpcztcbiAgICAvLyBJdGVyYXRlIHRocm91Z2ggZWFjaCBydWxlIGFuZCBmaW5kIHRoZSBsYXN0IG1hdGNoaW5nIHJ1bGVcbiAgICAkLmVhY2godGhpcy5ydWxlcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoRm91bmRhdGlvbi5NZWRpYVF1ZXJ5LmF0TGVhc3Qoa2V5KSkge1xuICAgICAgICBtYXRjaGVkTXEgPSBrZXk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBObyBtYXRjaD8gTm8gZGljZVxuICAgIGlmICghbWF0Y2hlZE1xKSByZXR1cm47XG5cbiAgICAvLyBQbHVnaW4gYWxyZWFkeSBpbml0aWFsaXplZD8gV2UgZ29vZFxuICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4gaW5zdGFuY2VvZiB0aGlzLnJ1bGVzW21hdGNoZWRNcV0ucGx1Z2luKSByZXR1cm47XG5cbiAgICAvLyBSZW1vdmUgZXhpc3RpbmcgcGx1Z2luLXNwZWNpZmljIENTUyBjbGFzc2VzXG4gICAgJC5lYWNoKE1lbnVQbHVnaW5zLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICBfdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh2YWx1ZS5jc3NDbGFzcyk7XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgdGhlIENTUyBjbGFzcyBmb3IgdGhlIG5ldyBwbHVnaW5cbiAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMucnVsZXNbbWF0Y2hlZE1xXS5jc3NDbGFzcyk7XG5cbiAgICAvLyBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG5ldyBwbHVnaW5cbiAgICBpZiAodGhpcy5jdXJyZW50UGx1Z2luKSB7XG4gICAgICAvL2Rvbid0IGtub3cgd2h5IGJ1dCBvbiBuZXN0ZWQgZWxlbWVudHMgZGF0YSB6ZlBsdWdpbiBnZXQncyBsb3N0XG4gICAgICBpZiAoIXRoaXMuY3VycmVudFBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpICYmIHRoaXMuc3RvcmV6ZkRhdGEpIHRoaXMuY3VycmVudFBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicsdGhpcy5zdG9yZXpmRGF0YSk7XG4gICAgICB0aGlzLmN1cnJlbnRQbHVnaW4uZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLl9oYW5kbGVNYXJrdXAodGhpcy5ydWxlc1ttYXRjaGVkTXFdLmNzc0NsYXNzKTtcbiAgICB0aGlzLmN1cnJlbnRQbHVnaW4gPSBuZXcgdGhpcy5ydWxlc1ttYXRjaGVkTXFdLnBsdWdpbih0aGlzLiRlbGVtZW50LCB7fSk7XG4gICAgdGhpcy5zdG9yZXpmRGF0YSA9IHRoaXMuY3VycmVudFBsdWdpbi4kZWxlbWVudC5kYXRhKCd6ZlBsdWdpbicpO1xuXG4gIH1cblxuICBfaGFuZGxlTWFya3VwKHRvU2V0KXtcbiAgICB2YXIgX3RoaXMgPSB0aGlzLCBmcm9tU3RyaW5nID0gJ2FjY29yZGlvbic7XG4gICAgdmFyICRwYW5lbHMgPSAkKCdbZGF0YS10YWJzLWNvbnRlbnQ9Jyt0aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykrJ10nKTtcbiAgICBpZiAoJHBhbmVscy5sZW5ndGgpIGZyb21TdHJpbmcgPSAndGFicyc7XG4gICAgaWYgKGZyb21TdHJpbmcgPT09IHRvU2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfTtcblxuICAgIHZhciB0YWJzVGl0bGUgPSBfdGhpcy5hbGxPcHRpb25zLmxpbmtDbGFzcz9fdGhpcy5hbGxPcHRpb25zLmxpbmtDbGFzczondGFicy10aXRsZSc7XG4gICAgdmFyIHRhYnNQYW5lbCA9IF90aGlzLmFsbE9wdGlvbnMucGFuZWxDbGFzcz9fdGhpcy5hbGxPcHRpb25zLnBhbmVsQ2xhc3M6J3RhYnMtcGFuZWwnO1xuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVBdHRyKCdyb2xlJyk7XG4gICAgdmFyICRsaUhlYWRzID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbignLicrdGFic1RpdGxlKycsW2RhdGEtYWNjb3JkaW9uLWl0ZW1dJykucmVtb3ZlQ2xhc3ModGFic1RpdGxlKS5yZW1vdmVDbGFzcygnYWNjb3JkaW9uLWl0ZW0nKS5yZW1vdmVBdHRyKCdkYXRhLWFjY29yZGlvbi1pdGVtJyk7XG4gICAgdmFyICRsaUhlYWRzQSA9ICRsaUhlYWRzLmNoaWxkcmVuKCdhJykucmVtb3ZlQ2xhc3MoJ2FjY29yZGlvbi10aXRsZScpO1xuXG4gICAgaWYgKGZyb21TdHJpbmcgPT09ICd0YWJzJykge1xuICAgICAgJHBhbmVscyA9ICRwYW5lbHMuY2hpbGRyZW4oJy4nK3RhYnNQYW5lbCkucmVtb3ZlQ2xhc3ModGFic1BhbmVsKS5yZW1vdmVBdHRyKCdyb2xlJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWxhYmVsbGVkYnknKTtcbiAgICAgICRwYW5lbHMuY2hpbGRyZW4oJ2EnKS5yZW1vdmVBdHRyKCdyb2xlJykucmVtb3ZlQXR0cignYXJpYS1jb250cm9scycpLnJlbW92ZUF0dHIoJ2FyaWEtc2VsZWN0ZWQnKTtcbiAgICB9ZWxzZXtcbiAgICAgICRwYW5lbHMgPSAkbGlIZWFkcy5jaGlsZHJlbignW2RhdGEtdGFiLWNvbnRlbnRdJykucmVtb3ZlQ2xhc3MoJ2FjY29yZGlvbi1jb250ZW50Jyk7XG4gICAgfTtcblxuICAgICRwYW5lbHMuY3NzKHtkaXNwbGF5OicnLHZpc2liaWxpdHk6Jyd9KTtcbiAgICAkbGlIZWFkcy5jc3Moe2Rpc3BsYXk6JycsdmlzaWJpbGl0eTonJ30pO1xuICAgIGlmICh0b1NldCA9PT0gJ2FjY29yZGlvbicpIHtcbiAgICAgICRwYW5lbHMuZWFjaChmdW5jdGlvbihrZXksdmFsdWUpe1xuICAgICAgICAkKHZhbHVlKS5hcHBlbmRUbygkbGlIZWFkcy5nZXQoa2V5KSkuYWRkQ2xhc3MoJ2FjY29yZGlvbi1jb250ZW50JykuYXR0cignZGF0YS10YWItY29udGVudCcsJycpLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKS5jc3Moe2hlaWdodDonJ30pO1xuICAgICAgICAkKCdbZGF0YS10YWJzLWNvbnRlbnQ9JytfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKyddJykuYWZ0ZXIoJzxkaXYgaWQ9XCJ0YWJzLXBsYWNlaG9sZGVyLScrX3RoaXMuJGVsZW1lbnQuYXR0cignaWQnKSsnXCI+PC9kaXY+JykucmVtb3ZlKCk7XG4gICAgICAgICRsaUhlYWRzLmFkZENsYXNzKCdhY2NvcmRpb24taXRlbScpLmF0dHIoJ2RhdGEtYWNjb3JkaW9uLWl0ZW0nLCcnKTtcbiAgICAgICAgJGxpSGVhZHNBLmFkZENsYXNzKCdhY2NvcmRpb24tdGl0bGUnKTtcbiAgICAgIH0pO1xuICAgIH1lbHNlIGlmICh0b1NldCA9PT0gJ3RhYnMnKXtcbiAgICAgIHZhciAkdGFic0NvbnRlbnQgPSAkKCdbZGF0YS10YWJzLWNvbnRlbnQ9JytfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKyddJyk7XG4gICAgICB2YXIgJHBsYWNlaG9sZGVyID0gJCgnI3RhYnMtcGxhY2Vob2xkZXItJytfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICAgIGlmICgkcGxhY2Vob2xkZXIubGVuZ3RoKSB7XG4gICAgICAgICR0YWJzQ29udGVudCA9ICQoJzxkaXYgY2xhc3M9XCJ0YWJzLWNvbnRlbnRcIj48L2Rpdj4nKS5pbnNlcnRBZnRlcigkcGxhY2Vob2xkZXIpLmF0dHIoJ2RhdGEtdGFicy1jb250ZW50JyxfdGhpcy4kZWxlbWVudC5hdHRyKCdpZCcpKTtcbiAgICAgICAgJHBsYWNlaG9sZGVyLnJlbW92ZSgpO1xuICAgICAgfWVsc2V7XG4gICAgICAgICR0YWJzQ29udGVudCA9ICQoJzxkaXYgY2xhc3M9XCJ0YWJzLWNvbnRlbnRcIj48L2Rpdj4nKS5pbnNlcnRBZnRlcihfdGhpcy4kZWxlbWVudCkuYXR0cignZGF0YS10YWJzLWNvbnRlbnQnLF90aGlzLiRlbGVtZW50LmF0dHIoJ2lkJykpO1xuICAgICAgfTtcbiAgICAgICRwYW5lbHMuZWFjaChmdW5jdGlvbihrZXksdmFsdWUpe1xuICAgICAgICB2YXIgdGVtcFZhbHVlID0gJCh2YWx1ZSkuYXBwZW5kVG8oJHRhYnNDb250ZW50KS5hZGRDbGFzcyh0YWJzUGFuZWwpO1xuICAgICAgICB2YXIgaGFzaCA9ICRsaUhlYWRzQS5nZXQoa2V5KS5oYXNoLnNsaWNlKDEpO1xuICAgICAgICB2YXIgaWQgPSAkKHZhbHVlKS5hdHRyKCdpZCcpIHx8IEZvdW5kYXRpb24uR2V0WW9EaWdpdHMoNiwgJ2FjY29yZGlvbicpO1xuICAgICAgICBpZiAoaGFzaCAhPT0gaWQpIHtcbiAgICAgICAgICBpZiAoaGFzaCAhPT0gJycpIHtcbiAgICAgICAgICAgICQodmFsdWUpLmF0dHIoJ2lkJyxoYXNoKTtcbiAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGhhc2ggPSBpZDtcbiAgICAgICAgICAgICQodmFsdWUpLmF0dHIoJ2lkJyxoYXNoKTtcbiAgICAgICAgICAgICQoJGxpSGVhZHNBLmdldChrZXkpKS5hdHRyKCdocmVmJywkKCRsaUhlYWRzQS5nZXQoa2V5KSkuYXR0cignaHJlZicpLnJlcGxhY2UoJyMnLCcnKSsnIycraGFzaCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGlzQWN0aXZlID0gJCgkbGlIZWFkcy5nZXQoa2V5KSkuaGFzQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICB0ZW1wVmFsdWUuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgICAkbGlIZWFkcy5hZGRDbGFzcyh0YWJzVGl0bGUpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGluc3RhbmNlIG9mIHRoZSBjdXJyZW50IHBsdWdpbiBvbiB0aGlzIGVsZW1lbnQsIGFzIHdlbGwgYXMgdGhlIHdpbmRvdyByZXNpemUgaGFuZGxlciB0aGF0IHN3aXRjaGVzIHRoZSBwbHVnaW5zIG91dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRQbHVnaW4pIHRoaXMuY3VycmVudFBsdWdpbi5kZXN0cm95KCk7XG4gICAgJCh3aW5kb3cpLm9mZignLnpmLlJlc3BvbnNpdmVBY2NvcmRpb25UYWJzJyk7XG4gICAgRm91bmRhdGlvbi51bnJlZ2lzdGVyUGx1Z2luKHRoaXMpO1xuICB9XG59XG5cblJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLmRlZmF1bHRzID0ge307XG5cbi8vIFRoZSBwbHVnaW4gbWF0Y2hlcyB0aGUgcGx1Z2luIGNsYXNzZXMgd2l0aCB0aGVzZSBwbHVnaW4gaW5zdGFuY2VzLlxudmFyIE1lbnVQbHVnaW5zID0ge1xuICB0YWJzOiB7XG4gICAgY3NzQ2xhc3M6ICd0YWJzJyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnMudGFicyB8fCBudWxsXG4gIH0sXG4gIGFjY29yZGlvbjoge1xuICAgIGNzc0NsYXNzOiAnYWNjb3JkaW9uJyxcbiAgICBwbHVnaW46IEZvdW5kYXRpb24uX3BsdWdpbnMuYWNjb3JkaW9uIHx8IG51bGxcbiAgfVxufTtcblxuLy8gV2luZG93IGV4cG9ydHNcbkZvdW5kYXRpb24ucGx1Z2luKFJlc3BvbnNpdmVBY2NvcmRpb25UYWJzLCAnUmVzcG9uc2l2ZUFjY29yZGlvblRhYnMnKTtcblxufShqUXVlcnkpO1xuIiwiLyohXG4gKiBqUXVlcnkgQ29va2llIFBsdWdpbiB2MS40LjFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXJoYXJ0bC9qcXVlcnktY29va2llXG4gKlxuICogQ29weXJpZ2h0IDIwMTMgS2xhdXMgSGFydGxcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICovXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcblx0aWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIEFNRFxuXHRcdGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcblx0fSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcblx0XHQvLyBDb21tb25KU1xuXHRcdGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpO1xuXHR9IGVsc2Uge1xuXHRcdC8vIEJyb3dzZXIgZ2xvYmFsc1xuXHRcdGZhY3RvcnkoalF1ZXJ5KTtcblx0fVxufShmdW5jdGlvbiAoJCkge1xuXG5cdHZhciBwbHVzZXMgPSAvXFwrL2c7XG5cblx0ZnVuY3Rpb24gZW5jb2RlKHMpIHtcblx0XHRyZXR1cm4gY29uZmlnLnJhdyA/IHMgOiBlbmNvZGVVUklDb21wb25lbnQocyk7XG5cdH1cblxuXHRmdW5jdGlvbiBkZWNvZGUocykge1xuXHRcdHJldHVybiBjb25maWcucmF3ID8gcyA6IGRlY29kZVVSSUNvbXBvbmVudChzKTtcblx0fVxuXG5cdGZ1bmN0aW9uIHN0cmluZ2lmeUNvb2tpZVZhbHVlKHZhbHVlKSB7XG5cdFx0cmV0dXJuIGVuY29kZShjb25maWcuanNvbiA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IFN0cmluZyh2YWx1ZSkpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcGFyc2VDb29raWVWYWx1ZShzKSB7XG5cdFx0aWYgKHMuaW5kZXhPZignXCInKSA9PT0gMCkge1xuXHRcdFx0Ly8gVGhpcyBpcyBhIHF1b3RlZCBjb29raWUgYXMgYWNjb3JkaW5nIHRvIFJGQzIwNjgsIHVuZXNjYXBlLi4uXG5cdFx0XHRzID0gcy5zbGljZSgxLCAtMSkucmVwbGFjZSgvXFxcXFwiL2csICdcIicpLnJlcGxhY2UoL1xcXFxcXFxcL2csICdcXFxcJyk7XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdC8vIFJlcGxhY2Ugc2VydmVyLXNpZGUgd3JpdHRlbiBwbHVzZXMgd2l0aCBzcGFjZXMuXG5cdFx0XHQvLyBJZiB3ZSBjYW4ndCBkZWNvZGUgdGhlIGNvb2tpZSwgaWdub3JlIGl0LCBpdCdzIHVudXNhYmxlLlxuXHRcdFx0Ly8gSWYgd2UgY2FuJ3QgcGFyc2UgdGhlIGNvb2tpZSwgaWdub3JlIGl0LCBpdCdzIHVudXNhYmxlLlxuXHRcdFx0cyA9IGRlY29kZVVSSUNvbXBvbmVudChzLnJlcGxhY2UocGx1c2VzLCAnICcpKTtcblx0XHRcdHJldHVybiBjb25maWcuanNvbiA/IEpTT04ucGFyc2UocykgOiBzO1xuXHRcdH0gY2F0Y2goZSkge31cblx0fVxuXG5cdGZ1bmN0aW9uIHJlYWQocywgY29udmVydGVyKSB7XG5cdFx0dmFyIHZhbHVlID0gY29uZmlnLnJhdyA/IHMgOiBwYXJzZUNvb2tpZVZhbHVlKHMpO1xuXHRcdHJldHVybiAkLmlzRnVuY3Rpb24oY29udmVydGVyKSA/IGNvbnZlcnRlcih2YWx1ZSkgOiB2YWx1ZTtcblx0fVxuXG5cdHZhciBjb25maWcgPSAkLmNvb2tpZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlLCBvcHRpb25zKSB7XG5cblx0XHQvLyBXcml0ZVxuXG5cdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgISQuaXNGdW5jdGlvbih2YWx1ZSkpIHtcblx0XHRcdG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgY29uZmlnLmRlZmF1bHRzLCBvcHRpb25zKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLmV4cGlyZXMgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdHZhciBkYXlzID0gb3B0aW9ucy5leHBpcmVzLCB0ID0gb3B0aW9ucy5leHBpcmVzID0gbmV3IERhdGUoKTtcblx0XHRcdFx0dC5zZXRUaW1lKCt0ICsgZGF5cyAqIDg2NGUrNSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoZG9jdW1lbnQuY29va2llID0gW1xuXHRcdFx0XHRlbmNvZGUoa2V5KSwgJz0nLCBzdHJpbmdpZnlDb29raWVWYWx1ZSh2YWx1ZSksXG5cdFx0XHRcdG9wdGlvbnMuZXhwaXJlcyA/ICc7IGV4cGlyZXM9JyArIG9wdGlvbnMuZXhwaXJlcy50b1VUQ1N0cmluZygpIDogJycsIC8vIHVzZSBleHBpcmVzIGF0dHJpYnV0ZSwgbWF4LWFnZSBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFXG5cdFx0XHRcdG9wdGlvbnMucGF0aCAgICA/ICc7IHBhdGg9JyArIG9wdGlvbnMucGF0aCA6ICcnLFxuXHRcdFx0XHRvcHRpb25zLmRvbWFpbiAgPyAnOyBkb21haW49JyArIG9wdGlvbnMuZG9tYWluIDogJycsXG5cdFx0XHRcdG9wdGlvbnMuc2VjdXJlICA/ICc7IHNlY3VyZScgOiAnJ1xuXHRcdFx0XS5qb2luKCcnKSk7XG5cdFx0fVxuXG5cdFx0Ly8gUmVhZFxuXG5cdFx0dmFyIHJlc3VsdCA9IGtleSA/IHVuZGVmaW5lZCA6IHt9O1xuXG5cdFx0Ly8gVG8gcHJldmVudCB0aGUgZm9yIGxvb3AgaW4gdGhlIGZpcnN0IHBsYWNlIGFzc2lnbiBhbiBlbXB0eSBhcnJheVxuXHRcdC8vIGluIGNhc2UgdGhlcmUgYXJlIG5vIGNvb2tpZXMgYXQgYWxsLiBBbHNvIHByZXZlbnRzIG9kZCByZXN1bHQgd2hlblxuXHRcdC8vIGNhbGxpbmcgJC5jb29raWUoKS5cblx0XHR2YXIgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZSA/IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKSA6IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGwgPSBjb29raWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHRcdFx0dmFyIHBhcnRzID0gY29va2llc1tpXS5zcGxpdCgnPScpO1xuXHRcdFx0dmFyIG5hbWUgPSBkZWNvZGUocGFydHMuc2hpZnQoKSk7XG5cdFx0XHR2YXIgY29va2llID0gcGFydHMuam9pbignPScpO1xuXG5cdFx0XHRpZiAoa2V5ICYmIGtleSA9PT0gbmFtZSkge1xuXHRcdFx0XHQvLyBJZiBzZWNvbmQgYXJndW1lbnQgKHZhbHVlKSBpcyBhIGZ1bmN0aW9uIGl0J3MgYSBjb252ZXJ0ZXIuLi5cblx0XHRcdFx0cmVzdWx0ID0gcmVhZChjb29raWUsIHZhbHVlKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFByZXZlbnQgc3RvcmluZyBhIGNvb2tpZSB0aGF0IHdlIGNvdWxkbid0IGRlY29kZS5cblx0XHRcdGlmICgha2V5ICYmIChjb29raWUgPSByZWFkKGNvb2tpZSkpICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmVzdWx0W25hbWVdID0gY29va2llO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07XG5cblx0Y29uZmlnLmRlZmF1bHRzID0ge307XG5cblx0JC5yZW1vdmVDb29raWUgPSBmdW5jdGlvbiAoa2V5LCBvcHRpb25zKSB7XG5cdFx0aWYgKCQuY29va2llKGtleSkgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIE11c3Qgbm90IGFsdGVyIG9wdGlvbnMsIHRodXMgZXh0ZW5kaW5nIGEgZnJlc2ggb2JqZWN0Li4uXG5cdFx0JC5jb29raWUoa2V5LCAnJywgJC5leHRlbmQoe30sIG9wdGlvbnMsIHsgZXhwaXJlczogLTEgfSkpO1xuXHRcdHJldHVybiAhJC5jb29raWUoa2V5KTtcblx0fTtcblxufSkpO1xuIiwiLyohXG4gKiBqUXVlcnkgQ29va2llYmFyIFBsdWdpblxuICogaHR0cHM6Ly9naXRodWIuY29tL2Nhcmx3b29kaG91c2UvanF1ZXJ5LmNvb2tpZUJhclxuICpcbiAqIENvcHlyaWdodCAyMDEyLCBDYXJsIFdvb2Rob3VzZVxuICogRGlzY2xhaW1lcjogaWYgeW91IHN0aWxsIGdldCBmaW5lZCBmb3Igbm90IGNvbXBseWluZyB3aXRoIHRoZSBldSBjb29raWVsYXcsIGl0J3Mgbm90IG91ciBmYXVsdC5cbiAqL1xuIFxuKGZ1bmN0aW9uKCAkICl7XG4gICQuZm4uY29va2llQmFyID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7ICBcblx0dmFyIHNldHRpbmdzID0gJC5leHRlbmQoIHtcbiAgICAgICdjbG9zZUJ1dHRvbicgOiAnbm9uZScsXG5cdCAgJ3NlY3VyZScgOiBmYWxzZSxcblx0ICAncGF0aCcgOiAnLycsXG5cdCAgJ2RvbWFpbicgOiAnJ1xuICAgIH0sIG9wdGlvbnMpO1xuICBcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyAgICAgICBcblx0XHR2YXIgY29va2llYmFyID0gJCh0aGlzKTtcblx0XHRcblx0XHQvLyBqdXN0IGluIGNhc2UgdGhleSBkaWRudCBoaWRlIGl0IGJ5IGRlZmF1bHQuXG5cdFx0Y29va2llYmFyLmhpZGUoKTtcblxuXHRcdC8vIGlmIGNsb3NlIGJ1dHRvbiBub3QgZGVmaW5lZC4gZGVmaW5lIGl0IVxuXHRcdGlmKHNldHRpbmdzLmNsb3NlQnV0dG9uID09ICdub25lJylcblx0XHR7XG5cdFx0XHRjb29raWViYXIuYXBwZW5kKCc8YSBjbGFzcz1cImNvb2tpZWJhci1jbG9zZVwiPkNvbnRpbnVlPC9hPicpO1xuXHRcdFx0c2V0dGluZ3MgPSAkLmV4dGVuZCgge1xuXHRcdFx0XHQnY2xvc2VCdXR0b24nIDogJy5jb29raWViYXItY2xvc2UnXG5cdFx0XHR9LCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRpZiAoJC5jb29raWUoJ2Nvb2tpZWJhcicpICE9ICdoaWRlJykge1xuXHRcdCAgY29va2llYmFyLnNob3coKTtcblx0XHR9XG5cblx0XHRjb29raWViYXIuZmluZChzZXR0aW5ncy5jbG9zZUJ1dHRvbikuY2xpY2soZnVuY3Rpb24oKSB7XG5cdFx0XHRjb29raWViYXIuaGlkZSgpO1xuXHRcdFx0JC5jb29raWUoJ2Nvb2tpZWJhcicsICdoaWRlJywgeyBwYXRoOiBzZXR0aW5ncy5wYXRoLCBzZWN1cmU6IHNldHRpbmdzLnNlY3VyZSwgZG9tYWluOiBzZXR0aW5ncy5kb21haW4sIGV4cGlyZXM6IDMwIH0pO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0pO1xuICAgIH0pO1xuICB9O1xuICBcbiAgLy8gc2VsZiBpbmplY3Rpb24gaW5pdFxuICAkLmNvb2tpZUJhciA9IGZ1bmN0aW9uKCBvcHRpb25zICkgeyAgXG5cdCQoJ2JvZHknKS5wcmVwZW5kKCc8ZGl2IGNsYXNzPVwidWktd2lkZ2V0XCI+PGRpdiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCIgY2xhc3M9XCJjb29raWUtbWVzc2FnZSB1aS13aWRnZXQtaGVhZGVyIGJsdWVcIj48cD5CeSB1c2luZyB0aGlzIHdlYnNpdGUgeW91IGFsbG93IHVzIHRvIHBsYWNlIGNvb2tpZXMgb24geW91ciBjb21wdXRlci4gVGhleSBhcmUgaGFybWxlc3MgYW5kIG5ldmVyIHBlcnNvbmFsbHkgaWRlbnRpZnkgeW91LjwvcD48L2Rpdj48L2Rpdj4nKTsgICAgIFxuXHQkKCcuY29va2llLW1lc3NhZ2UnKS5jb29raWVCYXIob3B0aW9ucyk7XG4gIH07XG59KSggalF1ZXJ5ICk7XG5cbi8qIVxuICogRGVwZW5kYW5jeTpcbiAqIGpRdWVyeSBDb29raWUgUGx1Z2luXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2FyaGFydGwvanF1ZXJ5LWNvb2tpZVxuICpcbiAqIENvcHlyaWdodCAyMDExLCBLbGF1cyBIYXJ0bFxuICogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIG9yIEdQTCBWZXJzaW9uIDIgbGljZW5zZXMuXG4gKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9HUEwtMi4wXG4gKi9cbihmdW5jdGlvbigkKSB7XG4gICAgJC5jb29raWUgPSBmdW5jdGlvbihrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIC8vIGtleSBhbmQgYXQgbGVhc3QgdmFsdWUgZ2l2ZW4sIHNldCBjb29raWUuLi5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmICghL09iamVjdC8udGVzdChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpKSB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBvcHRpb25zKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmV4cGlyZXMgPSAtMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmV4cGlyZXMgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRheXMgPSBvcHRpb25zLmV4cGlyZXMsIHQgPSBvcHRpb25zLmV4cGlyZXMgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIHQuc2V0RGF0ZSh0LmdldERhdGUoKSArIGRheXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiAoZG9jdW1lbnQuY29va2llID0gW1xuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChrZXkpLCAnPScsIG9wdGlvbnMucmF3ID8gdmFsdWUgOiBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuZXhwaXJlcyA/ICc7IGV4cGlyZXM9JyArIG9wdGlvbnMuZXhwaXJlcy50b1VUQ1N0cmluZygpIDogJycsIC8vIHVzZSBleHBpcmVzIGF0dHJpYnV0ZSwgbWF4LWFnZSBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wYXRoICAgID8gJzsgcGF0aD0nICsgb3B0aW9ucy5wYXRoIDogJycsXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5kb21haW4gID8gJzsgZG9tYWluPScgKyBvcHRpb25zLmRvbWFpbiA6ICcnLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuc2VjdXJlICA/ICc7IHNlY3VyZScgOiAnJ1xuICAgICAgICAgICAgXS5qb2luKCcnKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBrZXkgYW5kIHBvc3NpYmx5IG9wdGlvbnMgZ2l2ZW4sIGdldCBjb29raWUuLi5cbiAgICAgICAgb3B0aW9ucyA9IHZhbHVlIHx8IHt9O1xuICAgICAgICB2YXIgZGVjb2RlID0gb3B0aW9ucy5yYXcgPyBmdW5jdGlvbihzKSB7IHJldHVybiBzOyB9IDogZGVjb2RlVVJJQ29tcG9uZW50O1xuXG4gICAgICAgIHZhciBwYWlycyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHBhaXI7IHBhaXIgPSBwYWlyc1tpXSAmJiBwYWlyc1tpXS5zcGxpdCgnPScpOyBpKyspIHtcbiAgICAgICAgICAgIC8vIElFIHNhdmVzIGNvb2tpZXMgd2l0aCBlbXB0eSBzdHJpbmcgYXMgXCJjOyBcIiwgZS5nLiB3aXRob3V0IFwiPVwiIGFzIG9wcG9zZWQgdG8gRU9NQiwgdGh1cyBwYWlyWzFdIG1heSBiZSB1bmRlZmluZWRcbiAgICAgICAgICAgIGlmIChkZWNvZGUocGFpclswXSkgPT09IGtleSkgcmV0dXJuIGRlY29kZShwYWlyWzFdIHx8ICcnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xufSkoalF1ZXJ5KTsiLCIvKiFcbiAqIGpRdWVyeSBSYXR5IEZBIC0gQSBTdGFyIFJhdGluZyBQbHVnaW4gd2l0aCBGb250IEF3ZXNvbWVcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBUaGUgTUlUIExpY2Vuc2VcbiAqXG4gKiBAYXV0aG9yICA6IEphY29iIE92ZXJnYWFyZFxuICogQGRvYyAgICAgOiBodHRwOi8vamFjb2I4Ny5naXRodWIuaW8vcmF0eS1mYS9cbiAqIEB2ZXJzaW9uIDogMC4xLjFcbiAqXG4gKi9cblxuOyhmdW5jdGlvbigkKSB7XG5cbiAgdmFyIG1ldGhvZHMgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oc2V0dGluZ3MpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIG1ldGhvZHMuZGVzdHJveS5jYWxsKHRoaXMpO1xuXG4gICAgICAgIHRoaXMub3B0ID0gJC5leHRlbmQodHJ1ZSwge30sICQuZm4ucmF0eS5kZWZhdWx0cywgc2V0dGluZ3MpO1xuXG4gICAgICAgIHZhciB0aGF0ICA9ICQodGhpcyksXG4gICAgICAgICAgICBpbml0cyA9IFsnbnVtYmVyJywgJ3JlYWRPbmx5JywgJ3Njb3JlJywgJ3Njb3JlTmFtZSddO1xuXG4gICAgICAgIG1ldGhvZHMuX2NhbGxiYWNrLmNhbGwodGhpcywgaW5pdHMpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdC5wcmVjaXNpb24pIHtcbiAgICAgICAgICBtZXRob2RzLl9hZGp1c3RQcmVjaXNpb24uY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3B0Lm51bWJlciA9IG1ldGhvZHMuX2JldHdlZW4odGhpcy5vcHQubnVtYmVyLCAwLCB0aGlzLm9wdC5udW1iZXJNYXgpO1xuXG4gICAgICAgIHRoaXMuc3RhcnMgPSBtZXRob2RzLl9jcmVhdGVTdGFycy5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLnNjb3JlID0gbWV0aG9kcy5fY3JlYXRlU2NvcmUuY2FsbCh0aGlzKTtcblxuICAgICAgICBtZXRob2RzLl9hcHBseS5jYWxsKHRoaXMsIHRoaXMub3B0LnNjb3JlKTtcblxuICAgICAgICBpZiAodGhpcy5vcHQuY2FuY2VsKSB7XG4gICAgICAgICAgdGhpcy5jYW5jZWwgPSBtZXRob2RzLl9jcmVhdGVDYW5jZWwuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdC53aWR0aCkge1xuICAgICAgICAgIHRoYXQuY3NzKCd3aWR0aCcsIHRoaXMub3B0LndpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdC5yZWFkT25seSkge1xuICAgICAgICAgIG1ldGhvZHMuX2xvY2suY2FsbCh0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGF0LmNzcygnY3Vyc29yJywgJ3BvaW50ZXInKTtcbiAgICAgICAgICBtZXRob2RzLl9iaW5kcy5jYWxsKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWV0aG9kcy5fdGFyZ2V0LmNhbGwodGhpcywgdGhpcy5vcHQuc2NvcmUpO1xuXG4gICAgICAgIHRoYXQuZGF0YSh7ICdzZXR0aW5ncyc6IHRoaXMub3B0LCAncmF0eSc6IHRydWUgfSk7XG4gICAgICB9KTtcbiAgICB9LCBfYWRqdXN0UHJlY2lzaW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMub3B0LnRhcmdldFR5cGUgPSAnc2NvcmUnO1xuICAgICAgdGhpcy5vcHQuaGFsZiAgICAgICA9IHRydWU7XG4gICAgfSwgX2FwcGx5OiBmdW5jdGlvbihzY29yZSkge1xuICAgICAgaWYgKHNjb3JlICYmIHNjb3JlID4gMCkge1xuICAgICAgICBzY29yZSA9IG1ldGhvZHMuX2JldHdlZW4oc2NvcmUsIDAsIHRoaXMub3B0Lm51bWJlcik7XG4gICAgICAgIHRoaXMuc2NvcmUudmFsKHNjb3JlKTtcbiAgICAgIH1cblxuICAgICAgbWV0aG9kcy5fZmlsbC5jYWxsKHRoaXMsIHNjb3JlKTtcblxuICAgICAgaWYgKHNjb3JlKSB7XG4gICAgICAgIG1ldGhvZHMuX3JvdW5kU3RhcnMuY2FsbCh0aGlzLCBzY29yZSk7XG4gICAgICB9XG4gICAgfSwgX2JldHdlZW46IGZ1bmN0aW9uKHZhbHVlLCBtaW4sIG1heCkge1xuICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KHBhcnNlRmxvYXQodmFsdWUpLCBtaW4pLCBtYXgpO1xuICAgIH0sIF9iaW5kczogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5jYW5jZWwpIHtcbiAgICAgICAgbWV0aG9kcy5fYmluZENhbmNlbC5jYWxsKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBtZXRob2RzLl9iaW5kQ2xpY2suY2FsbCh0aGlzKTtcbiAgICAgIG1ldGhvZHMuX2JpbmRPdXQuY2FsbCh0aGlzKTtcbiAgICAgIG1ldGhvZHMuX2JpbmRPdmVyLmNhbGwodGhpcyk7XG4gICAgfSwgX2JpbmRDYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgbWV0aG9kcy5fYmluZENsaWNrQ2FuY2VsLmNhbGwodGhpcyk7XG4gICAgICBtZXRob2RzLl9iaW5kT3V0Q2FuY2VsLmNhbGwodGhpcyk7XG4gICAgICBtZXRob2RzLl9iaW5kT3ZlckNhbmNlbC5jYWxsKHRoaXMpO1xuICAgIH0sIF9iaW5kQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgIHRoYXQgPSAkKHNlbGYpO1xuXG4gICAgICBzZWxmLnN0YXJzLm9uKCdjbGljay5yYXR5JywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYuc2NvcmUudmFsKChzZWxmLm9wdC5oYWxmIHx8IHNlbGYub3B0LnByZWNpc2lvbikgPyB0aGF0LmRhdGEoJ3Njb3JlJykgOiAkKHRoaXMpLmRhdGEoJ3Njb3JlJykpO1xuXG4gICAgICAgIGlmIChzZWxmLm9wdC5jbGljaykge1xuICAgICAgICAgIHNlbGYub3B0LmNsaWNrLmNhbGwoc2VsZiwgcGFyc2VGbG9hdChzZWxmLnNjb3JlLnZhbCgpKSwgZXZ0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgX2JpbmRDbGlja0NhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHNlbGYuY2FuY2VsLm9uKCdjbGljay5yYXR5JywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHNlbGYuc2NvcmUucmVtb3ZlQXR0cigndmFsdWUnKTtcblxuICAgICAgICBpZiAoc2VsZi5vcHQuY2xpY2spIHtcbiAgICAgICAgICBzZWxmLm9wdC5jbGljay5jYWxsKHNlbGYsIG51bGwsIGV2dCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIF9iaW5kT3V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgJCh0aGlzKS5vbignbW91c2VsZWF2ZS5yYXR5JywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHZhciBzY29yZSA9IHBhcnNlRmxvYXQoc2VsZi5zY29yZS52YWwoKSkgfHwgdW5kZWZpbmVkO1xuXG4gICAgICAgIG1ldGhvZHMuX2FwcGx5LmNhbGwoc2VsZiwgc2NvcmUpO1xuICAgICAgICBtZXRob2RzLl90YXJnZXQuY2FsbChzZWxmLCBzY29yZSwgZXZ0KTtcblxuICAgICAgICBpZiAoc2VsZi5vcHQubW91c2VvdXQpIHtcbiAgICAgICAgICBzZWxmLm9wdC5tb3VzZW91dC5jYWxsKHNlbGYsIHNjb3JlLCBldnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBfYmluZE91dENhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHNlbGYuY2FuY2VsLm9uKCdtb3VzZWxlYXZlLnJhdHknLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgJCh0aGlzKS5hdHRyKCdjbGFzcycsIHNlbGYub3B0LmNhbmNlbE9mZik7XG5cbiAgICAgICAgaWYgKHNlbGYub3B0Lm1vdXNlb3V0KSB7XG4gICAgICAgICAgc2VsZi5vcHQubW91c2VvdXQuY2FsbChzZWxmLCBzZWxmLnNjb3JlLnZhbCgpIHx8IG51bGwsIGV2dCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIF9iaW5kT3ZlckNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAgIHNlbGYuY2FuY2VsLm9uKCdtb3VzZW92ZXIucmF0eScsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAkKHRoaXMpLmF0dHIoJ2NsYXNzJywgc2VsZi5vcHQuY2FuY2VsT24pO1xuXG4gICAgICAgIHNlbGYuc3RhcnMuYXR0cignY2xhc3MnLCBzZWxmLm9wdC5zdGFyT2ZmKTtcblxuICAgICAgICBtZXRob2RzLl90YXJnZXQuY2FsbChzZWxmLCBudWxsLCBldnQpO1xuXG4gICAgICAgIGlmIChzZWxmLm9wdC5tb3VzZW92ZXIpIHtcbiAgICAgICAgICBzZWxmLm9wdC5tb3VzZW92ZXIuY2FsbChzZWxmLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgX2JpbmRPdmVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzZWxmICAgPSB0aGlzLFxuICAgICAgICAgIHRoYXQgICA9ICQoc2VsZiksXG4gICAgICAgICAgYWN0aW9uID0gc2VsZi5vcHQuaGFsZiA/ICdtb3VzZW1vdmUucmF0eScgOiAnbW91c2VvdmVyLnJhdHknO1xuXG4gICAgICBzZWxmLnN0YXJzLm9uKGFjdGlvbiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIHZhciBzY29yZSA9IHBhcnNlSW50KCQodGhpcykuZGF0YSgnc2NvcmUnKSwgMTApO1xuXG4gICAgICAgIGlmIChzZWxmLm9wdC5oYWxmKSB7XG4gICAgICAgICAgdmFyIHBvc2l0aW9uID0gcGFyc2VGbG9hdCgoZXZ0LnBhZ2VYIC0gJCh0aGlzKS5vZmZzZXQoKS5sZWZ0KSAvIChzZWxmLm9wdC5zaXplID8gc2VsZi5vcHQuc2l6ZSA6IHBhcnNlSW50KHRoYXQuY3NzKCdmb250LXNpemUnKSkpKSxcbiAgICAgICAgICAgICAgcGx1cyAgICAgPSAocG9zaXRpb24gPiAuNSkgPyAxIDogLjU7XG5cbiAgICAgICAgICBzY29yZSA9IHNjb3JlIC0gMSArIHBsdXM7XG5cbiAgICAgICAgICBtZXRob2RzLl9maWxsLmNhbGwoc2VsZiwgc2NvcmUpO1xuXG4gICAgICAgICAgaWYgKHNlbGYub3B0LnByZWNpc2lvbikge1xuICAgICAgICAgICAgc2NvcmUgPSBzY29yZSAtIHBsdXMgKyBwb3NpdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtZXRob2RzLl9yb3VuZFN0YXJzLmNhbGwoc2VsZiwgc2NvcmUpO1xuXG4gICAgICAgICAgdGhhdC5kYXRhKCdzY29yZScsIHNjb3JlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXRob2RzLl9maWxsLmNhbGwoc2VsZiwgc2NvcmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWV0aG9kcy5fdGFyZ2V0LmNhbGwoc2VsZiwgc2NvcmUsIGV2dCk7XG5cbiAgICAgICAgaWYgKHNlbGYub3B0Lm1vdXNlb3Zlcikge1xuICAgICAgICAgIHNlbGYub3B0Lm1vdXNlb3Zlci5jYWxsKHNlbGYsIHNjb3JlLCBldnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBfY2FsbGJhY2s6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIGkgaW4gb3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3B0W29wdGlvbnNbaV1dID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy5vcHRbb3B0aW9uc1tpXV0gPSB0aGlzLm9wdFtvcHRpb25zW2ldXS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX2NyZWF0ZUNhbmNlbDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdGhhdCAgID0gJCh0aGlzKSxcbiAgICAgICAgICBpY29uICAgPSB0aGlzLm9wdC5jYW5jZWxPZmYsXG4gICAgICAgICAgY2FuY2VsID0gJCgnPGkgLz4nLCB7IGNsYXNzOiBpY29uLCB0aXRsZTogdGhpcy5vcHQuY2FuY2VsSGludCB9KTtcblxuICAgICAgaWYgKHRoaXMub3B0LmNhbmNlbFBsYWNlID09ICdsZWZ0Jykge1xuICAgICAgICB0aGF0LnByZXBlbmQoJyYjMTYwOycpLnByZXBlbmQoY2FuY2VsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoYXQuYXBwZW5kKCcmIzE2MDsnKS5hcHBlbmQoY2FuY2VsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNhbmNlbDtcbiAgICB9LCBfY3JlYXRlU2NvcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICQoJzxpbnB1dCAvPicsIHsgdHlwZTogJ2hpZGRlbicsIG5hbWU6IHRoaXMub3B0LnNjb3JlTmFtZSB9KS5hcHBlbmRUbyh0aGlzKTtcbiAgICB9LCBfY3JlYXRlU3RhcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRoYXQgPSAkKHRoaXMpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB0aGlzLm9wdC5udW1iZXI7IGkrKykge1xuICAgICAgICB2YXIgdGl0bGUgPSBtZXRob2RzLl9nZXRIaW50LmNhbGwodGhpcywgaSksXG4gICAgICAgICAgICBpY29uICA9ICh0aGlzLm9wdC5zY29yZSAmJiB0aGlzLm9wdC5zY29yZSA+PSBpKSA/ICdzdGFyT24nIDogJ3N0YXJPZmYnO1xuXG4gICAgICAgIGljb24gPSB0aGlzLm9wdFtpY29uXTtcblxuICAgICAgICAkKCc8aSAvPicsIHsgY2xhc3MgOiBpY29uLCB0aXRsZTogdGl0bGUsICdkYXRhLXNjb3JlJzogaSB9KS5hcHBlbmRUbyh0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5vcHQuc3BhY2UpIHtcbiAgICAgICAgICB0aGF0LmFwcGVuZCgoaSA8IHRoaXMub3B0Lm51bWJlcikgPyAnJiMxNjA7JyA6ICcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhhdC5jaGlsZHJlbignaScpO1xuICAgIH0sIF9lcnJvcjogZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgJCh0aGlzKS5odG1sKG1lc3NhZ2UpO1xuXG4gICAgICAkLmVycm9yKG1lc3NhZ2UpO1xuICAgIH0sIF9maWxsOiBmdW5jdGlvbihzY29yZSkge1xuICAgICAgdmFyIHNlbGYgID0gdGhpcyxcbiAgICAgICAgICBoYXNoICA9IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHNlbGYuc3RhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN0YXIgICA9IHNlbGYuc3RhcnMuZXEoaSAtIDEpLFxuICAgICAgICAgICAgc2VsZWN0ID0gc2VsZi5vcHQuc2luZ2xlID8gKGkgPT0gc2NvcmUpIDogKGkgPD0gc2NvcmUpO1xuXG4gICAgICAgIGlmIChzZWxmLm9wdC5pY29uUmFuZ2UgJiYgc2VsZi5vcHQuaWNvblJhbmdlLmxlbmd0aCA+IGhhc2gpIHtcbiAgICAgICAgICB2YXIgaXJhbmdlID0gc2VsZi5vcHQuaWNvblJhbmdlW2hhc2hdLFxuICAgICAgICAgICAgICBvbiAgICAgPSBpcmFuZ2Uub24gIHx8IHNlbGYub3B0LnN0YXJPbixcbiAgICAgICAgICAgICAgb2ZmICAgID0gaXJhbmdlLm9mZiB8fCBzZWxmLm9wdC5zdGFyT2ZmLFxuICAgICAgICAgICAgICBpY29uICAgPSBzZWxlY3QgPyBvbiA6IG9mZjtcblxuICAgICAgICAgIGlmIChpIDw9IGlyYW5nZS5yYW5nZSkge1xuICAgICAgICAgICAgc3Rhci5hdHRyKCdjbGFzcycsIGljb24pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpID09IGlyYW5nZS5yYW5nZSkge1xuICAgICAgICAgICAgaGFzaCsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaWNvbiA9IHNlbGVjdCA/ICdzdGFyT24nIDogJ3N0YXJPZmYnO1xuXG4gICAgICAgICAgc3Rhci5hdHRyKCdjbGFzcycsIHRoaXMub3B0W2ljb25dKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIF9nZXRIaW50OiBmdW5jdGlvbihzY29yZSkge1xuICAgICAgdmFyIGhpbnQgPSB0aGlzLm9wdC5oaW50c1tzY29yZSAtIDFdO1xuICAgICAgcmV0dXJuIChoaW50ID09PSAnJykgPyAnJyA6IChoaW50IHx8IHNjb3JlKTtcbiAgICB9LCBfbG9jazogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NvcmUgPSBwYXJzZUludCh0aGlzLnNjb3JlLnZhbCgpLCAxMCksIC8vIFRPRE86IDMuMSA+PiBbWycxJ10sIFsnMiddLCBbJzMnLCAnLjEnLCAnLjInXV1cbiAgICAgICAgICBoaW50ICA9IHNjb3JlID8gbWV0aG9kcy5fZ2V0SGludC5jYWxsKHRoaXMsIHNjb3JlKSA6IHRoaXMub3B0Lm5vUmF0ZWRNc2c7XG5cbiAgICAgICQodGhpcykuZGF0YSgncmVhZG9ubHknLCB0cnVlKS5jc3MoJ2N1cnNvcicsICcnKS5hdHRyKCd0aXRsZScsIGhpbnQpO1xuXG4gICAgICB0aGlzLnNjb3JlLmF0dHIoJ3JlYWRvbmx5JywgJ3JlYWRvbmx5Jyk7XG4gICAgICB0aGlzLnN0YXJzLmF0dHIoJ3RpdGxlJywgaGludCk7XG5cbiAgICAgIGlmICh0aGlzLmNhbmNlbCkge1xuICAgICAgICB0aGlzLmNhbmNlbC5oaWRlKCk7XG4gICAgICB9XG4gICAgfSwgX3JvdW5kU3RhcnM6IGZ1bmN0aW9uKHNjb3JlKSB7XG4gICAgICB2YXIgcmVzdCA9IChzY29yZSAtIE1hdGguZmxvb3Ioc2NvcmUpKS50b0ZpeGVkKDIpO1xuXG4gICAgICBpZiAocmVzdCA+IHRoaXMub3B0LnJvdW5kLmRvd24pIHtcbiAgICAgICAgdmFyIGljb24gPSAnc3Rhck9uJzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVcDogICBbeC43NiAuLiB4Ljk5XVxuXG4gICAgICAgIGlmICh0aGlzLm9wdC5oYWxmU2hvdyAmJiByZXN0IDwgdGhpcy5vcHQucm91bmQudXApIHsgLy8gSGFsZjogW3guMjYgLi4geC43NV1cbiAgICAgICAgICBpY29uID0gJ3N0YXJIYWxmJztcbiAgICAgICAgfSBlbHNlIGlmIChyZXN0IDwgdGhpcy5vcHQucm91bmQuZnVsbCkgeyAgICAgICAgICAgICAvLyBEb3duOiBbeC4wMCAuLiB4LjVdXG4gICAgICAgICAgaWNvbiA9ICdzdGFyT2ZmJztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhcnMuZXEoTWF0aC5jZWlsKHNjb3JlKSAtIDEpLmF0dHIoJ2NsYXNzJywgdGhpcy5vcHRbaWNvbl0pO1xuICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZ1bGwgZG93bjogW3guMDAgLi4geC4yNV1cbiAgICB9LCBfdGFyZ2V0OiBmdW5jdGlvbihzY29yZSwgZXZ0KSB7XG4gICAgICBpZiAodGhpcy5vcHQudGFyZ2V0KSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMub3B0LnRhcmdldCk7XG5cbiAgICAgICAgaWYgKHRhcmdldC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBtZXRob2RzLl9lcnJvci5jYWxsKHRoaXMsICdUYXJnZXQgc2VsZWN0b3IgaW52YWxpZCBvciBtaXNzaW5nIScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMub3B0LnRhcmdldEZvcm1hdC5pbmRleE9mKCd7c2NvcmV9JykgPCAwKSB7XG4gICAgICAgICAgbWV0aG9kcy5fZXJyb3IuY2FsbCh0aGlzLCAnVGVtcGxhdGUgXCJ7c2NvcmV9XCIgbWlzc2luZyEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtb3VzZW92ZXIgPSBldnQgJiYgZXZ0LnR5cGUgPT0gJ21vdXNlb3Zlcic7XG5cbiAgICAgICAgaWYgKHNjb3JlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzY29yZSA9IHRoaXMub3B0LnRhcmdldFRleHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc2NvcmUgPT09IG51bGwpIHtcbiAgICAgICAgICBzY29yZSA9IG1vdXNlb3ZlciA/IHRoaXMub3B0LmNhbmNlbEhpbnQgOiB0aGlzLm9wdC50YXJnZXRUZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzLm9wdC50YXJnZXRUeXBlID09ICdoaW50Jykge1xuICAgICAgICAgICAgc2NvcmUgPSBtZXRob2RzLl9nZXRIaW50LmNhbGwodGhpcywgTWF0aC5jZWlsKHNjb3JlKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm9wdC5wcmVjaXNpb24pIHtcbiAgICAgICAgICAgIHNjb3JlID0gcGFyc2VGbG9hdChzY29yZSkudG9GaXhlZCgxKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIW1vdXNlb3ZlciAmJiAhdGhpcy5vcHQudGFyZ2V0S2VlcCkge1xuICAgICAgICAgICAgc2NvcmUgPSB0aGlzLm9wdC50YXJnZXRUZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzY29yZSkge1xuICAgICAgICAgIHNjb3JlID0gdGhpcy5vcHQudGFyZ2V0Rm9ybWF0LnRvU3RyaW5nKCkucmVwbGFjZSgne3Njb3JlfScsIHNjb3JlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXQuaXMoJzppbnB1dCcpKSB7XG4gICAgICAgICAgdGFyZ2V0LnZhbChzY29yZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0Lmh0bWwoc2NvcmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgX3VubG9jazogZnVuY3Rpb24oKSB7XG4gICAgICAkKHRoaXMpLmRhdGEoJ3JlYWRvbmx5JywgZmFsc2UpLmNzcygnY3Vyc29yJywgJ3BvaW50ZXInKS5yZW1vdmVBdHRyKCd0aXRsZScpO1xuXG4gICAgICB0aGlzLnNjb3JlLnJlbW92ZUF0dHIoJ3JlYWRvbmx5JywgJ3JlYWRvbmx5Jyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5vcHQubnVtYmVyOyBpKyspIHtcbiAgICAgICAgdGhpcy5zdGFycy5lcShpKS5hdHRyKCd0aXRsZScsIG1ldGhvZHMuX2dldEhpbnQuY2FsbCh0aGlzLCBpICsgMSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jYW5jZWwpIHtcbiAgICAgICAgdGhpcy5jYW5jZWwuY3NzKCdkaXNwbGF5JywgJycpO1xuICAgICAgfVxuICAgIH0sIGNhbmNlbDogZnVuY3Rpb24oY2xpY2spIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmRhdGEoJ3JlYWRvbmx5JykgIT09IHRydWUpIHtcbiAgICAgICAgICBtZXRob2RzW2NsaWNrID8gJ2NsaWNrJyA6ICdzY29yZSddLmNhbGwodGhpcywgbnVsbCk7XG4gICAgICAgICAgdGhpcy5zY29yZS5yZW1vdmVBdHRyKCd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBjbGljazogZnVuY3Rpb24oc2NvcmUpIHtcbiAgICAgIHJldHVybiAkKHRoaXMpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmRhdGEoJ3JlYWRvbmx5JykgIT09IHRydWUpIHtcbiAgICAgICAgICBtZXRob2RzLl9hcHBseS5jYWxsKHRoaXMsIHNjb3JlKTtcblxuICAgICAgICAgIGlmICghdGhpcy5vcHQuY2xpY2spIHtcbiAgICAgICAgICAgIG1ldGhvZHMuX2Vycm9yLmNhbGwodGhpcywgJ1lvdSBtdXN0IGFkZCB0aGUgXCJjbGljazogZnVuY3Rpb24oc2NvcmUsIGV2dCkgeyB9XCIgY2FsbGJhY2suJyk7XG4gICAgICAgICAgfVxuXG5cbiAgICAgICAgICB0aGlzLm9wdC5jbGljay5jYWxsKHRoaXMsIHNjb3JlLCAkLkV2ZW50KCdjbGljaycpKTtcblxuICAgICAgICAgIG1ldGhvZHMuX3RhcmdldC5jYWxsKHRoaXMsIHNjb3JlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJCh0aGlzKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGhhdCA9ICQodGhpcyksXG4gICAgICAgICAgICByYXcgID0gdGhhdC5kYXRhKCdyYXcnKTtcblxuICAgICAgICBpZiAocmF3KSB7XG4gICAgICAgICAgdGhhdC5vZmYoJy5yYXR5JykuZW1wdHkoKS5jc3MoeyBjdXJzb3I6IHJhdy5zdHlsZS5jdXJzb3IsIHdpZHRoOiByYXcuc3R5bGUud2lkdGggfSkucmVtb3ZlRGF0YSgncmVhZG9ubHknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGF0LmRhdGEoJ3JhdycsIHRoYXQuY2xvbmUoKVswXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIGdldFNjb3JlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY29yZSA9IFtdLFxuICAgICAgICAgIHZhbHVlIDtcblxuICAgICAgJCh0aGlzKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YWx1ZSA9IHRoaXMuc2NvcmUudmFsKCk7XG5cbiAgICAgICAgc2NvcmUucHVzaCh2YWx1ZSA/IHBhcnNlRmxvYXQodmFsdWUpIDogdW5kZWZpbmVkKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gKHNjb3JlLmxlbmd0aCA+IDEpID8gc2NvcmUgOiBzY29yZVswXTtcbiAgICB9LCByZWFkT25seTogZnVuY3Rpb24ocmVhZG9ubHkpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0aGF0ID0gJCh0aGlzKTtcblxuICAgICAgICBpZiAodGhhdC5kYXRhKCdyZWFkb25seScpICE9PSByZWFkb25seSkge1xuICAgICAgICAgIGlmIChyZWFkb25seSkge1xuICAgICAgICAgICAgdGhhdC5vZmYoJy5yYXR5JykuY2hpbGRyZW4oJ2knKS5vZmYoJy5yYXR5Jyk7XG5cbiAgICAgICAgICAgIG1ldGhvZHMuX2xvY2suY2FsbCh0aGlzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWV0aG9kcy5fYmluZHMuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIG1ldGhvZHMuX3VubG9jay5jYWxsKHRoaXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoYXQuZGF0YSgncmVhZG9ubHknLCByZWFkb25seSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIHJlbG9hZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbWV0aG9kcy5zZXQuY2FsbCh0aGlzLCB7fSk7XG4gICAgfSwgc2NvcmU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBtZXRob2RzLnNldFNjb3JlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBtZXRob2RzLmdldFNjb3JlLmNhbGwodGhpcyk7XG4gICAgfSwgc2V0OiBmdW5jdGlvbihzZXR0aW5ncykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRoYXQgICA9ICQodGhpcyksXG4gICAgICAgICAgICBhY3R1YWwgPSB0aGF0LmRhdGEoJ3NldHRpbmdzJyksXG4gICAgICAgICAgICBuZXdzICAgPSAkLmV4dGVuZCh7fSwgYWN0dWFsLCBzZXR0aW5ncyk7XG5cbiAgICAgICAgdGhhdC5yYXR5KG5ld3MpO1xuICAgICAgfSk7XG4gICAgfSwgc2V0U2NvcmU6IGZ1bmN0aW9uKHNjb3JlKSB7XG4gICAgICByZXR1cm4gJCh0aGlzKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoJCh0aGlzKS5kYXRhKCdyZWFkb25seScpICE9PSB0cnVlKSB7XG4gICAgICAgICAgbWV0aG9kcy5fYXBwbHkuY2FsbCh0aGlzLCBzY29yZSk7XG4gICAgICAgICAgbWV0aG9kcy5fdGFyZ2V0LmNhbGwodGhpcywgc2NvcmUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgJC5mbi5yYXR5ID0gZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgaWYgKG1ldGhvZHNbbWV0aG9kXSkge1xuICAgICAgcmV0dXJuIG1ldGhvZHNbbWV0aG9kXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtZXRob2QgPT09ICdvYmplY3QnIHx8ICFtZXRob2QpIHtcbiAgICAgIHJldHVybiBtZXRob2RzLmluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJC5lcnJvcignTWV0aG9kICcgKyBtZXRob2QgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xuICAgIH1cbiAgfTtcblxuICAkLmZuLnJhdHkuZGVmYXVsdHMgPSB7XG4gICAgY2FuY2VsICAgICAgICA6IGZhbHNlLFxuICAgIGNhbmNlbEhpbnQgICAgOiAnQ2FuY2VsIHRoaXMgcmF0aW5nIScsXG4gICAgY2FuY2VsT2ZmICAgICA6ICdmYSBmYS1mdyBmYS1taW51cy1zcXVhcmUnLFxuICAgIGNhbmNlbE9uICAgICAgOiAnZmEgZmEtZncgZmEtY2hlY2stc3F1YXJlJyxcbiAgICBjYW5jZWxQbGFjZSAgIDogJ2xlZnQnLFxuICAgIGNsaWNrICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgaGFsZiAgICAgICAgICA6IGZhbHNlLFxuICAgIGhhbGZTaG93ICAgICAgOiB0cnVlLFxuICAgIGhpbnRzICAgICAgICAgOiBbJ2JhZCcsICdwb29yJywgJ3JlZ3VsYXInLCAnZ29vZCcsICdnb3JnZW91cyddLFxuICAgIGljb25SYW5nZSAgICAgOiB1bmRlZmluZWQsXG4gICAgbW91c2VvdXQgICAgICA6IHVuZGVmaW5lZCxcbiAgICBtb3VzZW92ZXIgICAgIDogdW5kZWZpbmVkLFxuICAgIG5vUmF0ZWRNc2cgICAgOiAnTm90IHJhdGVkIHlldCEnLFxuICAgIG51bWJlciAgICAgICAgOiA1LFxuICAgIG51bWJlck1heCAgICAgOiAyMCxcbiAgICBwcmVjaXNpb24gICAgIDogZmFsc2UsXG4gICAgcmVhZE9ubHkgICAgICA6IGZhbHNlLFxuICAgIHJvdW5kICAgICAgICAgOiB7IGRvd246IC4yNSwgZnVsbDogLjYsIHVwOiAuNzYgfSxcbiAgICBzY29yZSAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgIHNjb3JlTmFtZSAgICAgOiAnc2NvcmUnLFxuICAgIHNpbmdsZSAgICAgICAgOiBmYWxzZSxcbiAgICBzaXplICAgICAgICAgIDogbnVsbCxcbiAgICBzcGFjZSAgICAgICAgIDogdHJ1ZSxcbiAgICBzdGFySGFsZiAgICAgIDogJ2ZhIGZhLWZ3IGZhLXN0YXItaGFsZi1vJyxcbiAgICBzdGFyT2ZmICAgICAgIDogJ2ZhIGZhLWZ3IGZhLXN0YXItbycsXG4gICAgc3Rhck9uICAgICAgICA6ICdmYSBmYS1mdyBmYS1zdGFyJyxcbiAgICB0YXJnZXQgICAgICAgIDogdW5kZWZpbmVkLFxuICAgIHRhcmdldEZvcm1hdCAgOiAne3Njb3JlfScsXG4gICAgdGFyZ2V0S2VlcCAgICA6IGZhbHNlLFxuICAgIHRhcmdldFRleHQgICAgOiAnJyxcbiAgICB0YXJnZXRUeXBlICAgIDogJ2hpbnQnLFxuICAgIHdpZHRoICAgICAgICAgOiBmYWxzZVxuICB9O1xuXG59KShqUXVlcnkpO1xuIiwiLyoqXG4gKiBPd2wgY2Fyb3VzZWxcbiAqIEB2ZXJzaW9uIDIuMS42XG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqIEB0b2RvIExhenkgTG9hZCBJY29uXG4gKiBAdG9kbyBwcmV2ZW50IGFuaW1hdGlvbmVuZCBidWJsaW5nXG4gKiBAdG9kbyBpdGVtc1NjYWxlVXBcbiAqIEB0b2RvIFRlc3QgWmVwdG9cbiAqIEB0b2RvIHN0YWdlUGFkZGluZyBjYWxjdWxhdGUgd3JvbmcgYWN0aXZlIGNsYXNzZXNcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGNhcm91c2VsLlxuXHQgKiBAY2xhc3MgVGhlIE93bCBDYXJvdXNlbC5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fGpRdWVyeX0gZWxlbWVudCAtIFRoZSBlbGVtZW50IHRvIGNyZWF0ZSB0aGUgY2Fyb3VzZWwgZm9yLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gVGhlIG9wdGlvbnNcblx0ICovXG5cdGZ1bmN0aW9uIE93bChlbGVtZW50LCBvcHRpb25zKSB7XG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IHNldHRpbmdzIGZvciB0aGUgY2Fyb3VzZWwuXG5cdFx0ICogQHB1YmxpY1xuXHRcdCAqL1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCBvcHRpb25zIHNldCBieSB0aGUgY2FsbGVyIGluY2x1ZGluZyBkZWZhdWx0cy5cblx0XHQgKiBAcHVibGljXG5cdFx0ICovXG5cdFx0dGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIE93bC5EZWZhdWx0cywgb3B0aW9ucyk7XG5cblx0XHQvKipcblx0XHQgKiBQbHVnaW4gZWxlbWVudC5cblx0XHQgKiBAcHVibGljXG5cdFx0ICovXG5cdFx0dGhpcy4kZWxlbWVudCA9ICQoZWxlbWVudCk7XG5cblx0XHQvKipcblx0XHQgKiBQcm94aWVkIGV2ZW50IGhhbmRsZXJzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9oYW5kbGVycyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlcyB0byB0aGUgcnVubmluZyBwbHVnaW5zIG9mIHRoaXMgY2Fyb3VzZWwuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX3BsdWdpbnMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnRseSBzdXBwcmVzc2VkIGV2ZW50cyB0byBwcmV2ZW50IHRoZW0gZnJvbSBiZWVpbmcgcmV0cmlnZ2VyZWQuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX3N1cHJlc3MgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIEFic29sdXRlIGN1cnJlbnQgcG9zaXRpb24uXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX2N1cnJlbnQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQW5pbWF0aW9uIHNwZWVkIGluIG1pbGxpc2Vjb25kcy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fc3BlZWQgPSBudWxsO1xuXG5cdFx0LyoqXG5cdFx0ICogQ29vcmRpbmF0ZXMgb2YgYWxsIGl0ZW1zIGluIHBpeGVsLlxuXHRcdCAqIEB0b2RvIFRoZSBuYW1lIG9mIHRoaXMgbWVtYmVyIGlzIG1pc3NsZWFkaW5nLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9jb29yZGluYXRlcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCBicmVha3BvaW50LlxuXHRcdCAqIEB0b2RvIFJlYWwgbWVkaWEgcXVlcmllcyB3b3VsZCBiZSBuaWNlLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9icmVha3BvaW50ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEN1cnJlbnQgd2lkdGggb2YgdGhlIHBsdWdpbiBlbGVtZW50LlxuXHRcdCAqL1xuXHRcdHRoaXMuX3dpZHRoID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEFsbCByZWFsIGl0ZW1zLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9pdGVtcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIGNsb25lZCBpdGVtcy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fY2xvbmVzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBNZXJnZSB2YWx1ZXMgb2YgYWxsIGl0ZW1zLlxuXHRcdCAqIEB0b2RvIE1heWJlIHRoaXMgY291bGQgYmUgcGFydCBvZiBhIHBsdWdpbi5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICovXG5cdFx0dGhpcy5fbWVyZ2VycyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogV2lkdGhzIG9mIGFsbCBpdGVtcy5cblx0XHQgKi9cblx0XHR0aGlzLl93aWR0aHMgPSBbXTtcblxuXHRcdC8qKlxuXHRcdCAqIEludmFsaWRhdGVkIHBhcnRzIHdpdGhpbiB0aGUgdXBkYXRlIHByb2Nlc3MuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX2ludmFsaWRhdGVkID0ge307XG5cblx0XHQvKipcblx0XHQgKiBPcmRlcmVkIGxpc3Qgb2Ygd29ya2VycyBmb3IgdGhlIHVwZGF0ZSBwcm9jZXNzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9waXBlID0gW107XG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IHN0YXRlIGluZm9ybWF0aW9uIGZvciB0aGUgZHJhZyBvcGVyYXRpb24uXG5cdFx0ICogQHRvZG8gIzI2MVxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR0aGlzLl9kcmFnID0ge1xuXHRcdFx0dGltZTogbnVsbCxcblx0XHRcdHRhcmdldDogbnVsbCxcblx0XHRcdHBvaW50ZXI6IG51bGwsXG5cdFx0XHRzdGFnZToge1xuXHRcdFx0XHRzdGFydDogbnVsbCxcblx0XHRcdFx0Y3VycmVudDogbnVsbFxuXHRcdFx0fSxcblx0XHRcdGRpcmVjdGlvbjogbnVsbFxuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBDdXJyZW50IHN0YXRlIGluZm9ybWF0aW9uIGFuZCB0aGVpciB0YWdzLlxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHRoaXMuX3N0YXRlcyA9IHtcblx0XHRcdGN1cnJlbnQ6IHt9LFxuXHRcdFx0dGFnczoge1xuXHRcdFx0XHQnaW5pdGlhbGl6aW5nJzogWyAnYnVzeScgXSxcblx0XHRcdFx0J2FuaW1hdGluZyc6IFsgJ2J1c3knIF0sXG5cdFx0XHRcdCdkcmFnZ2luZyc6IFsgJ2ludGVyYWN0aW5nJyBdXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdCQuZWFjaChbICdvblJlc2l6ZScsICdvblRocm90dGxlZFJlc2l6ZScgXSwgJC5wcm94eShmdW5jdGlvbihpLCBoYW5kbGVyKSB7XG5cdFx0XHR0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSA9ICQucHJveHkodGhpc1toYW5kbGVyXSwgdGhpcyk7XG5cdFx0fSwgdGhpcykpO1xuXG5cdFx0JC5lYWNoKE93bC5QbHVnaW5zLCAkLnByb3h5KGZ1bmN0aW9uKGtleSwgcGx1Z2luKSB7XG5cdFx0XHR0aGlzLl9wbHVnaW5zW2tleS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgxKV1cblx0XHRcdFx0PSBuZXcgcGx1Z2luKHRoaXMpO1xuXHRcdH0sIHRoaXMpKTtcblxuXHRcdCQuZWFjaChPd2wuV29ya2VycywgJC5wcm94eShmdW5jdGlvbihwcmlvcml0eSwgd29ya2VyKSB7XG5cdFx0XHR0aGlzLl9waXBlLnB1c2goe1xuXHRcdFx0XHQnZmlsdGVyJzogd29ya2VyLmZpbHRlcixcblx0XHRcdFx0J3J1bic6ICQucHJveHkod29ya2VyLnJ1biwgdGhpcylcblx0XHRcdH0pO1xuXHRcdH0sIHRoaXMpKTtcblxuXHRcdHRoaXMuc2V0dXAoKTtcblx0XHR0aGlzLmluaXRpYWxpemUoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IG9wdGlvbnMgZm9yIHRoZSBjYXJvdXNlbC5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0T3dsLkRlZmF1bHRzID0ge1xuXHRcdGl0ZW1zOiAzLFxuXHRcdGxvb3A6IGZhbHNlLFxuXHRcdGNlbnRlcjogZmFsc2UsXG5cdFx0cmV3aW5kOiBmYWxzZSxcblxuXHRcdG1vdXNlRHJhZzogdHJ1ZSxcblx0XHR0b3VjaERyYWc6IHRydWUsXG5cdFx0cHVsbERyYWc6IHRydWUsXG5cdFx0ZnJlZURyYWc6IGZhbHNlLFxuXG5cdFx0bWFyZ2luOiAwLFxuXHRcdHN0YWdlUGFkZGluZzogMCxcblxuXHRcdG1lcmdlOiBmYWxzZSxcblx0XHRtZXJnZUZpdDogdHJ1ZSxcblx0XHRhdXRvV2lkdGg6IGZhbHNlLFxuXG5cdFx0c3RhcnRQb3NpdGlvbjogMCxcblx0XHRydGw6IGZhbHNlLFxuXG5cdFx0c21hcnRTcGVlZDogMjUwLFxuXHRcdGZsdWlkU3BlZWQ6IGZhbHNlLFxuXHRcdGRyYWdFbmRTcGVlZDogZmFsc2UsXG5cblx0XHRyZXNwb25zaXZlOiB7fSxcblx0XHRyZXNwb25zaXZlUmVmcmVzaFJhdGU6IDIwMCxcblx0XHRyZXNwb25zaXZlQmFzZUVsZW1lbnQ6IHdpbmRvdyxcblxuXHRcdGZhbGxiYWNrRWFzaW5nOiAnc3dpbmcnLFxuXG5cdFx0aW5mbzogZmFsc2UsXG5cblx0XHRuZXN0ZWRJdGVtU2VsZWN0b3I6IGZhbHNlLFxuXHRcdGl0ZW1FbGVtZW50OiAnZGl2Jyxcblx0XHRzdGFnZUVsZW1lbnQ6ICdkaXYnLFxuXG5cdFx0cmVmcmVzaENsYXNzOiAnb3dsLXJlZnJlc2gnLFxuXHRcdGxvYWRlZENsYXNzOiAnb3dsLWxvYWRlZCcsXG5cdFx0bG9hZGluZ0NsYXNzOiAnb3dsLWxvYWRpbmcnLFxuXHRcdHJ0bENsYXNzOiAnb3dsLXJ0bCcsXG5cdFx0cmVzcG9uc2l2ZUNsYXNzOiAnb3dsLXJlc3BvbnNpdmUnLFxuXHRcdGRyYWdDbGFzczogJ293bC1kcmFnJyxcblx0XHRpdGVtQ2xhc3M6ICdvd2wtaXRlbScsXG5cdFx0c3RhZ2VDbGFzczogJ293bC1zdGFnZScsXG5cdFx0c3RhZ2VPdXRlckNsYXNzOiAnb3dsLXN0YWdlLW91dGVyJyxcblx0XHRncmFiQ2xhc3M6ICdvd2wtZ3JhYidcblx0fTtcblxuXHQvKipcblx0ICogRW51bWVyYXRpb24gZm9yIHdpZHRoLlxuXHQgKiBAcHVibGljXG5cdCAqIEByZWFkb25seVxuXHQgKiBAZW51bSB7U3RyaW5nfVxuXHQgKi9cblx0T3dsLldpZHRoID0ge1xuXHRcdERlZmF1bHQ6ICdkZWZhdWx0Jyxcblx0XHRJbm5lcjogJ2lubmVyJyxcblx0XHRPdXRlcjogJ291dGVyJ1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBFbnVtZXJhdGlvbiBmb3IgdHlwZXMuXG5cdCAqIEBwdWJsaWNcblx0ICogQHJlYWRvbmx5XG5cdCAqIEBlbnVtIHtTdHJpbmd9XG5cdCAqL1xuXHRPd2wuVHlwZSA9IHtcblx0XHRFdmVudDogJ2V2ZW50Jyxcblx0XHRTdGF0ZTogJ3N0YXRlJ1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDb250YWlucyBhbGwgcmVnaXN0ZXJlZCBwbHVnaW5zLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRPd2wuUGx1Z2lucyA9IHt9O1xuXG5cdC8qKlxuXHQgKiBMaXN0IG9mIHdvcmtlcnMgaW52b2x2ZWQgaW4gdGhlIHVwZGF0ZSBwcm9jZXNzLlxuXHQgKi9cblx0T3dsLldvcmtlcnMgPSBbIHtcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl93aWR0aCA9IHRoaXMuJGVsZW1lbnQud2lkdGgoKTtcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcblx0XHRcdGNhY2hlLmN1cnJlbnQgPSB0aGlzLl9pdGVtcyAmJiB0aGlzLl9pdGVtc1t0aGlzLnJlbGF0aXZlKHRoaXMuX2N1cnJlbnQpXTtcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbignLmNsb25lZCcpLnJlbW92ZSgpO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbihjYWNoZSkge1xuXHRcdFx0dmFyIG1hcmdpbiA9IHRoaXMuc2V0dGluZ3MubWFyZ2luIHx8ICcnLFxuXHRcdFx0XHRncmlkID0gIXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLFxuXHRcdFx0XHRydGwgPSB0aGlzLnNldHRpbmdzLnJ0bCxcblx0XHRcdFx0Y3NzID0ge1xuXHRcdFx0XHRcdCd3aWR0aCc6ICdhdXRvJyxcblx0XHRcdFx0XHQnbWFyZ2luLWxlZnQnOiBydGwgPyBtYXJnaW4gOiAnJyxcblx0XHRcdFx0XHQnbWFyZ2luLXJpZ2h0JzogcnRsID8gJycgOiBtYXJnaW5cblx0XHRcdFx0fTtcblxuXHRcdFx0IWdyaWQgJiYgdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5jc3MoY3NzKTtcblxuXHRcdFx0Y2FjaGUuY3NzID0gY3NzO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbihjYWNoZSkge1xuXHRcdFx0dmFyIHdpZHRoID0gKHRoaXMud2lkdGgoKSAvIHRoaXMuc2V0dGluZ3MuaXRlbXMpLnRvRml4ZWQoMykgLSB0aGlzLnNldHRpbmdzLm1hcmdpbixcblx0XHRcdFx0bWVyZ2UgPSBudWxsLFxuXHRcdFx0XHRpdGVyYXRvciA9IHRoaXMuX2l0ZW1zLmxlbmd0aCxcblx0XHRcdFx0Z3JpZCA9ICF0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCxcblx0XHRcdFx0d2lkdGhzID0gW107XG5cblx0XHRcdGNhY2hlLml0ZW1zID0ge1xuXHRcdFx0XHRtZXJnZTogZmFsc2UsXG5cdFx0XHRcdHdpZHRoOiB3aWR0aFxuXHRcdFx0fTtcblxuXHRcdFx0d2hpbGUgKGl0ZXJhdG9yLS0pIHtcblx0XHRcdFx0bWVyZ2UgPSB0aGlzLl9tZXJnZXJzW2l0ZXJhdG9yXTtcblx0XHRcdFx0bWVyZ2UgPSB0aGlzLnNldHRpbmdzLm1lcmdlRml0ICYmIE1hdGgubWluKG1lcmdlLCB0aGlzLnNldHRpbmdzLml0ZW1zKSB8fCBtZXJnZTtcblxuXHRcdFx0XHRjYWNoZS5pdGVtcy5tZXJnZSA9IG1lcmdlID4gMSB8fCBjYWNoZS5pdGVtcy5tZXJnZTtcblxuXHRcdFx0XHR3aWR0aHNbaXRlcmF0b3JdID0gIWdyaWQgPyB0aGlzLl9pdGVtc1tpdGVyYXRvcl0ud2lkdGgoKSA6IHdpZHRoICogbWVyZ2U7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3dpZHRocyA9IHdpZHRocztcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xvbmVzID0gW10sXG5cdFx0XHRcdGl0ZW1zID0gdGhpcy5faXRlbXMsXG5cdFx0XHRcdHNldHRpbmdzID0gdGhpcy5zZXR0aW5ncyxcblx0XHRcdFx0Ly8gVE9ETzogU2hvdWxkIGJlIGNvbXB1dGVkIGZyb20gbnVtYmVyIG9mIG1pbiB3aWR0aCBpdGVtcyBpbiBzdGFnZVxuXHRcdFx0XHR2aWV3ID0gTWF0aC5tYXgoc2V0dGluZ3MuaXRlbXMgKiAyLCA0KSxcblx0XHRcdFx0c2l6ZSA9IE1hdGguY2VpbChpdGVtcy5sZW5ndGggLyAyKSAqIDIsXG5cdFx0XHRcdHJlcGVhdCA9IHNldHRpbmdzLmxvb3AgJiYgaXRlbXMubGVuZ3RoID8gc2V0dGluZ3MucmV3aW5kID8gdmlldyA6IE1hdGgubWF4KHZpZXcsIHNpemUpIDogMCxcblx0XHRcdFx0YXBwZW5kID0gJycsXG5cdFx0XHRcdHByZXBlbmQgPSAnJztcblxuXHRcdFx0cmVwZWF0IC89IDI7XG5cblx0XHRcdHdoaWxlIChyZXBlYXQtLSkge1xuXHRcdFx0XHQvLyBTd2l0Y2ggdG8gb25seSB1c2luZyBhcHBlbmRlZCBjbG9uZXNcblx0XHRcdFx0Y2xvbmVzLnB1c2godGhpcy5ub3JtYWxpemUoY2xvbmVzLmxlbmd0aCAvIDIsIHRydWUpKTtcblx0XHRcdFx0YXBwZW5kID0gYXBwZW5kICsgaXRlbXNbY2xvbmVzW2Nsb25lcy5sZW5ndGggLSAxXV1bMF0ub3V0ZXJIVE1MO1xuXHRcdFx0XHRjbG9uZXMucHVzaCh0aGlzLm5vcm1hbGl6ZShpdGVtcy5sZW5ndGggLSAxIC0gKGNsb25lcy5sZW5ndGggLSAxKSAvIDIsIHRydWUpKTtcblx0XHRcdFx0cHJlcGVuZCA9IGl0ZW1zW2Nsb25lc1tjbG9uZXMubGVuZ3RoIC0gMV1dWzBdLm91dGVySFRNTCArIHByZXBlbmQ7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX2Nsb25lcyA9IGNsb25lcztcblxuXHRcdFx0JChhcHBlbmQpLmFkZENsYXNzKCdjbG9uZWQnKS5hcHBlbmRUbyh0aGlzLiRzdGFnZSk7XG5cdFx0XHQkKHByZXBlbmQpLmFkZENsYXNzKCdjbG9uZWQnKS5wcmVwZW5kVG8odGhpcy4kc3RhZ2UpO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBydGwgPSB0aGlzLnNldHRpbmdzLnJ0bCA/IDEgOiAtMSxcblx0XHRcdFx0c2l6ZSA9IHRoaXMuX2Nsb25lcy5sZW5ndGggKyB0aGlzLl9pdGVtcy5sZW5ndGgsXG5cdFx0XHRcdGl0ZXJhdG9yID0gLTEsXG5cdFx0XHRcdHByZXZpb3VzID0gMCxcblx0XHRcdFx0Y3VycmVudCA9IDAsXG5cdFx0XHRcdGNvb3JkaW5hdGVzID0gW107XG5cblx0XHRcdHdoaWxlICgrK2l0ZXJhdG9yIDwgc2l6ZSkge1xuXHRcdFx0XHRwcmV2aW91cyA9IGNvb3JkaW5hdGVzW2l0ZXJhdG9yIC0gMV0gfHwgMDtcblx0XHRcdFx0Y3VycmVudCA9IHRoaXMuX3dpZHRoc1t0aGlzLnJlbGF0aXZlKGl0ZXJhdG9yKV0gKyB0aGlzLnNldHRpbmdzLm1hcmdpbjtcblx0XHRcdFx0Y29vcmRpbmF0ZXMucHVzaChwcmV2aW91cyArIGN1cnJlbnQgKiBydGwpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9jb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwYWRkaW5nID0gdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcsXG5cdFx0XHRcdGNvb3JkaW5hdGVzID0gdGhpcy5fY29vcmRpbmF0ZXMsXG5cdFx0XHRcdGNzcyA9IHtcblx0XHRcdFx0XHQnd2lkdGgnOiBNYXRoLmNlaWwoTWF0aC5hYnMoY29vcmRpbmF0ZXNbY29vcmRpbmF0ZXMubGVuZ3RoIC0gMV0pKSArIHBhZGRpbmcgKiAyLFxuXHRcdFx0XHRcdCdwYWRkaW5nLWxlZnQnOiBwYWRkaW5nIHx8ICcnLFxuXHRcdFx0XHRcdCdwYWRkaW5nLXJpZ2h0JzogcGFkZGluZyB8fCAnJ1xuXHRcdFx0XHR9O1xuXG5cdFx0XHR0aGlzLiRzdGFnZS5jc3MoY3NzKTtcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcblx0XHRcdHZhciBpdGVyYXRvciA9IHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCxcblx0XHRcdFx0Z3JpZCA9ICF0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCxcblx0XHRcdFx0aXRlbXMgPSB0aGlzLiRzdGFnZS5jaGlsZHJlbigpO1xuXG5cdFx0XHRpZiAoZ3JpZCAmJiBjYWNoZS5pdGVtcy5tZXJnZSkge1xuXHRcdFx0XHR3aGlsZSAoaXRlcmF0b3ItLSkge1xuXHRcdFx0XHRcdGNhY2hlLmNzcy53aWR0aCA9IHRoaXMuX3dpZHRoc1t0aGlzLnJlbGF0aXZlKGl0ZXJhdG9yKV07XG5cdFx0XHRcdFx0aXRlbXMuZXEoaXRlcmF0b3IpLmNzcyhjYWNoZS5jc3MpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGdyaWQpIHtcblx0XHRcdFx0Y2FjaGUuY3NzLndpZHRoID0gY2FjaGUuaXRlbXMud2lkdGg7XG5cdFx0XHRcdGl0ZW1zLmNzcyhjYWNoZS5jc3MpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAnaXRlbXMnIF0sXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCA8IDEgJiYgdGhpcy4kc3RhZ2UucmVtb3ZlQXR0cignc3R5bGUnKTtcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcblx0XHRcdGNhY2hlLmN1cnJlbnQgPSBjYWNoZS5jdXJyZW50ID8gdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5pbmRleChjYWNoZS5jdXJyZW50KSA6IDA7XG5cdFx0XHRjYWNoZS5jdXJyZW50ID0gTWF0aC5tYXgodGhpcy5taW5pbXVtKCksIE1hdGgubWluKHRoaXMubWF4aW11bSgpLCBjYWNoZS5jdXJyZW50KSk7XG5cdFx0XHR0aGlzLnJlc2V0KGNhY2hlLmN1cnJlbnQpO1xuXHRcdH1cblx0fSwge1xuXHRcdGZpbHRlcjogWyAncG9zaXRpb24nIF0sXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuYW5pbWF0ZSh0aGlzLmNvb3JkaW5hdGVzKHRoaXMuX2N1cnJlbnQpKTtcblx0XHR9XG5cdH0sIHtcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ3Bvc2l0aW9uJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcnRsID0gdGhpcy5zZXR0aW5ncy5ydGwgPyAxIDogLTEsXG5cdFx0XHRcdHBhZGRpbmcgPSB0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyAqIDIsXG5cdFx0XHRcdGJlZ2luID0gdGhpcy5jb29yZGluYXRlcyh0aGlzLmN1cnJlbnQoKSkgKyBwYWRkaW5nLFxuXHRcdFx0XHRlbmQgPSBiZWdpbiArIHRoaXMud2lkdGgoKSAqIHJ0bCxcblx0XHRcdFx0aW5uZXIsIG91dGVyLCBtYXRjaGVzID0gW10sIGksIG47XG5cblx0XHRcdGZvciAoaSA9IDAsIG4gPSB0aGlzLl9jb29yZGluYXRlcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcblx0XHRcdFx0aW5uZXIgPSB0aGlzLl9jb29yZGluYXRlc1tpIC0gMV0gfHwgMDtcblx0XHRcdFx0b3V0ZXIgPSBNYXRoLmFicyh0aGlzLl9jb29yZGluYXRlc1tpXSkgKyBwYWRkaW5nICogcnRsO1xuXG5cdFx0XHRcdGlmICgodGhpcy5vcChpbm5lciwgJzw9JywgYmVnaW4pICYmICh0aGlzLm9wKGlubmVyLCAnPicsIGVuZCkpKVxuXHRcdFx0XHRcdHx8ICh0aGlzLm9wKG91dGVyLCAnPCcsIGJlZ2luKSAmJiB0aGlzLm9wKG91dGVyLCAnPicsIGVuZCkpKSB7XG5cdFx0XHRcdFx0bWF0Y2hlcy5wdXNoKGkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuXHRcdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oJzplcSgnICsgbWF0Y2hlcy5qb2luKCcpLCA6ZXEoJykgKyAnKScpLmFkZENsYXNzKCdhY3RpdmUnKTtcblxuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MuY2VudGVyKSB7XG5cdFx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuY2VudGVyJykucmVtb3ZlQ2xhc3MoJ2NlbnRlcicpO1xuXHRcdFx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmVxKHRoaXMuY3VycmVudCgpKS5hZGRDbGFzcygnY2VudGVyJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IF07XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSBjYXJvdXNlbC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5lbnRlcignaW5pdGlhbGl6aW5nJyk7XG5cdFx0dGhpcy50cmlnZ2VyKCdpbml0aWFsaXplJyk7XG5cblx0XHR0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuc2V0dGluZ3MucnRsQ2xhc3MsIHRoaXMuc2V0dGluZ3MucnRsKTtcblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCAmJiAhdGhpcy5pcygncHJlLWxvYWRpbmcnKSkge1xuXHRcdFx0dmFyIGltZ3MsIG5lc3RlZFNlbGVjdG9yLCB3aWR0aDtcblx0XHRcdGltZ3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2ltZycpO1xuXHRcdFx0bmVzdGVkU2VsZWN0b3IgPSB0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3RvciA/ICcuJyArIHRoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yIDogdW5kZWZpbmVkO1xuXHRcdFx0d2lkdGggPSB0aGlzLiRlbGVtZW50LmNoaWxkcmVuKG5lc3RlZFNlbGVjdG9yKS53aWR0aCgpO1xuXG5cdFx0XHRpZiAoaW1ncy5sZW5ndGggJiYgd2lkdGggPD0gMCkge1xuXHRcdFx0XHR0aGlzLnByZWxvYWRBdXRvV2lkdGhJbWFnZXMoaW1ncyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKTtcblxuXHRcdC8vIGNyZWF0ZSBzdGFnZVxuXHRcdHRoaXMuJHN0YWdlID0gJCgnPCcgKyB0aGlzLnNldHRpbmdzLnN0YWdlRWxlbWVudCArICcgY2xhc3M9XCInICsgdGhpcy5zZXR0aW5ncy5zdGFnZUNsYXNzICsgJ1wiLz4nKVxuXHRcdFx0LndyYXAoJzxkaXYgY2xhc3M9XCInICsgdGhpcy5zZXR0aW5ncy5zdGFnZU91dGVyQ2xhc3MgKyAnXCIvPicpO1xuXG5cdFx0Ly8gYXBwZW5kIHN0YWdlXG5cdFx0dGhpcy4kZWxlbWVudC5hcHBlbmQodGhpcy4kc3RhZ2UucGFyZW50KCkpO1xuXG5cdFx0Ly8gYXBwZW5kIGNvbnRlbnRcblx0XHR0aGlzLnJlcGxhY2UodGhpcy4kZWxlbWVudC5jaGlsZHJlbigpLm5vdCh0aGlzLiRzdGFnZS5wYXJlbnQoKSkpO1xuXG5cdFx0Ly8gY2hlY2sgdmlzaWJpbGl0eVxuXHRcdGlmICh0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7XG5cdFx0XHQvLyB1cGRhdGUgdmlld1xuXHRcdFx0dGhpcy5yZWZyZXNoKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGludmFsaWRhdGUgd2lkdGhcblx0XHRcdHRoaXMuaW52YWxpZGF0ZSgnd2lkdGgnKTtcblx0XHR9XG5cblx0XHR0aGlzLiRlbGVtZW50XG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRpbmdDbGFzcylcblx0XHRcdC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGVkQ2xhc3MpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnRIYW5kbGVycygpO1xuXG5cdFx0dGhpcy5sZWF2ZSgnaW5pdGlhbGl6aW5nJyk7XG5cdFx0dGhpcy50cmlnZ2VyKCdpbml0aWFsaXplZCcpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTZXR1cHMgdGhlIGN1cnJlbnQgc2V0dGluZ3MuXG5cdCAqIEB0b2RvIFJlbW92ZSByZXNwb25zaXZlIGNsYXNzZXMuIFdoeSBzaG91bGQgYWRhcHRpdmUgZGVzaWducyBiZSBicm91Z2h0IGludG8gSUU4P1xuXHQgKiBAdG9kbyBTdXBwb3J0IGZvciBtZWRpYSBxdWVyaWVzIGJ5IHVzaW5nIGBtYXRjaE1lZGlhYCB3b3VsZCBiZSBuaWNlLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZpZXdwb3J0ID0gdGhpcy52aWV3cG9ydCgpLFxuXHRcdFx0b3ZlcndyaXRlcyA9IHRoaXMub3B0aW9ucy5yZXNwb25zaXZlLFxuXHRcdFx0bWF0Y2ggPSAtMSxcblx0XHRcdHNldHRpbmdzID0gbnVsbDtcblxuXHRcdGlmICghb3ZlcndyaXRlcykge1xuXHRcdFx0c2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5lYWNoKG92ZXJ3cml0ZXMsIGZ1bmN0aW9uKGJyZWFrcG9pbnQpIHtcblx0XHRcdFx0aWYgKGJyZWFrcG9pbnQgPD0gdmlld3BvcnQgJiYgYnJlYWtwb2ludCA+IG1hdGNoKSB7XG5cdFx0XHRcdFx0bWF0Y2ggPSBOdW1iZXIoYnJlYWtwb2ludCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG92ZXJ3cml0ZXNbbWF0Y2hdKTtcblx0XHRcdGlmICh0eXBlb2Ygc2V0dGluZ3Muc3RhZ2VQYWRkaW5nID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHNldHRpbmdzLnN0YWdlUGFkZGluZyA9IHNldHRpbmdzLnN0YWdlUGFkZGluZygpO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHNldHRpbmdzLnJlc3BvbnNpdmU7XG5cblx0XHRcdC8vIHJlc3BvbnNpdmUgY2xhc3Ncblx0XHRcdGlmIChzZXR0aW5ncy5yZXNwb25zaXZlQ2xhc3MpIHtcblx0XHRcdFx0dGhpcy4kZWxlbWVudC5hdHRyKCdjbGFzcycsXG5cdFx0XHRcdFx0dGhpcy4kZWxlbWVudC5hdHRyKCdjbGFzcycpLnJlcGxhY2UobmV3IFJlZ0V4cCgnKCcgKyB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUNsYXNzICsgJy0pXFxcXFMrXFxcXHMnLCAnZycpLCAnJDEnICsgbWF0Y2gpXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy50cmlnZ2VyKCdjaGFuZ2UnLCB7IHByb3BlcnR5OiB7IG5hbWU6ICdzZXR0aW5ncycsIHZhbHVlOiBzZXR0aW5ncyB9IH0pO1xuXHRcdHRoaXMuX2JyZWFrcG9pbnQgPSBtYXRjaDtcblx0XHR0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG5cdFx0dGhpcy5pbnZhbGlkYXRlKCdzZXR0aW5ncycpO1xuXHRcdHRoaXMudHJpZ2dlcignY2hhbmdlZCcsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3NldHRpbmdzJywgdmFsdWU6IHRoaXMuc2V0dGluZ3MgfSB9KTtcblx0fTtcblxuXHQvKipcblx0ICogVXBkYXRlcyBvcHRpb24gbG9naWMgaWYgbmVjZXNzZXJ5LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9wdGlvbnNMb2dpYyA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCkge1xuXHRcdFx0dGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcgPSBmYWxzZTtcblx0XHRcdHRoaXMuc2V0dGluZ3MubWVyZ2UgPSBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFByZXBhcmVzIGFuIGl0ZW0gYmVmb3JlIGFkZC5cblx0ICogQHRvZG8gUmVuYW1lIGV2ZW50IHBhcmFtZXRlciBgY29udGVudGAgdG8gYGl0ZW1gLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm5zIHtqUXVlcnl8SFRNTEVsZW1lbnR9IC0gVGhlIGl0ZW0gY29udGFpbmVyLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdHZhciBldmVudCA9IHRoaXMudHJpZ2dlcigncHJlcGFyZScsIHsgY29udGVudDogaXRlbSB9KTtcblxuXHRcdGlmICghZXZlbnQuZGF0YSkge1xuXHRcdFx0ZXZlbnQuZGF0YSA9ICQoJzwnICsgdGhpcy5zZXR0aW5ncy5pdGVtRWxlbWVudCArICcvPicpXG5cdFx0XHRcdC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaXRlbUNsYXNzKS5hcHBlbmQoaXRlbSlcblx0XHR9XG5cblx0XHR0aGlzLnRyaWdnZXIoJ3ByZXBhcmVkJywgeyBjb250ZW50OiBldmVudC5kYXRhIH0pO1xuXG5cdFx0cmV0dXJuIGV2ZW50LmRhdGE7XG5cdH07XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHZpZXcuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdE93bC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0biA9IHRoaXMuX3BpcGUubGVuZ3RoLFxuXHRcdFx0ZmlsdGVyID0gJC5wcm94eShmdW5jdGlvbihwKSB7IHJldHVybiB0aGlzW3BdIH0sIHRoaXMuX2ludmFsaWRhdGVkKSxcblx0XHRcdGNhY2hlID0ge307XG5cblx0XHR3aGlsZSAoaSA8IG4pIHtcblx0XHRcdGlmICh0aGlzLl9pbnZhbGlkYXRlZC5hbGwgfHwgJC5ncmVwKHRoaXMuX3BpcGVbaV0uZmlsdGVyLCBmaWx0ZXIpLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dGhpcy5fcGlwZVtpXS5ydW4oY2FjaGUpO1xuXHRcdFx0fVxuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHRoaXMuX2ludmFsaWRhdGVkID0ge307XG5cblx0XHQhdGhpcy5pcygndmFsaWQnKSAmJiB0aGlzLmVudGVyKCd2YWxpZCcpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSB3aWR0aCBvZiB0aGUgdmlldy5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge093bC5XaWR0aH0gW2RpbWVuc2lvbj1Pd2wuV2lkdGguRGVmYXVsdF0gLSBUaGUgZGltZW5zaW9uIHRvIHJldHVybi5cblx0ICogQHJldHVybnMge051bWJlcn0gLSBUaGUgd2lkdGggb2YgdGhlIHZpZXcgaW4gcGl4ZWwuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLndpZHRoID0gZnVuY3Rpb24oZGltZW5zaW9uKSB7XG5cdFx0ZGltZW5zaW9uID0gZGltZW5zaW9uIHx8IE93bC5XaWR0aC5EZWZhdWx0O1xuXHRcdHN3aXRjaCAoZGltZW5zaW9uKSB7XG5cdFx0XHRjYXNlIE93bC5XaWR0aC5Jbm5lcjpcblx0XHRcdGNhc2UgT3dsLldpZHRoLk91dGVyOlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fd2lkdGg7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5fd2lkdGggLSB0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyAqIDIgKyB0aGlzLnNldHRpbmdzLm1hcmdpbjtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlZnJlc2hlcyB0aGUgY2Fyb3VzZWwgcHJpbWFyaWx5IGZvciBhZGFwdGl2ZSBwdXJwb3Nlcy5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5lbnRlcigncmVmcmVzaGluZycpO1xuXHRcdHRoaXMudHJpZ2dlcigncmVmcmVzaCcpO1xuXG5cdFx0dGhpcy5zZXR1cCgpO1xuXG5cdFx0dGhpcy5vcHRpb25zTG9naWMoKTtcblxuXHRcdHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnJlZnJlc2hDbGFzcyk7XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdFx0dGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucmVmcmVzaENsYXNzKTtcblxuXHRcdHRoaXMubGVhdmUoJ3JlZnJlc2hpbmcnKTtcblx0XHR0aGlzLnRyaWdnZXIoJ3JlZnJlc2hlZCcpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBDaGVja3Mgd2luZG93IGByZXNpemVgIGV2ZW50LlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9uVGhyb3R0bGVkUmVzaXplID0gZnVuY3Rpb24oKSB7XG5cdFx0d2luZG93LmNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVyKTtcblx0XHR0aGlzLnJlc2l6ZVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQodGhpcy5faGFuZGxlcnMub25SZXNpemUsIHRoaXMuc2V0dGluZ3MucmVzcG9uc2l2ZVJlZnJlc2hSYXRlKTtcblx0fTtcblxuXHQvKipcblx0ICogQ2hlY2tzIHdpbmRvdyBgcmVzaXplYCBldmVudC5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5faXRlbXMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX3dpZHRoID09PSB0aGlzLiRlbGVtZW50LndpZHRoKCkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLmVudGVyKCdyZXNpemluZycpO1xuXG5cdFx0aWYgKHRoaXMudHJpZ2dlcigncmVzaXplJykuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcblx0XHRcdHRoaXMubGVhdmUoJ3Jlc2l6aW5nJyk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dGhpcy5pbnZhbGlkYXRlKCd3aWR0aCcpO1xuXG5cdFx0dGhpcy5yZWZyZXNoKCk7XG5cblx0XHR0aGlzLmxlYXZlKCdyZXNpemluZycpO1xuXHRcdHRoaXMudHJpZ2dlcigncmVzaXplZCcpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgZXZlbnQgaGFuZGxlcnMuXG5cdCAqIEB0b2RvIENoZWNrIGBtc1BvaW50ZXJFbmFibGVkYFxuXHQgKiBAdG9kbyAjMjYxXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE93bC5wcm90b3R5cGUucmVnaXN0ZXJFdmVudEhhbmRsZXJzID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XG5cdFx0XHR0aGlzLiRzdGFnZS5vbigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQgKyAnLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uVHJhbnNpdGlvbkVuZCwgdGhpcykpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmUgIT09IGZhbHNlKSB7XG5cdFx0XHR0aGlzLm9uKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuX2hhbmRsZXJzLm9uVGhyb3R0bGVkUmVzaXplKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5zZXR0aW5ncy5tb3VzZURyYWcpIHtcblx0XHRcdHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmRyYWdDbGFzcyk7XG5cdFx0XHR0aGlzLiRzdGFnZS5vbignbW91c2Vkb3duLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ1N0YXJ0LCB0aGlzKSk7XG5cdFx0XHR0aGlzLiRzdGFnZS5vbignZHJhZ3N0YXJ0Lm93bC5jb3JlIHNlbGVjdHN0YXJ0Lm93bC5jb3JlJywgZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZSB9KTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5zZXR0aW5ncy50b3VjaERyYWcpe1xuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJ3RvdWNoc3RhcnQub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnU3RhcnQsIHRoaXMpKTtcblx0XHRcdHRoaXMuJHN0YWdlLm9uKCd0b3VjaGNhbmNlbC5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdFbmQsIHRoaXMpKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgYHRvdWNoc3RhcnRgIGFuZCBgbW91c2Vkb3duYCBldmVudHMuXG5cdCAqIEB0b2RvIEhvcml6b250YWwgc3dpcGUgdGhyZXNob2xkIGFzIG9wdGlvblxuXHQgKiBAdG9kbyAjMjYxXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5vbkRyYWdTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIHN0YWdlID0gbnVsbDtcblxuXHRcdGlmIChldmVudC53aGljaCA9PT0gMykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgkLnN1cHBvcnQudHJhbnNmb3JtKSB7XG5cdFx0XHRzdGFnZSA9IHRoaXMuJHN0YWdlLmNzcygndHJhbnNmb3JtJykucmVwbGFjZSgvLipcXCh8XFwpfCAvZywgJycpLnNwbGl0KCcsJyk7XG5cdFx0XHRzdGFnZSA9IHtcblx0XHRcdFx0eDogc3RhZ2Vbc3RhZ2UubGVuZ3RoID09PSAxNiA/IDEyIDogNF0sXG5cdFx0XHRcdHk6IHN0YWdlW3N0YWdlLmxlbmd0aCA9PT0gMTYgPyAxMyA6IDVdXG5cdFx0XHR9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdGFnZSA9IHRoaXMuJHN0YWdlLnBvc2l0aW9uKCk7XG5cdFx0XHRzdGFnZSA9IHtcblx0XHRcdFx0eDogdGhpcy5zZXR0aW5ncy5ydGwgP1xuXHRcdFx0XHRcdHN0YWdlLmxlZnQgKyB0aGlzLiRzdGFnZS53aWR0aCgpIC0gdGhpcy53aWR0aCgpICsgdGhpcy5zZXR0aW5ncy5tYXJnaW4gOlxuXHRcdFx0XHRcdHN0YWdlLmxlZnQsXG5cdFx0XHRcdHk6IHN0YWdlLnRvcFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5pcygnYW5pbWF0aW5nJykpIHtcblx0XHRcdCQuc3VwcG9ydC50cmFuc2Zvcm0gPyB0aGlzLmFuaW1hdGUoc3RhZ2UueCkgOiB0aGlzLiRzdGFnZS5zdG9wKClcblx0XHRcdHRoaXMuaW52YWxpZGF0ZSgncG9zaXRpb24nKTtcblx0XHR9XG5cblx0XHR0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MsIGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nKTtcblxuXHRcdHRoaXMuc3BlZWQoMCk7XG5cblx0XHR0aGlzLl9kcmFnLnRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblx0XHR0aGlzLl9kcmFnLnRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcblx0XHR0aGlzLl9kcmFnLnN0YWdlLnN0YXJ0ID0gc3RhZ2U7XG5cdFx0dGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50ID0gc3RhZ2U7XG5cdFx0dGhpcy5fZHJhZy5wb2ludGVyID0gdGhpcy5wb2ludGVyKGV2ZW50KTtcblxuXHRcdCQoZG9jdW1lbnQpLm9uKCdtb3VzZXVwLm93bC5jb3JlIHRvdWNoZW5kLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ0VuZCwgdGhpcykpO1xuXG5cdFx0JChkb2N1bWVudCkub25lKCdtb3VzZW1vdmUub3dsLmNvcmUgdG91Y2htb3ZlLm93bC5jb3JlJywgJC5wcm94eShmdW5jdGlvbihldmVudCkge1xuXHRcdFx0dmFyIGRlbHRhID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlciwgdGhpcy5wb2ludGVyKGV2ZW50KSk7XG5cblx0XHRcdCQoZG9jdW1lbnQpLm9uKCdtb3VzZW1vdmUub3dsLmNvcmUgdG91Y2htb3ZlLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ01vdmUsIHRoaXMpKTtcblxuXHRcdFx0aWYgKE1hdGguYWJzKGRlbHRhLngpIDwgTWF0aC5hYnMoZGVsdGEueSkgJiYgdGhpcy5pcygndmFsaWQnKSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdHRoaXMuZW50ZXIoJ2RyYWdnaW5nJyk7XG5cdFx0XHR0aGlzLnRyaWdnZXIoJ2RyYWcnKTtcblx0XHR9LCB0aGlzKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEhhbmRsZXMgdGhlIGB0b3VjaG1vdmVgIGFuZCBgbW91c2Vtb3ZlYCBldmVudHMuXG5cdCAqIEB0b2RvICMyNjFcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9uRHJhZ01vdmUgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciBtaW5pbXVtID0gbnVsbCxcblx0XHRcdG1heGltdW0gPSBudWxsLFxuXHRcdFx0cHVsbCA9IG51bGwsXG5cdFx0XHRkZWx0YSA9IHRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnBvaW50ZXIsIHRoaXMucG9pbnRlcihldmVudCkpLFxuXHRcdFx0c3RhZ2UgPSB0aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5zdGFnZS5zdGFydCwgZGVsdGEpO1xuXG5cdFx0aWYgKCF0aGlzLmlzKCdkcmFnZ2luZycpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmxvb3ApIHtcblx0XHRcdG1pbmltdW0gPSB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKTtcblx0XHRcdG1heGltdW0gPSB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpICsgMSkgLSBtaW5pbXVtO1xuXHRcdFx0c3RhZ2UueCA9ICgoKHN0YWdlLnggLSBtaW5pbXVtKSAlIG1heGltdW0gKyBtYXhpbXVtKSAlIG1heGltdW0pICsgbWluaW11bTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWluaW11bSA9IHRoaXMuc2V0dGluZ3MucnRsID8gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSkgOiB0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKTtcblx0XHRcdG1heGltdW0gPSB0aGlzLnNldHRpbmdzLnJ0bCA/IHRoaXMuY29vcmRpbmF0ZXModGhpcy5taW5pbXVtKCkpIDogdGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSk7XG5cdFx0XHRwdWxsID0gdGhpcy5zZXR0aW5ncy5wdWxsRHJhZyA/IC0xICogZGVsdGEueCAvIDUgOiAwO1xuXHRcdFx0c3RhZ2UueCA9IE1hdGgubWF4KE1hdGgubWluKHN0YWdlLngsIG1pbmltdW0gKyBwdWxsKSwgbWF4aW11bSArIHB1bGwpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudCA9IHN0YWdlO1xuXG5cdFx0dGhpcy5hbmltYXRlKHN0YWdlLngpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBIYW5kbGVzIHRoZSBgdG91Y2hlbmRgIGFuZCBgbW91c2V1cGAgZXZlbnRzLlxuXHQgKiBAdG9kbyAjMjYxXG5cdCAqIEB0b2RvIFRocmVzaG9sZCBmb3IgY2xpY2sgZXZlbnRcblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9uRHJhZ0VuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIGRlbHRhID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlciwgdGhpcy5wb2ludGVyKGV2ZW50KSksXG5cdFx0XHRzdGFnZSA9IHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudCxcblx0XHRcdGRpcmVjdGlvbiA9IGRlbHRhLnggPiAwIF4gdGhpcy5zZXR0aW5ncy5ydGwgPyAnbGVmdCcgOiAncmlnaHQnO1xuXG5cdFx0JChkb2N1bWVudCkub2ZmKCcub3dsLmNvcmUnKTtcblxuXHRcdHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmdyYWJDbGFzcyk7XG5cblx0XHRpZiAoZGVsdGEueCAhPT0gMCAmJiB0aGlzLmlzKCdkcmFnZ2luZycpIHx8ICF0aGlzLmlzKCd2YWxpZCcpKSB7XG5cdFx0XHR0aGlzLnNwZWVkKHRoaXMuc2V0dGluZ3MuZHJhZ0VuZFNwZWVkIHx8IHRoaXMuc2V0dGluZ3Muc21hcnRTcGVlZCk7XG5cdFx0XHR0aGlzLmN1cnJlbnQodGhpcy5jbG9zZXN0KHN0YWdlLngsIGRlbHRhLnggIT09IDAgPyBkaXJlY3Rpb24gOiB0aGlzLl9kcmFnLmRpcmVjdGlvbikpO1xuXHRcdFx0dGhpcy5pbnZhbGlkYXRlKCdwb3NpdGlvbicpO1xuXHRcdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdFx0dGhpcy5fZHJhZy5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG5cblx0XHRcdGlmIChNYXRoLmFicyhkZWx0YS54KSA+IDMgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLl9kcmFnLnRpbWUgPiAzMDApIHtcblx0XHRcdFx0dGhpcy5fZHJhZy50YXJnZXQub25lKCdjbGljay5vd2wuY29yZScsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghdGhpcy5pcygnZHJhZ2dpbmcnKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMubGVhdmUoJ2RyYWdnaW5nJyk7XG5cdFx0dGhpcy50cmlnZ2VyKCdkcmFnZ2VkJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGNsb3Nlc3QgaXRlbSBmb3IgYSBjb29yZGluYXRlLlxuXHQgKiBAdG9kbyBTZXR0aW5nIGBmcmVlRHJhZ2AgbWFrZXMgYGNsb3Nlc3RgIG5vdCByZXVzYWJsZS4gU2VlICMxNjUuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvb3JkaW5hdGUgLSBUaGUgY29vcmRpbmF0ZSBpbiBwaXhlbC5cblx0ICogQHBhcmFtIHtTdHJpbmd9IGRpcmVjdGlvbiAtIFRoZSBkaXJlY3Rpb24gdG8gY2hlY2sgZm9yIHRoZSBjbG9zZXN0IGl0ZW0uIEV0aGVyIGBsZWZ0YCBvciBgcmlnaHRgLlxuXHQgKiBAcmV0dXJuIHtOdW1iZXJ9IC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjbG9zZXN0IGl0ZW0uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmNsb3Nlc3QgPSBmdW5jdGlvbihjb29yZGluYXRlLCBkaXJlY3Rpb24pIHtcblx0XHR2YXIgcG9zaXRpb24gPSAtMSxcblx0XHRcdHB1bGwgPSAzMCxcblx0XHRcdHdpZHRoID0gdGhpcy53aWR0aCgpLFxuXHRcdFx0Y29vcmRpbmF0ZXMgPSB0aGlzLmNvb3JkaW5hdGVzKCk7XG5cblx0XHRpZiAoIXRoaXMuc2V0dGluZ3MuZnJlZURyYWcpIHtcblx0XHRcdC8vIGNoZWNrIGNsb3Nlc3QgaXRlbVxuXHRcdFx0JC5lYWNoKGNvb3JkaW5hdGVzLCAkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xuXHRcdFx0XHQvLyBvbiBhIGxlZnQgcHVsbCwgY2hlY2sgb24gY3VycmVudCBpbmRleFxuXHRcdFx0XHRpZiAoZGlyZWN0aW9uID09PSAnbGVmdCcgJiYgY29vcmRpbmF0ZSA+IHZhbHVlIC0gcHVsbCAmJiBjb29yZGluYXRlIDwgdmFsdWUgKyBwdWxsKSB7XG5cdFx0XHRcdFx0cG9zaXRpb24gPSBpbmRleDtcblx0XHRcdFx0Ly8gb24gYSByaWdodCBwdWxsLCBjaGVjayBvbiBwcmV2aW91cyBpbmRleFxuXHRcdFx0XHQvLyB0byBkbyBzbywgc3VidHJhY3Qgd2lkdGggZnJvbSB2YWx1ZSBhbmQgc2V0IHBvc2l0aW9uID0gaW5kZXggKyAxXG5cdFx0XHRcdH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnICYmIGNvb3JkaW5hdGUgPiB2YWx1ZSAtIHdpZHRoIC0gcHVsbCAmJiBjb29yZGluYXRlIDwgdmFsdWUgLSB3aWR0aCArIHB1bGwpIHtcblx0XHRcdFx0XHRwb3NpdGlvbiA9IGluZGV4ICsgMTtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLm9wKGNvb3JkaW5hdGUsICc8JywgdmFsdWUpXG5cdFx0XHRcdFx0JiYgdGhpcy5vcChjb29yZGluYXRlLCAnPicsIGNvb3JkaW5hdGVzW2luZGV4ICsgMV0gfHwgdmFsdWUgLSB3aWR0aCkpIHtcblx0XHRcdFx0XHRwb3NpdGlvbiA9IGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gaW5kZXggKyAxIDogaW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uID09PSAtMTtcblx0XHRcdH0sIHRoaXMpKTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuc2V0dGluZ3MubG9vcCkge1xuXHRcdFx0Ly8gbm9uIGxvb3AgYm91bmRyaWVzXG5cdFx0XHRpZiAodGhpcy5vcChjb29yZGluYXRlLCAnPicsIGNvb3JkaW5hdGVzW3RoaXMubWluaW11bSgpXSkpIHtcblx0XHRcdFx0cG9zaXRpb24gPSBjb29yZGluYXRlID0gdGhpcy5taW5pbXVtKCk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMub3AoY29vcmRpbmF0ZSwgJzwnLCBjb29yZGluYXRlc1t0aGlzLm1heGltdW0oKV0pKSB7XG5cdFx0XHRcdHBvc2l0aW9uID0gY29vcmRpbmF0ZSA9IHRoaXMubWF4aW11bSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBwb3NpdGlvbjtcblx0fTtcblxuXHQvKipcblx0ICogQW5pbWF0ZXMgdGhlIHN0YWdlLlxuXHQgKiBAdG9kbyAjMjcwXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvb3JkaW5hdGUgLSBUaGUgY29vcmRpbmF0ZSBpbiBwaXhlbHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmFuaW1hdGUgPSBmdW5jdGlvbihjb29yZGluYXRlKSB7XG5cdFx0dmFyIGFuaW1hdGUgPSB0aGlzLnNwZWVkKCkgPiAwO1xuXG5cdFx0dGhpcy5pcygnYW5pbWF0aW5nJykgJiYgdGhpcy5vblRyYW5zaXRpb25FbmQoKTtcblxuXHRcdGlmIChhbmltYXRlKSB7XG5cdFx0XHR0aGlzLmVudGVyKCdhbmltYXRpbmcnKTtcblx0XHRcdHRoaXMudHJpZ2dlcigndHJhbnNsYXRlJyk7XG5cdFx0fVxuXG5cdFx0aWYgKCQuc3VwcG9ydC50cmFuc2Zvcm0zZCAmJiAkLnN1cHBvcnQudHJhbnNpdGlvbikge1xuXHRcdFx0dGhpcy4kc3RhZ2UuY3NzKHtcblx0XHRcdFx0dHJhbnNmb3JtOiAndHJhbnNsYXRlM2QoJyArIGNvb3JkaW5hdGUgKyAncHgsMHB4LDBweCknLFxuXHRcdFx0XHR0cmFuc2l0aW9uOiAodGhpcy5zcGVlZCgpIC8gMTAwMCkgKyAncydcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSBpZiAoYW5pbWF0ZSkge1xuXHRcdFx0dGhpcy4kc3RhZ2UuYW5pbWF0ZSh7XG5cdFx0XHRcdGxlZnQ6IGNvb3JkaW5hdGUgKyAncHgnXG5cdFx0XHR9LCB0aGlzLnNwZWVkKCksIHRoaXMuc2V0dGluZ3MuZmFsbGJhY2tFYXNpbmcsICQucHJveHkodGhpcy5vblRyYW5zaXRpb25FbmQsIHRoaXMpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy4kc3RhZ2UuY3NzKHtcblx0XHRcdFx0bGVmdDogY29vcmRpbmF0ZSArICdweCdcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogQ2hlY2tzIHdoZXRoZXIgdGhlIGNhcm91c2VsIGlzIGluIGEgc3BlY2lmaWMgc3RhdGUgb3Igbm90LlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gc3RhdGUgLSBUaGUgc3RhdGUgdG8gY2hlY2suXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSAtIFRoZSBmbGFnIHdoaWNoIGluZGljYXRlcyBpZiB0aGUgY2Fyb3VzZWwgaXMgYnVzeS5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuaXMgPSBmdW5jdGlvbihzdGF0ZSkge1xuXHRcdHJldHVybiB0aGlzLl9zdGF0ZXMuY3VycmVudFtzdGF0ZV0gJiYgdGhpcy5fc3RhdGVzLmN1cnJlbnRbc3RhdGVdID4gMDtcblx0fTtcblxuXHQvKipcblx0ICogU2V0cyB0aGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uXSAtIFRoZSBuZXcgYWJzb2x1dGUgcG9zaXRpb24gb3Igbm90aGluZyB0byBsZWF2ZSBpdCB1bmNoYW5nZWQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBjdXJyZW50IGl0ZW0uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fY3VycmVudDtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5faXRlbXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24pO1xuXG5cdFx0aWYgKHRoaXMuX2N1cnJlbnQgIT09IHBvc2l0aW9uKSB7XG5cdFx0XHR2YXIgZXZlbnQgPSB0aGlzLnRyaWdnZXIoJ2NoYW5nZScsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3Bvc2l0aW9uJywgdmFsdWU6IHBvc2l0aW9uIH0gfSk7XG5cblx0XHRcdGlmIChldmVudC5kYXRhICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShldmVudC5kYXRhKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY3VycmVudCA9IHBvc2l0aW9uO1xuXG5cdFx0XHR0aGlzLmludmFsaWRhdGUoJ3Bvc2l0aW9uJyk7XG5cblx0XHRcdHRoaXMudHJpZ2dlcignY2hhbmdlZCcsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3Bvc2l0aW9uJywgdmFsdWU6IHRoaXMuX2N1cnJlbnQgfSB9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fY3VycmVudDtcblx0fTtcblxuXHQvKipcblx0ICogSW52YWxpZGF0ZXMgdGhlIGdpdmVuIHBhcnQgb2YgdGhlIHVwZGF0ZSByb3V0aW5lLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW3BhcnRdIC0gVGhlIHBhcnQgdG8gaW52YWxpZGF0ZS5cblx0ICogQHJldHVybnMge0FycmF5LjxTdHJpbmc+fSAtIFRoZSBpbnZhbGlkYXRlZCBwYXJ0cy5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKHBhcnQpIHtcblx0XHRpZiAoJC50eXBlKHBhcnQpID09PSAnc3RyaW5nJykge1xuXHRcdFx0dGhpcy5faW52YWxpZGF0ZWRbcGFydF0gPSB0cnVlO1xuXHRcdFx0dGhpcy5pcygndmFsaWQnKSAmJiB0aGlzLmxlYXZlKCd2YWxpZCcpO1xuXHRcdH1cblx0XHRyZXR1cm4gJC5tYXAodGhpcy5faW52YWxpZGF0ZWQsIGZ1bmN0aW9uKHYsIGkpIHsgcmV0dXJuIGkgfSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlc2V0cyB0aGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIG5ldyBpdGVtLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbik7XG5cblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX3NwZWVkID0gMDtcblx0XHR0aGlzLl9jdXJyZW50ID0gcG9zaXRpb247XG5cblx0XHR0aGlzLnN1cHByZXNzKFsgJ3RyYW5zbGF0ZScsICd0cmFuc2xhdGVkJyBdKTtcblxuXHRcdHRoaXMuYW5pbWF0ZSh0aGlzLmNvb3JkaW5hdGVzKHBvc2l0aW9uKSk7XG5cblx0XHR0aGlzLnJlbGVhc2UoWyAndHJhbnNsYXRlJywgJ3RyYW5zbGF0ZWQnIF0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBOb3JtYWxpemVzIGFuIGFic29sdXRlIG9yIGEgcmVsYXRpdmUgcG9zaXRpb24gb2YgYW4gaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgb3IgcmVsYXRpdmUgcG9zaXRpb24gdG8gbm9ybWFsaXplLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtyZWxhdGl2ZT1mYWxzZV0gLSBXaGV0aGVyIHRoZSBnaXZlbiBwb3NpdGlvbiBpcyByZWxhdGl2ZSBvciBub3QuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIG5vcm1hbGl6ZWQgcG9zaXRpb24uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCByZWxhdGl2ZSkge1xuXHRcdHZhciBuID0gdGhpcy5faXRlbXMubGVuZ3RoLFxuXHRcdFx0bSA9IHJlbGF0aXZlID8gMCA6IHRoaXMuX2Nsb25lcy5sZW5ndGg7XG5cblx0XHRpZiAoIXRoaXMuaXNOdW1lcmljKHBvc2l0aW9uKSB8fCBuIDwgMSkge1xuXHRcdFx0cG9zaXRpb24gPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gbiArIG0pIHtcblx0XHRcdHBvc2l0aW9uID0gKChwb3NpdGlvbiAtIG0gLyAyKSAlIG4gKyBuKSAlIG4gKyBtIC8gMjtcblx0XHR9XG5cblx0XHRyZXR1cm4gcG9zaXRpb247XG5cdH07XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGFuIGFic29sdXRlIHBvc2l0aW9uIG9mIGFuIGl0ZW0gaW50byBhIHJlbGF0aXZlIG9uZS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gdG8gY29udmVydC5cblx0ICogQHJldHVybnMge051bWJlcn0gLSBUaGUgY29udmVydGVkIHBvc2l0aW9uLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5yZWxhdGl2ZSA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cdFx0cG9zaXRpb24gLT0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDI7XG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB0aGUgbWF4aW11bSBwb3NpdGlvbiBmb3IgdGhlIGN1cnJlbnQgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtyZWxhdGl2ZT1mYWxzZV0gLSBXaGV0aGVyIHRvIHJldHVybiBhbiBhYnNvbHV0ZSBwb3NpdGlvbiBvciBhIHJlbGF0aXZlIHBvc2l0aW9uLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5tYXhpbXVtID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcblx0XHR2YXIgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzLFxuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCxcblx0XHRcdGl0ZXJhdG9yLFxuXHRcdFx0cmVjaXByb2NhbEl0ZW1zV2lkdGgsXG5cdFx0XHRlbGVtZW50V2lkdGg7XG5cblx0XHRpZiAoc2V0dGluZ3MubG9vcCkge1xuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2Nsb25lcy5sZW5ndGggLyAyICsgdGhpcy5faXRlbXMubGVuZ3RoIC0gMTtcblx0XHR9IGVsc2UgaWYgKHNldHRpbmdzLmF1dG9XaWR0aCB8fCBzZXR0aW5ncy5tZXJnZSkge1xuXHRcdFx0aXRlcmF0b3IgPSB0aGlzLl9pdGVtcy5sZW5ndGg7XG5cdFx0XHRyZWNpcHJvY2FsSXRlbXNXaWR0aCA9IHRoaXMuX2l0ZW1zWy0taXRlcmF0b3JdLndpZHRoKCk7XG5cdFx0XHRlbGVtZW50V2lkdGggPSB0aGlzLiRlbGVtZW50LndpZHRoKCk7XG5cdFx0XHR3aGlsZSAoaXRlcmF0b3ItLSkge1xuXHRcdFx0XHRyZWNpcHJvY2FsSXRlbXNXaWR0aCArPSB0aGlzLl9pdGVtc1tpdGVyYXRvcl0ud2lkdGgoKSArIHRoaXMuc2V0dGluZ3MubWFyZ2luO1xuXHRcdFx0XHRpZiAocmVjaXByb2NhbEl0ZW1zV2lkdGggPiBlbGVtZW50V2lkdGgpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bWF4aW11bSA9IGl0ZXJhdG9yICsgMTtcblx0XHR9IGVsc2UgaWYgKHNldHRpbmdzLmNlbnRlcikge1xuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1heGltdW0gPSB0aGlzLl9pdGVtcy5sZW5ndGggLSBzZXR0aW5ncy5pdGVtcztcblx0XHR9XG5cblx0XHRpZiAocmVsYXRpdmUpIHtcblx0XHRcdG1heGltdW0gLT0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDI7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIE1hdGgubWF4KG1heGltdW0sIDApO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBtaW5pbXVtIHBvc2l0aW9uIGZvciB0aGUgY3VycmVudCBpdGVtLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JlbGF0aXZlPWZhbHNlXSAtIFdoZXRoZXIgdG8gcmV0dXJuIGFuIGFic29sdXRlIHBvc2l0aW9uIG9yIGEgcmVsYXRpdmUgcG9zaXRpb24uXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9XG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm1pbmltdW0gPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuXHRcdHJldHVybiByZWxhdGl2ZSA/IDAgOiB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMjtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyBhbiBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgcmVsYXRpdmUgcG9zaXRpb24uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXG5cdCAqIEByZXR1cm4ge2pRdWVyeXxBcnJheS48alF1ZXJ5Pn0gLSBUaGUgaXRlbSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gb3IgYWxsIGl0ZW1zIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuaXRlbXMgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5faXRlbXMuc2xpY2UoKTtcblx0XHR9XG5cblx0XHRwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcblx0XHRyZXR1cm4gdGhpcy5faXRlbXNbcG9zaXRpb25dO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIGFuIGl0ZW0gYXQgdGhlIHNwZWNpZmllZCByZWxhdGl2ZSBwb3NpdGlvbi5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uXSAtIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbS5cblx0ICogQHJldHVybiB7alF1ZXJ5fEFycmF5LjxqUXVlcnk+fSAtIFRoZSBpdGVtIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBvciBhbGwgaXRlbXMgaWYgbm8gcG9zaXRpb24gd2FzIGdpdmVuLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5tZXJnZXJzID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX21lcmdlcnMuc2xpY2UoKTtcblx0XHR9XG5cblx0XHRwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcblx0XHRyZXR1cm4gdGhpcy5fbWVyZ2Vyc1twb3NpdGlvbl07XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGFic29sdXRlIHBvc2l0aW9ucyBvZiBjbG9uZXMgZm9yIGFuIGl0ZW0uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheS48TnVtYmVyPn0gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb25zIG9mIGNsb25lcyBmb3IgdGhlIGl0ZW0gb3IgYWxsIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuY2xvbmVzID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblx0XHR2YXIgb2RkID0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDIsXG5cdFx0XHRldmVuID0gb2RkICsgdGhpcy5faXRlbXMubGVuZ3RoLFxuXHRcdFx0bWFwID0gZnVuY3Rpb24oaW5kZXgpIHsgcmV0dXJuIGluZGV4ICUgMiA9PT0gMCA/IGV2ZW4gKyBpbmRleCAvIDIgOiBvZGQgLSAoaW5kZXggKyAxKSAvIDIgfTtcblxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gJC5tYXAodGhpcy5fY2xvbmVzLCBmdW5jdGlvbih2LCBpKSB7IHJldHVybiBtYXAoaSkgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuICQubWFwKHRoaXMuX2Nsb25lcywgZnVuY3Rpb24odiwgaSkgeyByZXR1cm4gdiA9PT0gcG9zaXRpb24gPyBtYXAoaSkgOiBudWxsIH0pO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTZXRzIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBzcGVlZC5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSBhbmltYXRpb24gc3BlZWQgaW4gbWlsbGlzZWNvbmRzIG9yIG5vdGhpbmcgdG8gbGVhdmUgaXQgdW5jaGFuZ2VkLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiBzcGVlZCBpbiBtaWxsaXNlY29uZHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnNwZWVkID0gZnVuY3Rpb24oc3BlZWQpIHtcblx0XHRpZiAoc3BlZWQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5fc3BlZWQgPSBzcGVlZDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fc3BlZWQ7XG5cdH07XG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIGNvb3JkaW5hdGUgb2YgYW4gaXRlbS5cblx0ICogQHRvZG8gVGhlIG5hbWUgb2YgdGhpcyBtZXRob2QgaXMgbWlzc2xlYW5kaW5nLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbSB3aXRoaW4gYG1pbmltdW0oKWAgYW5kIGBtYXhpbXVtKClgLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfEFycmF5LjxOdW1iZXI+fSAtIFRoZSBjb29yZGluYXRlIG9mIHRoZSBpdGVtIGluIHBpeGVsIG9yIGFsbCBjb29yZGluYXRlcy5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuY29vcmRpbmF0ZXMgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdHZhciBtdWx0aXBsaWVyID0gMSxcblx0XHRcdG5ld1Bvc2l0aW9uID0gcG9zaXRpb24gLSAxLFxuXHRcdFx0Y29vcmRpbmF0ZTtcblxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gJC5tYXAodGhpcy5fY29vcmRpbmF0ZXMsICQucHJveHkoZnVuY3Rpb24oY29vcmRpbmF0ZSwgaW5kZXgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29vcmRpbmF0ZXMoaW5kZXgpO1xuXHRcdFx0fSwgdGhpcykpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmNlbnRlcikge1xuXHRcdFx0aWYgKHRoaXMuc2V0dGluZ3MucnRsKSB7XG5cdFx0XHRcdG11bHRpcGxpZXIgPSAtMTtcblx0XHRcdFx0bmV3UG9zaXRpb24gPSBwb3NpdGlvbiArIDE7XG5cdFx0XHR9XG5cblx0XHRcdGNvb3JkaW5hdGUgPSB0aGlzLl9jb29yZGluYXRlc1twb3NpdGlvbl07XG5cdFx0XHRjb29yZGluYXRlICs9ICh0aGlzLndpZHRoKCkgLSBjb29yZGluYXRlICsgKHRoaXMuX2Nvb3JkaW5hdGVzW25ld1Bvc2l0aW9uXSB8fCAwKSkgLyAyICogbXVsdGlwbGllcjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29vcmRpbmF0ZSA9IHRoaXMuX2Nvb3JkaW5hdGVzW25ld1Bvc2l0aW9uXSB8fCAwO1xuXHRcdH1cblxuXHRcdGNvb3JkaW5hdGUgPSBNYXRoLmNlaWwoY29vcmRpbmF0ZSk7XG5cblx0XHRyZXR1cm4gY29vcmRpbmF0ZTtcblx0fTtcblxuXHQvKipcblx0ICogQ2FsY3VsYXRlcyB0aGUgc3BlZWQgZm9yIGEgdHJhbnNsYXRpb24uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGZyb20gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIHN0YXJ0IGl0ZW0uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB0byAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgdGFyZ2V0IGl0ZW0uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbZmFjdG9yPXVuZGVmaW5lZF0gLSBUaGUgdGltZSBmYWN0b3IgaW4gbWlsbGlzZWNvbmRzLlxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zbGF0aW9uLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKGZyb20sIHRvLCBmYWN0b3IpIHtcblx0XHRpZiAoZmFjdG9yID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoTWF0aC5hYnModG8gLSBmcm9tKSwgMSksIDYpICogTWF0aC5hYnMoKGZhY3RvciB8fCB0aGlzLnNldHRpbmdzLnNtYXJ0U3BlZWQpKTtcblx0fTtcblxuXHQvKipcblx0ICogU2xpZGVzIHRvIHRoZSBzcGVjaWZpZWQgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUudG8gPSBmdW5jdGlvbihwb3NpdGlvbiwgc3BlZWQpIHtcblx0XHR2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudCgpLFxuXHRcdFx0cmV2ZXJ0ID0gbnVsbCxcblx0XHRcdGRpc3RhbmNlID0gcG9zaXRpb24gLSB0aGlzLnJlbGF0aXZlKGN1cnJlbnQpLFxuXHRcdFx0ZGlyZWN0aW9uID0gKGRpc3RhbmNlID4gMCkgLSAoZGlzdGFuY2UgPCAwKSxcblx0XHRcdGl0ZW1zID0gdGhpcy5faXRlbXMubGVuZ3RoLFxuXHRcdFx0bWluaW11bSA9IHRoaXMubWluaW11bSgpLFxuXHRcdFx0bWF4aW11bSA9IHRoaXMubWF4aW11bSgpO1xuXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MubG9vcCkge1xuXHRcdFx0aWYgKCF0aGlzLnNldHRpbmdzLnJld2luZCAmJiBNYXRoLmFicyhkaXN0YW5jZSkgPiBpdGVtcyAvIDIpIHtcblx0XHRcdFx0ZGlzdGFuY2UgKz0gZGlyZWN0aW9uICogLTEgKiBpdGVtcztcblx0XHRcdH1cblxuXHRcdFx0cG9zaXRpb24gPSBjdXJyZW50ICsgZGlzdGFuY2U7XG5cdFx0XHRyZXZlcnQgPSAoKHBvc2l0aW9uIC0gbWluaW11bSkgJSBpdGVtcyArIGl0ZW1zKSAlIGl0ZW1zICsgbWluaW11bTtcblxuXHRcdFx0aWYgKHJldmVydCAhPT0gcG9zaXRpb24gJiYgcmV2ZXJ0IC0gZGlzdGFuY2UgPD0gbWF4aW11bSAmJiByZXZlcnQgLSBkaXN0YW5jZSA+IDApIHtcblx0XHRcdFx0Y3VycmVudCA9IHJldmVydCAtIGRpc3RhbmNlO1xuXHRcdFx0XHRwb3NpdGlvbiA9IHJldmVydDtcblx0XHRcdFx0dGhpcy5yZXNldChjdXJyZW50KTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHRoaXMuc2V0dGluZ3MucmV3aW5kKSB7XG5cdFx0XHRtYXhpbXVtICs9IDE7XG5cdFx0XHRwb3NpdGlvbiA9IChwb3NpdGlvbiAlIG1heGltdW0gKyBtYXhpbXVtKSAlIG1heGltdW07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBvc2l0aW9uID0gTWF0aC5tYXgobWluaW11bSwgTWF0aC5taW4obWF4aW11bSwgcG9zaXRpb24pKTtcblx0XHR9XG5cblx0XHR0aGlzLnNwZWVkKHRoaXMuZHVyYXRpb24oY3VycmVudCwgcG9zaXRpb24sIHNwZWVkKSk7XG5cdFx0dGhpcy5jdXJyZW50KHBvc2l0aW9uKTtcblxuXHRcdGlmICh0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7XG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogU2xpZGVzIHRvIHRoZSBuZXh0IGl0ZW0uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oc3BlZWQpIHtcblx0XHRzcGVlZCA9IHNwZWVkIHx8IGZhbHNlO1xuXHRcdHRoaXMudG8odGhpcy5yZWxhdGl2ZSh0aGlzLmN1cnJlbnQoKSkgKyAxLCBzcGVlZCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFNsaWRlcyB0byB0aGUgcHJldmlvdXMgaXRlbS5cblx0ICogQHB1YmxpY1xuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbihzcGVlZCkge1xuXHRcdHNwZWVkID0gc3BlZWQgfHwgZmFsc2U7XG5cdFx0dGhpcy50byh0aGlzLnJlbGF0aXZlKHRoaXMuY3VycmVudCgpKSAtIDEsIHNwZWVkKTtcblx0fTtcblxuXHQvKipcblx0ICogSGFuZGxlcyB0aGUgZW5kIG9mIGFuIGFuaW1hdGlvbi5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cblx0XHQvLyBpZiBjc3MyIGFuaW1hdGlvbiB0aGVuIGV2ZW50IG9iamVjdCBpcyB1bmRlZmluZWRcblx0XHRpZiAoZXZlbnQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRcdC8vIENhdGNoIG9ubHkgb3dsLXN0YWdlIHRyYW5zaXRpb25FbmQgZXZlbnRcblx0XHRcdGlmICgoZXZlbnQudGFyZ2V0IHx8IGV2ZW50LnNyY0VsZW1lbnQgfHwgZXZlbnQub3JpZ2luYWxUYXJnZXQpICE9PSB0aGlzLiRzdGFnZS5nZXQoMCkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMubGVhdmUoJ2FuaW1hdGluZycpO1xuXHRcdHRoaXMudHJpZ2dlcigndHJhbnNsYXRlZCcpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHZpZXdwb3J0IHdpZHRoLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm4ge051bWJlcn0gLSBUaGUgd2lkdGggaW4gcGl4ZWwuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnZpZXdwb3J0ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHdpZHRoO1xuXHRcdGlmICh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUJhc2VFbGVtZW50ICE9PSB3aW5kb3cpIHtcblx0XHRcdHdpZHRoID0gJCh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUJhc2VFbGVtZW50KS53aWR0aCgpO1xuXHRcdH0gZWxzZSBpZiAod2luZG93LmlubmVyV2lkdGgpIHtcblx0XHRcdHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5cdFx0fSBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSB7XG5cdFx0XHR3aWR0aCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKCdDYW4gbm90IGRldGVjdCB2aWV3cG9ydCB3aWR0aC4nKTtcblx0XHR9XG5cdFx0cmV0dXJuIHdpZHRoO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBSZXBsYWNlcyB0aGUgY3VycmVudCBjb250ZW50LlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8alF1ZXJ5fFN0cmluZ30gY29udGVudCAtIFRoZSBuZXcgY29udGVudC5cblx0ICovXG5cdE93bC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHR0aGlzLiRzdGFnZS5lbXB0eSgpO1xuXHRcdHRoaXMuX2l0ZW1zID0gW107XG5cblx0XHRpZiAoY29udGVudCkge1xuXHRcdFx0Y29udGVudCA9IChjb250ZW50IGluc3RhbmNlb2YgalF1ZXJ5KSA/IGNvbnRlbnQgOiAkKGNvbnRlbnQpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3Rvcikge1xuXHRcdFx0Y29udGVudCA9IGNvbnRlbnQuZmluZCgnLicgKyB0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3Rvcik7XG5cdFx0fVxuXG5cdFx0Y29udGVudC5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5ub2RlVHlwZSA9PT0gMTtcblx0XHR9KS5lYWNoKCQucHJveHkoZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcblx0XHRcdGl0ZW0gPSB0aGlzLnByZXBhcmUoaXRlbSk7XG5cdFx0XHR0aGlzLiRzdGFnZS5hcHBlbmQoaXRlbSk7XG5cdFx0XHR0aGlzLl9pdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdFx0dGhpcy5fbWVyZ2Vycy5wdXNoKGl0ZW0uZmluZCgnW2RhdGEtbWVyZ2VdJykuYWRkQmFjaygnW2RhdGEtbWVyZ2VdJykuYXR0cignZGF0YS1tZXJnZScpICogMSB8fCAxKTtcblx0XHR9LCB0aGlzKSk7XG5cblx0XHR0aGlzLnJlc2V0KHRoaXMuaXNOdW1lcmljKHRoaXMuc2V0dGluZ3Muc3RhcnRQb3NpdGlvbikgPyB0aGlzLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24gOiAwKTtcblxuXHRcdHRoaXMuaW52YWxpZGF0ZSgnaXRlbXMnKTtcblx0fTtcblxuXHQvKipcblx0ICogQWRkcyBhbiBpdGVtLlxuXHQgKiBAdG9kbyBVc2UgYGl0ZW1gIGluc3RlYWQgb2YgYGNvbnRlbnRgIGZvciB0aGUgZXZlbnQgYXJndW1lbnRzLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8alF1ZXJ5fFN0cmluZ30gY29udGVudCAtIFRoZSBpdGVtIGNvbnRlbnQgdG8gYWRkLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uXSAtIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiBhdCB3aGljaCB0byBpbnNlcnQgdGhlIGl0ZW0gb3RoZXJ3aXNlIHRoZSBpdGVtIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVuZC5cblx0ICovXG5cdE93bC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oY29udGVudCwgcG9zaXRpb24pIHtcblx0XHR2YXIgY3VycmVudCA9IHRoaXMucmVsYXRpdmUodGhpcy5fY3VycmVudCk7XG5cblx0XHRwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWQgPyB0aGlzLl9pdGVtcy5sZW5ndGggOiB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XG5cdFx0Y29udGVudCA9IGNvbnRlbnQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZW50IDogJChjb250ZW50KTtcblxuXHRcdHRoaXMudHJpZ2dlcignYWRkJywgeyBjb250ZW50OiBjb250ZW50LCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XG5cblx0XHRjb250ZW50ID0gdGhpcy5wcmVwYXJlKGNvbnRlbnQpO1xuXG5cdFx0aWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCA9PT0gMCB8fCBwb3NpdGlvbiA9PT0gdGhpcy5faXRlbXMubGVuZ3RoKSB7XG5cdFx0XHR0aGlzLl9pdGVtcy5sZW5ndGggPT09IDAgJiYgdGhpcy4kc3RhZ2UuYXBwZW5kKGNvbnRlbnQpO1xuXHRcdFx0dGhpcy5faXRlbXMubGVuZ3RoICE9PSAwICYmIHRoaXMuX2l0ZW1zW3Bvc2l0aW9uIC0gMV0uYWZ0ZXIoY29udGVudCk7XG5cdFx0XHR0aGlzLl9pdGVtcy5wdXNoKGNvbnRlbnQpO1xuXHRcdFx0dGhpcy5fbWVyZ2Vycy5wdXNoKGNvbnRlbnQuZmluZCgnW2RhdGEtbWVyZ2VdJykuYWRkQmFjaygnW2RhdGEtbWVyZ2VdJykuYXR0cignZGF0YS1tZXJnZScpICogMSB8fCAxKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5faXRlbXNbcG9zaXRpb25dLmJlZm9yZShjb250ZW50KTtcblx0XHRcdHRoaXMuX2l0ZW1zLnNwbGljZShwb3NpdGlvbiwgMCwgY29udGVudCk7XG5cdFx0XHR0aGlzLl9tZXJnZXJzLnNwbGljZShwb3NpdGlvbiwgMCwgY29udGVudC5maW5kKCdbZGF0YS1tZXJnZV0nKS5hZGRCYWNrKCdbZGF0YS1tZXJnZV0nKS5hdHRyKCdkYXRhLW1lcmdlJykgKiAxIHx8IDEpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2l0ZW1zW2N1cnJlbnRdICYmIHRoaXMucmVzZXQodGhpcy5faXRlbXNbY3VycmVudF0uaW5kZXgoKSk7XG5cblx0XHR0aGlzLmludmFsaWRhdGUoJ2l0ZW1zJyk7XG5cblx0XHR0aGlzLnRyaWdnZXIoJ2FkZGVkJywgeyBjb250ZW50OiBjb250ZW50LCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYW4gaXRlbSBieSBpdHMgcG9zaXRpb24uXG5cdCAqIEB0b2RvIFVzZSBgaXRlbWAgaW5zdGVhZCBvZiBgY29udGVudGAgZm9yIHRoZSBldmVudCBhcmd1bWVudHMuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtIHRvIHJlbW92ZS5cblx0ICovXG5cdE93bC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblx0XHRwb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplKHBvc2l0aW9uLCB0cnVlKTtcblxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy50cmlnZ2VyKCdyZW1vdmUnLCB7IGNvbnRlbnQ6IHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXSwgcG9zaXRpb246IHBvc2l0aW9uIH0pO1xuXG5cdFx0dGhpcy5faXRlbXNbcG9zaXRpb25dLnJlbW92ZSgpO1xuXHRcdHRoaXMuX2l0ZW1zLnNwbGljZShwb3NpdGlvbiwgMSk7XG5cdFx0dGhpcy5fbWVyZ2Vycy5zcGxpY2UocG9zaXRpb24sIDEpO1xuXG5cdFx0dGhpcy5pbnZhbGlkYXRlKCdpdGVtcycpO1xuXG5cdFx0dGhpcy50cmlnZ2VyKCdyZW1vdmVkJywgeyBjb250ZW50OiBudWxsLCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFByZWxvYWRzIGltYWdlcyB3aXRoIGF1dG8gd2lkdGguXG5cdCAqIEB0b2RvIFJlcGxhY2UgYnkgYSBtb3JlIGdlbmVyaWMgYXBwcm9hY2hcblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzID0gZnVuY3Rpb24oaW1hZ2VzKSB7XG5cdFx0aW1hZ2VzLmVhY2goJC5wcm94eShmdW5jdGlvbihpLCBlbGVtZW50KSB7XG5cdFx0XHR0aGlzLmVudGVyKCdwcmUtbG9hZGluZycpO1xuXHRcdFx0ZWxlbWVudCA9ICQoZWxlbWVudCk7XG5cdFx0XHQkKG5ldyBJbWFnZSgpKS5vbmUoJ2xvYWQnLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0ZWxlbWVudC5hdHRyKCdzcmMnLCBlLnRhcmdldC5zcmMpO1xuXHRcdFx0XHRlbGVtZW50LmNzcygnb3BhY2l0eScsIDEpO1xuXHRcdFx0XHR0aGlzLmxlYXZlKCdwcmUtbG9hZGluZycpO1xuXHRcdFx0XHQhdGhpcy5pcygncHJlLWxvYWRpbmcnKSAmJiAhdGhpcy5pcygnaW5pdGlhbGl6aW5nJykgJiYgdGhpcy5yZWZyZXNoKCk7XG5cdFx0XHR9LCB0aGlzKSkuYXR0cignc3JjJywgZWxlbWVudC5hdHRyKCdzcmMnKSB8fCBlbGVtZW50LmF0dHIoJ2RhdGEtc3JjJykgfHwgZWxlbWVudC5hdHRyKCdkYXRhLXNyYy1yZXRpbmEnKSk7XG5cdFx0fSwgdGhpcykpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgY2Fyb3VzZWwuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdE93bC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0dGhpcy4kZWxlbWVudC5vZmYoJy5vd2wuY29yZScpO1xuXHRcdHRoaXMuJHN0YWdlLm9mZignLm93bC5jb3JlJyk7XG5cdFx0JChkb2N1bWVudCkub2ZmKCcub3dsLmNvcmUnKTtcblxuXHRcdGlmICh0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmUgIT09IGZhbHNlKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZXIpO1xuXHRcdFx0dGhpcy5vZmYod2luZG93LCAncmVzaXplJywgdGhpcy5faGFuZGxlcnMub25UaHJvdHRsZWRSZXNpemUpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgaW4gdGhpcy5fcGx1Z2lucykge1xuXHRcdFx0dGhpcy5fcGx1Z2luc1tpXS5kZXN0cm95KCk7XG5cdFx0fVxuXG5cdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5jbG9uZWQnKS5yZW1vdmUoKTtcblxuXHRcdHRoaXMuJHN0YWdlLnVud3JhcCgpO1xuXHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuY29udGVudHMoKS51bndyYXAoKTtcblx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbigpLnVud3JhcCgpO1xuXG5cdFx0dGhpcy4kZWxlbWVudFxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRpbmdDbGFzcylcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGVkQ2xhc3MpXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnJ0bENsYXNzKVxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5kcmFnQ2xhc3MpXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmdyYWJDbGFzcylcblx0XHRcdC5hdHRyKCdjbGFzcycsIHRoaXMuJGVsZW1lbnQuYXR0cignY2xhc3MnKS5yZXBsYWNlKG5ldyBSZWdFeHAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVDbGFzcyArICctXFxcXFMrXFxcXHMnLCAnZycpLCAnJykpXG5cdFx0XHQucmVtb3ZlRGF0YSgnb3dsLmNhcm91c2VsJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIE9wZXJhdG9ycyB0byBjYWxjdWxhdGUgcmlnaHQtdG8tbGVmdCBhbmQgbGVmdC10by1yaWdodC5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2FdIC0gVGhlIGxlZnQgc2lkZSBvcGVyYW5kLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW29dIC0gVGhlIG9wZXJhdG9yLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2JdIC0gVGhlIHJpZ2h0IHNpZGUgb3BlcmFuZC5cblx0ICovXG5cdE93bC5wcm90b3R5cGUub3AgPSBmdW5jdGlvbihhLCBvLCBiKSB7XG5cdFx0dmFyIHJ0bCA9IHRoaXMuc2V0dGluZ3MucnRsO1xuXHRcdHN3aXRjaCAobykge1xuXHRcdFx0Y2FzZSAnPCc6XG5cdFx0XHRcdHJldHVybiBydGwgPyBhID4gYiA6IGEgPCBiO1xuXHRcdFx0Y2FzZSAnPic6XG5cdFx0XHRcdHJldHVybiBydGwgPyBhIDwgYiA6IGEgPiBiO1xuXHRcdFx0Y2FzZSAnPj0nOlxuXHRcdFx0XHRyZXR1cm4gcnRsID8gYSA8PSBiIDogYSA+PSBiO1xuXHRcdFx0Y2FzZSAnPD0nOlxuXHRcdFx0XHRyZXR1cm4gcnRsID8gYSA+PSBiIDogYSA8PSBiO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBBdHRhY2hlcyB0byBhbiBpbnRlcm5hbCBldmVudC5cblx0ICogQHByb3RlY3RlZFxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHNvdXJjZS5cblx0ICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IC0gVGhlIGV2ZW50IG5hbWUuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGV2ZW50IGhhbmRsZXIgdG8gYXR0YWNoLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGNhcHR1cmUgLSBXZXRoZXIgdGhlIGV2ZW50IHNob3VsZCBiZSBoYW5kbGVkIGF0IHRoZSBjYXB0dXJpbmcgcGhhc2Ugb3Igbm90LlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSkge1xuXHRcdGlmIChlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuXHRcdH0gZWxzZSBpZiAoZWxlbWVudC5hdHRhY2hFdmVudCkge1xuXHRcdFx0ZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIERldGFjaGVzIGZyb20gYW4gaW50ZXJuYWwgZXZlbnQuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBldmVudCBzb3VyY2UuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBldmVudCAtIFRoZSBldmVudCBuYW1lLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBhdHRhY2hlZCBldmVudCBoYW5kbGVyIHRvIGRldGFjaC5cblx0ICogQHBhcmFtIHtCb29sZWFufSBjYXB0dXJlIC0gV2V0aGVyIHRoZSBhdHRhY2hlZCBldmVudCBoYW5kbGVyIHdhcyByZWdpc3RlcmVkIGFzIGEgY2FwdHVyaW5nIGxpc3RlbmVyIG9yIG5vdC5cblx0ICovXG5cdE93bC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XG5cdFx0aWYgKGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuXHRcdFx0ZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSk7XG5cdFx0fSBlbHNlIGlmIChlbGVtZW50LmRldGFjaEV2ZW50KSB7XG5cdFx0XHRlbGVtZW50LmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogVHJpZ2dlcnMgYSBwdWJsaWMgZXZlbnQuXG5cdCAqIEB0b2RvIFJlbW92ZSBgc3RhdHVzYCwgYHJlbGF0ZWRUYXJnZXRgIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBUaGUgZXZlbnQgbmFtZS5cblx0ICogQHBhcmFtIHsqfSBbZGF0YT1udWxsXSAtIFRoZSBldmVudCBkYXRhLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZT1jYXJvdXNlbF0gLSBUaGUgZXZlbnQgbmFtZXNwYWNlLlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW3N0YXRlXSAtIFRoZSBzdGF0ZSB3aGljaCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50LlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtlbnRlcj1mYWxzZV0gLSBJbmRpY2F0ZXMgaWYgdGhlIGNhbGwgZW50ZXJzIHRoZSBzcGVjaWZpZWQgc3RhdGUgb3Igbm90LlxuXHQgKiBAcmV0dXJucyB7RXZlbnR9IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cblx0ICovXG5cdE93bC5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uKG5hbWUsIGRhdGEsIG5hbWVzcGFjZSwgc3RhdGUsIGVudGVyKSB7XG5cdFx0dmFyIHN0YXR1cyA9IHtcblx0XHRcdGl0ZW06IHsgY291bnQ6IHRoaXMuX2l0ZW1zLmxlbmd0aCwgaW5kZXg6IHRoaXMuY3VycmVudCgpIH1cblx0XHR9LCBoYW5kbGVyID0gJC5jYW1lbENhc2UoXG5cdFx0XHQkLmdyZXAoWyAnb24nLCBuYW1lLCBuYW1lc3BhY2UgXSwgZnVuY3Rpb24odikgeyByZXR1cm4gdiB9KVxuXHRcdFx0XHQuam9pbignLScpLnRvTG93ZXJDYXNlKClcblx0XHQpLCBldmVudCA9ICQuRXZlbnQoXG5cdFx0XHRbIG5hbWUsICdvd2wnLCBuYW1lc3BhY2UgfHwgJ2Nhcm91c2VsJyBdLmpvaW4oJy4nKS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0JC5leHRlbmQoeyByZWxhdGVkVGFyZ2V0OiB0aGlzIH0sIHN0YXR1cywgZGF0YSlcblx0XHQpO1xuXG5cdFx0aWYgKCF0aGlzLl9zdXByZXNzW25hbWVdKSB7XG5cdFx0XHQkLmVhY2godGhpcy5fcGx1Z2lucywgZnVuY3Rpb24obmFtZSwgcGx1Z2luKSB7XG5cdFx0XHRcdGlmIChwbHVnaW4ub25UcmlnZ2VyKSB7XG5cdFx0XHRcdFx0cGx1Z2luLm9uVHJpZ2dlcihldmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLnJlZ2lzdGVyKHsgdHlwZTogT3dsLlR5cGUuRXZlbnQsIG5hbWU6IG5hbWUgfSk7XG5cdFx0XHR0aGlzLiRlbGVtZW50LnRyaWdnZXIoZXZlbnQpO1xuXG5cdFx0XHRpZiAodGhpcy5zZXR0aW5ncyAmJiB0eXBlb2YgdGhpcy5zZXR0aW5nc1toYW5kbGVyXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHR0aGlzLnNldHRpbmdzW2hhbmRsZXJdLmNhbGwodGhpcywgZXZlbnQpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudDtcblx0fTtcblxuXHQvKipcblx0ICogRW50ZXJzIGEgc3RhdGUuXG5cdCAqIEBwYXJhbSBuYW1lIC0gVGhlIHN0YXRlIG5hbWUuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24obmFtZSkge1xuXHRcdCQuZWFjaChbIG5hbWUgXS5jb25jYXQodGhpcy5fc3RhdGVzLnRhZ3NbbmFtZV0gfHwgW10pLCAkLnByb3h5KGZ1bmN0aW9uKGksIG5hbWUpIHtcblx0XHRcdGlmICh0aGlzLl9zdGF0ZXMuY3VycmVudFtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRoaXMuX3N0YXRlcy5jdXJyZW50W25hbWVdID0gMDtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0rKztcblx0XHR9LCB0aGlzKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIExlYXZlcyBhIHN0YXRlLlxuXHQgKiBAcGFyYW0gbmFtZSAtIFRoZSBzdGF0ZSBuYW1lLlxuXHQgKi9cblx0T3dsLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0XHQkLmVhY2goWyBuYW1lIF0uY29uY2F0KHRoaXMuX3N0YXRlcy50YWdzW25hbWVdIHx8IFtdKSwgJC5wcm94eShmdW5jdGlvbihpLCBuYW1lKSB7XG5cdFx0XHR0aGlzLl9zdGF0ZXMuY3VycmVudFtuYW1lXS0tO1xuXHRcdH0sIHRoaXMpKTtcblx0fTtcblxuXHQvKipcblx0ICogUmVnaXN0ZXJzIGFuIGV2ZW50IG9yIHN0YXRlLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBUaGUgZXZlbnQgb3Igc3RhdGUgdG8gcmVnaXN0ZXIuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cdFx0aWYgKG9iamVjdC50eXBlID09PSBPd2wuVHlwZS5FdmVudCkge1xuXHRcdFx0aWYgKCEkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdKSB7XG5cdFx0XHRcdCQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0gPSB7fTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCEkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdLm93bCkge1xuXHRcdFx0XHR2YXIgX2RlZmF1bHQgPSAkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdLl9kZWZhdWx0O1xuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdLl9kZWZhdWx0ID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdGlmIChfZGVmYXVsdCAmJiBfZGVmYXVsdC5hcHBseSAmJiAoIWUubmFtZXNwYWNlIHx8IGUubmFtZXNwYWNlLmluZGV4T2YoJ293bCcpID09PSAtMSkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBfZGVmYXVsdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gZS5uYW1lc3BhY2UgJiYgZS5uYW1lc3BhY2UuaW5kZXhPZignb3dsJykgPiAtMTtcblx0XHRcdFx0fTtcblx0XHRcdFx0JC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXS5vd2wgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAob2JqZWN0LnR5cGUgPT09IE93bC5UeXBlLlN0YXRlKSB7XG5cdFx0XHRpZiAoIXRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSkge1xuXHRcdFx0XHR0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0gPSBvYmplY3QudGFncztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSA9IHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXS5jb25jYXQob2JqZWN0LnRhZ3MpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0gPSAkLmdyZXAodGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdLCAkLnByb3h5KGZ1bmN0aW9uKHRhZywgaSkge1xuXHRcdFx0XHRyZXR1cm4gJC5pbkFycmF5KHRhZywgdGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdKSA9PT0gaTtcblx0XHRcdH0sIHRoaXMpKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFN1cHByZXNzZXMgZXZlbnRzLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IGV2ZW50cyAtIFRoZSBldmVudHMgdG8gc3VwcHJlc3MuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLnN1cHByZXNzID0gZnVuY3Rpb24oZXZlbnRzKSB7XG5cdFx0JC5lYWNoKGV2ZW50cywgJC5wcm94eShmdW5jdGlvbihpbmRleCwgZXZlbnQpIHtcblx0XHRcdHRoaXMuX3N1cHJlc3NbZXZlbnRdID0gdHJ1ZTtcblx0XHR9LCB0aGlzKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFJlbGVhc2VzIHN1cHByZXNzZWQgZXZlbnRzLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IGV2ZW50cyAtIFRoZSBldmVudHMgdG8gcmVsZWFzZS5cblx0ICovXG5cdE93bC5wcm90b3R5cGUucmVsZWFzZSA9IGZ1bmN0aW9uKGV2ZW50cykge1xuXHRcdCQuZWFjaChldmVudHMsICQucHJveHkoZnVuY3Rpb24oaW5kZXgsIGV2ZW50KSB7XG5cdFx0XHRkZWxldGUgdGhpcy5fc3VwcmVzc1tldmVudF07XG5cdFx0fSwgdGhpcykpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHVuaWZpZWQgcG9pbnRlciBjb29yZGluYXRlcyBmcm9tIGV2ZW50LlxuXHQgKiBAdG9kbyAjMjYxXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtFdmVudH0gLSBUaGUgYG1vdXNlZG93bmAgb3IgYHRvdWNoc3RhcnRgIGV2ZW50LlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSAtIENvbnRhaW5zIGB4YCBhbmQgYHlgIGNvb3JkaW5hdGVzIG9mIGN1cnJlbnQgcG9pbnRlciBwb3NpdGlvbi5cblx0ICovXG5cdE93bC5wcm90b3R5cGUucG9pbnRlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0dmFyIHJlc3VsdCA9IHsgeDogbnVsbCwgeTogbnVsbCB9O1xuXG5cdFx0ZXZlbnQgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcblxuXHRcdGV2ZW50ID0gZXZlbnQudG91Y2hlcyAmJiBldmVudC50b3VjaGVzLmxlbmd0aCA/XG5cdFx0XHRldmVudC50b3VjaGVzWzBdIDogZXZlbnQuY2hhbmdlZFRvdWNoZXMgJiYgZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID9cblx0XHRcdFx0ZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0gOiBldmVudDtcblxuXHRcdGlmIChldmVudC5wYWdlWCkge1xuXHRcdFx0cmVzdWx0LnggPSBldmVudC5wYWdlWDtcblx0XHRcdHJlc3VsdC55ID0gZXZlbnQucGFnZVk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdC54ID0gZXZlbnQuY2xpZW50WDtcblx0XHRcdHJlc3VsdC55ID0gZXZlbnQuY2xpZW50WTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIGlmIHRoZSBpbnB1dCBpcyBhIE51bWJlciBvciBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29lcmNlZCB0byBhIE51bWJlclxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ3xPYmplY3R8QXJyYXl8Qm9vbGVhbnxSZWdFeHB8RnVuY3Rpb258U3ltYm9sfSAtIFRoZSBpbnB1dCB0byBiZSB0ZXN0ZWRcblx0ICogQHJldHVybnMge0Jvb2xlYW59IC0gQW4gaW5kaWNhdGlvbiBpZiB0aGUgaW5wdXQgaXMgYSBOdW1iZXIgb3IgY2FuIGJlIGNvZXJjZWQgdG8gYSBOdW1iZXJcblx0ICovXG5cdE93bC5wcm90b3R5cGUuaXNOdW1lcmljID0gZnVuY3Rpb24obnVtYmVyKSB7XG5cdFx0cmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG51bWJlcikpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBkaWZmZXJlbmNlIG9mIHR3byB2ZWN0b3JzLlxuXHQgKiBAdG9kbyAjMjYxXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtPYmplY3R9IC0gVGhlIGZpcnN0IHZlY3Rvci5cblx0ICogQHBhcmFtIHtPYmplY3R9IC0gVGhlIHNlY29uZCB2ZWN0b3IuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gVGhlIGRpZmZlcmVuY2UuXG5cdCAqL1xuXHRPd2wucHJvdG90eXBlLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IGZpcnN0LnggLSBzZWNvbmQueCxcblx0XHRcdHk6IGZpcnN0LnkgLSBzZWNvbmQueVxuXHRcdH07XG5cdH07XG5cblx0LyoqXG5cdCAqIFRoZSBqUXVlcnkgUGx1Z2luIGZvciB0aGUgT3dsIENhcm91c2VsXG5cdCAqIEB0b2RvIE5hdmlnYXRpb24gcGx1Z2luIGBuZXh0YCBhbmQgYHByZXZgXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdCQuZm4ub3dsQ2Fyb3VzZWwgPSBmdW5jdGlvbihvcHRpb24pIHtcblx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyICR0aGlzID0gJCh0aGlzKSxcblx0XHRcdFx0ZGF0YSA9ICR0aGlzLmRhdGEoJ293bC5jYXJvdXNlbCcpO1xuXG5cdFx0XHRpZiAoIWRhdGEpIHtcblx0XHRcdFx0ZGF0YSA9IG5ldyBPd2wodGhpcywgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pO1xuXHRcdFx0XHQkdGhpcy5kYXRhKCdvd2wuY2Fyb3VzZWwnLCBkYXRhKTtcblxuXHRcdFx0XHQkLmVhY2goW1xuXHRcdFx0XHRcdCduZXh0JywgJ3ByZXYnLCAndG8nLCAnZGVzdHJveScsICdyZWZyZXNoJywgJ3JlcGxhY2UnLCAnYWRkJywgJ3JlbW92ZSdcblx0XHRcdFx0XSwgZnVuY3Rpb24oaSwgZXZlbnQpIHtcblx0XHRcdFx0XHRkYXRhLnJlZ2lzdGVyKHsgdHlwZTogT3dsLlR5cGUuRXZlbnQsIG5hbWU6IGV2ZW50IH0pO1xuXHRcdFx0XHRcdGRhdGEuJGVsZW1lbnQub24oZXZlbnQgKyAnLm93bC5jYXJvdXNlbC5jb3JlJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5yZWxhdGVkVGFyZ2V0ICE9PSB0aGlzKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuc3VwcHJlc3MoWyBldmVudCBdKTtcblx0XHRcdFx0XHRcdFx0ZGF0YVtldmVudF0uYXBwbHkodGhpcywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5yZWxlYXNlKFsgZXZlbnQgXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSwgZGF0YSkpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgJiYgb3B0aW9uLmNoYXJBdCgwKSAhPT0gJ18nKSB7XG5cdFx0XHRcdGRhdGFbb3B0aW9uXS5hcHBseShkYXRhLCBhcmdzKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fTtcblxuXHQvKipcblx0ICogVGhlIGNvbnN0cnVjdG9yIGZvciB0aGUgalF1ZXJ5IFBsdWdpblxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yID0gT3dsO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4iLCIvKipcbiAqIEFuaW1hdGUgUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIGFuaW1hdGUgcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIE5hdmlnYXRpb24gUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBzY29wZSAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBBbmltYXRlID0gZnVuY3Rpb24oc2NvcGUpIHtcblx0XHR0aGlzLmNvcmUgPSBzY29wZTtcblx0XHR0aGlzLmNvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBbmltYXRlLkRlZmF1bHRzLCB0aGlzLmNvcmUub3B0aW9ucyk7XG5cdFx0dGhpcy5zd2FwcGluZyA9IHRydWU7XG5cdFx0dGhpcy5wcmV2aW91cyA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLm5leHQgPSB1bmRlZmluZWQ7XG5cblx0XHR0aGlzLmhhbmRsZXJzID0ge1xuXHRcdFx0J2NoYW5nZS5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PSAncG9zaXRpb24nKSB7XG5cdFx0XHRcdFx0dGhpcy5wcmV2aW91cyA9IHRoaXMuY29yZS5jdXJyZW50KCk7XG5cdFx0XHRcdFx0dGhpcy5uZXh0ID0gZS5wcm9wZXJ0eS52YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQnZHJhZy5vd2wuY2Fyb3VzZWwgZHJhZ2dlZC5vd2wuY2Fyb3VzZWwgdHJhbnNsYXRlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlKSB7XG5cdFx0XHRcdFx0dGhpcy5zd2FwcGluZyA9IGUudHlwZSA9PSAndHJhbnNsYXRlZCc7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J3RyYW5zbGF0ZS5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuc3dhcHBpbmcgJiYgKHRoaXMuY29yZS5vcHRpb25zLmFuaW1hdGVPdXQgfHwgdGhpcy5jb3JlLm9wdGlvbnMuYW5pbWF0ZUluKSkge1xuXHRcdFx0XHRcdHRoaXMuc3dhcCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKVxuXHRcdH07XG5cblx0XHR0aGlzLmNvcmUuJGVsZW1lbnQub24odGhpcy5oYW5kbGVycyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0QW5pbWF0ZS5EZWZhdWx0cyA9IHtcblx0XHRhbmltYXRlT3V0OiBmYWxzZSxcblx0XHRhbmltYXRlSW46IGZhbHNlXG5cdH07XG5cblx0LyoqXG5cdCAqIFRvZ2dsZXMgdGhlIGFuaW1hdGlvbiBjbGFzc2VzIHdoZW5ldmVyIGFuIHRyYW5zbGF0aW9ucyBzdGFydHMuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHJldHVybnMge0Jvb2xlYW58dW5kZWZpbmVkfVxuXHQgKi9cblx0QW5pbWF0ZS5wcm90b3R5cGUuc3dhcCA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0aWYgKHRoaXMuY29yZS5zZXR0aW5ncy5pdGVtcyAhPT0gMSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICghJC5zdXBwb3J0LmFuaW1hdGlvbiB8fCAhJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmNvcmUuc3BlZWQoMCk7XG5cblx0XHR2YXIgbGVmdCxcblx0XHRcdGNsZWFyID0gJC5wcm94eSh0aGlzLmNsZWFyLCB0aGlzKSxcblx0XHRcdHByZXZpb3VzID0gdGhpcy5jb3JlLiRzdGFnZS5jaGlsZHJlbigpLmVxKHRoaXMucHJldmlvdXMpLFxuXHRcdFx0bmV4dCA9IHRoaXMuY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLm5leHQpLFxuXHRcdFx0aW5jb21pbmcgPSB0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZUluLFxuXHRcdFx0b3V0Z29pbmcgPSB0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZU91dDtcblxuXHRcdGlmICh0aGlzLmNvcmUuY3VycmVudCgpID09PSB0aGlzLnByZXZpb3VzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKG91dGdvaW5nKSB7XG5cdFx0XHRsZWZ0ID0gdGhpcy5jb3JlLmNvb3JkaW5hdGVzKHRoaXMucHJldmlvdXMpIC0gdGhpcy5jb3JlLmNvb3JkaW5hdGVzKHRoaXMubmV4dCk7XG5cdFx0XHRwcmV2aW91cy5vbmUoJC5zdXBwb3J0LmFuaW1hdGlvbi5lbmQsIGNsZWFyKVxuXHRcdFx0XHQuY3NzKCB7ICdsZWZ0JzogbGVmdCArICdweCcgfSApXG5cdFx0XHRcdC5hZGRDbGFzcygnYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLW91dCcpXG5cdFx0XHRcdC5hZGRDbGFzcyhvdXRnb2luZyk7XG5cdFx0fVxuXG5cdFx0aWYgKGluY29taW5nKSB7XG5cdFx0XHRuZXh0Lm9uZSgkLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCwgY2xlYXIpXG5cdFx0XHRcdC5hZGRDbGFzcygnYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLWluJylcblx0XHRcdFx0LmFkZENsYXNzKGluY29taW5nKTtcblx0XHR9XG5cdH07XG5cblx0QW5pbWF0ZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbihlKSB7XG5cdFx0JChlLnRhcmdldCkuY3NzKCB7ICdsZWZ0JzogJycgfSApXG5cdFx0XHQucmVtb3ZlQ2xhc3MoJ2FuaW1hdGVkIG93bC1hbmltYXRlZC1vdXQgb3dsLWFuaW1hdGVkLWluJylcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZUluKVxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlT3V0KTtcblx0XHR0aGlzLmNvcmUub25UcmFuc2l0aW9uRW5kKCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdEFuaW1hdGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XG5cblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5oYW5kbGVycykge1xuXHRcdFx0dGhpcy5jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLmhhbmRsZXJzW2hhbmRsZXJdKTtcblx0XHR9XG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG5cdFx0fVxuXHR9O1xuXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5BbmltYXRlID0gQW5pbWF0ZTtcblxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuIiwiLyoqXG4gKiBBdXRvSGVpZ2h0IFBsdWdpblxuICogQHZlcnNpb24gMi4xLjBcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBhdXRvIGhlaWdodCBwbHVnaW4uXG5cdCAqIEBjbGFzcyBUaGUgQXV0byBIZWlnaHQgUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBBdXRvSGVpZ2h0ID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPd2x9XG5cdFx0ICovXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIGV2ZW50IGhhbmRsZXJzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCByZWZyZXNoZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHQpIHtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0ICYmIGUucHJvcGVydHkubmFtZSA9PSAncG9zaXRpb24nKXtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdsb2FkZWQub3dsLmxhenknOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodFxuXHRcdFx0XHRcdCYmIGUuZWxlbWVudC5jbG9zZXN0KCcuJyArIHRoaXMuX2NvcmUuc2V0dGluZ3MuaXRlbUNsYXNzKS5pbmRleCgpID09PSB0aGlzLl9jb3JlLmN1cnJlbnQoKSkge1xuXHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpXG5cdFx0fTtcblxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQXV0b0hlaWdodC5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcblxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0QXV0b0hlaWdodC5EZWZhdWx0cyA9IHtcblx0XHRhdXRvSGVpZ2h0OiBmYWxzZSxcblx0XHRhdXRvSGVpZ2h0Q2xhc3M6ICdvd2wtaGVpZ2h0J1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBVcGRhdGVzIHRoZSB2aWV3LlxuXHQgKi9cblx0QXV0b0hlaWdodC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHN0YXJ0ID0gdGhpcy5fY29yZS5fY3VycmVudCxcblx0XHRcdGVuZCA9IHN0YXJ0ICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtcyxcblx0XHRcdHZpc2libGUgPSB0aGlzLl9jb3JlLiRzdGFnZS5jaGlsZHJlbigpLnRvQXJyYXkoKS5zbGljZShzdGFydCwgZW5kKSxcblx0XHRcdGhlaWdodHMgPSBbXSxcblx0XHRcdG1heGhlaWdodCA9IDA7XG5cblx0XHQkLmVhY2godmlzaWJsZSwgZnVuY3Rpb24oaW5kZXgsIGl0ZW0pIHtcblx0XHRcdGhlaWdodHMucHVzaCgkKGl0ZW0pLmhlaWdodCgpKTtcblx0XHR9KTtcblxuXHRcdG1heGhlaWdodCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xuXG5cdFx0dGhpcy5fY29yZS4kc3RhZ2UucGFyZW50KClcblx0XHRcdC5oZWlnaHQobWF4aGVpZ2h0KVxuXHRcdFx0LmFkZENsYXNzKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodENsYXNzKTtcblx0fTtcblxuXHRBdXRvSGVpZ2h0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xuXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XG5cdFx0fVxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xuXHRcdH1cblx0fTtcblxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b0hlaWdodCA9IEF1dG9IZWlnaHQ7XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcbiIsIi8qKlxuICogQXV0b3BsYXkgUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcbiAqIEBhdXRob3IgQXJ0dXMgS29sYW5vd3NraVxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblxuXHQvKipcblx0ICogQ3JlYXRlcyB0aGUgYXV0b3BsYXkgcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIEF1dG9wbGF5IFBsdWdpblxuXHQgKiBAcGFyYW0ge093bH0gc2NvcGUgLSBUaGUgT3dsIENhcm91c2VsXG5cdCAqL1xuXHR2YXIgQXV0b3BsYXkgPSBmdW5jdGlvbihjYXJvdXNlbCkge1xuXHRcdC8qKlxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge093bH1cblx0XHQgKi9cblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgYXV0b3BsYXkgdGltZW91dC5cblx0XHQgKiBAdHlwZSB7VGltZW91dH1cblx0XHQgKi9cblx0XHR0aGlzLl90aW1lb3V0ID0gbnVsbDtcblxuXHRcdC8qKlxuXHRcdCAqIEluZGljYXRlcyB3aGVuZXZlciB0aGUgYXV0b3BsYXkgaXMgcGF1c2VkLlxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxuXHRcdCAqL1xuXHRcdHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIGV2ZW50IGhhbmRsZXJzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2hhbmRsZXJzID0ge1xuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT09ICdzZXR0aW5ncycpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheSkge1xuXHRcdFx0XHRcdFx0dGhpcy5wbGF5KCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMuc3RvcCgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT09ICdwb3NpdGlvbicpIHtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKCdwbGF5PycsIGUpO1xuXHRcdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5KSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zZXRBdXRvUGxheUludGVydmFsKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXkpIHtcblx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncGxheS5vd2wuYXV0b3BsYXknOiAkLnByb3h5KGZ1bmN0aW9uKGUsIHQsIHMpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlKSB7XG5cdFx0XHRcdFx0dGhpcy5wbGF5KHQsIHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdzdG9wLm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UpIHtcblx0XHRcdFx0XHR0aGlzLnN0b3AoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQnbW91c2VvdmVyLm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSAmJiB0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXVzZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdtb3VzZWxlYXZlLm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSAmJiB0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG5cdFx0XHRcdFx0dGhpcy5wbGF5KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J3RvdWNoc3RhcnQub3dsLmNvcmUnOiAkLnByb3h5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UgJiYgdGhpcy5fY29yZS5pcygncm90YXRpbmcnKSkge1xuXHRcdFx0XHRcdHRoaXMucGF1c2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQndG91Y2hlbmQub3dsLmNvcmUnOiAkLnByb3h5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UpIHtcblx0XHRcdFx0XHR0aGlzLnBsYXkoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcylcblx0XHR9O1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcblxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQXV0b3BsYXkuRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0QXV0b3BsYXkuRGVmYXVsdHMgPSB7XG5cdFx0YXV0b3BsYXk6IGZhbHNlLFxuXHRcdGF1dG9wbGF5VGltZW91dDogNTAwMCxcblx0XHRhdXRvcGxheUhvdmVyUGF1c2U6IGZhbHNlLFxuXHRcdGF1dG9wbGF5U3BlZWQ6IGZhbHNlXG5cdH07XG5cblx0LyoqXG5cdCAqIFN0YXJ0cyB0aGUgYXV0b3BsYXkuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt0aW1lb3V0XSAtIFRoZSBpbnRlcnZhbCBiZWZvcmUgdGhlIG5leHQgYW5pbWF0aW9uIHN0YXJ0cy5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgYW5pbWF0aW9uIHNwZWVkIGZvciB0aGUgYW5pbWF0aW9ucy5cblx0ICovXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24odGltZW91dCwgc3BlZWQpIHtcblx0XHR0aGlzLl9wYXVzZWQgPSBmYWxzZTtcblxuXHRcdGlmICh0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fY29yZS5lbnRlcigncm90YXRpbmcnKTtcblxuXHRcdHRoaXMuX3NldEF1dG9QbGF5SW50ZXJ2YWwoKTtcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyBhIG5ldyB0aW1lb3V0XG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbdGltZW91dF0gLSBUaGUgaW50ZXJ2YWwgYmVmb3JlIHRoZSBuZXh0IGFuaW1hdGlvbiBzdGFydHMuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIGFuaW1hdGlvbiBzcGVlZCBmb3IgdGhlIGFuaW1hdGlvbnMuXG5cdCAqIEByZXR1cm4ge1RpbWVvdXR9XG5cdCAqL1xuXHRBdXRvcGxheS5wcm90b3R5cGUuX2dldE5leHRUaW1lb3V0ID0gZnVuY3Rpb24odGltZW91dCwgc3BlZWQpIHtcblx0XHRpZiAoIHRoaXMuX3RpbWVvdXQgKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuXHRcdH1cblx0XHRyZXR1cm4gd2luZG93LnNldFRpbWVvdXQoJC5wcm94eShmdW5jdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLl9wYXVzZWQgfHwgdGhpcy5fY29yZS5pcygnYnVzeScpIHx8IHRoaXMuX2NvcmUuaXMoJ2ludGVyYWN0aW5nJykgfHwgZG9jdW1lbnQuaGlkZGVuKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2NvcmUubmV4dChzcGVlZCB8fCB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5U3BlZWQpO1xuXHRcdH0sIHRoaXMpLCB0aW1lb3V0IHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlUaW1lb3V0KTtcblx0fTtcblxuXHQvKipcblx0ICogU2V0cyBhdXRvcGxheSBpbiBtb3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRBdXRvcGxheS5wcm90b3R5cGUuX3NldEF1dG9QbGF5SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl90aW1lb3V0ID0gdGhpcy5fZ2V0TmV4dFRpbWVvdXQoKTtcblx0fTtcblxuXHQvKipcblx0ICogU3RvcHMgdGhlIGF1dG9wbGF5LlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRBdXRvcGxheS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghdGhpcy5fY29yZS5pcygncm90YXRpbmcnKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG5cdFx0dGhpcy5fY29yZS5sZWF2ZSgncm90YXRpbmcnKTtcblx0fTtcblxuXHQvKipcblx0ICogU3RvcHMgdGhlIGF1dG9wbGF5LlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRBdXRvcGxheS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIXRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9wYXVzZWQgPSB0cnVlO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuXHQgKi9cblx0QXV0b3BsYXkucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XG5cblx0XHR0aGlzLnN0b3AoKTtcblxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xuXHRcdH1cblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcblx0XHR9XG5cdH07XG5cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLmF1dG9wbGF5ID0gQXV0b3BsYXk7XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcbiIsIi8qKlxuICogQXV0b1JlZnJlc2ggUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSBhdXRvIHJlZnJlc2ggcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIEF1dG8gUmVmcmVzaCBQbHVnaW5cblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbFxuXHQgKi9cblx0dmFyIEF1dG9SZWZyZXNoID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPd2x9XG5cdFx0ICovXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xuXG5cdFx0LyoqXG5cdFx0ICogUmVmcmVzaCBpbnRlcnZhbC5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge251bWJlcn1cblx0XHQgKi9cblx0XHR0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBXaGV0aGVyIHRoZSBlbGVtZW50IGlzIGN1cnJlbnRseSB2aXNpYmxlIG9yIG5vdC5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge0Jvb2xlYW59XG5cdFx0ICovXG5cdFx0dGhpcy5fdmlzaWJsZSA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoKSB7XG5cdFx0XHRcdFx0dGhpcy53YXRjaCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKVxuXHRcdH07XG5cblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG5cdFx0dGhpcy5fY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIEF1dG9SZWZyZXNoLkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVmYXVsdCBvcHRpb25zLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRBdXRvUmVmcmVzaC5EZWZhdWx0cyA9IHtcblx0XHRhdXRvUmVmcmVzaDogdHJ1ZSxcblx0XHRhdXRvUmVmcmVzaEludGVydmFsOiA1MDBcblx0fTtcblxuXHQvKipcblx0ICogV2F0Y2hlcyB0aGUgZWxlbWVudC5cblx0ICovXG5cdEF1dG9SZWZyZXNoLnByb3RvdHlwZS53YXRjaCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLl9pbnRlcnZhbCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX3Zpc2libGUgPSB0aGlzLl9jb3JlLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpO1xuXHRcdHRoaXMuX2ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKCQucHJveHkodGhpcy5yZWZyZXNoLCB0aGlzKSwgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvUmVmcmVzaEludGVydmFsKTtcblx0fTtcblxuXHQvKipcblx0ICogUmVmcmVzaGVzIHRoZSBlbGVtZW50LlxuXHQgKi9cblx0QXV0b1JlZnJlc2gucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5fY29yZS4kZWxlbWVudC5pcygnOnZpc2libGUnKSA9PT0gdGhpcy5fdmlzaWJsZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX3Zpc2libGUgPSAhdGhpcy5fdmlzaWJsZTtcblxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ293bC1oaWRkZW4nLCAhdGhpcy5fdmlzaWJsZSk7XG5cblx0XHR0aGlzLl92aXNpYmxlICYmICh0aGlzLl9jb3JlLmludmFsaWRhdGUoJ3dpZHRoJykgJiYgdGhpcy5fY29yZS5yZWZyZXNoKCkpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuXHQgKi9cblx0QXV0b1JlZnJlc2gucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XG5cblx0XHR3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG5cblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcblx0XHR9XG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG5cdFx0fVxuXHR9O1xuXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5BdXRvUmVmcmVzaCA9IEF1dG9SZWZyZXNoO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4iLCIvKipcbiAqIEhhc2ggUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIGhhc2ggcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIEhhc2ggUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBIYXNoID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcblx0XHQvKipcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPd2x9XG5cdFx0ICovXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xuXG5cdFx0LyoqXG5cdFx0ICogSGFzaCBpbmRleCBmb3IgdGhlIGl0ZW1zLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2hhc2hlcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGNhcm91c2VsIGVsZW1lbnQuXG5cdFx0ICogQHR5cGUge2pRdWVyeX1cblx0XHQgKi9cblx0XHR0aGlzLiRlbGVtZW50ID0gdGhpcy5fY29yZS4kZWxlbWVudDtcblxuXHRcdC8qKlxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3Muc3RhcnRQb3NpdGlvbiA9PT0gJ1VSTEhhc2gnKSB7XG5cdFx0XHRcdFx0JCh3aW5kb3cpLnRyaWdnZXIoJ2hhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb24nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncHJlcGFyZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xuXHRcdFx0XHRcdHZhciBoYXNoID0gJChlLmNvbnRlbnQpLmZpbmQoJ1tkYXRhLWhhc2hdJykuYWRkQmFjaygnW2RhdGEtaGFzaF0nKS5hdHRyKCdkYXRhLWhhc2gnKTtcblxuXHRcdFx0XHRcdGlmICghaGFzaCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuX2hhc2hlc1toYXNoXSA9IGUuY29udGVudDtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQnY2hhbmdlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJykge1xuXHRcdFx0XHRcdHZhciBjdXJyZW50ID0gdGhpcy5fY29yZS5pdGVtcyh0aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKSksXG5cdFx0XHRcdFx0XHRoYXNoID0gJC5tYXAodGhpcy5faGFzaGVzLCBmdW5jdGlvbihpdGVtLCBoYXNoKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpdGVtID09PSBjdXJyZW50ID8gaGFzaCA6IG51bGw7XG5cdFx0XHRcdFx0XHR9KS5qb2luKCk7XG5cblx0XHRcdFx0XHRpZiAoIWhhc2ggfHwgd2luZG93LmxvY2F0aW9uLmhhc2guc2xpY2UoMSkgPT09IGhhc2gpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpXG5cdFx0fTtcblxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgSGFzaC5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcblxuXHRcdC8vIHJlZ2lzdGVyIHRoZSBldmVudCBoYW5kbGVyc1xuXHRcdHRoaXMuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXIgZm9yIGhhc2ggbmF2aWdhdGlvblxuXHRcdCQod2luZG93KS5vbignaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvbicsICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSksXG5cdFx0XHRcdGl0ZW1zID0gdGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKSxcblx0XHRcdFx0cG9zaXRpb24gPSB0aGlzLl9oYXNoZXNbaGFzaF0gJiYgaXRlbXMuaW5kZXgodGhpcy5faGFzaGVzW2hhc2hdKTtcblxuXHRcdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPT09IHRoaXMuX2NvcmUuY3VycmVudCgpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fY29yZS50byh0aGlzLl9jb3JlLnJlbGF0aXZlKHBvc2l0aW9uKSwgZmFsc2UsIHRydWUpO1xuXHRcdH0sIHRoaXMpKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVmYXVsdCBvcHRpb25zLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRIYXNoLkRlZmF1bHRzID0ge1xuXHRcdFVSTGhhc2hMaXN0ZW5lcjogZmFsc2Vcblx0fTtcblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cblx0ICogQHB1YmxpY1xuXHQgKi9cblx0SGFzaC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcblxuXHRcdCQod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb24nKTtcblxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xuXHRcdH1cblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcblx0XHR9XG5cdH07XG5cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkhhc2ggPSBIYXNoO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4iLCIvKipcbiAqIExhenkgUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXG4gKi9cbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIGxhenkgcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIExhenkgUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBMYXp5ID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcblxuXHRcdC8qKlxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge093bH1cblx0XHQgKi9cblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XG5cblx0XHQvKipcblx0XHQgKiBBbHJlYWR5IGxvYWRlZCBpdGVtcy5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge0FycmF5LjxqUXVlcnk+fVxuXHRcdCAqL1xuXHRcdHRoaXMuX2xvYWRlZCA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogRXZlbnQgaGFuZGxlcnMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsIGNoYW5nZS5vd2wuY2Fyb3VzZWwgcmVzaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKCFlLm5hbWVzcGFjZSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghdGhpcy5fY29yZS5zZXR0aW5ncyB8fCAhdGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICgoZS5wcm9wZXJ0eSAmJiBlLnByb3BlcnR5Lm5hbWUgPT0gJ3Bvc2l0aW9uJykgfHwgZS50eXBlID09ICdpbml0aWFsaXplZCcpIHtcblx0XHRcdFx0XHR2YXIgc2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzLFxuXHRcdFx0XHRcdFx0biA9IChzZXR0aW5ncy5jZW50ZXIgJiYgTWF0aC5jZWlsKHNldHRpbmdzLml0ZW1zIC8gMikgfHwgc2V0dGluZ3MuaXRlbXMpLFxuXHRcdFx0XHRcdFx0aSA9ICgoc2V0dGluZ3MuY2VudGVyICYmIG4gKiAtMSkgfHwgMCksXG5cdFx0XHRcdFx0XHRwb3NpdGlvbiA9IChlLnByb3BlcnR5ICYmIGUucHJvcGVydHkudmFsdWUgIT09IHVuZGVmaW5lZCA/IGUucHJvcGVydHkudmFsdWUgOiB0aGlzLl9jb3JlLmN1cnJlbnQoKSkgKyBpLFxuXHRcdFx0XHRcdFx0Y2xvbmVzID0gdGhpcy5fY29yZS5jbG9uZXMoKS5sZW5ndGgsXG5cdFx0XHRcdFx0XHRsb2FkID0gJC5wcm94eShmdW5jdGlvbihpLCB2KSB7IHRoaXMubG9hZCh2KSB9LCB0aGlzKTtcblxuXHRcdFx0XHRcdHdoaWxlIChpKysgPCBuKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmxvYWQoY2xvbmVzIC8gMiArIHRoaXMuX2NvcmUucmVsYXRpdmUocG9zaXRpb24pKTtcblx0XHRcdFx0XHRcdGNsb25lcyAmJiAkLmVhY2godGhpcy5fY29yZS5jbG9uZXModGhpcy5fY29yZS5yZWxhdGl2ZShwb3NpdGlvbikpLCBsb2FkKTtcblx0XHRcdFx0XHRcdHBvc2l0aW9uKys7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKVxuXHRcdH07XG5cblx0XHQvLyBzZXQgdGhlIGRlZmF1bHQgb3B0aW9uc1xuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBMYXp5LkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdExhenkuRGVmYXVsdHMgPSB7XG5cdFx0bGF6eUxvYWQ6IGZhbHNlXG5cdH07XG5cblx0LyoqXG5cdCAqIExvYWRzIGFsbCByZXNvdXJjZXMgb2YgYW4gaXRlbSBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdExhenkucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdHZhciAkaXRlbSA9IHRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEocG9zaXRpb24pLFxuXHRcdFx0JGVsZW1lbnRzID0gJGl0ZW0gJiYgJGl0ZW0uZmluZCgnLm93bC1sYXp5Jyk7XG5cblx0XHRpZiAoISRlbGVtZW50cyB8fCAkLmluQXJyYXkoJGl0ZW0uZ2V0KDApLCB0aGlzLl9sb2FkZWQpID4gLTEpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQkZWxlbWVudHMuZWFjaCgkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG5cdFx0XHR2YXIgJGVsZW1lbnQgPSAkKGVsZW1lbnQpLCBpbWFnZSxcblx0XHRcdFx0dXJsID0gKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID4gMSAmJiAkZWxlbWVudC5hdHRyKCdkYXRhLXNyYy1yZXRpbmEnKSkgfHwgJGVsZW1lbnQuYXR0cignZGF0YS1zcmMnKTtcblxuXHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdsb2FkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcblxuXHRcdFx0aWYgKCRlbGVtZW50LmlzKCdpbWcnKSkge1xuXHRcdFx0XHQkZWxlbWVudC5vbmUoJ2xvYWQub3dsLmxhenknLCAkLnByb3h5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCRlbGVtZW50LmNzcygnb3BhY2l0eScsIDEpO1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZGVkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcblx0XHRcdFx0fSwgdGhpcykpLmF0dHIoJ3NyYycsIHVybCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpbWFnZSA9IG5ldyBJbWFnZSgpO1xuXHRcdFx0XHRpbWFnZS5vbmxvYWQgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdCRlbGVtZW50LmNzcyh7XG5cdFx0XHRcdFx0XHQnYmFja2dyb3VuZC1pbWFnZSc6ICd1cmwoXCInICsgdXJsICsgJ1wiKScsXG5cdFx0XHRcdFx0XHQnb3BhY2l0eSc6ICcxJ1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZGVkJywgeyBlbGVtZW50OiAkZWxlbWVudCwgdXJsOiB1cmwgfSwgJ2xhenknKTtcblx0XHRcdFx0fSwgdGhpcyk7XG5cdFx0XHRcdGltYWdlLnNyYyA9IHVybDtcblx0XHRcdH1cblx0XHR9LCB0aGlzKSk7XG5cblx0XHR0aGlzLl9sb2FkZWQucHVzaCgkaXRlbS5nZXQoMCkpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRMYXp5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xuXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuaGFuZGxlcnMpIHtcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuaGFuZGxlcnNbaGFuZGxlcl0pO1xuXHRcdH1cblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcblx0XHR9XG5cdH07XG5cblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkxhenkgPSBMYXp5O1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4iLCIvKipcbiAqIE5hdmlnYXRpb24gUGx1Z2luXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdGhlIG5hdmlnYXRpb24gcGx1Z2luLlxuXHQgKiBAY2xhc3MgVGhlIE5hdmlnYXRpb24gUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWwuXG5cdCAqL1xuXHR2YXIgTmF2aWdhdGlvbiA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T3dsfVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcblxuXHRcdC8qKlxuXHRcdCAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwbHVnaW4gaXMgaW5pdGlhbGl6ZWQgb3Igbm90LlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKi9cblx0XHR0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIGN1cnJlbnQgcGFnaW5nIGluZGV4ZXMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtBcnJheX1cblx0XHQgKi9cblx0XHR0aGlzLl9wYWdlcyA9IFtdO1xuXG5cdFx0LyoqXG5cdFx0ICogQWxsIERPTSBlbGVtZW50cyBvZiB0aGUgdXNlciBpbnRlcmZhY2UuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5fY29udHJvbHMgPSB7fTtcblxuXHRcdC8qKlxuXHRcdCAqIE1hcmt1cCBmb3IgYW4gaW5kaWNhdG9yLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7QXJyYXkuPFN0cmluZz59XG5cdFx0ICovXG5cdFx0dGhpcy5fdGVtcGxhdGVzID0gW107XG5cblx0XHQvKipcblx0XHQgKiBUaGUgY2Fyb3VzZWwgZWxlbWVudC5cblx0XHQgKiBAdHlwZSB7alF1ZXJ5fVxuXHRcdCAqL1xuXHRcdHRoaXMuJGVsZW1lbnQgPSB0aGlzLl9jb3JlLiRlbGVtZW50O1xuXG5cdFx0LyoqXG5cdFx0ICogT3ZlcnJpZGRlbiBtZXRob2RzIG9mIHRoZSBjYXJvdXNlbC5cblx0XHQgKiBAcHJvdGVjdGVkXG5cdFx0ICogQHR5cGUge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9vdmVycmlkZXMgPSB7XG5cdFx0XHRuZXh0OiB0aGlzLl9jb3JlLm5leHQsXG5cdFx0XHRwcmV2OiB0aGlzLl9jb3JlLnByZXYsXG5cdFx0XHR0bzogdGhpcy5fY29yZS50b1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHQncHJlcGFyZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhKSB7XG5cdFx0XHRcdFx0dGhpcy5fdGVtcGxhdGVzLnB1c2goJzxkaXYgY2xhc3M9XCInICsgdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RDbGFzcyArICdcIj4nICtcblx0XHRcdFx0XHRcdCQoZS5jb250ZW50KS5maW5kKCdbZGF0YS1kb3RdJykuYWRkQmFjaygnW2RhdGEtZG90XScpLmF0dHIoJ2RhdGEtZG90JykgKyAnPC9kaXY+Jyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J2FkZGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSkge1xuXHRcdFx0XHRcdHRoaXMuX3RlbXBsYXRlcy5zcGxpY2UoZS5wb3NpdGlvbiwgMCwgdGhpcy5fdGVtcGxhdGVzLnBvcCgpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncmVtb3ZlLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSkge1xuXHRcdFx0XHRcdHRoaXMuX3RlbXBsYXRlcy5zcGxpY2UoZS5wb3NpdGlvbiwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT0gJ3Bvc2l0aW9uJykge1xuXHRcdFx0XHRcdHRoaXMuZHJhdygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmICF0aGlzLl9pbml0aWFsaXplZCkge1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignaW5pdGlhbGl6ZScsIG51bGwsICduYXZpZ2F0aW9uJyk7XG5cdFx0XHRcdFx0dGhpcy5pbml0aWFsaXplKCk7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcblx0XHRcdFx0XHR0aGlzLmRyYXcoKTtcblx0XHRcdFx0XHR0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7XG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdpbml0aWFsaXplZCcsIG51bGwsICduYXZpZ2F0aW9uJyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpLFxuXHRcdFx0J3JlZnJlc2hlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2luaXRpYWxpemVkKSB7XG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdyZWZyZXNoJywgbnVsbCwgJ25hdmlnYXRpb24nKTtcblx0XHRcdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0XHRcdHRoaXMuZHJhdygpO1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcigncmVmcmVzaGVkJywgbnVsbCwgJ25hdmlnYXRpb24nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcylcblx0XHR9O1xuXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBOYXZpZ2F0aW9uLkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xuXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcblx0XHR0aGlzLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcblx0fTtcblxuXHQvKipcblx0ICogRGVmYXVsdCBvcHRpb25zLlxuXHQgKiBAcHVibGljXG5cdCAqIEB0b2RvIFJlbmFtZSBgc2xpZGVCeWAgdG8gYG5hdkJ5YFxuXHQgKi9cblx0TmF2aWdhdGlvbi5EZWZhdWx0cyA9IHtcblx0XHRuYXY6IGZhbHNlLFxuXHRcdG5hdlRleHQ6IFsgJ3ByZXYnLCAnbmV4dCcgXSxcblx0XHRuYXZTcGVlZDogZmFsc2UsXG5cdFx0bmF2RWxlbWVudDogJ2RpdicsXG5cdFx0bmF2Q29udGFpbmVyOiBmYWxzZSxcblx0XHRuYXZDb250YWluZXJDbGFzczogJ293bC1uYXYnLFxuXHRcdG5hdkNsYXNzOiBbICdvd2wtcHJldicsICdvd2wtbmV4dCcgXSxcblx0XHRzbGlkZUJ5OiAxLFxuXHRcdGRvdENsYXNzOiAnb3dsLWRvdCcsXG5cdFx0ZG90c0NsYXNzOiAnb3dsLWRvdHMnLFxuXHRcdGRvdHM6IHRydWUsXG5cdFx0ZG90c0VhY2g6IGZhbHNlLFxuXHRcdGRvdHNEYXRhOiBmYWxzZSxcblx0XHRkb3RzU3BlZWQ6IGZhbHNlLFxuXHRcdGRvdHNDb250YWluZXI6IGZhbHNlXG5cdH07XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSBsYXlvdXQgb2YgdGhlIHBsdWdpbiBhbmQgZXh0ZW5kcyB0aGUgY2Fyb3VzZWwuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgb3ZlcnJpZGUsXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3M7XG5cblx0XHQvLyBjcmVhdGUgRE9NIHN0cnVjdHVyZSBmb3IgcmVsYXRpdmUgbmF2aWdhdGlvblxuXHRcdHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZSA9IChzZXR0aW5ncy5uYXZDb250YWluZXIgPyAkKHNldHRpbmdzLm5hdkNvbnRhaW5lcilcblx0XHRcdDogJCgnPGRpdj4nKS5hZGRDbGFzcyhzZXR0aW5ncy5uYXZDb250YWluZXJDbGFzcykuYXBwZW5kVG8odGhpcy4kZWxlbWVudCkpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXG5cdFx0dGhpcy5fY29udHJvbHMuJHByZXZpb3VzID0gJCgnPCcgKyBzZXR0aW5ncy5uYXZFbGVtZW50ICsgJz4nKVxuXHRcdFx0LmFkZENsYXNzKHNldHRpbmdzLm5hdkNsYXNzWzBdKVxuXHRcdFx0Lmh0bWwoc2V0dGluZ3MubmF2VGV4dFswXSlcblx0XHRcdC5wcmVwZW5kVG8odGhpcy5fY29udHJvbHMuJHJlbGF0aXZlKVxuXHRcdFx0Lm9uKCdjbGljaycsICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHR0aGlzLnByZXYoc2V0dGluZ3MubmF2U3BlZWQpO1xuXHRcdFx0fSwgdGhpcykpO1xuXHRcdHRoaXMuX2NvbnRyb2xzLiRuZXh0ID0gJCgnPCcgKyBzZXR0aW5ncy5uYXZFbGVtZW50ICsgJz4nKVxuXHRcdFx0LmFkZENsYXNzKHNldHRpbmdzLm5hdkNsYXNzWzFdKVxuXHRcdFx0Lmh0bWwoc2V0dGluZ3MubmF2VGV4dFsxXSlcblx0XHRcdC5hcHBlbmRUbyh0aGlzLl9jb250cm9scy4kcmVsYXRpdmUpXG5cdFx0XHQub24oJ2NsaWNrJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHRoaXMubmV4dChzZXR0aW5ncy5uYXZTcGVlZCk7XG5cdFx0XHR9LCB0aGlzKSk7XG5cblx0XHQvLyBjcmVhdGUgRE9NIHN0cnVjdHVyZSBmb3IgYWJzb2x1dGUgbmF2aWdhdGlvblxuXHRcdGlmICghc2V0dGluZ3MuZG90c0RhdGEpIHtcblx0XHRcdHRoaXMuX3RlbXBsYXRlcyA9IFsgJCgnPGRpdj4nKVxuXHRcdFx0XHQuYWRkQ2xhc3Moc2V0dGluZ3MuZG90Q2xhc3MpXG5cdFx0XHRcdC5hcHBlbmQoJCgnPHNwYW4+JykpXG5cdFx0XHRcdC5wcm9wKCdvdXRlckhUTUwnKSBdO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZSA9IChzZXR0aW5ncy5kb3RzQ29udGFpbmVyID8gJChzZXR0aW5ncy5kb3RzQ29udGFpbmVyKVxuXHRcdFx0OiAkKCc8ZGl2PicpLmFkZENsYXNzKHNldHRpbmdzLmRvdHNDbGFzcykuYXBwZW5kVG8odGhpcy4kZWxlbWVudCkpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuXG5cdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLm9uKCdjbGljaycsICdkaXYnLCAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBpbmRleCA9ICQoZS50YXJnZXQpLnBhcmVudCgpLmlzKHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZSlcblx0XHRcdFx0PyAkKGUudGFyZ2V0KS5pbmRleCgpIDogJChlLnRhcmdldCkucGFyZW50KCkuaW5kZXgoKTtcblxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHR0aGlzLnRvKGluZGV4LCBzZXR0aW5ncy5kb3RzU3BlZWQpO1xuXHRcdH0sIHRoaXMpKTtcblxuXHRcdC8vIG92ZXJyaWRlIHB1YmxpYyBtZXRob2RzIG9mIHRoZSBjYXJvdXNlbFxuXHRcdGZvciAob3ZlcnJpZGUgaW4gdGhpcy5fb3ZlcnJpZGVzKSB7XG5cdFx0XHR0aGlzLl9jb3JlW292ZXJyaWRlXSA9ICQucHJveHkodGhpc1tvdmVycmlkZV0sIHRoaXMpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cblx0ICogQHByb3RlY3RlZFxuXHQgKi9cblx0TmF2aWdhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBoYW5kbGVyLCBjb250cm9sLCBwcm9wZXJ0eSwgb3ZlcnJpZGU7XG5cblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcblx0XHRcdHRoaXMuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcblx0XHR9XG5cdFx0Zm9yIChjb250cm9sIGluIHRoaXMuX2NvbnRyb2xzKSB7XG5cdFx0XHR0aGlzLl9jb250cm9sc1tjb250cm9sXS5yZW1vdmUoKTtcblx0XHR9XG5cdFx0Zm9yIChvdmVycmlkZSBpbiB0aGlzLm92ZXJpZGVzKSB7XG5cdFx0XHR0aGlzLl9jb3JlW292ZXJyaWRlXSA9IHRoaXMuX292ZXJyaWRlc1tvdmVycmlkZV07XG5cdFx0fVxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgaW50ZXJuYWwgc3RhdGUuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpLCBqLCBrLFxuXHRcdFx0bG93ZXIgPSB0aGlzLl9jb3JlLmNsb25lcygpLmxlbmd0aCAvIDIsXG5cdFx0XHR1cHBlciA9IGxvd2VyICsgdGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aCxcblx0XHRcdG1heGltdW0gPSB0aGlzLl9jb3JlLm1heGltdW0odHJ1ZSksXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3MsXG5cdFx0XHRzaXplID0gc2V0dGluZ3MuY2VudGVyIHx8IHNldHRpbmdzLmF1dG9XaWR0aCB8fCBzZXR0aW5ncy5kb3RzRGF0YVxuXHRcdFx0XHQ/IDEgOiBzZXR0aW5ncy5kb3RzRWFjaCB8fCBzZXR0aW5ncy5pdGVtcztcblxuXHRcdGlmIChzZXR0aW5ncy5zbGlkZUJ5ICE9PSAncGFnZScpIHtcblx0XHRcdHNldHRpbmdzLnNsaWRlQnkgPSBNYXRoLm1pbihzZXR0aW5ncy5zbGlkZUJ5LCBzZXR0aW5ncy5pdGVtcyk7XG5cdFx0fVxuXG5cdFx0aWYgKHNldHRpbmdzLmRvdHMgfHwgc2V0dGluZ3Muc2xpZGVCeSA9PSAncGFnZScpIHtcblx0XHRcdHRoaXMuX3BhZ2VzID0gW107XG5cblx0XHRcdGZvciAoaSA9IGxvd2VyLCBqID0gMCwgayA9IDA7IGkgPCB1cHBlcjsgaSsrKSB7XG5cdFx0XHRcdGlmIChqID49IHNpemUgfHwgaiA9PT0gMCkge1xuXHRcdFx0XHRcdHRoaXMuX3BhZ2VzLnB1c2goe1xuXHRcdFx0XHRcdFx0c3RhcnQ6IE1hdGgubWluKG1heGltdW0sIGkgLSBsb3dlciksXG5cdFx0XHRcdFx0XHRlbmQ6IGkgLSBsb3dlciArIHNpemUgLSAxXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0aWYgKE1hdGgubWluKG1heGltdW0sIGkgLSBsb3dlcikgPT09IG1heGltdW0pIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRqID0gMCwgKytrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGogKz0gdGhpcy5fY29yZS5tZXJnZXJzKHRoaXMuX2NvcmUucmVsYXRpdmUoaSkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogRHJhd3MgdGhlIHVzZXIgaW50ZXJmYWNlLlxuXHQgKiBAdG9kbyBUaGUgb3B0aW9uIGBkb3RzRGF0YWAgd29udCB3b3JrLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqL1xuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGRpZmZlcmVuY2UsXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3MsXG5cdFx0XHRkaXNhYmxlZCA9IHRoaXMuX2NvcmUuaXRlbXMoKS5sZW5ndGggPD0gc2V0dGluZ3MuaXRlbXMsXG5cdFx0XHRpbmRleCA9IHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpLFxuXHRcdFx0bG9vcCA9IHNldHRpbmdzLmxvb3AgfHwgc2V0dGluZ3MucmV3aW5kO1xuXG5cdFx0dGhpcy5fY29udHJvbHMuJHJlbGF0aXZlLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFzZXR0aW5ncy5uYXYgfHwgZGlzYWJsZWQpO1xuXG5cdFx0aWYgKHNldHRpbmdzLm5hdikge1xuXHRcdFx0dGhpcy5fY29udHJvbHMuJHByZXZpb3VzLnRvZ2dsZUNsYXNzKCdkaXNhYmxlZCcsICFsb29wICYmIGluZGV4IDw9IHRoaXMuX2NvcmUubWluaW11bSh0cnVlKSk7XG5cdFx0XHR0aGlzLl9jb250cm9scy4kbmV4dC50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhbG9vcCAmJiBpbmRleCA+PSB0aGlzLl9jb3JlLm1heGltdW0odHJ1ZSkpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhc2V0dGluZ3MuZG90cyB8fCBkaXNhYmxlZCk7XG5cblx0XHRpZiAoc2V0dGluZ3MuZG90cykge1xuXHRcdFx0ZGlmZmVyZW5jZSA9IHRoaXMuX3BhZ2VzLmxlbmd0aCAtIHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLmxlbmd0aDtcblxuXHRcdFx0aWYgKHNldHRpbmdzLmRvdHNEYXRhICYmIGRpZmZlcmVuY2UgIT09IDApIHtcblx0XHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmh0bWwodGhpcy5fdGVtcGxhdGVzLmpvaW4oJycpKTtcblx0XHRcdH0gZWxzZSBpZiAoZGlmZmVyZW5jZSA+IDApIHtcblx0XHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmFwcGVuZChuZXcgQXJyYXkoZGlmZmVyZW5jZSArIDEpLmpvaW4odGhpcy5fdGVtcGxhdGVzWzBdKSk7XG5cdFx0XHR9IGVsc2UgaWYgKGRpZmZlcmVuY2UgPCAwKSB7XG5cdFx0XHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLnNsaWNlKGRpZmZlcmVuY2UpLnJlbW92ZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblx0XHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLmVxKCQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpKS5hZGRDbGFzcygnYWN0aXZlJyk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBFeHRlbmRzIGV2ZW50IGRhdGEuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0IHdoaWNoIGdldHMgdGhyb3duLlxuXHQgKi9cblx0TmF2aWdhdGlvbi5wcm90b3R5cGUub25UcmlnZ2VyID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgc2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzO1xuXG5cdFx0ZXZlbnQucGFnZSA9IHtcblx0XHRcdGluZGV4OiAkLmluQXJyYXkodGhpcy5jdXJyZW50KCksIHRoaXMuX3BhZ2VzKSxcblx0XHRcdGNvdW50OiB0aGlzLl9wYWdlcy5sZW5ndGgsXG5cdFx0XHRzaXplOiBzZXR0aW5ncyAmJiAoc2V0dGluZ3MuY2VudGVyIHx8IHNldHRpbmdzLmF1dG9XaWR0aCB8fCBzZXR0aW5ncy5kb3RzRGF0YVxuXHRcdFx0XHQ/IDEgOiBzZXR0aW5ncy5kb3RzRWFjaCB8fCBzZXR0aW5ncy5pdGVtcylcblx0XHR9O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBjdXJyZW50IHBhZ2UgcG9zaXRpb24gb2YgdGhlIGNhcm91c2VsLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9XG5cdCAqL1xuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGN1cnJlbnQgPSB0aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKTtcblx0XHRyZXR1cm4gJC5ncmVwKHRoaXMuX3BhZ2VzLCAkLnByb3h5KGZ1bmN0aW9uKHBhZ2UsIGluZGV4KSB7XG5cdFx0XHRyZXR1cm4gcGFnZS5zdGFydCA8PSBjdXJyZW50ICYmIHBhZ2UuZW5kID49IGN1cnJlbnQ7XG5cdFx0fSwgdGhpcykpLnBvcCgpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBjdXJyZW50IHN1Y2Nlc29yL3ByZWRlY2Vzc29yIHBvc2l0aW9uLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9XG5cdCAqL1xuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKHN1Y2Nlc3Nvcikge1xuXHRcdHZhciBwb3NpdGlvbiwgbGVuZ3RoLFxuXHRcdFx0c2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzO1xuXG5cdFx0aWYgKHNldHRpbmdzLnNsaWRlQnkgPT0gJ3BhZ2UnKSB7XG5cdFx0XHRwb3NpdGlvbiA9ICQuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSwgdGhpcy5fcGFnZXMpO1xuXHRcdFx0bGVuZ3RoID0gdGhpcy5fcGFnZXMubGVuZ3RoO1xuXHRcdFx0c3VjY2Vzc29yID8gKytwb3NpdGlvbiA6IC0tcG9zaXRpb247XG5cdFx0XHRwb3NpdGlvbiA9IHRoaXMuX3BhZ2VzWygocG9zaXRpb24gJSBsZW5ndGgpICsgbGVuZ3RoKSAlIGxlbmd0aF0uc3RhcnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHBvc2l0aW9uID0gdGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSk7XG5cdFx0XHRsZW5ndGggPSB0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoO1xuXHRcdFx0c3VjY2Vzc29yID8gcG9zaXRpb24gKz0gc2V0dGluZ3Muc2xpZGVCeSA6IHBvc2l0aW9uIC09IHNldHRpbmdzLnNsaWRlQnk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvc2l0aW9uO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTbGlkZXMgdG8gdGhlIG5leHQgaXRlbSBvciBwYWdlLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWQ9ZmFsc2VdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbihzcGVlZCkge1xuXHRcdCQucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLCB0aGlzLl9jb3JlKSh0aGlzLmdldFBvc2l0aW9uKHRydWUpLCBzcGVlZCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIFNsaWRlcyB0byB0aGUgcHJldmlvdXMgaXRlbSBvciBwYWdlLlxuXHQgKiBAcHVibGljXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWQ9ZmFsc2VdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cblx0ICovXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbihzcGVlZCkge1xuXHRcdCQucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLCB0aGlzLl9jb3JlKSh0aGlzLmdldFBvc2l0aW9uKGZhbHNlKSwgc3BlZWQpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTbGlkZXMgdG8gdGhlIHNwZWNpZmllZCBpdGVtIG9yIHBhZ2UuXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBpdGVtIG9yIHBhZ2UuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cblx0ICogQHBhcmFtIHtCb29sZWFufSBbc3RhbmRhcmQ9ZmFsc2VdIC0gV2hldGhlciB0byB1c2UgdGhlIHN0YW5kYXJkIGJlaGF2aW91ciBvciBub3QuXG5cdCAqL1xuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBzcGVlZCwgc3RhbmRhcmQpIHtcblx0XHR2YXIgbGVuZ3RoO1xuXG5cdFx0aWYgKCFzdGFuZGFyZCAmJiB0aGlzLl9wYWdlcy5sZW5ndGgpIHtcblx0XHRcdGxlbmd0aCA9IHRoaXMuX3BhZ2VzLmxlbmd0aDtcblx0XHRcdCQucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLCB0aGlzLl9jb3JlKSh0aGlzLl9wYWdlc1soKHBvc2l0aW9uICUgbGVuZ3RoKSArIGxlbmd0aCkgJSBsZW5ndGhdLnN0YXJ0LCBzcGVlZCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdCQucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLCB0aGlzLl9jb3JlKShwb3NpdGlvbiwgc3BlZWQpO1xuXHRcdH1cblx0fTtcblxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuTmF2aWdhdGlvbiA9IE5hdmlnYXRpb247XG5cbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcbiIsIi8qKlxuICogU3VwcG9ydCBQbHVnaW5cbiAqXG4gKiBAdmVyc2lvbiAyLjEuMFxuICogQGF1dGhvciBWaXZpZCBQbGFuZXQgU29mdHdhcmUgR21iSFxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdHZhciBzdHlsZSA9ICQoJzxzdXBwb3J0PicpLmdldCgwKS5zdHlsZSxcblx0XHRwcmVmaXhlcyA9ICdXZWJraXQgTW96IE8gbXMnLnNwbGl0KCcgJyksXG5cdFx0ZXZlbnRzID0ge1xuXHRcdFx0dHJhbnNpdGlvbjoge1xuXHRcdFx0XHRlbmQ6IHtcblx0XHRcdFx0XHRXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG5cdFx0XHRcdFx0TW96VHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuXHRcdFx0XHRcdE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQnLFxuXHRcdFx0XHRcdHRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJ1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YW5pbWF0aW9uOiB7XG5cdFx0XHRcdGVuZDoge1xuXHRcdFx0XHRcdFdlYmtpdEFuaW1hdGlvbjogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXG5cdFx0XHRcdFx0TW96QW5pbWF0aW9uOiAnYW5pbWF0aW9uZW5kJyxcblx0XHRcdFx0XHRPQW5pbWF0aW9uOiAnb0FuaW1hdGlvbkVuZCcsXG5cdFx0XHRcdFx0YW5pbWF0aW9uOiAnYW5pbWF0aW9uZW5kJ1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR0ZXN0cyA9IHtcblx0XHRcdGNzc3RyYW5zZm9ybXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCd0cmFuc2Zvcm0nKTtcblx0XHRcdH0sXG5cdFx0XHRjc3N0cmFuc2Zvcm1zM2Q6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCdwZXJzcGVjdGl2ZScpO1xuXHRcdFx0fSxcblx0XHRcdGNzc3RyYW5zaXRpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhdGVzdCgndHJhbnNpdGlvbicpO1xuXHRcdFx0fSxcblx0XHRcdGNzc2FuaW1hdGlvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCdhbmltYXRpb24nKTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdGZ1bmN0aW9uIHRlc3QocHJvcGVydHksIHByZWZpeGVkKSB7XG5cdFx0dmFyIHJlc3VsdCA9IGZhbHNlLFxuXHRcdFx0dXBwZXIgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xuXG5cdFx0JC5lYWNoKChwcm9wZXJ0eSArICcgJyArIHByZWZpeGVzLmpvaW4odXBwZXIgKyAnICcpICsgdXBwZXIpLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGksIHByb3BlcnR5KSB7XG5cdFx0XHRpZiAoc3R5bGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmVzdWx0ID0gcHJlZml4ZWQgPyBwcm9wZXJ0eSA6IHRydWU7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBwcmVmaXhlZChwcm9wZXJ0eSkge1xuXHRcdHJldHVybiB0ZXN0KHByb3BlcnR5LCB0cnVlKTtcblx0fVxuXG5cdGlmICh0ZXN0cy5jc3N0cmFuc2l0aW9ucygpKSB7XG5cdFx0LyoganNoaW50IC1XMDUzICovXG5cdFx0JC5zdXBwb3J0LnRyYW5zaXRpb24gPSBuZXcgU3RyaW5nKHByZWZpeGVkKCd0cmFuc2l0aW9uJykpXG5cdFx0JC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kID0gZXZlbnRzLnRyYW5zaXRpb24uZW5kWyAkLnN1cHBvcnQudHJhbnNpdGlvbiBdO1xuXHR9XG5cblx0aWYgKHRlc3RzLmNzc2FuaW1hdGlvbnMoKSkge1xuXHRcdC8qIGpzaGludCAtVzA1MyAqL1xuXHRcdCQuc3VwcG9ydC5hbmltYXRpb24gPSBuZXcgU3RyaW5nKHByZWZpeGVkKCdhbmltYXRpb24nKSlcblx0XHQkLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCA9IGV2ZW50cy5hbmltYXRpb24uZW5kWyAkLnN1cHBvcnQuYW5pbWF0aW9uIF07XG5cdH1cblxuXHRpZiAodGVzdHMuY3NzdHJhbnNmb3JtcygpKSB7XG5cdFx0LyoganNoaW50IC1XMDUzICovXG5cdFx0JC5zdXBwb3J0LnRyYW5zZm9ybSA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ3RyYW5zZm9ybScpKTtcblx0XHQkLnN1cHBvcnQudHJhbnNmb3JtM2QgPSB0ZXN0cy5jc3N0cmFuc2Zvcm1zM2QoKTtcblx0fVxuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4iLCIvKipcbiAqIFZpZGVvIFBsdWdpblxuICogQHZlcnNpb24gMi4xLjBcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHRoZSB2aWRlbyBwbHVnaW4uXG5cdCAqIEBjbGFzcyBUaGUgVmlkZW8gUGx1Z2luXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcblx0ICovXG5cdHZhciBWaWRlbyA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XG5cdFx0LyoqXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T3dsfVxuXHRcdCAqL1xuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcblxuXHRcdC8qKlxuXHRcdCAqIENhY2hlIGFsbCB2aWRlbyBVUkxzLlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxuXHRcdCAqL1xuXHRcdHRoaXMuX3ZpZGVvcyA9IHt9O1xuXG5cdFx0LyoqXG5cdFx0ICogQ3VycmVudCBwbGF5aW5nIGl0ZW0uXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtqUXVlcnl9XG5cdFx0ICovXG5cdFx0dGhpcy5fcGxheWluZyA9IG51bGw7XG5cblx0XHQvKipcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXG5cdFx0ICogQHRvZG8gVGhlIGNsb25lZCBjb250ZW50IHJlbW92YWxlIGlzIHRvbyBsYXRlXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XG5cdFx0ICovXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUucmVnaXN0ZXIoeyB0eXBlOiAnc3RhdGUnLCBuYW1lOiAncGxheWluZycsIHRhZ3M6IFsgJ2ludGVyYWN0aW5nJyBdIH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdyZXNpemUub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLnZpZGVvICYmIHRoaXMuaXNJbkZ1bGxTY3JlZW4oKSkge1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncmVmcmVzaGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5pcygncmVzaXppbmcnKSkge1xuXHRcdFx0XHRcdHRoaXMuX2NvcmUuJHN0YWdlLmZpbmQoJy5jbG9uZWQgLm93bC12aWRlby1mcmFtZScpLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCB0aGlzKSxcblx0XHRcdCdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5wcm9wZXJ0eS5uYW1lID09PSAncG9zaXRpb24nICYmIHRoaXMuX3BsYXlpbmcpIHtcblx0XHRcdFx0XHR0aGlzLnN0b3AoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyksXG5cdFx0XHQncHJlcGFyZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmICghZS5uYW1lc3BhY2UpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgJGVsZW1lbnQgPSAkKGUuY29udGVudCkuZmluZCgnLm93bC12aWRlbycpO1xuXG5cdFx0XHRcdGlmICgkZWxlbWVudC5sZW5ndGgpIHtcblx0XHRcdFx0XHQkZWxlbWVudC5jc3MoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXHRcdFx0XHRcdHRoaXMuZmV0Y2goJGVsZW1lbnQsICQoZS5jb250ZW50KSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRoaXMpXG5cdFx0fTtcblxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVmlkZW8uRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XG5cblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xuXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vbignY2xpY2sub3dsLnZpZGVvJywgJy5vd2wtdmlkZW8tcGxheS1pY29uJywgJC5wcm94eShmdW5jdGlvbihlKSB7XG5cdFx0XHR0aGlzLnBsYXkoZSk7XG5cdFx0fSwgdGhpcykpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdFZpZGVvLkRlZmF1bHRzID0ge1xuXHRcdHZpZGVvOiBmYWxzZSxcblx0XHR2aWRlb0hlaWdodDogZmFsc2UsXG5cdFx0dmlkZW9XaWR0aDogZmFsc2Vcblx0fTtcblxuXHQvKipcblx0ICogR2V0cyB0aGUgdmlkZW8gSUQgYW5kIHRoZSB0eXBlIChZb3VUdWJlL1ZpbWVvL3Z6YWFyIG9ubHkpLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEBwYXJhbSB7alF1ZXJ5fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGNvbnRhaW5pbmcgdGhlIHZpZGVvIGRhdGEuXG5cdCAqIEBwYXJhbSB7alF1ZXJ5fSBpdGVtIC0gVGhlIGl0ZW0gY29udGFpbmluZyB0aGUgdmlkZW8uXG5cdCAqL1xuXHRWaWRlby5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbih0YXJnZXQsIGl0ZW0pIHtcblx0XHRcdHZhciB0eXBlID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICh0YXJnZXQuYXR0cignZGF0YS12aW1lby1pZCcpKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gJ3ZpbWVvJztcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRhcmdldC5hdHRyKCdkYXRhLXZ6YWFyLWlkJykpIHtcblx0XHRcdFx0XHRcdHJldHVybiAndnphYXInXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiAneW91dHViZSc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSgpLFxuXHRcdFx0XHRpZCA9IHRhcmdldC5hdHRyKCdkYXRhLXZpbWVvLWlkJykgfHwgdGFyZ2V0LmF0dHIoJ2RhdGEteW91dHViZS1pZCcpIHx8IHRhcmdldC5hdHRyKCdkYXRhLXZ6YWFyLWlkJyksXG5cdFx0XHRcdHdpZHRoID0gdGFyZ2V0LmF0dHIoJ2RhdGEtd2lkdGgnKSB8fCB0aGlzLl9jb3JlLnNldHRpbmdzLnZpZGVvV2lkdGgsXG5cdFx0XHRcdGhlaWdodCA9IHRhcmdldC5hdHRyKCdkYXRhLWhlaWdodCcpIHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW9IZWlnaHQsXG5cdFx0XHRcdHVybCA9IHRhcmdldC5hdHRyKCdocmVmJyk7XG5cblx0XHRpZiAodXJsKSB7XG5cblx0XHRcdC8qXG5cdFx0XHRcdFx0UGFyc2VzIHRoZSBpZCdzIG91dCBvZiB0aGUgZm9sbG93aW5nIHVybHMgKGFuZCBwcm9iYWJseSBtb3JlKTpcblx0XHRcdFx0XHRodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTppZFxuXHRcdFx0XHRcdGh0dHBzOi8veW91dHUuYmUvOmlkXG5cdFx0XHRcdFx0aHR0cHM6Ly92aW1lby5jb20vOmlkXG5cdFx0XHRcdFx0aHR0cHM6Ly92aW1lby5jb20vY2hhbm5lbHMvOmNoYW5uZWwvOmlkXG5cdFx0XHRcdFx0aHR0cHM6Ly92aW1lby5jb20vZ3JvdXBzLzpncm91cC92aWRlb3MvOmlkXG5cdFx0XHRcdFx0aHR0cHM6Ly9hcHAudnphYXIuY29tL3ZpZGVvcy86aWRcblxuXHRcdFx0XHRcdFZpc3VhbCBleGFtcGxlOiBodHRwczovL3JlZ2V4cGVyLmNvbS8jKGh0dHAlM0ElN0NodHRwcyUzQSU3QyklNUMlMkYlNUMlMkYocGxheWVyLiU3Q3d3dy4lN0NhcHAuKSUzRih2aW1lbyU1Qy5jb20lN0N5b3V0dShiZSU1Qy5jb20lN0MlNUMuYmUlN0NiZSU1Qy5nb29nbGVhcGlzJTVDLmNvbSklN0N2emFhciU1Qy5jb20pJTVDJTJGKHZpZGVvJTVDJTJGJTdDdmlkZW9zJTVDJTJGJTdDZW1iZWQlNUMlMkYlN0NjaGFubmVscyU1QyUyRi4lMkIlNUMlMkYlN0Nncm91cHMlNUMlMkYuJTJCJTVDJTJGJTdDd2F0Y2glNUMlM0Z2JTNEJTdDdiU1QyUyRiklM0YoJTVCQS1aYS16MC05Ll8lMjUtJTVEKikoJTVDJTI2JTVDUyUyQiklM0Zcblx0XHRcdCovXG5cblx0XHRcdGlkID0gdXJsLm1hdGNoKC8oaHR0cDp8aHR0cHM6fClcXC9cXC8ocGxheWVyLnx3d3cufGFwcC4pPyh2aW1lb1xcLmNvbXx5b3V0dShiZVxcLmNvbXxcXC5iZXxiZVxcLmdvb2dsZWFwaXNcXC5jb20pfHZ6YWFyXFwuY29tKVxcLyh2aWRlb1xcL3x2aWRlb3NcXC98ZW1iZWRcXC98Y2hhbm5lbHNcXC8uK1xcL3xncm91cHNcXC8uK1xcL3x3YXRjaFxcP3Y9fHZcXC8pPyhbQS1aYS16MC05Ll8lLV0qKShcXCZcXFMrKT8vKTtcblxuXHRcdFx0aWYgKGlkWzNdLmluZGV4T2YoJ3lvdXR1JykgPiAtMSkge1xuXHRcdFx0XHR0eXBlID0gJ3lvdXR1YmUnO1xuXHRcdFx0fSBlbHNlIGlmIChpZFszXS5pbmRleE9mKCd2aW1lbycpID4gLTEpIHtcblx0XHRcdFx0dHlwZSA9ICd2aW1lbyc7XG5cdFx0XHR9IGVsc2UgaWYgKGlkWzNdLmluZGV4T2YoJ3Z6YWFyJykgPiAtMSkge1xuXHRcdFx0XHR0eXBlID0gJ3Z6YWFyJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignVmlkZW8gVVJMIG5vdCBzdXBwb3J0ZWQuJyk7XG5cdFx0XHR9XG5cdFx0XHRpZCA9IGlkWzZdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgdmlkZW8gVVJMLicpO1xuXHRcdH1cblxuXHRcdHRoaXMuX3ZpZGVvc1t1cmxdID0ge1xuXHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdGlkOiBpZCxcblx0XHRcdHdpZHRoOiB3aWR0aCxcblx0XHRcdGhlaWdodDogaGVpZ2h0XG5cdFx0fTtcblxuXHRcdGl0ZW0uYXR0cignZGF0YS12aWRlbycsIHVybCk7XG5cblx0XHR0aGlzLnRodW1ibmFpbCh0YXJnZXQsIHRoaXMuX3ZpZGVvc1t1cmxdKTtcblx0fTtcblxuXHQvKipcblx0ICogQ3JlYXRlcyB2aWRlbyB0aHVtYm5haWwuXG5cdCAqIEBwcm90ZWN0ZWRcblx0ICogQHBhcmFtIHtqUXVlcnl9IHRhcmdldCAtIFRoZSB0YXJnZXQgY29udGFpbmluZyB0aGUgdmlkZW8gZGF0YS5cblx0ICogQHBhcmFtIHtPYmplY3R9IGluZm8gLSBUaGUgdmlkZW8gaW5mbyBvYmplY3QuXG5cdCAqIEBzZWUgYGZldGNoYFxuXHQgKi9cblx0VmlkZW8ucHJvdG90eXBlLnRodW1ibmFpbCA9IGZ1bmN0aW9uKHRhcmdldCwgdmlkZW8pIHtcblx0XHR2YXIgdG5MaW5rLFxuXHRcdFx0aWNvbixcblx0XHRcdHBhdGgsXG5cdFx0XHRkaW1lbnNpb25zID0gdmlkZW8ud2lkdGggJiYgdmlkZW8uaGVpZ2h0ID8gJ3N0eWxlPVwid2lkdGg6JyArIHZpZGVvLndpZHRoICsgJ3B4O2hlaWdodDonICsgdmlkZW8uaGVpZ2h0ICsgJ3B4O1wiJyA6ICcnLFxuXHRcdFx0Y3VzdG9tVG4gPSB0YXJnZXQuZmluZCgnaW1nJyksXG5cdFx0XHRzcmNUeXBlID0gJ3NyYycsXG5cdFx0XHRsYXp5Q2xhc3MgPSAnJyxcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcblx0XHRcdGNyZWF0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcblx0XHRcdFx0aWNvbiA9ICc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXBsYXktaWNvblwiPjwvZGl2Pic7XG5cblx0XHRcdFx0aWYgKHNldHRpbmdzLmxhenlMb2FkKSB7XG5cdFx0XHRcdFx0dG5MaW5rID0gJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tdG4gJyArIGxhenlDbGFzcyArICdcIiAnICsgc3JjVHlwZSArICc9XCInICsgcGF0aCArICdcIj48L2Rpdj4nO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRuTGluayA9ICc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXRuXCIgc3R5bGU9XCJvcGFjaXR5OjE7YmFja2dyb3VuZC1pbWFnZTp1cmwoJyArIHBhdGggKyAnKVwiPjwvZGl2Pic7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGFyZ2V0LmFmdGVyKHRuTGluayk7XG5cdFx0XHRcdHRhcmdldC5hZnRlcihpY29uKTtcblx0XHRcdH07XG5cblx0XHQvLyB3cmFwIHZpZGVvIGNvbnRlbnQgaW50byBvd2wtdmlkZW8td3JhcHBlciBkaXZcblx0XHR0YXJnZXQud3JhcCgnPGRpdiBjbGFzcz1cIm93bC12aWRlby13cmFwcGVyXCInICsgZGltZW5zaW9ucyArICc+PC9kaXY+Jyk7XG5cblx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCkge1xuXHRcdFx0c3JjVHlwZSA9ICdkYXRhLXNyYyc7XG5cdFx0XHRsYXp5Q2xhc3MgPSAnb3dsLWxhenknO1xuXHRcdH1cblxuXHRcdC8vIGN1c3RvbSB0aHVtYm5haWxcblx0XHRpZiAoY3VzdG9tVG4ubGVuZ3RoKSB7XG5cdFx0XHRjcmVhdGUoY3VzdG9tVG4uYXR0cihzcmNUeXBlKSk7XG5cdFx0XHRjdXN0b21Ubi5yZW1vdmUoKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAodmlkZW8udHlwZSA9PT0gJ3lvdXR1YmUnKSB7XG5cdFx0XHRwYXRoID0gXCIvL2ltZy55b3V0dWJlLmNvbS92aS9cIiArIHZpZGVvLmlkICsgXCIvaHFkZWZhdWx0LmpwZ1wiO1xuXHRcdFx0Y3JlYXRlKHBhdGgpO1xuXHRcdH0gZWxzZSBpZiAodmlkZW8udHlwZSA9PT0gJ3ZpbWVvJykge1xuXHRcdFx0JC5hamF4KHtcblx0XHRcdFx0dHlwZTogJ0dFVCcsXG5cdFx0XHRcdHVybDogJy8vdmltZW8uY29tL2FwaS92Mi92aWRlby8nICsgdmlkZW8uaWQgKyAnLmpzb24nLFxuXHRcdFx0XHRqc29ucDogJ2NhbGxiYWNrJyxcblx0XHRcdFx0ZGF0YVR5cGU6ICdqc29ucCcsXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0XHRwYXRoID0gZGF0YVswXS50aHVtYm5haWxfbGFyZ2U7XG5cdFx0XHRcdFx0Y3JlYXRlKHBhdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKHZpZGVvLnR5cGUgPT09ICd2emFhcicpIHtcblx0XHRcdCQuYWpheCh7XG5cdFx0XHRcdHR5cGU6ICdHRVQnLFxuXHRcdFx0XHR1cmw6ICcvL3Z6YWFyLmNvbS9hcGkvdmlkZW9zLycgKyB2aWRlby5pZCArICcuanNvbicsXG5cdFx0XHRcdGpzb25wOiAnY2FsbGJhY2snLFxuXHRcdFx0XHRkYXRhVHlwZTogJ2pzb25wJyxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRcdHBhdGggPSBkYXRhLmZyYW1lZ3JhYl91cmw7XG5cdFx0XHRcdFx0Y3JlYXRlKHBhdGgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqIFN0b3BzIHRoZSBjdXJyZW50IHZpZGVvLlxuXHQgKiBAcHVibGljXG5cdCAqL1xuXHRWaWRlby5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuX2NvcmUudHJpZ2dlcignc3RvcCcsIG51bGwsICd2aWRlbycpO1xuXHRcdHRoaXMuX3BsYXlpbmcuZmluZCgnLm93bC12aWRlby1mcmFtZScpLnJlbW92ZSgpO1xuXHRcdHRoaXMuX3BsYXlpbmcucmVtb3ZlQ2xhc3MoJ293bC12aWRlby1wbGF5aW5nJyk7XG5cdFx0dGhpcy5fcGxheWluZyA9IG51bGw7XG5cdFx0dGhpcy5fY29yZS5sZWF2ZSgncGxheWluZycpO1xuXHRcdHRoaXMuX2NvcmUudHJpZ2dlcignc3RvcHBlZCcsIG51bGwsICd2aWRlbycpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBTdGFydHMgdGhlIGN1cnJlbnQgdmlkZW8uXG5cdCAqIEBwdWJsaWNcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgYXJndW1lbnRzLlxuXHQgKi9cblx0VmlkZW8ucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbihldmVudCkge1xuXHRcdHZhciB0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCksXG5cdFx0XHRpdGVtID0gdGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLFxuXHRcdFx0dmlkZW8gPSB0aGlzLl92aWRlb3NbaXRlbS5hdHRyKCdkYXRhLXZpZGVvJyldLFxuXHRcdFx0d2lkdGggPSB2aWRlby53aWR0aCB8fCAnMTAwJScsXG5cdFx0XHRoZWlnaHQgPSB2aWRlby5oZWlnaHQgfHwgdGhpcy5fY29yZS4kc3RhZ2UuaGVpZ2h0KCksXG5cdFx0XHRodG1sO1xuXG5cdFx0aWYgKHRoaXMuX3BsYXlpbmcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9jb3JlLmVudGVyKCdwbGF5aW5nJyk7XG5cdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdwbGF5JywgbnVsbCwgJ3ZpZGVvJyk7XG5cblx0XHRpdGVtID0gdGhpcy5fY29yZS5pdGVtcyh0aGlzLl9jb3JlLnJlbGF0aXZlKGl0ZW0uaW5kZXgoKSkpO1xuXG5cdFx0dGhpcy5fY29yZS5yZXNldChpdGVtLmluZGV4KCkpO1xuXG5cdFx0aWYgKHZpZGVvLnR5cGUgPT09ICd5b3V0dWJlJykge1xuXHRcdFx0aHRtbCA9ICc8aWZyYW1lIHdpZHRoPVwiJyArIHdpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBoZWlnaHQgKyAnXCIgc3JjPVwiLy93d3cueW91dHViZS5jb20vZW1iZWQvJyArXG5cdFx0XHRcdHZpZGVvLmlkICsgJz9hdXRvcGxheT0xJnJlbD0wJnY9JyArIHZpZGVvLmlkICsgJ1wiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nO1xuXHRcdH0gZWxzZSBpZiAodmlkZW8udHlwZSA9PT0gJ3ZpbWVvJykge1xuXHRcdFx0aHRtbCA9ICc8aWZyYW1lIHNyYz1cIi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8nICsgdmlkZW8uaWQgK1xuXHRcdFx0XHQnP2F1dG9wbGF5PTFcIiB3aWR0aD1cIicgKyB3aWR0aCArICdcIiBoZWlnaHQ9XCInICsgaGVpZ2h0ICtcblx0XHRcdFx0J1wiIGZyYW1lYm9yZGVyPVwiMFwiIHdlYmtpdGFsbG93ZnVsbHNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPic7XG5cdFx0fSBlbHNlIGlmICh2aWRlby50eXBlID09PSAndnphYXInKSB7XG5cdFx0XHRodG1sID0gJzxpZnJhbWUgZnJhbWVib3JkZXI9XCIwXCInICsgJ2hlaWdodD1cIicgKyBoZWlnaHQgKyAnXCInICsgJ3dpZHRoPVwiJyArIHdpZHRoICtcblx0XHRcdFx0J1wiIGFsbG93ZnVsbHNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gd2Via2l0QWxsb3dGdWxsU2NyZWVuICcgK1xuXHRcdFx0XHQnc3JjPVwiLy92aWV3LnZ6YWFyLmNvbS8nICsgdmlkZW8uaWQgKyAnL3BsYXllcj9hdXRvcGxheT10cnVlXCI+PC9pZnJhbWU+Jztcblx0XHR9XG5cblx0XHQkKCc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLWZyYW1lXCI+JyArIGh0bWwgKyAnPC9kaXY+JykuaW5zZXJ0QWZ0ZXIoaXRlbS5maW5kKCcub3dsLXZpZGVvJykpO1xuXG5cdFx0dGhpcy5fcGxheWluZyA9IGl0ZW0uYWRkQ2xhc3MoJ293bC12aWRlby1wbGF5aW5nJyk7XG5cdH07XG5cblx0LyoqXG5cdCAqIENoZWNrcyB3aGV0aGVyIGFuIHZpZGVvIGlzIGN1cnJlbnRseSBpbiBmdWxsIHNjcmVlbiBtb2RlIG9yIG5vdC5cblx0ICogQHRvZG8gQmFkIHN0eWxlIGJlY2F1c2UgbG9va3MgbGlrZSBhIHJlYWRvbmx5IG1ldGhvZCBidXQgY2hhbmdlcyBtZW1iZXJzLlxuXHQgKiBAcHJvdGVjdGVkXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufVxuXHQgKi9cblx0VmlkZW8ucHJvdG90eXBlLmlzSW5GdWxsU2NyZWVuID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW1lbnQgPSBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fFxuXHRcdFx0XHRkb2N1bWVudC53ZWJraXRGdWxsc2NyZWVuRWxlbWVudDtcblxuXHRcdHJldHVybiBlbGVtZW50ICYmICQoZWxlbWVudCkucGFyZW50KCkuaGFzQ2xhc3MoJ293bC12aWRlby1mcmFtZScpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxuXHQgKi9cblx0VmlkZW8ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XG5cblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZignY2xpY2sub3dsLnZpZGVvJyk7XG5cblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcblx0XHR9XG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XG5cdFx0fVxuXHR9O1xuXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5WaWRlbyA9IFZpZGVvO1xuXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XG4iLCIvKiFcbiAqIGpRdWVyeSBNb3VzZXdoZWVsIDMuMS4xM1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqL1xuXG4oZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICBpZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZS9Db21tb25KUyBzdHlsZSBmb3IgQnJvd3NlcmlmeVxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICAgIGZhY3RvcnkoalF1ZXJ5KTtcbiAgICB9XG59KGZ1bmN0aW9uICgkKSB7XG5cbiAgICB2YXIgdG9GaXggID0gWyd3aGVlbCcsICdtb3VzZXdoZWVsJywgJ0RPTU1vdXNlU2Nyb2xsJywgJ01vek1vdXNlUGl4ZWxTY3JvbGwnXSxcbiAgICAgICAgdG9CaW5kID0gKCAnb253aGVlbCcgaW4gZG9jdW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID49IDkgKSA/XG4gICAgICAgICAgICAgICAgICAgIFsnd2hlZWwnXSA6IFsnbW91c2V3aGVlbCcsICdEb21Nb3VzZVNjcm9sbCcsICdNb3pNb3VzZVBpeGVsU2Nyb2xsJ10sXG4gICAgICAgIHNsaWNlICA9IEFycmF5LnByb3RvdHlwZS5zbGljZSxcbiAgICAgICAgbnVsbExvd2VzdERlbHRhVGltZW91dCwgbG93ZXN0RGVsdGE7XG5cbiAgICBpZiAoICQuZXZlbnQuZml4SG9va3MgKSB7XG4gICAgICAgIGZvciAoIHZhciBpID0gdG9GaXgubGVuZ3RoOyBpOyApIHtcbiAgICAgICAgICAgICQuZXZlbnQuZml4SG9va3NbIHRvRml4Wy0taV0gXSA9ICQuZXZlbnQubW91c2VIb29rcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzcGVjaWFsID0gJC5ldmVudC5zcGVjaWFsLm1vdXNld2hlZWwgPSB7XG4gICAgICAgIHZlcnNpb246ICczLjEuMTInLFxuXG4gICAgICAgIHNldHVwOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5hZGRFdmVudExpc3RlbmVyICkge1xuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gdG9CaW5kLmxlbmd0aDsgaTsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciggdG9CaW5kWy0taV0sIGhhbmRsZXIsIGZhbHNlICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9ubW91c2V3aGVlbCA9IGhhbmRsZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgbGluZSBoZWlnaHQgYW5kIHBhZ2UgaGVpZ2h0IGZvciB0aGlzIHBhcnRpY3VsYXIgZWxlbWVudFxuICAgICAgICAgICAgJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLWxpbmUtaGVpZ2h0Jywgc3BlY2lhbC5nZXRMaW5lSGVpZ2h0KHRoaXMpKTtcbiAgICAgICAgICAgICQuZGF0YSh0aGlzLCAnbW91c2V3aGVlbC1wYWdlLWhlaWdodCcsIHNwZWNpYWwuZ2V0UGFnZUhlaWdodCh0aGlzKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdGVhcmRvd246IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSB0b0JpbmQubGVuZ3RoOyBpOyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCB0b0JpbmRbLS1pXSwgaGFuZGxlciwgZmFsc2UgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25tb3VzZXdoZWVsID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENsZWFuIHVwIHRoZSBkYXRhIHdlIGFkZGVkIHRvIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAkLnJlbW92ZURhdGEodGhpcywgJ21vdXNld2hlZWwtbGluZS1oZWlnaHQnKTtcbiAgICAgICAgICAgICQucmVtb3ZlRGF0YSh0aGlzLCAnbW91c2V3aGVlbC1wYWdlLWhlaWdodCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldExpbmVIZWlnaHQ6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgIHZhciAkZWxlbSA9ICQoZWxlbSksXG4gICAgICAgICAgICAgICAgJHBhcmVudCA9ICRlbGVtWydvZmZzZXRQYXJlbnQnIGluICQuZm4gPyAnb2Zmc2V0UGFyZW50JyA6ICdwYXJlbnQnXSgpO1xuICAgICAgICAgICAgaWYgKCEkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICRwYXJlbnQgPSAkKCdib2R5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoJHBhcmVudC5jc3MoJ2ZvbnRTaXplJyksIDEwKSB8fCBwYXJzZUludCgkZWxlbS5jc3MoJ2ZvbnRTaXplJyksIDEwKSB8fCAxNjtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRQYWdlSGVpZ2h0OiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gJChlbGVtKS5oZWlnaHQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgYWRqdXN0T2xkRGVsdGFzOiB0cnVlLCAvLyBzZWUgc2hvdWxkQWRqdXN0T2xkRGVsdGFzKCkgYmVsb3dcbiAgICAgICAgICAgIG5vcm1hbGl6ZU9mZnNldDogdHJ1ZSAgLy8gY2FsbHMgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZvciBlYWNoIGV2ZW50XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgJC5mbi5leHRlbmQoe1xuICAgICAgICBtb3VzZXdoZWVsOiBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgcmV0dXJuIGZuID8gdGhpcy5iaW5kKCdtb3VzZXdoZWVsJywgZm4pIDogdGhpcy50cmlnZ2VyKCdtb3VzZXdoZWVsJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdW5tb3VzZXdoZWVsOiBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5iaW5kKCdtb3VzZXdoZWVsJywgZm4pO1xuICAgICAgICB9XG4gICAgfSk7XG5cblxuICAgIGZ1bmN0aW9uIGhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgdmFyIG9yZ0V2ZW50ICAgPSBldmVudCB8fCB3aW5kb3cuZXZlbnQsXG4gICAgICAgICAgICBhcmdzICAgICAgID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgZGVsdGEgICAgICA9IDAsXG4gICAgICAgICAgICBkZWx0YVggICAgID0gMCxcbiAgICAgICAgICAgIGRlbHRhWSAgICAgPSAwLFxuICAgICAgICAgICAgYWJzRGVsdGEgICA9IDAsXG4gICAgICAgICAgICBvZmZzZXRYICAgID0gMCxcbiAgICAgICAgICAgIG9mZnNldFkgICAgPSAwO1xuICAgICAgICBldmVudCA9ICQuZXZlbnQuZml4KG9yZ0V2ZW50KTtcbiAgICAgICAgZXZlbnQudHlwZSA9ICdtb3VzZXdoZWVsJztcblxuICAgICAgICAvLyBPbGQgc2Nob29sIHNjcm9sbHdoZWVsIGRlbHRhXG4gICAgICAgIGlmICggJ2RldGFpbCcgICAgICBpbiBvcmdFdmVudCApIHsgZGVsdGFZID0gb3JnRXZlbnQuZGV0YWlsICogLTE7ICAgICAgfVxuICAgICAgICBpZiAoICd3aGVlbERlbHRhJyAgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LndoZWVsRGVsdGE7ICAgICAgIH1cbiAgICAgICAgaWYgKCAnd2hlZWxEZWx0YVknIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVkgPSBvcmdFdmVudC53aGVlbERlbHRhWTsgICAgICB9XG4gICAgICAgIGlmICggJ3doZWVsRGVsdGFYJyBpbiBvcmdFdmVudCApIHsgZGVsdGFYID0gb3JnRXZlbnQud2hlZWxEZWx0YVggKiAtMTsgfVxuXG4gICAgICAgIC8vIEZpcmVmb3ggPCAxNyBob3Jpem9udGFsIHNjcm9sbGluZyByZWxhdGVkIHRvIERPTU1vdXNlU2Nyb2xsIGV2ZW50XG4gICAgICAgIGlmICggJ2F4aXMnIGluIG9yZ0V2ZW50ICYmIG9yZ0V2ZW50LmF4aXMgPT09IG9yZ0V2ZW50LkhPUklaT05UQUxfQVhJUyApIHtcbiAgICAgICAgICAgIGRlbHRhWCA9IGRlbHRhWSAqIC0xO1xuICAgICAgICAgICAgZGVsdGFZID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBkZWx0YSB0byBiZSBkZWx0YVkgb3IgZGVsdGFYIGlmIGRlbHRhWSBpcyAwIGZvciBiYWNrd2FyZHMgY29tcGF0YWJpbGl0aXlcbiAgICAgICAgZGVsdGEgPSBkZWx0YVkgPT09IDAgPyBkZWx0YVggOiBkZWx0YVk7XG5cbiAgICAgICAgLy8gTmV3IHNjaG9vbCB3aGVlbCBkZWx0YSAod2hlZWwgZXZlbnQpXG4gICAgICAgIGlmICggJ2RlbHRhWScgaW4gb3JnRXZlbnQgKSB7XG4gICAgICAgICAgICBkZWx0YVkgPSBvcmdFdmVudC5kZWx0YVkgKiAtMTtcbiAgICAgICAgICAgIGRlbHRhICA9IGRlbHRhWTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoICdkZWx0YVgnIGluIG9yZ0V2ZW50ICkge1xuICAgICAgICAgICAgZGVsdGFYID0gb3JnRXZlbnQuZGVsdGFYO1xuICAgICAgICAgICAgaWYgKCBkZWx0YVkgPT09IDAgKSB7IGRlbHRhICA9IGRlbHRhWCAqIC0xOyB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBObyBjaGFuZ2UgYWN0dWFsbHkgaGFwcGVuZWQsIG5vIHJlYXNvbiB0byBnbyBhbnkgZnVydGhlclxuICAgICAgICBpZiAoIGRlbHRhWSA9PT0gMCAmJiBkZWx0YVggPT09IDAgKSB7IHJldHVybjsgfVxuXG4gICAgICAgIC8vIE5lZWQgdG8gY29udmVydCBsaW5lcyBhbmQgcGFnZXMgdG8gcGl4ZWxzIGlmIHdlIGFyZW4ndCBhbHJlYWR5IGluIHBpeGVsc1xuICAgICAgICAvLyBUaGVyZSBhcmUgdGhyZWUgZGVsdGEgbW9kZXM6XG4gICAgICAgIC8vICAgKiBkZWx0YU1vZGUgMCBpcyBieSBwaXhlbHMsIG5vdGhpbmcgdG8gZG9cbiAgICAgICAgLy8gICAqIGRlbHRhTW9kZSAxIGlzIGJ5IGxpbmVzXG4gICAgICAgIC8vICAgKiBkZWx0YU1vZGUgMiBpcyBieSBwYWdlc1xuICAgICAgICBpZiAoIG9yZ0V2ZW50LmRlbHRhTW9kZSA9PT0gMSApIHtcbiAgICAgICAgICAgIHZhciBsaW5lSGVpZ2h0ID0gJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLWxpbmUtaGVpZ2h0Jyk7XG4gICAgICAgICAgICBkZWx0YSAgKj0gbGluZUhlaWdodDtcbiAgICAgICAgICAgIGRlbHRhWSAqPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgZGVsdGFYICo9IGxpbmVIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIG9yZ0V2ZW50LmRlbHRhTW9kZSA9PT0gMiApIHtcbiAgICAgICAgICAgIHZhciBwYWdlSGVpZ2h0ID0gJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLXBhZ2UtaGVpZ2h0Jyk7XG4gICAgICAgICAgICBkZWx0YSAgKj0gcGFnZUhlaWdodDtcbiAgICAgICAgICAgIGRlbHRhWSAqPSBwYWdlSGVpZ2h0O1xuICAgICAgICAgICAgZGVsdGFYICo9IHBhZ2VIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSBsb3dlc3QgYWJzb2x1dGUgZGVsdGEgdG8gbm9ybWFsaXplIHRoZSBkZWx0YSB2YWx1ZXNcbiAgICAgICAgYWJzRGVsdGEgPSBNYXRoLm1heCggTWF0aC5hYnMoZGVsdGFZKSwgTWF0aC5hYnMoZGVsdGFYKSApO1xuXG4gICAgICAgIGlmICggIWxvd2VzdERlbHRhIHx8IGFic0RlbHRhIDwgbG93ZXN0RGVsdGEgKSB7XG4gICAgICAgICAgICBsb3dlc3REZWx0YSA9IGFic0RlbHRhO1xuXG4gICAgICAgICAgICAvLyBBZGp1c3Qgb2xkZXIgZGVsdGFzIGlmIG5lY2Vzc2FyeVxuICAgICAgICAgICAgaWYgKCBzaG91bGRBZGp1c3RPbGREZWx0YXMob3JnRXZlbnQsIGFic0RlbHRhKSApIHtcbiAgICAgICAgICAgICAgICBsb3dlc3REZWx0YSAvPSA0MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkanVzdCBvbGRlciBkZWx0YXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgIGlmICggc2hvdWxkQWRqdXN0T2xkRGVsdGFzKG9yZ0V2ZW50LCBhYnNEZWx0YSkgKSB7XG4gICAgICAgICAgICAvLyBEaXZpZGUgYWxsIHRoZSB0aGluZ3MgYnkgNDAhXG4gICAgICAgICAgICBkZWx0YSAgLz0gNDA7XG4gICAgICAgICAgICBkZWx0YVggLz0gNDA7XG4gICAgICAgICAgICBkZWx0YVkgLz0gNDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgYSB3aG9sZSwgbm9ybWFsaXplZCB2YWx1ZSBmb3IgdGhlIGRlbHRhc1xuICAgICAgICBkZWx0YSAgPSBNYXRoWyBkZWx0YSAgPj0gMSA/ICdmbG9vcicgOiAnY2VpbCcgXShkZWx0YSAgLyBsb3dlc3REZWx0YSk7XG4gICAgICAgIGRlbHRhWCA9IE1hdGhbIGRlbHRhWCA+PSAxID8gJ2Zsb29yJyA6ICdjZWlsJyBdKGRlbHRhWCAvIGxvd2VzdERlbHRhKTtcbiAgICAgICAgZGVsdGFZID0gTWF0aFsgZGVsdGFZID49IDEgPyAnZmxvb3InIDogJ2NlaWwnIF0oZGVsdGFZIC8gbG93ZXN0RGVsdGEpO1xuXG4gICAgICAgIC8vIE5vcm1hbGlzZSBvZmZzZXRYIGFuZCBvZmZzZXRZIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKCBzcGVjaWFsLnNldHRpbmdzLm5vcm1hbGl6ZU9mZnNldCAmJiB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCApIHtcbiAgICAgICAgICAgIHZhciBib3VuZGluZ1JlY3QgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgb2Zmc2V0WCA9IGV2ZW50LmNsaWVudFggLSBib3VuZGluZ1JlY3QubGVmdDtcbiAgICAgICAgICAgIG9mZnNldFkgPSBldmVudC5jbGllbnRZIC0gYm91bmRpbmdSZWN0LnRvcDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBpbmZvcm1hdGlvbiB0byB0aGUgZXZlbnQgb2JqZWN0XG4gICAgICAgIGV2ZW50LmRlbHRhWCA9IGRlbHRhWDtcbiAgICAgICAgZXZlbnQuZGVsdGFZID0gZGVsdGFZO1xuICAgICAgICBldmVudC5kZWx0YUZhY3RvciA9IGxvd2VzdERlbHRhO1xuICAgICAgICBldmVudC5vZmZzZXRYID0gb2Zmc2V0WDtcbiAgICAgICAgZXZlbnQub2Zmc2V0WSA9IG9mZnNldFk7XG4gICAgICAgIC8vIEdvIGFoZWFkIGFuZCBzZXQgZGVsdGFNb2RlIHRvIDAgc2luY2Ugd2UgY29udmVydGVkIHRvIHBpeGVsc1xuICAgICAgICAvLyBBbHRob3VnaCB0aGlzIGlzIGEgbGl0dGxlIG9kZCBzaW5jZSB3ZSBvdmVyd3JpdGUgdGhlIGRlbHRhWC9ZXG4gICAgICAgIC8vIHByb3BlcnRpZXMgd2l0aCBub3JtYWxpemVkIGRlbHRhcy5cbiAgICAgICAgZXZlbnQuZGVsdGFNb2RlID0gMDtcblxuICAgICAgICAvLyBBZGQgZXZlbnQgYW5kIGRlbHRhIHRvIHRoZSBmcm9udCBvZiB0aGUgYXJndW1lbnRzXG4gICAgICAgIGFyZ3MudW5zaGlmdChldmVudCwgZGVsdGEsIGRlbHRhWCwgZGVsdGFZKTtcblxuICAgICAgICAvLyBDbGVhcm91dCBsb3dlc3REZWx0YSBhZnRlciBzb21ldGltZSB0byBiZXR0ZXJcbiAgICAgICAgLy8gaGFuZGxlIG11bHRpcGxlIGRldmljZSB0eXBlcyB0aGF0IGdpdmUgZGlmZmVyZW50XG4gICAgICAgIC8vIGEgZGlmZmVyZW50IGxvd2VzdERlbHRhXG4gICAgICAgIC8vIEV4OiB0cmFja3BhZCA9IDMgYW5kIG1vdXNlIHdoZWVsID0gMTIwXG4gICAgICAgIGlmIChudWxsTG93ZXN0RGVsdGFUaW1lb3V0KSB7IGNsZWFyVGltZW91dChudWxsTG93ZXN0RGVsdGFUaW1lb3V0KTsgfVxuICAgICAgICBudWxsTG93ZXN0RGVsdGFUaW1lb3V0ID0gc2V0VGltZW91dChudWxsTG93ZXN0RGVsdGEsIDIwMCk7XG5cbiAgICAgICAgcmV0dXJuICgkLmV2ZW50LmRpc3BhdGNoIHx8ICQuZXZlbnQuaGFuZGxlKS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBudWxsTG93ZXN0RGVsdGEoKSB7XG4gICAgICAgIGxvd2VzdERlbHRhID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaG91bGRBZGp1c3RPbGREZWx0YXMob3JnRXZlbnQsIGFic0RlbHRhKSB7XG4gICAgICAgIC8vIElmIHRoaXMgaXMgYW4gb2xkZXIgZXZlbnQgYW5kIHRoZSBkZWx0YSBpcyBkaXZpc2FibGUgYnkgMTIwLFxuICAgICAgICAvLyB0aGVuIHdlIGFyZSBhc3N1bWluZyB0aGF0IHRoZSBicm93c2VyIGlzIHRyZWF0aW5nIHRoaXMgYXMgYW5cbiAgICAgICAgLy8gb2xkZXIgbW91c2Ugd2hlZWwgZXZlbnQgYW5kIHRoYXQgd2Ugc2hvdWxkIGRpdmlkZSB0aGUgZGVsdGFzXG4gICAgICAgIC8vIGJ5IDQwIHRvIHRyeSBhbmQgZ2V0IGEgbW9yZSB1c2FibGUgZGVsdGFGYWN0b3IuXG4gICAgICAgIC8vIFNpZGUgbm90ZSwgdGhpcyBhY3R1YWxseSBpbXBhY3RzIHRoZSByZXBvcnRlZCBzY3JvbGwgZGlzdGFuY2VcbiAgICAgICAgLy8gaW4gb2xkZXIgYnJvd3NlcnMgYW5kIGNhbiBjYXVzZSBzY3JvbGxpbmcgdG8gYmUgc2xvd2VyIHRoYW4gbmF0aXZlLlxuICAgICAgICAvLyBUdXJuIHRoaXMgb2ZmIGJ5IHNldHRpbmcgJC5ldmVudC5zcGVjaWFsLm1vdXNld2hlZWwuc2V0dGluZ3MuYWRqdXN0T2xkRGVsdGFzIHRvIGZhbHNlLlxuICAgICAgICByZXR1cm4gc3BlY2lhbC5zZXR0aW5ncy5hZGp1c3RPbGREZWx0YXMgJiYgb3JnRXZlbnQudHlwZSA9PT0gJ21vdXNld2hlZWwnICYmIGFic0RlbHRhICUgMTIwID09PSAwO1xuICAgIH1cblxufSkpO1xuIiwiLyohIGxpZ2h0Z2FsbGVyeSAtIHYxLjMuOSAtIDIwMTctMDItMDVcbiogaHR0cDovL3NhY2hpbmNob29sdXIuZ2l0aHViLmlvL2xpZ2h0R2FsbGVyeS9cbiogQ29weXJpZ2h0IChjKSAyMDE3IFNhY2hpbiBOOyBMaWNlbnNlZCBHUEx2MyAqL1xuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZSB1bmxlc3MgYW1kTW9kdWxlSWQgaXMgc2V0XG4gICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZ1bmN0aW9uIChhMCkge1xuICAgICAgcmV0dXJuIChmYWN0b3J5KGEwKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgLy8gbGlrZSBOb2RlLlxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gIH0gZWxzZSB7XG4gICAgZmFjdG9yeShqUXVlcnkpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uICgkKSB7XG5cbihmdW5jdGlvbigpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgZGVmYXVsdHMgPSB7XG5cbiAgICAgICAgbW9kZTogJ2xnLXNsaWRlJyxcblxuICAgICAgICAvLyBFeCA6ICdlYXNlJ1xuICAgICAgICBjc3NFYXNpbmc6ICdlYXNlJyxcblxuICAgICAgICAvLydmb3IganF1ZXJ5IGFuaW1hdGlvbidcbiAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgc3BlZWQ6IDYwMCxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIGFkZENsYXNzOiAnJyxcbiAgICAgICAgc3RhcnRDbGFzczogJ2xnLXN0YXJ0LXpvb20nLFxuICAgICAgICBiYWNrZHJvcER1cmF0aW9uOiAxNTAsXG4gICAgICAgIGhpZGVCYXJzRGVsYXk6IDYwMDAsXG5cbiAgICAgICAgdXNlTGVmdDogZmFsc2UsXG5cbiAgICAgICAgY2xvc2FibGU6IHRydWUsXG4gICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgIGVzY0tleTogdHJ1ZSxcbiAgICAgICAga2V5UHJlc3M6IHRydWUsXG4gICAgICAgIGNvbnRyb2xzOiB0cnVlLFxuICAgICAgICBzbGlkZUVuZEFuaW1hdG9pbjogdHJ1ZSxcbiAgICAgICAgaGlkZUNvbnRyb2xPbkVuZDogZmFsc2UsXG4gICAgICAgIG1vdXNld2hlZWw6IHRydWUsXG5cbiAgICAgICAgZ2V0Q2FwdGlvbkZyb21UaXRsZU9yQWx0OiB0cnVlLFxuXG4gICAgICAgIC8vIC5sZy1pdGVtIHx8ICcubGctc3ViLWh0bWwnXG4gICAgICAgIGFwcGVuZFN1Ykh0bWxUbzogJy5sZy1zdWItaHRtbCcsXG5cbiAgICAgICAgc3ViSHRtbFNlbGVjdG9yUmVsYXRpdmU6IGZhbHNlLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzYyBudW1iZXIgb2YgcHJlbG9hZCBzbGlkZXNcbiAgICAgICAgICogd2lsbCBleGljdXRlIG9ubHkgYWZ0ZXIgdGhlIGN1cnJlbnQgc2xpZGUgaXMgZnVsbHkgbG9hZGVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXggeW91IGNsaWNrZWQgb24gNHRoIGltYWdlIGFuZCBpZiBwcmVsb2FkID0gMSB0aGVuIDNyZCBzbGlkZSBhbmQgNXRoXG4gICAgICAgICAqIHNsaWRlIHdpbGwgYmUgbG9hZGVkIGluIHRoZSBiYWNrZ3JvdW5kIGFmdGVyIHRoZSA0dGggc2xpZGUgaXMgZnVsbHkgbG9hZGVkLi5cbiAgICAgICAgICogaWYgcHJlbG9hZCBpcyAyIHRoZW4gMm5kIDNyZCA1dGggNnRoIHNsaWRlcyB3aWxsIGJlIHByZWxvYWRlZC4uIC4uLiAuLi5cbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIHByZWxvYWQ6IDEsXG4gICAgICAgIHNob3dBZnRlckxvYWQ6IHRydWUsXG4gICAgICAgIHNlbGVjdG9yOiAnJyxcbiAgICAgICAgc2VsZWN0V2l0aGluOiAnJyxcbiAgICAgICAgbmV4dEh0bWw6ICcnLFxuICAgICAgICBwcmV2SHRtbDogJycsXG5cbiAgICAgICAgLy8gMCwgMVxuICAgICAgICBpbmRleDogZmFsc2UsXG5cbiAgICAgICAgaWZyYW1lTWF4V2lkdGg6ICcxMDAlJyxcblxuICAgICAgICBkb3dubG9hZDogdHJ1ZSxcbiAgICAgICAgY291bnRlcjogdHJ1ZSxcbiAgICAgICAgYXBwZW5kQ291bnRlclRvOiAnLmxnLXRvb2xiYXInLFxuXG4gICAgICAgIHN3aXBlVGhyZXNob2xkOiA1MCxcbiAgICAgICAgZW5hYmxlU3dpcGU6IHRydWUsXG4gICAgICAgIGVuYWJsZURyYWc6IHRydWUsXG5cbiAgICAgICAgZHluYW1pYzogZmFsc2UsXG4gICAgICAgIGR5bmFtaWNFbDogW10sXG4gICAgICAgIGdhbGxlcnlJZDogMVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBQbHVnaW4oZWxlbWVudCwgb3B0aW9ucykge1xuXG4gICAgICAgIC8vIEN1cnJlbnQgbGlnaHRHYWxsZXJ5IGVsZW1lbnRcbiAgICAgICAgdGhpcy5lbCA9IGVsZW1lbnQ7XG5cbiAgICAgICAgLy8gQ3VycmVudCBqcXVlcnkgZWxlbWVudFxuICAgICAgICB0aGlzLiRlbCA9ICQoZWxlbWVudCk7XG5cbiAgICAgICAgLy8gbGlnaHRHYWxsZXJ5IHNldHRpbmdzXG4gICAgICAgIHRoaXMucyA9ICQuZXh0ZW5kKHt9LCBkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgICAgLy8gV2hlbiB1c2luZyBkeW5hbWljIG1vZGUsIGVuc3VyZSBkeW5hbWljRWwgaXMgYW4gYXJyYXlcbiAgICAgICAgaWYgKHRoaXMucy5keW5hbWljICYmIHRoaXMucy5keW5hbWljRWwgIT09ICd1bmRlZmluZWQnICYmIHRoaXMucy5keW5hbWljRWwuY29uc3RydWN0b3IgPT09IEFycmF5ICYmICF0aGlzLnMuZHluYW1pY0VsLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgKCdXaGVuIHVzaW5nIGR5bmFtaWMgbW9kZSwgeW91IG11c3QgYWxzbyBkZWZpbmUgZHluYW1pY0VsIGFzIGFuIEFycmF5LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGlnaHRHYWxsZXJ5IG1vZHVsZXNcbiAgICAgICAgdGhpcy5tb2R1bGVzID0ge307XG5cbiAgICAgICAgLy8gZmFsc2Ugd2hlbiBsaWdodGdhbGxlcnkgY29tcGxldGUgZmlyc3Qgc2xpZGU7XG4gICAgICAgIHRoaXMubEdhbGxlcnlPbiA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMubGdCdXN5ID0gZmFsc2U7XG5cbiAgICAgICAgLy8gVGltZW91dCBmdW5jdGlvbiBmb3IgaGlkaW5nIGNvbnRyb2xzO1xuICAgICAgICB0aGlzLmhpZGVCYXJ0aW1lb3V0ID0gZmFsc2U7XG5cbiAgICAgICAgLy8gVG8gZGV0ZXJtaW5lIGJyb3dzZXIgc3VwcG9ydHMgZm9yIHRvdWNoIGV2ZW50cztcbiAgICAgICAgdGhpcy5pc1RvdWNoID0gKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG5cbiAgICAgICAgLy8gRGlzYWJsZSBoaWRlQ29udHJvbE9uRW5kIGlmIHNpbGRlRW5kQW5pbWF0aW9uIGlzIHRydWVcbiAgICAgICAgaWYgKHRoaXMucy5zbGlkZUVuZEFuaW1hdG9pbikge1xuICAgICAgICAgICAgdGhpcy5zLmhpZGVDb250cm9sT25FbmQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdhbGxlcnkgaXRlbXNcbiAgICAgICAgaWYgKHRoaXMucy5keW5hbWljKSB7XG4gICAgICAgICAgICB0aGlzLiRpdGVtcyA9IHRoaXMucy5keW5hbWljRWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zLnNlbGVjdG9yID09PSAndGhpcycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRpdGVtcyA9IHRoaXMuJGVsO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnMuc2VsZWN0b3IgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucy5zZWxlY3RXaXRoaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kaXRlbXMgPSAkKHRoaXMucy5zZWxlY3RXaXRoaW4pLmZpbmQodGhpcy5zLnNlbGVjdG9yKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRpdGVtcyA9IHRoaXMuJGVsLmZpbmQoJCh0aGlzLnMuc2VsZWN0b3IpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zID0gdGhpcy4kZWwuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIC5sZy1pdGVtXG4gICAgICAgIHRoaXMuJHNsaWRlID0gJyc7XG5cbiAgICAgICAgLy8gLmxnLW91dGVyXG4gICAgICAgIHRoaXMuJG91dGVyID0gJyc7XG5cbiAgICAgICAgdGhpcy5pbml0KCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgUGx1Z2luLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAvLyBzLnByZWxvYWQgc2hvdWxkIG5vdCBiZSBtb3JlIHRoYW4gJGl0ZW0ubGVuZ3RoXG4gICAgICAgIGlmIChfdGhpcy5zLnByZWxvYWQgPiBfdGhpcy4kaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBfdGhpcy5zLnByZWxvYWQgPSBfdGhpcy4kaXRlbXMubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgZHluYW1pYyBvcHRpb24gaXMgZW5hYmxlZCBleGVjdXRlIGltbWVkaWF0ZWx5XG4gICAgICAgIHZhciBfaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgICBpZiAoX2hhc2guaW5kZXhPZignbGc9JyArIHRoaXMucy5nYWxsZXJ5SWQpID4gMCkge1xuXG4gICAgICAgICAgICBfdGhpcy5pbmRleCA9IHBhcnNlSW50KF9oYXNoLnNwbGl0KCcmc2xpZGU9JylbMV0sIDEwKTtcblxuICAgICAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdsZy1mcm9tLWhhc2gnKTtcbiAgICAgICAgICAgIGlmICghJCgnYm9keScpLmhhc0NsYXNzKCdsZy1vbicpKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYnVpbGQoX3RoaXMuaW5kZXgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJCgnYm9keScpLmFkZENsYXNzKCdsZy1vbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90aGlzLnMuZHluYW1pYykge1xuXG4gICAgICAgICAgICBfdGhpcy4kZWwudHJpZ2dlcignb25CZWZvcmVPcGVuLmxnJyk7XG5cbiAgICAgICAgICAgIF90aGlzLmluZGV4ID0gX3RoaXMucy5pbmRleCB8fCAwO1xuXG4gICAgICAgICAgICAvLyBwcmV2ZW50IGFjY2lkZW50YWwgZG91YmxlIGV4ZWN1dGlvblxuICAgICAgICAgICAgaWYgKCEkKCdib2R5JykuaGFzQ2xhc3MoJ2xnLW9uJykpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5idWlsZChfdGhpcy5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnbGctb24nKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgLy8gVXNpbmcgZGlmZmVyZW50IG5hbWVzcGFjZSBmb3IgY2xpY2sgYmVjYXVzZSBjbGljayBldmVudCBzaG91bGQgbm90IHVuYmluZCBpZiBzZWxlY3RvciBpcyBzYW1lIG9iamVjdCgndGhpcycpXG4gICAgICAgICAgICBfdGhpcy4kaXRlbXMub24oJ2NsaWNrLmxnY3VzdG9tJywgZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICAgICAgICAgIC8vIEZvciBJRThcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX3RoaXMuJGVsLnRyaWdnZXIoJ29uQmVmb3JlT3Blbi5sZycpO1xuXG4gICAgICAgICAgICAgICAgX3RoaXMuaW5kZXggPSBfdGhpcy5zLmluZGV4IHx8IF90aGlzLiRpdGVtcy5pbmRleCh0aGlzKTtcblxuICAgICAgICAgICAgICAgIC8vIHByZXZlbnQgYWNjaWRlbnRhbCBkb3VibGUgZXhlY3V0aW9uXG4gICAgICAgICAgICAgICAgaWYgKCEkKCdib2R5JykuaGFzQ2xhc3MoJ2xnLW9uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYnVpbGQoX3RoaXMuaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2xnLW9uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBQbHVnaW4ucHJvdG90eXBlLmJ1aWxkID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIF90aGlzLnN0cnVjdHVyZSgpO1xuXG4gICAgICAgIC8vIG1vZHVsZSBjb25zdHJ1Y3RvclxuICAgICAgICAkLmVhY2goJC5mbi5saWdodEdhbGxlcnkubW9kdWxlcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBfdGhpcy5tb2R1bGVzW2tleV0gPSBuZXcgJC5mbi5saWdodEdhbGxlcnkubW9kdWxlc1trZXldKF90aGlzLmVsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gaW5pdGlhdGUgc2xpZGUgZnVuY3Rpb25cbiAgICAgICAgX3RoaXMuc2xpZGUoaW5kZXgsIGZhbHNlLCBmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgIGlmIChfdGhpcy5zLmtleVByZXNzKSB7XG4gICAgICAgICAgICBfdGhpcy5rZXlQcmVzcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90aGlzLiRpdGVtcy5sZW5ndGggPiAxKSB7XG5cbiAgICAgICAgICAgIF90aGlzLmFycm93KCk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW5hYmxlRHJhZygpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVuYWJsZVN3aXBlKCk7XG4gICAgICAgICAgICB9LCA1MCk7XG5cbiAgICAgICAgICAgIGlmIChfdGhpcy5zLm1vdXNld2hlZWwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5tb3VzZXdoZWVsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5jb3VudGVyKCk7XG5cbiAgICAgICAgX3RoaXMuY2xvc2VHYWxsZXJ5KCk7XG5cbiAgICAgICAgX3RoaXMuJGVsLnRyaWdnZXIoJ29uQWZ0ZXJPcGVuLmxnJyk7XG5cbiAgICAgICAgLy8gSGlkZSBjb250cm9sbGVycyBpZiBtb3VzZSBkb2Vzbid0IG1vdmUgZm9yIHNvbWUgcGVyaW9kXG4gICAgICAgIF90aGlzLiRvdXRlci5vbignbW91c2Vtb3ZlLmxnIGNsaWNrLmxnIHRvdWNoc3RhcnQubGcnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgX3RoaXMuJG91dGVyLnJlbW92ZUNsYXNzKCdsZy1oaWRlLWl0ZW1zJyk7XG5cbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5oaWRlQmFydGltZW91dCk7XG5cbiAgICAgICAgICAgIC8vIFRpbWVvdXQgd2lsbCBiZSBjbGVhcmVkIG9uIGVhY2ggc2xpZGUgbW92ZW1lbnQgYWxzb1xuICAgICAgICAgICAgX3RoaXMuaGlkZUJhcnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLiRvdXRlci5hZGRDbGFzcygnbGctaGlkZS1pdGVtcycpO1xuICAgICAgICAgICAgfSwgX3RoaXMucy5oaWRlQmFyc0RlbGF5KTtcblxuICAgICAgICB9KTtcblxuICAgICAgICBfdGhpcy4kb3V0ZXIudHJpZ2dlcignbW91c2Vtb3ZlLmxnJyk7XG5cbiAgICB9O1xuXG4gICAgUGx1Z2luLnByb3RvdHlwZS5zdHJ1Y3R1cmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxpc3QgPSAnJztcbiAgICAgICAgdmFyIGNvbnRyb2xzID0gJyc7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIHN1Ykh0bWxDb250ID0gJyc7XG4gICAgICAgIHZhciB0ZW1wbGF0ZTtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAkKCdib2R5JykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwibGctYmFja2Ryb3BcIj48L2Rpdj4nKTtcbiAgICAgICAgJCgnLmxnLWJhY2tkcm9wJykuY3NzKCd0cmFuc2l0aW9uLWR1cmF0aW9uJywgdGhpcy5zLmJhY2tkcm9wRHVyYXRpb24gKyAnbXMnKTtcblxuICAgICAgICAvLyBDcmVhdGUgZ2FsbGVyeSBpdGVtc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy4kaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxpc3QgKz0gJzxkaXYgY2xhc3M9XCJsZy1pdGVtXCI+PC9kaXY+JztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBjb250cm9sbHNcbiAgICAgICAgaWYgKHRoaXMucy5jb250cm9scyAmJiB0aGlzLiRpdGVtcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb250cm9scyA9ICc8ZGl2IGNsYXNzPVwibGctYWN0aW9uc1wiPicgK1xuICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibGctcHJldiBsZy1pY29uXCI+JyArIHRoaXMucy5wcmV2SHRtbCArICc8L2Rpdj4nICtcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImxnLW5leHQgbGctaWNvblwiPicgKyB0aGlzLnMubmV4dEh0bWwgKyAnPC9kaXY+JyArXG4gICAgICAgICAgICAgICAgJzwvZGl2Pic7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zLmFwcGVuZFN1Ykh0bWxUbyA9PT0gJy5sZy1zdWItaHRtbCcpIHtcbiAgICAgICAgICAgIHN1Ykh0bWxDb250ID0gJzxkaXYgY2xhc3M9XCJsZy1zdWItaHRtbFwiPjwvZGl2Pic7XG4gICAgICAgIH1cblxuICAgICAgICB0ZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPVwibGctb3V0ZXIgJyArIHRoaXMucy5hZGRDbGFzcyArICcgJyArIHRoaXMucy5zdGFydENsYXNzICsgJ1wiPicgK1xuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJsZ1wiIHN0eWxlPVwid2lkdGg6JyArIHRoaXMucy53aWR0aCArICc7IGhlaWdodDonICsgdGhpcy5zLmhlaWdodCArICdcIj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibGctaW5uZXJcIj4nICsgbGlzdCArICc8L2Rpdj4nICtcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibGctdG9vbGJhciBsZy1ncm91cFwiPicgK1xuICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwibGctY2xvc2UgbGctaWNvblwiPjwvc3Bhbj4nICtcbiAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgIGNvbnRyb2xzICtcbiAgICAgICAgICAgIHN1Ykh0bWxDb250ICtcbiAgICAgICAgICAgICc8L2Rpdj4nICtcbiAgICAgICAgICAgICc8L2Rpdj4nO1xuXG4gICAgICAgICQoJ2JvZHknKS5hcHBlbmQodGVtcGxhdGUpO1xuICAgICAgICB0aGlzLiRvdXRlciA9ICQoJy5sZy1vdXRlcicpO1xuICAgICAgICB0aGlzLiRzbGlkZSA9IHRoaXMuJG91dGVyLmZpbmQoJy5sZy1pdGVtJyk7XG5cbiAgICAgICAgaWYgKHRoaXMucy51c2VMZWZ0KSB7XG4gICAgICAgICAgICB0aGlzLiRvdXRlci5hZGRDbGFzcygnbGctdXNlLWxlZnQnKTtcblxuICAgICAgICAgICAgLy8gU2V0IG1vZGUgbGctc2xpZGUgaWYgdXNlIGxlZnQgaXMgdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucy5tb2RlID0gJ2xnLXNsaWRlJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJG91dGVyLmFkZENsYXNzKCdsZy11c2UtY3NzMycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRm9yIGZpeGVkIGhlaWdodCBnYWxsZXJ5XG4gICAgICAgIF90aGlzLnNldFRvcCgpO1xuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5sZyBvcmllbnRhdGlvbmNoYW5nZS5sZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRUb3AoKTtcbiAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFkZCBjbGFzcyBsZy1jdXJyZW50IHRvIHJlbW92ZSBpbml0aWFsIHRyYW5zaXRpb25cbiAgICAgICAgdGhpcy4kc2xpZGUuZXEodGhpcy5pbmRleCkuYWRkQ2xhc3MoJ2xnLWN1cnJlbnQnKTtcblxuICAgICAgICAvLyBhZGQgQ2xhc3MgZm9yIGNzcyBzdXBwb3J0IGFuZCB0cmFuc2l0aW9uIG1vZGVcbiAgICAgICAgaWYgKHRoaXMuZG9Dc3MoKSkge1xuICAgICAgICAgICAgdGhpcy4kb3V0ZXIuYWRkQ2xhc3MoJ2xnLWNzczMnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuJG91dGVyLmFkZENsYXNzKCdsZy1jc3MnKTtcblxuICAgICAgICAgICAgLy8gU2V0IHNwZWVkIDAgYmVjYXVzZSBubyBhbmltYXRpb24gd2lsbCBoYXBwZW4gaWYgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY3NzM1xuICAgICAgICAgICAgdGhpcy5zLnNwZWVkID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuJG91dGVyLmFkZENsYXNzKHRoaXMucy5tb2RlKTtcblxuICAgICAgICBpZiAodGhpcy5zLmVuYWJsZURyYWcgJiYgdGhpcy4kaXRlbXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhpcy4kb3V0ZXIuYWRkQ2xhc3MoJ2xnLWdyYWInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnMuc2hvd0FmdGVyTG9hZCkge1xuICAgICAgICAgICAgdGhpcy4kb3V0ZXIuYWRkQ2xhc3MoJ2xnLXNob3ctYWZ0ZXItbG9hZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZG9Dc3MoKSkge1xuICAgICAgICAgICAgdmFyICRpbm5lciA9IHRoaXMuJG91dGVyLmZpbmQoJy5sZy1pbm5lcicpO1xuICAgICAgICAgICAgJGlubmVyLmNzcygndHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nLCB0aGlzLnMuY3NzRWFzaW5nKTtcbiAgICAgICAgICAgICRpbm5lci5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nLCB0aGlzLnMuc3BlZWQgKyAnbXMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCcubGctYmFja2Ryb3AnKS5hZGRDbGFzcygnaW4nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLiRvdXRlci5hZGRDbGFzcygnbGctdmlzaWJsZScpO1xuICAgICAgICB9LCB0aGlzLnMuYmFja2Ryb3BEdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKHRoaXMucy5kb3dubG9hZCkge1xuICAgICAgICAgICAgdGhpcy4kb3V0ZXIuZmluZCgnLmxnLXRvb2xiYXInKS5hcHBlbmQoJzxhIGlkPVwibGctZG93bmxvYWRcIiB0YXJnZXQ9XCJfYmxhbmtcIiBkb3dubG9hZCBjbGFzcz1cImxnLWRvd25sb2FkIGxnLWljb25cIj48L2E+Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSB0aGUgY3VycmVudCBzY3JvbGwgdG9wIHZhbHVlIHRvIHNjcm9sbCBiYWNrIGFmdGVyIGNsb3NpbmcgdGhlIGdhbGxlcnkuLlxuICAgICAgICB0aGlzLnByZXZTY3JvbGxUb3AgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XG5cbiAgICB9O1xuXG4gICAgLy8gRm9yIGZpeGVkIGhlaWdodCBnYWxsZXJ5XG4gICAgUGx1Z2luLnByb3RvdHlwZS5zZXRUb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMucy5oZWlnaHQgIT09ICcxMDAlJykge1xuICAgICAgICAgICAgdmFyIHdIID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICAgICAgICAgICAgdmFyIHRvcCA9ICh3SCAtIHBhcnNlSW50KHRoaXMucy5oZWlnaHQsIDEwKSkgLyAyO1xuICAgICAgICAgICAgdmFyICRsR2FsbGVyeSA9IHRoaXMuJG91dGVyLmZpbmQoJy5sZycpO1xuICAgICAgICAgICAgaWYgKHdIID49IHBhcnNlSW50KHRoaXMucy5oZWlnaHQsIDEwKSkge1xuICAgICAgICAgICAgICAgICRsR2FsbGVyeS5jc3MoJ3RvcCcsIHRvcCArICdweCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkbEdhbGxlcnkuY3NzKCd0b3AnLCAnMHB4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRmluZCBjc3MzIHN1cHBvcnRcbiAgICBQbHVnaW4ucHJvdG90eXBlLmRvQ3NzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGNoZWNrIGZvciBjc3MgYW5pbWF0aW9uIHN1cHBvcnRcbiAgICAgICAgdmFyIHN1cHBvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uID0gWyd0cmFuc2l0aW9uJywgJ01velRyYW5zaXRpb24nLCAnV2Via2l0VHJhbnNpdGlvbicsICdPVHJhbnNpdGlvbicsICdtc1RyYW5zaXRpb24nLCAnS2h0bWxUcmFuc2l0aW9uJ107XG4gICAgICAgICAgICB2YXIgcm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0cmFuc2l0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25baV0gaW4gcm9vdC5zdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHN1cHBvcnQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICBAZGVzYyBDaGVjayB0aGUgZ2l2ZW4gc3JjIGlzIHZpZGVvXG4gICAgICogIEBwYXJhbSB7U3RyaW5nfSBzcmNcbiAgICAgKiAgQHJldHVybiB7T2JqZWN0fSB2aWRlbyB0eXBlXG4gICAgICogIEV4OnsgeW91dHViZSAgOiAgW1wiLy93d3cueW91dHViZS5jb20vd2F0Y2g/dj1jMGFzSmdTeXhjWVwiLCBcImMwYXNKZ1N5eGNZXCJdIH1cbiAgICAgKi9cbiAgICBQbHVnaW4ucHJvdG90eXBlLmlzVmlkZW8gPSBmdW5jdGlvbihzcmMsIGluZGV4KSB7XG5cbiAgICAgICAgdmFyIGh0bWw7XG4gICAgICAgIGlmICh0aGlzLnMuZHluYW1pYykge1xuICAgICAgICAgICAgaHRtbCA9IHRoaXMucy5keW5hbWljRWxbaW5kZXhdLmh0bWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBodG1sID0gdGhpcy4kaXRlbXMuZXEoaW5kZXgpLmF0dHIoJ2RhdGEtaHRtbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzcmMgJiYgaHRtbCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBodG1sNTogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB5b3V0dWJlID0gc3JjLm1hdGNoKC9cXC9cXC8oPzp3d3dcXC4pP3lvdXR1KD86XFwuYmV8YmVcXC5jb20pXFwvKD86d2F0Y2hcXD92PXxlbWJlZFxcLyk/KFthLXowLTlcXC1cXF9cXCVdKykvaSk7XG4gICAgICAgIHZhciB2aW1lbyA9IHNyYy5tYXRjaCgvXFwvXFwvKD86d3d3XFwuKT92aW1lby5jb21cXC8oWzAtOWEtelxcLV9dKykvaSk7XG4gICAgICAgIHZhciBkYWlseW1vdGlvbiA9IHNyYy5tYXRjaCgvXFwvXFwvKD86d3d3XFwuKT9kYWkubHlcXC8oWzAtOWEtelxcLV9dKykvaSk7XG4gICAgICAgIHZhciB2ayA9IHNyYy5tYXRjaCgvXFwvXFwvKD86d3d3XFwuKT8oPzp2a1xcLmNvbXx2a29udGFrdGVcXC5ydSlcXC8oPzp2aWRlb19leHRcXC5waHBcXD8pKC4qKS9pKTtcblxuICAgICAgICBpZiAoeW91dHViZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB5b3V0dWJlOiB5b3V0dWJlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKHZpbWVvKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZpbWVvOiB2aW1lb1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkYWlseW1vdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYWlseW1vdGlvbjogZGFpbHltb3Rpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAodmspIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdms6IHZrXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICBAZGVzYyBDcmVhdGUgaW1hZ2UgY291bnRlclxuICAgICAqICBFeDogMS8xMFxuICAgICAqL1xuICAgIFBsdWdpbi5wcm90b3R5cGUuY291bnRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5zLmNvdW50ZXIpIHtcbiAgICAgICAgICAgICQodGhpcy5zLmFwcGVuZENvdW50ZXJUbykuYXBwZW5kKCc8ZGl2IGlkPVwibGctY291bnRlclwiPjxzcGFuIGlkPVwibGctY291bnRlci1jdXJyZW50XCI+JyArIChwYXJzZUludCh0aGlzLmluZGV4LCAxMCkgKyAxKSArICc8L3NwYW4+IC8gPHNwYW4gaWQ9XCJsZy1jb3VudGVyLWFsbFwiPicgKyB0aGlzLiRpdGVtcy5sZW5ndGggKyAnPC9zcGFuPjwvZGl2PicpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICBAZGVzYyBhZGQgc3ViLWh0bWwgaW50byB0aGUgc2xpZGVcbiAgICAgKiAgQHBhcmFtIHtOdW1iZXJ9IGluZGV4IC0gaW5kZXggb2YgdGhlIHNsaWRlXG4gICAgICovXG4gICAgUGx1Z2luLnByb3RvdHlwZS5hZGRIdG1sID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgdmFyIHN1Ykh0bWwgPSBudWxsO1xuICAgICAgICB2YXIgc3ViSHRtbFVybDtcbiAgICAgICAgdmFyICRjdXJyZW50RWxlO1xuICAgICAgICBpZiAodGhpcy5zLmR5bmFtaWMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnMuZHluYW1pY0VsW2luZGV4XS5zdWJIdG1sVXJsKSB7XG4gICAgICAgICAgICAgICAgc3ViSHRtbFVybCA9IHRoaXMucy5keW5hbWljRWxbaW5kZXhdLnN1Ykh0bWxVcmw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1Ykh0bWwgPSB0aGlzLnMuZHluYW1pY0VsW2luZGV4XS5zdWJIdG1sO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGN1cnJlbnRFbGUgPSB0aGlzLiRpdGVtcy5lcShpbmRleCk7XG4gICAgICAgICAgICBpZiAoJGN1cnJlbnRFbGUuYXR0cignZGF0YS1zdWItaHRtbC11cmwnKSkge1xuICAgICAgICAgICAgICAgIHN1Ykh0bWxVcmwgPSAkY3VycmVudEVsZS5hdHRyKCdkYXRhLXN1Yi1odG1sLXVybCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJIdG1sID0gJGN1cnJlbnRFbGUuYXR0cignZGF0YS1zdWItaHRtbCcpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnMuZ2V0Q2FwdGlvbkZyb21UaXRsZU9yQWx0ICYmICFzdWJIdG1sKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1Ykh0bWwgPSAkY3VycmVudEVsZS5hdHRyKCd0aXRsZScpIHx8ICRjdXJyZW50RWxlLmZpbmQoJ2ltZycpLmZpcnN0KCkuYXR0cignYWx0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdWJIdG1sVXJsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN1Ykh0bWwgIT09ICd1bmRlZmluZWQnICYmIHN1Ykh0bWwgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgICAgIC8vIGdldCBmaXJzdCBsZXR0ZXIgb2Ygc3ViaHRtbFxuICAgICAgICAgICAgICAgIC8vIGlmIGZpcnN0IGxldHRlciBzdGFydHMgd2l0aCAuIG9yICMgZ2V0IHRoZSBodG1sIGZvcm0gdGhlIGpRdWVyeSBvYmplY3RcbiAgICAgICAgICAgICAgICB2YXIgZkwgPSBzdWJIdG1sLnN1YnN0cmluZygwLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoZkwgPT09ICcuJyB8fCBmTCA9PT0gJyMnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnMuc3ViSHRtbFNlbGVjdG9yUmVsYXRpdmUgJiYgIXRoaXMucy5keW5hbWljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJIdG1sID0gJGN1cnJlbnRFbGUuZmluZChzdWJIdG1sKS5odG1sKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJIdG1sID0gJChzdWJIdG1sKS5odG1sKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1Ykh0bWwgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnMuYXBwZW5kU3ViSHRtbFRvID09PSAnLmxnLXN1Yi1odG1sJykge1xuXG4gICAgICAgICAgICBpZiAoc3ViSHRtbFVybCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJG91dGVyLmZpbmQodGhpcy5zLmFwcGVuZFN1Ykh0bWxUbykubG9hZChzdWJIdG1sVXJsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kb3V0ZXIuZmluZCh0aGlzLnMuYXBwZW5kU3ViSHRtbFRvKS5odG1sKHN1Ykh0bWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChzdWJIdG1sVXJsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kc2xpZGUuZXEoaW5kZXgpLmxvYWQoc3ViSHRtbFVybCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuJHNsaWRlLmVxKGluZGV4KS5hcHBlbmQoc3ViSHRtbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgbGctZW1wdHktaHRtbCBjbGFzcyBpZiB0aXRsZSBkb2Vzbid0IGV4aXN0XG4gICAgICAgIGlmICh0eXBlb2Ygc3ViSHRtbCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3ViSHRtbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHN1Ykh0bWwgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kb3V0ZXIuZmluZCh0aGlzLnMuYXBwZW5kU3ViSHRtbFRvKS5hZGRDbGFzcygnbGctZW1wdHktaHRtbCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRvdXRlci5maW5kKHRoaXMucy5hcHBlbmRTdWJIdG1sVG8pLnJlbW92ZUNsYXNzKCdsZy1lbXB0eS1odG1sJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLiRlbC50cmlnZ2VyKCdvbkFmdGVyQXBwZW5kU3ViSHRtbC5sZycsIFtpbmRleF0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAgQGRlc2MgUHJlbG9hZCBzbGlkZXNcbiAgICAgKiAgQHBhcmFtIHtOdW1iZXJ9IGluZGV4IC0gaW5kZXggb2YgdGhlIHNsaWRlXG4gICAgICovXG4gICAgUGx1Z2luLnByb3RvdHlwZS5wcmVsb2FkID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgdmFyIGkgPSAxO1xuICAgICAgICB2YXIgaiA9IDE7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPD0gdGhpcy5zLnByZWxvYWQ7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPj0gdGhpcy4kaXRlbXMubGVuZ3RoIC0gaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5sb2FkQ29udGVudChpbmRleCArIGksIGZhbHNlLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaiA9IDE7IGogPD0gdGhpcy5zLnByZWxvYWQ7IGorKykge1xuICAgICAgICAgICAgaWYgKGluZGV4IC0gaiA8IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5sb2FkQ29udGVudChpbmRleCAtIGosIGZhbHNlLCAwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiAgQGRlc2MgTG9hZCBzbGlkZSBjb250ZW50IGludG8gc2xpZGUuXG4gICAgICogIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAtIGluZGV4IG9mIHRoZSBzbGlkZS5cbiAgICAgKiAgQHBhcmFtIHtCb29sZWFufSByZWMgLSBpZiB0cnVlIGNhbGwgbG9hZGNvbnRlbnQoKSBmdW5jdGlvbiBhZ2Fpbi5cbiAgICAgKiAgQHBhcmFtIHtCb29sZWFufSBkZWxheSAtIGRlbGF5IGZvciBhZGRpbmcgY29tcGxldGUgY2xhc3MuIGl0IGlzIDAgZXhjZXB0IGZpcnN0IHRpbWUuXG4gICAgICovXG4gICAgUGx1Z2luLnByb3RvdHlwZS5sb2FkQ29udGVudCA9IGZ1bmN0aW9uKGluZGV4LCByZWMsIGRlbGF5KSB7XG5cbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9oYXNQb3N0ZXIgPSBmYWxzZTtcbiAgICAgICAgdmFyIF8kaW1nO1xuICAgICAgICB2YXIgX3NyYztcbiAgICAgICAgdmFyIF9wb3N0ZXI7XG4gICAgICAgIHZhciBfc3Jjc2V0O1xuICAgICAgICB2YXIgX3NpemVzO1xuICAgICAgICB2YXIgX2h0bWw7XG4gICAgICAgIHZhciBnZXRSZXNwb25zaXZlU3JjID0gZnVuY3Rpb24oc3JjSXRtcykge1xuICAgICAgICAgICAgdmFyIHJzV2lkdGggPSBbXTtcbiAgICAgICAgICAgIHZhciByc1NyYyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcmNJdG1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9fc3JjID0gc3JjSXRtc1tpXS5zcGxpdCgnICcpO1xuXG4gICAgICAgICAgICAgICAgLy8gTWFuYWdlIGVtcHR5IHNwYWNlXG4gICAgICAgICAgICAgICAgaWYgKF9fc3JjWzBdID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBfX3NyYy5zcGxpY2UoMCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcnNTcmMucHVzaChfX3NyY1swXSk7XG4gICAgICAgICAgICAgICAgcnNXaWR0aC5wdXNoKF9fc3JjWzFdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHdXaWR0aCA9ICQod2luZG93KS53aWR0aCgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByc1dpZHRoLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KHJzV2lkdGhbal0sIDEwKSA+IHdXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBfc3JjID0gcnNTcmNbal07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoX3RoaXMucy5keW5hbWljKSB7XG5cbiAgICAgICAgICAgIGlmIChfdGhpcy5zLmR5bmFtaWNFbFtpbmRleF0ucG9zdGVyKSB7XG4gICAgICAgICAgICAgICAgX2hhc1Bvc3RlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3Bvc3RlciA9IF90aGlzLnMuZHluYW1pY0VsW2luZGV4XS5wb3N0ZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9odG1sID0gX3RoaXMucy5keW5hbWljRWxbaW5kZXhdLmh0bWw7XG4gICAgICAgICAgICBfc3JjID0gX3RoaXMucy5keW5hbWljRWxbaW5kZXhdLnNyYztcblxuICAgICAgICAgICAgaWYgKF90aGlzLnMuZHluYW1pY0VsW2luZGV4XS5yZXNwb25zaXZlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNyY0R5SXRtcyA9IF90aGlzLnMuZHluYW1pY0VsW2luZGV4XS5yZXNwb25zaXZlLnNwbGl0KCcsJyk7XG4gICAgICAgICAgICAgICAgZ2V0UmVzcG9uc2l2ZVNyYyhzcmNEeUl0bXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfc3Jjc2V0ID0gX3RoaXMucy5keW5hbWljRWxbaW5kZXhdLnNyY3NldDtcbiAgICAgICAgICAgIF9zaXplcyA9IF90aGlzLnMuZHluYW1pY0VsW2luZGV4XS5zaXplcztcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoX3RoaXMuJGl0ZW1zLmVxKGluZGV4KS5hdHRyKCdkYXRhLXBvc3RlcicpKSB7XG4gICAgICAgICAgICAgICAgX2hhc1Bvc3RlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3Bvc3RlciA9IF90aGlzLiRpdGVtcy5lcShpbmRleCkuYXR0cignZGF0YS1wb3N0ZXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2h0bWwgPSBfdGhpcy4kaXRlbXMuZXEoaW5kZXgpLmF0dHIoJ2RhdGEtaHRtbCcpO1xuICAgICAgICAgICAgX3NyYyA9IF90aGlzLiRpdGVtcy5lcShpbmRleCkuYXR0cignaHJlZicpIHx8IF90aGlzLiRpdGVtcy5lcShpbmRleCkuYXR0cignZGF0YS1zcmMnKTtcblxuICAgICAgICAgICAgaWYgKF90aGlzLiRpdGVtcy5lcShpbmRleCkuYXR0cignZGF0YS1yZXNwb25zaXZlJykpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3JjSXRtcyA9IF90aGlzLiRpdGVtcy5lcShpbmRleCkuYXR0cignZGF0YS1yZXNwb25zaXZlJykuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICBnZXRSZXNwb25zaXZlU3JjKHNyY0l0bXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfc3Jjc2V0ID0gX3RoaXMuJGl0ZW1zLmVxKGluZGV4KS5hdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICAgICAgX3NpemVzID0gX3RoaXMuJGl0ZW1zLmVxKGluZGV4KS5hdHRyKCdkYXRhLXNpemVzJyk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgKF9zcmMgfHwgX3NyY3NldCB8fCBfc2l6ZXMgfHwgX3Bvc3Rlcikge1xuXG4gICAgICAgIHZhciBpZnJhbWUgPSBmYWxzZTtcbiAgICAgICAgaWYgKF90aGlzLnMuZHluYW1pYykge1xuICAgICAgICAgICAgaWYgKF90aGlzLnMuZHluYW1pY0VsW2luZGV4XS5pZnJhbWUpIHtcbiAgICAgICAgICAgICAgICBpZnJhbWUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKF90aGlzLiRpdGVtcy5lcShpbmRleCkuYXR0cignZGF0YS1pZnJhbWUnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICAgICAgaWZyYW1lID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfaXNWaWRlbyA9IF90aGlzLmlzVmlkZW8oX3NyYywgaW5kZXgpO1xuICAgICAgICBpZiAoIV90aGlzLiRzbGlkZS5lcShpbmRleCkuaGFzQ2xhc3MoJ2xnLWxvYWRlZCcpKSB7XG4gICAgICAgICAgICBpZiAoaWZyYW1lKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuJHNsaWRlLmVxKGluZGV4KS5wcmVwZW5kKCc8ZGl2IGNsYXNzPVwibGctdmlkZW8tY29udFwiIHN0eWxlPVwibWF4LXdpZHRoOicgKyBfdGhpcy5zLmlmcmFtZU1heFdpZHRoICsgJ1wiPjxkaXYgY2xhc3M9XCJsZy12aWRlb1wiPjxpZnJhbWUgY2xhc3M9XCJsZy1vYmplY3RcIiBmcmFtZWJvcmRlcj1cIjBcIiBzcmM9XCInICsgX3NyYyArICdcIiAgYWxsb3dmdWxsc2NyZWVuPVwidHJ1ZVwiPjwvaWZyYW1lPjwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChfaGFzUG9zdGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZpZGVvQ2xhc3MgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAoX2lzVmlkZW8gJiYgX2lzVmlkZW8ueW91dHViZSkge1xuICAgICAgICAgICAgICAgICAgICB2aWRlb0NsYXNzID0gJ2xnLWhhcy15b3V0dWJlJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF9pc1ZpZGVvICYmIF9pc1ZpZGVvLnZpbWVvKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpZGVvQ2xhc3MgPSAnbGctaGFzLXZpbWVvJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2aWRlb0NsYXNzID0gJ2xnLWhhcy1odG1sNSc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgX3RoaXMuJHNsaWRlLmVxKGluZGV4KS5wcmVwZW5kKCc8ZGl2IGNsYXNzPVwibGctdmlkZW8tY29udCAnICsgdmlkZW9DbGFzcyArICcgXCI+PGRpdiBjbGFzcz1cImxnLXZpZGVvXCI+PHNwYW4gY2xhc3M9XCJsZy12aWRlby1wbGF5XCI+PC9zcGFuPjxpbWcgY2xhc3M9XCJsZy1vYmplY3QgbGctaGFzLXBvc3RlclwiIHNyYz1cIicgKyBfcG9zdGVyICsgJ1wiIC8+PC9kaXY+PC9kaXY+Jyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX2lzVmlkZW8pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy4kc2xpZGUuZXEoaW5kZXgpLnByZXBlbmQoJzxkaXYgY2xhc3M9XCJsZy12aWRlby1jb250IFwiPjxkaXYgY2xhc3M9XCJsZy12aWRlb1wiPjwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgICAgIF90aGlzLiRlbC50cmlnZ2VyKCdoYXNWaWRlby5sZycsIFtpbmRleCwgX3NyYywgX2h0bWxdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuJHNsaWRlLmVxKGluZGV4KS5wcmVwZW5kKCc8ZGl2IGNsYXNzPVwibGctaW1nLXdyYXBcIj48aW1nIGNsYXNzPVwibGctb2JqZWN0IGxnLWltYWdlXCIgc3JjPVwiJyArIF9zcmMgKyAnXCIgLz48L2Rpdj4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX3RoaXMuJGVsLnRyaWdnZXIoJ29uQWZlckFwcGVuZFNsaWRlLmxnJywgW2luZGV4XSk7XG5cbiAgICAgICAgICAgIF8kaW1nID0gX3RoaXMuJHNsaWRlLmVxKGluZGV4KS5maW5kKCcubGctb2JqZWN0Jyk7XG4gICAgICAgICAgICBpZiAoX3NpemVzKSB7XG4gICAgICAgICAgICAgICAgXyRpbWcuYXR0cignc2l6ZXMnLCBfc2l6ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoX3NyY3NldCkge1xuICAgICAgICAgICAgICAgIF8kaW1nLmF0dHIoJ3NyY3NldCcsIF9zcmNzZXQpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHBpY3R1cmVmaWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzOiBbXyRpbWdbMF1dXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignTWFrZSBzdXJlIHlvdSBoYXZlIGluY2x1ZGVkIFBpY3R1cmVmaWxsIHZlcnNpb24gMicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucy5hcHBlbmRTdWJIdG1sVG8gIT09ICcubGctc3ViLWh0bWwnKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRkSHRtbChpbmRleCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF90aGlzLiRzbGlkZS5lcShpbmRleCkuYWRkQ2xhc3MoJ2xnLWxvYWRlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuJHNsaWRlLmVxKGluZGV4KS5maW5kKCcubGctb2JqZWN0Jykub24oJ2xvYWQubGcgZXJyb3IubGcnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLy8gRm9yIGZpcnN0IHRpbWUgYWRkIHNvbWUgZGVsYXkgZm9yIGRpc3BsYXlpbmcgdGhlIHN0YXJ0IGFuaW1hdGlvbi5cbiAgICAgICAgICAgIHZhciBfc3BlZWQgPSAwO1xuXG4gICAgICAgICAgICAvLyBEbyBub3QgY2hhbmdlIHRoZSBkZWxheSB2YWx1ZSBiZWNhdXNlIGl0IGlzIHJlcXVpcmVkIGZvciB6b29tIHBsdWdpbi5cbiAgICAgICAgICAgIC8vIElmIGdhbGxlcnkgb3BlbmVkIGZyb20gZGlyZWN0IHVybCAoaGFzaCkgc3BlZWQgdmFsdWUgc2hvdWxkIGJlIDBcbiAgICAgICAgICAgIGlmIChkZWxheSAmJiAhJCgnYm9keScpLmhhc0NsYXNzKCdsZy1mcm9tLWhhc2gnKSkge1xuICAgICAgICAgICAgICAgIF9zcGVlZCA9IGRlbGF5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLiRzbGlkZS5lcShpbmRleCkuYWRkQ2xhc3MoJ2xnLWNvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuJGVsLnRyaWdnZXIoJ29uU2xpZGVJdGVtTG9hZC5sZycsIFtpbmRleCwgZGVsYXkgfHwgMF0pO1xuICAgICAgICAgICAgfSwgX3NwZWVkKTtcblxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBAdG9kbyBjaGVjayBsb2FkIHN0YXRlIGZvciBodG1sNSB2aWRlb3NcbiAgICAgICAgaWYgKF9pc1ZpZGVvICYmIF9pc1ZpZGVvLmh0bWw1ICYmICFfaGFzUG9zdGVyKSB7XG4gICAgICAgICAgICBfdGhpcy4kc2xpZGUuZXEoaW5kZXgpLmFkZENsYXNzKCdsZy1jb21wbGV0ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlYyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy4kc2xpZGUuZXEoaW5kZXgpLmhhc0NsYXNzKCdsZy1jb21wbGV0ZScpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuJHNsaWRlLmVxKGluZGV4KS5maW5kKCcubGctb2JqZWN0Jykub24oJ2xvYWQubGcgZXJyb3IubGcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJlbG9hZChpbmRleCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLnByZWxvYWQoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy99XG4gICAgfTtcblxuICAgIC8qKlxuICAgICogICBAZGVzYyBzbGlkZSBmdW5jdGlvbiBmb3IgbGlnaHRnYWxsZXJ5XG4gICAgICAgICoqIFNsaWRlKCkgZ2V0cyBjYWxsIG9uIHN0YXJ0XG4gICAgICAgICoqICoqIFNldCBsZy5vbiB0cnVlIG9uY2Ugc2xpZGUoKSBmdW5jdGlvbiBnZXRzIGNhbGxlZC5cbiAgICAgICAgKiogQ2FsbCBsb2FkQ29udGVudCgpIG9uIHNsaWRlKCkgZnVuY3Rpb24gaW5zaWRlIHNldFRpbWVvdXRcbiAgICAgICAgKiogKiogT24gZmlyc3Qgc2xpZGUgd2UgZG8gbm90IHdhbnQgYW55IGFuaW1hdGlvbiBsaWtlIHNsaWRlIG9mIGZhZGVcbiAgICAgICAgKiogKiogU28gb24gZmlyc3Qgc2xpZGUoIGlmIGxnLm9uIGlmIGZhbHNlIHRoYXQgaXMgZmlyc3Qgc2xpZGUpIGxvYWRDb250ZW50KCkgc2hvdWxkIHN0YXJ0IGxvYWRpbmcgaW1tZWRpYXRlbHlcbiAgICAgICAgKiogKiogRWxzZSBsb2FkQ29udGVudCgpIHNob3VsZCB3YWl0IGZvciB0aGUgdHJhbnNpdGlvbiB0byBjb21wbGV0ZS5cbiAgICAgICAgKiogKiogU28gc2V0IHRpbWVvdXQgcy5zcGVlZCArIDUwXG4gICAgPD0+ICoqIGxvYWRDb250ZW50KCkgd2lsbCBsb2FkIHNsaWRlIGNvbnRlbnQgaW4gdG8gdGhlIHBhcnRpY3VsYXIgc2xpZGVcbiAgICAgICAgKiogKiogSXQgaGFzIHJlY3Vyc2lvbiAocmVjKSBwYXJhbWV0ZXIuIGlmIHJlYyA9PT0gdHJ1ZSBsb2FkQ29udGVudCgpIHdpbGwgY2FsbCBwcmVsb2FkKCkgZnVuY3Rpb24uXG4gICAgICAgICoqICoqIHByZWxvYWQgd2lsbCBleGVjdXRlIG9ubHkgd2hlbiB0aGUgcHJldmlvdXMgc2xpZGUgaXMgZnVsbHkgbG9hZGVkIChpbWFnZXMgaWZyYW1lKVxuICAgICAgICAqKiAqKiBhdm9pZCBzaW11bHRhbmVvdXMgaW1hZ2UgbG9hZFxuICAgIDw9PiAqKiBQcmVsb2FkKCkgd2lsbCBjaGVjayBmb3Igcy5wcmVsb2FkIHZhbHVlIGFuZCBjYWxsIGxvYWRDb250ZW50KCkgYWdhaW4gYWNjb3JpbmcgdG8gcHJlbG9hZCB2YWx1ZVxuICAgICAgICAqKiBsb2FkQ29udGVudCgpICA8PT09PT4gUHJlbG9hZCgpO1xuXG4gICAgKiAgIEBwYXJhbSB7TnVtYmVyfSBpbmRleCAtIGluZGV4IG9mIHRoZSBzbGlkZVxuICAgICogICBAcGFyYW0ge0Jvb2xlYW59IGZyb21Ub3VjaCAtIHRydWUgaWYgc2xpZGUgZnVuY3Rpb24gY2FsbGVkIHZpYSB0b3VjaCBldmVudCBvciBtb3VzZSBkcmFnXG4gICAgKiAgIEBwYXJhbSB7Qm9vbGVhbn0gZnJvbVRodW1iIC0gdHJ1ZSBpZiBzbGlkZSBmdW5jdGlvbiBjYWxsZWQgdmlhIHRodW1ibmFpbCBjbGlja1xuICAgICogICBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uIC0gRGlyZWN0aW9uIG9mIHRoZSBzbGlkZShuZXh0L3ByZXYpXG4gICAgKi9cbiAgICBQbHVnaW4ucHJvdG90eXBlLnNsaWRlID0gZnVuY3Rpb24oaW5kZXgsIGZyb21Ub3VjaCwgZnJvbVRodW1iLCBkaXJlY3Rpb24pIHtcblxuICAgICAgICB2YXIgX3ByZXZJbmRleCA9IHRoaXMuJG91dGVyLmZpbmQoJy5sZy1jdXJyZW50JykuaW5kZXgoKTtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAvLyBQcmV2ZW50IGlmIG11bHRpcGxlIGNhbGxcbiAgICAgICAgLy8gUmVxdWlyZWQgZm9yIGhzaCBwbHVnaW5cbiAgICAgICAgaWYgKF90aGlzLmxHYWxsZXJ5T24gJiYgKF9wcmV2SW5kZXggPT09IGluZGV4KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9sZW5ndGggPSB0aGlzLiRzbGlkZS5sZW5ndGg7XG4gICAgICAgIHZhciBfdGltZSA9IF90aGlzLmxHYWxsZXJ5T24gPyB0aGlzLnMuc3BlZWQgOiAwO1xuXG4gICAgICAgIGlmICghX3RoaXMubGdCdXN5KSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnMuZG93bmxvYWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3NyYztcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucy5keW5hbWljKSB7XG4gICAgICAgICAgICAgICAgICAgIF9zcmMgPSBfdGhpcy5zLmR5bmFtaWNFbFtpbmRleF0uZG93bmxvYWRVcmwgIT09IGZhbHNlICYmIChfdGhpcy5zLmR5bmFtaWNFbFtpbmRleF0uZG93bmxvYWRVcmwgfHwgX3RoaXMucy5keW5hbWljRWxbaW5kZXhdLnNyYyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3NyYyA9IF90aGlzLiRpdGVtcy5lcShpbmRleCkuYXR0cignZGF0YS1kb3dubG9hZC11cmwnKSAhPT0gJ2ZhbHNlJyAmJiAoX3RoaXMuJGl0ZW1zLmVxKGluZGV4KS5hdHRyKCdkYXRhLWRvd25sb2FkLXVybCcpIHx8IF90aGlzLiRpdGVtcy5lcShpbmRleCkuYXR0cignaHJlZicpIHx8IF90aGlzLiRpdGVtcy5lcShpbmRleCkuYXR0cignZGF0YS1zcmMnKSk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoX3NyYykge1xuICAgICAgICAgICAgICAgICAgICAkKCcjbGctZG93bmxvYWQnKS5hdHRyKCdocmVmJywgX3NyYyk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRvdXRlci5yZW1vdmVDbGFzcygnbGctaGlkZS1kb3dubG9hZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRvdXRlci5hZGRDbGFzcygnbGctaGlkZS1kb3dubG9hZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy4kZWwudHJpZ2dlcignb25CZWZvcmVTbGlkZS5sZycsIFtfcHJldkluZGV4LCBpbmRleCwgZnJvbVRvdWNoLCBmcm9tVGh1bWJdKTtcblxuICAgICAgICAgICAgX3RoaXMubGdCdXN5ID0gdHJ1ZTtcblxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmhpZGVCYXJ0aW1lb3V0KTtcblxuICAgICAgICAgICAgLy8gQWRkIHRpdGxlIGlmIHRoaXMucy5hcHBlbmRTdWJIdG1sVG8gPT09IGxnLXN1Yi1odG1sXG4gICAgICAgICAgICBpZiAodGhpcy5zLmFwcGVuZFN1Ykh0bWxUbyA9PT0gJy5sZy1zdWItaHRtbCcpIHtcblxuICAgICAgICAgICAgICAgIC8vIHdhaXQgZm9yIHNsaWRlIGFuaW1hdGlvbiB0byBjb21wbGV0ZVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFkZEh0bWwoaW5kZXgpO1xuICAgICAgICAgICAgICAgIH0sIF90aW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5hcnJvd0Rpc2FibGUoaW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IF9wcmV2SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gJ3ByZXYnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPiBfcHJldkluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICduZXh0JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZnJvbVRvdWNoKSB7XG5cbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgYWxsIHRyYW5zaXRpb25zXG4gICAgICAgICAgICAgICAgX3RoaXMuJG91dGVyLmFkZENsYXNzKCdsZy1uby10cmFucycpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy4kc2xpZGUucmVtb3ZlQ2xhc3MoJ2xnLXByZXYtc2xpZGUgbGctbmV4dC1zbGlkZScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9wcmV2c2xpZGVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kc2xpZGUuZXEoaW5kZXgpLmFkZENsYXNzKCdsZy1wcmV2LXNsaWRlJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHNsaWRlLmVxKF9wcmV2SW5kZXgpLmFkZENsYXNzKCdsZy1uZXh0LXNsaWRlJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IHNsaWRlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHNsaWRlLmVxKGluZGV4KS5hZGRDbGFzcygnbGctbmV4dC1zbGlkZScpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRzbGlkZS5lcShfcHJldkluZGV4KS5hZGRDbGFzcygnbGctcHJldi1zbGlkZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGdpdmUgNTAgbXMgZm9yIGJyb3dzZXIgdG8gYWRkL3JlbW92ZSBjbGFzc1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRzbGlkZS5yZW1vdmVDbGFzcygnbGctY3VycmVudCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vX3RoaXMuJHNsaWRlLmVxKF9wcmV2SW5kZXgpLnJlbW92ZUNsYXNzKCdsZy1jdXJyZW50Jyk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRzbGlkZS5lcShpbmRleCkuYWRkQ2xhc3MoJ2xnLWN1cnJlbnQnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyByZXNldCBhbGwgdHJhbnNpdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuJG91dGVyLnJlbW92ZUNsYXNzKCdsZy1uby10cmFucycpO1xuICAgICAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLiRzbGlkZS5yZW1vdmVDbGFzcygnbGctcHJldi1zbGlkZSBsZy1jdXJyZW50IGxnLW5leHQtc2xpZGUnKTtcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hQcmV2O1xuICAgICAgICAgICAgICAgIHZhciB0b3VjaE5leHQ7XG4gICAgICAgICAgICAgICAgaWYgKF9sZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdWNoUHJldiA9IGluZGV4IC0gMTtcbiAgICAgICAgICAgICAgICAgICAgdG91Y2hOZXh0ID0gaW5kZXggKyAxO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgoaW5kZXggPT09IDApICYmIChfcHJldkluZGV4ID09PSBfbGVuZ3RoIC0gMSkpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBzbGlkZVxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hOZXh0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoUHJldiA9IF9sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChpbmRleCA9PT0gX2xlbmd0aCAtIDEpICYmIChfcHJldkluZGV4ID09PSAwKSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmV2IHNsaWRlXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaE5leHQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hQcmV2ID0gX2xlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvdWNoUHJldiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRvdWNoTmV4dCA9IDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRzbGlkZS5lcSh0b3VjaE5leHQpLmFkZENsYXNzKCdsZy1uZXh0LXNsaWRlJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuJHNsaWRlLmVxKHRvdWNoUHJldikuYWRkQ2xhc3MoJ2xnLXByZXYtc2xpZGUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfdGhpcy4kc2xpZGUuZXEoaW5kZXgpLmFkZENsYXNzKCdsZy1jdXJyZW50Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfdGhpcy5sR2FsbGVyeU9uKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9hZENvbnRlbnQoaW5kZXgsIHRydWUsIDApO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMucy5zcGVlZCArIDUwKTtcblxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxnQnVzeSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kZWwudHJpZ2dlcignb25BZnRlclNsaWRlLmxnJywgW19wcmV2SW5kZXgsIGluZGV4LCBmcm9tVG91Y2gsIGZyb21UaHVtYl0pO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMucy5zcGVlZCk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubG9hZENvbnRlbnQoaW5kZXgsIHRydWUsIF90aGlzLnMuYmFja2Ryb3BEdXJhdGlvbik7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5sZ0J1c3kgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBfdGhpcy4kZWwudHJpZ2dlcignb25BZnRlclNsaWRlLmxnJywgW19wcmV2SW5kZXgsIGluZGV4LCBmcm9tVG91Y2gsIGZyb21UaHVtYl0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpcy5sR2FsbGVyeU9uID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucy5jb3VudGVyKSB7XG4gICAgICAgICAgICAgICAgJCgnI2xnLWNvdW50ZXItY3VycmVudCcpLnRleHQoaW5kZXggKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogIEBkZXNjIEdvIHRvIG5leHQgc2xpZGVcbiAgICAgKiAgQHBhcmFtIHtCb29sZWFufSBmcm9tVG91Y2ggLSB0cnVlIGlmIHNsaWRlIGZ1bmN0aW9uIGNhbGxlZCB2aWEgdG91Y2ggZXZlbnRcbiAgICAgKi9cbiAgICBQbHVnaW4ucHJvdG90eXBlLmdvVG9OZXh0U2xpZGUgPSBmdW5jdGlvbihmcm9tVG91Y2gpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9sb29wID0gX3RoaXMucy5sb29wO1xuICAgICAgICBpZiAoZnJvbVRvdWNoICYmIF90aGlzLiRzbGlkZS5sZW5ndGggPCAzKSB7XG4gICAgICAgICAgICBfbG9vcCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFfdGhpcy5sZ0J1c3kpIHtcbiAgICAgICAgICAgIGlmICgoX3RoaXMuaW5kZXggKyAxKSA8IF90aGlzLiRzbGlkZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pbmRleCsrO1xuICAgICAgICAgICAgICAgIF90aGlzLiRlbC50cmlnZ2VyKCdvbkJlZm9yZU5leHRTbGlkZS5sZycsIFtfdGhpcy5pbmRleF0pO1xuICAgICAgICAgICAgICAgIF90aGlzLnNsaWRlKF90aGlzLmluZGV4LCBmcm9tVG91Y2gsIGZhbHNlLCAnbmV4dCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoX2xvb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kZWwudHJpZ2dlcignb25CZWZvcmVOZXh0U2xpZGUubGcnLCBbX3RoaXMuaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2xpZGUoX3RoaXMuaW5kZXgsIGZyb21Ub3VjaCwgZmFsc2UsICduZXh0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5zLnNsaWRlRW5kQW5pbWF0b2luICYmICFmcm9tVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuJG91dGVyLmFkZENsYXNzKCdsZy1yaWdodC1lbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLiRvdXRlci5yZW1vdmVDbGFzcygnbGctcmlnaHQtZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDQwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqICBAZGVzYyBHbyB0byBwcmV2aW91cyBzbGlkZVxuICAgICAqICBAcGFyYW0ge0Jvb2xlYW59IGZyb21Ub3VjaCAtIHRydWUgaWYgc2xpZGUgZnVuY3Rpb24gY2FsbGVkIHZpYSB0b3VjaCBldmVudFxuICAgICAqL1xuICAgIFBsdWdpbi5wcm90b3R5cGUuZ29Ub1ByZXZTbGlkZSA9IGZ1bmN0aW9uKGZyb21Ub3VjaCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2xvb3AgPSBfdGhpcy5zLmxvb3A7XG4gICAgICAgIGlmIChmcm9tVG91Y2ggJiYgX3RoaXMuJHNsaWRlLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICAgIF9sb29wID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIV90aGlzLmxnQnVzeSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLmluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmluZGV4LS07XG4gICAgICAgICAgICAgICAgX3RoaXMuJGVsLnRyaWdnZXIoJ29uQmVmb3JlUHJldlNsaWRlLmxnJywgW190aGlzLmluZGV4LCBmcm9tVG91Y2hdKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5zbGlkZShfdGhpcy5pbmRleCwgZnJvbVRvdWNoLCBmYWxzZSwgJ3ByZXYnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF9sb29wKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmluZGV4ID0gX3RoaXMuJGl0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRlbC50cmlnZ2VyKCdvbkJlZm9yZVByZXZTbGlkZS5sZycsIFtfdGhpcy5pbmRleCwgZnJvbVRvdWNoXSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNsaWRlKF90aGlzLmluZGV4LCBmcm9tVG91Y2gsIGZhbHNlLCAncHJldicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3RoaXMucy5zbGlkZUVuZEFuaW1hdG9pbiAmJiAhZnJvbVRvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRvdXRlci5hZGRDbGFzcygnbGctbGVmdC1lbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLiRvdXRlci5yZW1vdmVDbGFzcygnbGctbGVmdC1lbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgUGx1Z2luLnByb3RvdHlwZS5rZXlQcmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy4kaXRlbXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdrZXl1cC5sZycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuJGl0ZW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMzcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmdvVG9QcmV2U2xpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT09IDM5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5nb1RvTmV4dFNsaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgICQod2luZG93KS5vbigna2V5ZG93bi5sZycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5zLmVzY0tleSA9PT0gdHJ1ZSAmJiBlLmtleUNvZGUgPT09IDI3KSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuJG91dGVyLmhhc0NsYXNzKCdsZy10aHVtYi1vcGVuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRvdXRlci5yZW1vdmVDbGFzcygnbGctdGh1bWItb3BlbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFBsdWdpbi5wcm90b3R5cGUuYXJyb3cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy4kb3V0ZXIuZmluZCgnLmxnLXByZXYnKS5vbignY2xpY2subGcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLmdvVG9QcmV2U2xpZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy4kb3V0ZXIuZmluZCgnLmxnLW5leHQnKS5vbignY2xpY2subGcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLmdvVG9OZXh0U2xpZGUoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFBsdWdpbi5wcm90b3R5cGUuYXJyb3dEaXNhYmxlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICAvLyBEaXNhYmxlIGFycm93cyBpZiBzLmhpZGVDb250cm9sT25FbmQgaXMgdHJ1ZVxuICAgICAgICBpZiAoIXRoaXMucy5sb29wICYmIHRoaXMucy5oaWRlQ29udHJvbE9uRW5kKSB7XG4gICAgICAgICAgICBpZiAoKGluZGV4ICsgMSkgPCB0aGlzLiRzbGlkZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRvdXRlci5maW5kKCcubGctbmV4dCcpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJykucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuJG91dGVyLmZpbmQoJy5sZy1uZXh0JykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKS5hZGRDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJG91dGVyLmZpbmQoJy5sZy1wcmV2JykucmVtb3ZlQXR0cignZGlzYWJsZWQnKS5yZW1vdmVDbGFzcygnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kb3V0ZXIuZmluZCgnLmxnLXByZXYnKS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIFBsdWdpbi5wcm90b3R5cGUuc2V0VHJhbnNsYXRlID0gZnVuY3Rpb24oJGVsLCB4VmFsdWUsIHlWYWx1ZSkge1xuICAgICAgICAvLyBqUXVlcnkgc3VwcG9ydHMgQXV0b21hdGljIENTUyBwcmVmaXhpbmcgc2luY2UgalF1ZXJ5IDEuOC4wXG4gICAgICAgIGlmICh0aGlzLnMudXNlTGVmdCkge1xuICAgICAgICAgICAgJGVsLmNzcygnbGVmdCcsIHhWYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkZWwuY3NzKHtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgnICsgKHhWYWx1ZSkgKyAncHgsICcgKyB5VmFsdWUgKyAncHgsIDBweCknXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBQbHVnaW4ucHJvdG90eXBlLnRvdWNoTW92ZSA9IGZ1bmN0aW9uKHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMpIHtcblxuICAgICAgICB2YXIgZGlzdGFuY2UgPSBlbmRDb29yZHMgLSBzdGFydENvb3JkcztcblxuICAgICAgICBpZiAoTWF0aC5hYnMoZGlzdGFuY2UpID4gMTUpIHtcbiAgICAgICAgICAgIC8vIHJlc2V0IG9wYWNpdHkgYW5kIHRyYW5zaXRpb24gZHVyYXRpb25cbiAgICAgICAgICAgIHRoaXMuJG91dGVyLmFkZENsYXNzKCdsZy1kcmFnZ2luZycpO1xuXG4gICAgICAgICAgICAvLyBtb3ZlIGN1cnJlbnQgc2xpZGVcbiAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNsYXRlKHRoaXMuJHNsaWRlLmVxKHRoaXMuaW5kZXgpLCBkaXN0YW5jZSwgMCk7XG5cbiAgICAgICAgICAgIC8vIG1vdmUgbmV4dCBhbmQgcHJldiBzbGlkZSB3aXRoIGN1cnJlbnQgc2xpZGVcbiAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNsYXRlKCQoJy5sZy1wcmV2LXNsaWRlJyksIC10aGlzLiRzbGlkZS5lcSh0aGlzLmluZGV4KS53aWR0aCgpICsgZGlzdGFuY2UsIDApO1xuICAgICAgICAgICAgdGhpcy5zZXRUcmFuc2xhdGUoJCgnLmxnLW5leHQtc2xpZGUnKSwgdGhpcy4kc2xpZGUuZXEodGhpcy5pbmRleCkud2lkdGgoKSArIGRpc3RhbmNlLCAwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBQbHVnaW4ucHJvdG90eXBlLnRvdWNoRW5kID0gZnVuY3Rpb24oZGlzdGFuY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAvLyBrZWVwIHNsaWRlIGFuaW1hdGlvbiBmb3IgYW55IG1vZGUgd2hpbGUgZHJhZ2cvc3dpcGVcbiAgICAgICAgaWYgKF90aGlzLnMubW9kZSAhPT0gJ2xnLXNsaWRlJykge1xuICAgICAgICAgICAgX3RoaXMuJG91dGVyLmFkZENsYXNzKCdsZy1zbGlkZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kc2xpZGUubm90KCcubGctY3VycmVudCwgLmxnLXByZXYtc2xpZGUsIC5sZy1uZXh0LXNsaWRlJykuY3NzKCdvcGFjaXR5JywgJzAnKTtcblxuICAgICAgICAvLyBzZXQgdHJhbnNpdGlvbiBkdXJhdGlvblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuJG91dGVyLnJlbW92ZUNsYXNzKCdsZy1kcmFnZ2luZycpO1xuICAgICAgICAgICAgaWYgKChkaXN0YW5jZSA8IDApICYmIChNYXRoLmFicyhkaXN0YW5jZSkgPiBfdGhpcy5zLnN3aXBlVGhyZXNob2xkKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmdvVG9OZXh0U2xpZGUodHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKChkaXN0YW5jZSA+IDApICYmIChNYXRoLmFicyhkaXN0YW5jZSkgPiBfdGhpcy5zLnN3aXBlVGhyZXNob2xkKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmdvVG9QcmV2U2xpZGUodHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRpc3RhbmNlKSA8IDUpIHtcblxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgY2xpY2sgaWYgZGlzdGFuY2UgaXMgbGVzcyB0aGFuIDUgcGl4XG4gICAgICAgICAgICAgICAgX3RoaXMuJGVsLnRyaWdnZXIoJ29uU2xpZGVDbGljay5sZycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfdGhpcy4kc2xpZGUucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVtb3ZlIHNsaWRlIGNsYXNzIG9uY2UgZHJhZy9zd2lwZSBpcyBjb21wbGV0ZWQgaWYgbW9kZSBpcyBub3Qgc2xpZGVcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuJG91dGVyLmhhc0NsYXNzKCdsZy1kcmFnZ2luZycpICYmIF90aGlzLnMubW9kZSAhPT0gJ2xnLXNsaWRlJykge1xuICAgICAgICAgICAgICAgIF90aGlzLiRvdXRlci5yZW1vdmVDbGFzcygnbGctc2xpZGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgX3RoaXMucy5zcGVlZCArIDEwMCk7XG5cbiAgICB9O1xuXG4gICAgUGx1Z2luLnByb3RvdHlwZS5lbmFibGVTd2lwZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhcnRDb29yZHMgPSAwO1xuICAgICAgICB2YXIgZW5kQ29vcmRzID0gMDtcbiAgICAgICAgdmFyIGlzTW92ZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoX3RoaXMucy5lbmFibGVTd2lwZSAmJiBfdGhpcy5pc1RvdWNoICYmIF90aGlzLmRvQ3NzKCkpIHtcblxuICAgICAgICAgICAgX3RoaXMuJHNsaWRlLm9uKCd0b3VjaHN0YXJ0LmxnJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuJG91dGVyLmhhc0NsYXNzKCdsZy16b29tZWQnKSAmJiAhX3RoaXMubGdCdXN5KSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubWFuYWdlU3dpcGVDbGFzcygpO1xuICAgICAgICAgICAgICAgICAgICBzdGFydENvb3JkcyA9IGUub3JpZ2luYWxFdmVudC50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfdGhpcy4kc2xpZGUub24oJ3RvdWNobW92ZS5sZycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLiRvdXRlci5oYXNDbGFzcygnbGctem9vbWVkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBlbmRDb29yZHMgPSBlLm9yaWdpbmFsRXZlbnQudGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hNb3ZlKHN0YXJ0Q29vcmRzLCBlbmRDb29yZHMpO1xuICAgICAgICAgICAgICAgICAgICBpc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX3RoaXMuJHNsaWRlLm9uKCd0b3VjaGVuZC5sZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuJG91dGVyLmhhc0NsYXNzKCdsZy16b29tZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNNb3ZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hFbmQoZW5kQ29vcmRzIC0gc3RhcnRDb29yZHMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuJGVsLnRyaWdnZXIoJ29uU2xpZGVDbGljay5sZycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBQbHVnaW4ucHJvdG90eXBlLmVuYWJsZURyYWcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXJ0Q29vcmRzID0gMDtcbiAgICAgICAgdmFyIGVuZENvb3JkcyA9IDA7XG4gICAgICAgIHZhciBpc0RyYWdpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKF90aGlzLnMuZW5hYmxlRHJhZyAmJiAhX3RoaXMuaXNUb3VjaCAmJiBfdGhpcy5kb0NzcygpKSB7XG4gICAgICAgICAgICBfdGhpcy4kc2xpZGUub24oJ21vdXNlZG93bi5sZycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBleGVjdXRlIG9ubHkgb24gLmxnLW9iamVjdFxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuJG91dGVyLmhhc0NsYXNzKCdsZy16b29tZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJChlLnRhcmdldCkuaGFzQ2xhc3MoJ2xnLW9iamVjdCcpIHx8ICQoZS50YXJnZXQpLmhhc0NsYXNzKCdsZy12aWRlby1wbGF5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5sZ0J1c3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5tYW5hZ2VTd2lwZUNsYXNzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRDb29yZHMgPSBlLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRHJhZ2luZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAqKiBGaXggZm9yIHdlYmtpdCBjdXJzb3IgaXNzdWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI2NzIzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuJG91dGVyLnNjcm9sbExlZnQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy4kb3V0ZXIuc2Nyb2xsTGVmdCAtPSAxO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuJG91dGVyLnJlbW92ZUNsYXNzKCdsZy1ncmFiJykuYWRkQ2xhc3MoJ2xnLWdyYWJiaW5nJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy4kZWwudHJpZ2dlcignb25EcmFnc3RhcnQubGcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICQod2luZG93KS5vbignbW91c2Vtb3ZlLmxnJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc0RyYWdpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNNb3ZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGVuZENvb3JkcyA9IGUucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRvdWNoTW92ZShzdGFydENvb3JkcywgZW5kQ29vcmRzKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuJGVsLnRyaWdnZXIoJ29uRHJhZ21vdmUubGcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdtb3VzZXVwLmxnJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc01vdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudG91Y2hFbmQoZW5kQ29vcmRzIC0gc3RhcnRDb29yZHMpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kZWwudHJpZ2dlcignb25EcmFnZW5kLmxnJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkKGUudGFyZ2V0KS5oYXNDbGFzcygnbGctb2JqZWN0JykgfHwgJChlLnRhcmdldCkuaGFzQ2xhc3MoJ2xnLXZpZGVvLXBsYXknKSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kZWwudHJpZ2dlcignb25TbGlkZUNsaWNrLmxnJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCBleGVjdXRpb24gb24gY2xpY2tcbiAgICAgICAgICAgICAgICBpZiAoaXNEcmFnaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzRHJhZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy4kb3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLWdyYWJiaW5nJykuYWRkQ2xhc3MoJ2xnLWdyYWInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG4gICAgfTtcblxuICAgIFBsdWdpbi5wcm90b3R5cGUubWFuYWdlU3dpcGVDbGFzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3RvdWNoTmV4dCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgICB2YXIgX3RvdWNoUHJldiA9IHRoaXMuaW5kZXggLSAxO1xuICAgICAgICBpZiAodGhpcy5zLmxvb3AgJiYgdGhpcy4kc2xpZGUubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICBfdG91Y2hQcmV2ID0gdGhpcy4kc2xpZGUubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbmRleCA9PT0gdGhpcy4kc2xpZGUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIF90b3VjaE5leHQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kc2xpZGUucmVtb3ZlQ2xhc3MoJ2xnLW5leHQtc2xpZGUgbGctcHJldi1zbGlkZScpO1xuICAgICAgICBpZiAoX3RvdWNoUHJldiA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLiRzbGlkZS5lcShfdG91Y2hQcmV2KS5hZGRDbGFzcygnbGctcHJldi1zbGlkZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy4kc2xpZGUuZXEoX3RvdWNoTmV4dCkuYWRkQ2xhc3MoJ2xnLW5leHQtc2xpZGUnKTtcbiAgICB9O1xuXG4gICAgUGx1Z2luLnByb3RvdHlwZS5tb3VzZXdoZWVsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIF90aGlzLiRvdXRlci5vbignbW91c2V3aGVlbC5sZycsIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgaWYgKCFlLmRlbHRhWSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGUuZGVsdGFZID4gMCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmdvVG9QcmV2U2xpZGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZ29Ub05leHRTbGlkZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFBsdWdpbi5wcm90b3R5cGUuY2xvc2VHYWxsZXJ5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1vdXNlZG93biA9IGZhbHNlO1xuICAgICAgICB0aGlzLiRvdXRlci5maW5kKCcubGctY2xvc2UnKS5vbignY2xpY2subGcnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF90aGlzLnMuY2xvc2FibGUpIHtcblxuICAgICAgICAgICAgLy8gSWYgeW91IGRyYWcgdGhlIHNsaWRlIGFuZCByZWxlYXNlIG91dHNpZGUgZ2FsbGVyeSBnZXRzIGNsb3NlIG9uIGNocm9tZVxuICAgICAgICAgICAgLy8gZm9yIHByZXZlbnRpbmcgdGhpcyBjaGVjayBtb3VzZWRvd24gYW5kIG1vdXNldXAgaGFwcGVuZWQgb24gLmxnLWl0ZW0gb3IgbGctb3V0ZXJcbiAgICAgICAgICAgIF90aGlzLiRvdXRlci5vbignbW91c2Vkb3duLmxnJywgZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKCcubGctb3V0ZXInKSB8fCAkKGUudGFyZ2V0KS5pcygnLmxnLWl0ZW0gJykgfHwgJChlLnRhcmdldCkuaXMoJy5sZy1pbWctd3JhcCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdXNlZG93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbW91c2Vkb3duID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgX3RoaXMuJG91dGVyLm9uKCdtb3VzZXVwLmxnJywgZnVuY3Rpb24oZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKCcubGctb3V0ZXInKSB8fCAkKGUudGFyZ2V0KS5pcygnLmxnLWl0ZW0gJykgfHwgJChlLnRhcmdldCkuaXMoJy5sZy1pbWctd3JhcCcpICYmIG1vdXNlZG93bikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLiRvdXRlci5oYXNDbGFzcygnbGctZHJhZ2dpbmcnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgUGx1Z2luLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oZCkge1xuXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCFkKSB7XG4gICAgICAgICAgICBfdGhpcy4kZWwudHJpZ2dlcignb25CZWZvcmVDbG9zZS5sZycpO1xuICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbFRvcChfdGhpcy5wcmV2U2Nyb2xsVG9wKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGlmIGQgaXMgZmFsc2Ugb3IgdW5kZWZpbmVkIGRlc3Ryb3kgd2lsbCBvbmx5IGNsb3NlIHRoZSBnYWxsZXJ5XG4gICAgICAgICAqIHBsdWdpbnMgaW5zdGFuY2UgcmVtYWlucyB3aXRoIHRoZSBlbGVtZW50XG4gICAgICAgICAqXG4gICAgICAgICAqIGlmIGQgaXMgdHJ1ZSBkZXN0cm95IHdpbGwgY29tcGxldGVseSByZW1vdmUgdGhlIHBsdWdpblxuICAgICAgICAgKi9cblxuICAgICAgICBpZiAoZCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5zLmR5bmFtaWMpIHtcbiAgICAgICAgICAgICAgICAvLyBvbmx5IHdoZW4gbm90IHVzaW5nIGR5bmFtaWMgbW9kZSBpcyAkaXRlbXMgYSBqcXVlcnkgY29sbGVjdGlvblxuICAgICAgICAgICAgICAgIHRoaXMuJGl0ZW1zLm9mZignY2xpY2subGcgY2xpY2subGdjdXN0b20nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJC5yZW1vdmVEYXRhKF90aGlzLmVsLCAnbGlnaHRHYWxsZXJ5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVbmJpbmQgYWxsIGV2ZW50cyBhZGRlZCBieSBsaWdodEdhbGxlcnlcbiAgICAgICAgdGhpcy4kZWwub2ZmKCcubGcudG0nKTtcblxuICAgICAgICAvLyBEaXN0cm95IGFsbCBsaWdodEdhbGxlcnkgbW9kdWxlc1xuICAgICAgICAkLmVhY2goJC5mbi5saWdodEdhbGxlcnkubW9kdWxlcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMubW9kdWxlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubW9kdWxlc1trZXldLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5sR2FsbGVyeU9uID0gZmFsc2U7XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmhpZGVCYXJ0aW1lb3V0KTtcbiAgICAgICAgdGhpcy5oaWRlQmFydGltZW91dCA9IGZhbHNlO1xuICAgICAgICAkKHdpbmRvdykub2ZmKCcubGcnKTtcbiAgICAgICAgJCgnYm9keScpLnJlbW92ZUNsYXNzKCdsZy1vbiBsZy1mcm9tLWhhc2gnKTtcblxuICAgICAgICBpZiAoX3RoaXMuJG91dGVyKSB7XG4gICAgICAgICAgICBfdGhpcy4kb3V0ZXIucmVtb3ZlQ2xhc3MoJ2xnLXZpc2libGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJy5sZy1iYWNrZHJvcCcpLnJlbW92ZUNsYXNzKCdpbicpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuJG91dGVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuJG91dGVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKCcubGctYmFja2Ryb3AnKS5yZW1vdmUoKTtcblxuICAgICAgICAgICAgaWYgKCFkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuJGVsLnRyaWdnZXIoJ29uQ2xvc2VBZnRlci5sZycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0sIF90aGlzLnMuYmFja2Ryb3BEdXJhdGlvbiArIDUwKTtcbiAgICB9O1xuXG4gICAgJC5mbi5saWdodEdhbGxlcnkgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoISQuZGF0YSh0aGlzLCAnbGlnaHRHYWxsZXJ5JykpIHtcbiAgICAgICAgICAgICAgICAkLmRhdGEodGhpcywgJ2xpZ2h0R2FsbGVyeScsIG5ldyBQbHVnaW4odGhpcywgb3B0aW9ucykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRhdGEoJ2xpZ2h0R2FsbGVyeScpLmluaXQoKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbGlnaHRHYWxsZXJ5IGhhcyBub3QgaW5pdGlhdGVkIHByb3Blcmx5Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJC5mbi5saWdodEdhbGxlcnkubW9kdWxlcyA9IHt9O1xuXG59KSgpO1xuXG5cbn0pKTtcbiIsIi8qXG4gIGh0dHA6Ly9naXRodWIuY29tL2RhbnBhbG1lci9qcXVlcnkuY29tcGxleGlmeS5qc1xuXG4gIFRoaXMgY29kZSBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgV1RGUEwgdjI6XG4qL1xuKGZ1bmN0aW9uICgkKSB7XG5cbiAgJC5mbi5leHRlbmQoe1xuICAgIGNvbXBsZXhpZnk6IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG5cbiAgICAgIHZhciBNSU5fQ09NUExFWElUWSA9IDQ5OyAvLyAxMiBjaGFycyB3aXRoIFVwcGVyLCBMb3dlciBhbmQgTnVtYmVyXG4gICAgICB2YXIgTUFYX0NPTVBMRVhJVFkgPSAxMjA7IC8vICAyNSBjaGFycywgYWxsIGNoYXJzZXRzXG4gICAgICB2YXIgQ0hBUlNFVFMgPSBbXG4gICAgICAgIC8vIENvbW1vbmx5IFVzZWRcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgWzB4MDAyMCwgMHgwMDIwXSwgLy8gU3BhY2VcbiAgICAgICAgWzB4MDAzMCwgMHgwMDM5XSwgLy8gTnVtYmVyc1xuICAgICAgICBbMHgwMDQxLCAweDAwNUFdLCAvLyBVcHBlcmNhc2VcbiAgICAgICAgWzB4MDA2MSwgMHgwMDdBXSwgLy8gTG93ZXJjYXNlXG4gICAgICAgIFsweDAwMjEsIDB4MDAyRl0sIC8vIFB1bmN0dWF0aW9uXG4gICAgICAgIFsweDAwM0EsIDB4MDA0MF0sIC8vIFB1bmN0dWF0aW9uXG4gICAgICAgIFsweDAwNUIsIDB4MDA2MF0sIC8vIFB1bmN0dWF0aW9uXG4gICAgICAgIFsweDAwN0IsIDB4MDA3RV0sIC8vIFB1bmN0dWF0aW9uXG4gICAgICAgIC8vIEV2ZXJ5dGhpbmcgRWxzZVxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBbMHgwMDgwLCAweDAwRkZdLCAvLyBMYXRpbi0xIFN1cHBsZW1lbnRcbiAgICAgICAgWzB4MDEwMCwgMHgwMTdGXSwgLy8gTGF0aW4gRXh0ZW5kZWQtQVxuICAgICAgICBbMHgwMTgwLCAweDAyNEZdLCAvLyBMYXRpbiBFeHRlbmRlZC1CXG4gICAgICAgIFsweDAyNTAsIDB4MDJBRl0sIC8vIElQQSBFeHRlbnNpb25zXG4gICAgICAgIFsweDAyQjAsIDB4MDJGRl0sIC8vIFNwYWNpbmcgTW9kaWZpZXIgTGV0dGVyc1xuICAgICAgICBbMHgwMzAwLCAweDAzNkZdLCAvLyBDb21iaW5pbmcgRGlhY3JpdGljYWwgTWFya3NcbiAgICAgICAgWzB4MDM3MCwgMHgwM0ZGXSwgLy8gR3JlZWtcbiAgICAgICAgWzB4MDQwMCwgMHgwNEZGXSwgLy8gQ3lyaWxsaWNcbiAgICAgICAgWzB4MDUzMCwgMHgwNThGXSwgLy8gQXJtZW5pYW5cbiAgICAgICAgWzB4MDU5MCwgMHgwNUZGXSwgLy8gSGVicmV3XG4gICAgICAgIFsweDA2MDAsIDB4MDZGRl0sIC8vIEFyYWJpY1xuICAgICAgICBbMHgwNzAwLCAweDA3NEZdLCAvLyBTeXJpYWNcbiAgICAgICAgWzB4MDc4MCwgMHgwN0JGXSwgLy8gVGhhYW5hXG4gICAgICAgIFsweDA5MDAsIDB4MDk3Rl0sIC8vIERldmFuYWdhcmlcbiAgICAgICAgWzB4MDk4MCwgMHgwOUZGXSwgLy8gQmVuZ2FsaVxuICAgICAgICBbMHgwQTAwLCAweDBBN0ZdLCAvLyBHdXJtdWtoaVxuICAgICAgICBbMHgwQTgwLCAweDBBRkZdLCAvLyBHdWphcmF0aVxuICAgICAgICBbMHgwQjAwLCAweDBCN0ZdLCAvLyBPcml5YVxuICAgICAgICBbMHgwQjgwLCAweDBCRkZdLCAvLyBUYW1pbFxuICAgICAgICBbMHgwQzAwLCAweDBDN0ZdLCAvLyBUZWx1Z3VcbiAgICAgICAgWzB4MEM4MCwgMHgwQ0ZGXSwgLy8gS2FubmFkYVxuICAgICAgICBbMHgwRDAwLCAweDBEN0ZdLCAvLyBNYWxheWFsYW1cbiAgICAgICAgWzB4MEQ4MCwgMHgwREZGXSwgLy8gU2luaGFsYVxuICAgICAgICBbMHgwRTAwLCAweDBFN0ZdLCAvLyBUaGFpXG4gICAgICAgIFsweDBFODAsIDB4MEVGRl0sIC8vIExhb1xuICAgICAgICBbMHgwRjAwLCAweDBGRkZdLCAvLyBUaWJldGFuXG4gICAgICAgIFsweDEwMDAsIDB4MTA5Rl0sIC8vIE15YW5tYXJcbiAgICAgICAgWzB4MTBBMCwgMHgxMEZGXSwgLy8gR2VvcmdpYW5cbiAgICAgICAgWzB4MTEwMCwgMHgxMUZGXSwgLy8gSGFuZ3VsIEphbW9cbiAgICAgICAgWzB4MTIwMCwgMHgxMzdGXSwgLy8gRXRoaW9waWNcbiAgICAgICAgWzB4MTNBMCwgMHgxM0ZGXSwgLy8gQ2hlcm9rZWVcbiAgICAgICAgWzB4MTQwMCwgMHgxNjdGXSwgLy8gVW5pZmllZCBDYW5hZGlhbiBBYm9yaWdpbmFsIFN5bGxhYmljc1xuICAgICAgICBbMHgxNjgwLCAweDE2OUZdLCAvLyBPZ2hhbVxuICAgICAgICBbMHgxNkEwLCAweDE2RkZdLCAvLyBSdW5pY1xuICAgICAgICBbMHgxNzgwLCAweDE3RkZdLCAvLyBLaG1lclxuICAgICAgICBbMHgxODAwLCAweDE4QUZdLCAvLyBNb25nb2xpYW5cbiAgICAgICAgWzB4MUUwMCwgMHgxRUZGXSwgLy8gTGF0aW4gRXh0ZW5kZWQgQWRkaXRpb25hbFxuICAgICAgICBbMHgxRjAwLCAweDFGRkZdLCAvLyBHcmVlayBFeHRlbmRlZFxuICAgICAgICBbMHgyMDAwLCAweDIwNkZdLCAvLyBHZW5lcmFsIFB1bmN0dWF0aW9uXG4gICAgICAgIFsweDIwNzAsIDB4MjA5Rl0sIC8vIFN1cGVyc2NyaXB0cyBhbmQgU3Vic2NyaXB0c1xuICAgICAgICBbMHgyMEEwLCAweDIwQ0ZdLCAvLyBDdXJyZW5jeSBTeW1ib2xzXG4gICAgICAgIFsweDIwRDAsIDB4MjBGRl0sIC8vIENvbWJpbmluZyBNYXJrcyBmb3IgU3ltYm9sc1xuICAgICAgICBbMHgyMTAwLCAweDIxNEZdLCAvLyBMZXR0ZXJsaWtlIFN5bWJvbHNcbiAgICAgICAgWzB4MjE1MCwgMHgyMThGXSwgLy8gTnVtYmVyIEZvcm1zXG4gICAgICAgIFsweDIxOTAsIDB4MjFGRl0sIC8vIEFycm93c1xuICAgICAgICBbMHgyMjAwLCAweDIyRkZdLCAvLyBNYXRoZW1hdGljYWwgT3BlcmF0b3JzXG4gICAgICAgIFsweDIzMDAsIDB4MjNGRl0sIC8vIE1pc2NlbGxhbmVvdXMgVGVjaG5pY2FsXG4gICAgICAgIFsweDI0MDAsIDB4MjQzRl0sIC8vIENvbnRyb2wgUGljdHVyZXNcbiAgICAgICAgWzB4MjQ0MCwgMHgyNDVGXSwgLy8gT3B0aWNhbCBDaGFyYWN0ZXIgUmVjb2duaXRpb25cbiAgICAgICAgWzB4MjQ2MCwgMHgyNEZGXSwgLy8gRW5jbG9zZWQgQWxwaGFudW1lcmljc1xuICAgICAgICBbMHgyNTAwLCAweDI1N0ZdLCAvLyBCb3ggRHJhd2luZ1xuICAgICAgICBbMHgyNTgwLCAweDI1OUZdLCAvLyBCbG9jayBFbGVtZW50c1xuICAgICAgICBbMHgyNUEwLCAweDI1RkZdLCAvLyBHZW9tZXRyaWMgU2hhcGVzXG4gICAgICAgIFsweDI2MDAsIDB4MjZGRl0sIC8vIE1pc2NlbGxhbmVvdXMgU3ltYm9sc1xuICAgICAgICBbMHgyNzAwLCAweDI3QkZdLCAvLyBEaW5nYmF0c1xuICAgICAgICBbMHgyODAwLCAweDI4RkZdLCAvLyBCcmFpbGxlIFBhdHRlcm5zXG4gICAgICAgIFsweDJFODAsIDB4MkVGRl0sIC8vIENKSyBSYWRpY2FscyBTdXBwbGVtZW50XG4gICAgICAgIFsweDJGMDAsIDB4MkZERl0sIC8vIEthbmd4aSBSYWRpY2Fsc1xuICAgICAgICBbMHgyRkYwLCAweDJGRkZdLCAvLyBJZGVvZ3JhcGhpYyBEZXNjcmlwdGlvbiBDaGFyYWN0ZXJzXG4gICAgICAgIFsweDMwMDAsIDB4MzAzRl0sIC8vIENKSyBTeW1ib2xzIGFuZCBQdW5jdHVhdGlvblxuICAgICAgICBbMHgzMDQwLCAweDMwOUZdLCAvLyBIaXJhZ2FuYVxuICAgICAgICBbMHgzMEEwLCAweDMwRkZdLCAvLyBLYXRha2FuYVxuICAgICAgICBbMHgzMTAwLCAweDMxMkZdLCAvLyBCb3BvbW9mb1xuICAgICAgICBbMHgzMTMwLCAweDMxOEZdLCAvLyBIYW5ndWwgQ29tcGF0aWJpbGl0eSBKYW1vXG4gICAgICAgIFsweDMxOTAsIDB4MzE5Rl0sIC8vIEthbmJ1blxuICAgICAgICBbMHgzMUEwLCAweDMxQkZdLCAvLyBCb3BvbW9mbyBFeHRlbmRlZFxuICAgICAgICBbMHgzMjAwLCAweDMyRkZdLCAvLyBFbmNsb3NlZCBDSksgTGV0dGVycyBhbmQgTW9udGhzXG4gICAgICAgIFsweDMzMDAsIDB4MzNGRl0sIC8vIENKSyBDb21wYXRpYmlsaXR5XG4gICAgICAgIFsweDM0MDAsIDB4NERCNV0sIC8vIENKSyBVbmlmaWVkIElkZW9ncmFwaHMgRXh0ZW5zaW9uIEFcbiAgICAgICAgWzB4NEUwMCwgMHg5RkZGXSwgLy8gQ0pLIFVuaWZpZWQgSWRlb2dyYXBoc1xuICAgICAgICBbMHhBMDAwLCAweEE0OEZdLCAvLyBZaSBTeWxsYWJsZXNcbiAgICAgICAgWzB4QTQ5MCwgMHhBNENGXSwgLy8gWWkgUmFkaWNhbHNcbiAgICAgICAgWzB4QUMwMCwgMHhEN0EzXSwgLy8gSGFuZ3VsIFN5bGxhYmxlc1xuICAgICAgICBbMHhEODAwLCAweERCN0ZdLCAvLyBIaWdoIFN1cnJvZ2F0ZXNcbiAgICAgICAgWzB4REI4MCwgMHhEQkZGXSwgLy8gSGlnaCBQcml2YXRlIFVzZSBTdXJyb2dhdGVzXG4gICAgICAgIFsweERDMDAsIDB4REZGRl0sIC8vIExvdyBTdXJyb2dhdGVzXG4gICAgICAgIFsweEUwMDAsIDB4RjhGRl0sIC8vIFByaXZhdGUgVXNlXG4gICAgICAgIFsweEY5MDAsIDB4RkFGRl0sIC8vIENKSyBDb21wYXRpYmlsaXR5IElkZW9ncmFwaHNcbiAgICAgICAgWzB4RkIwMCwgMHhGQjRGXSwgLy8gQWxwaGFiZXRpYyBQcmVzZW50YXRpb24gRm9ybXNcbiAgICAgICAgWzB4RkI1MCwgMHhGREZGXSwgLy8gQXJhYmljIFByZXNlbnRhdGlvbiBGb3Jtcy1BXG4gICAgICAgIFsweEZFMjAsIDB4RkUyRl0sIC8vIENvbWJpbmluZyBIYWxmIE1hcmtzXG4gICAgICAgIFsweEZFMzAsIDB4RkU0Rl0sIC8vIENKSyBDb21wYXRpYmlsaXR5IEZvcm1zXG4gICAgICAgIFsweEZFNTAsIDB4RkU2Rl0sIC8vIFNtYWxsIEZvcm0gVmFyaWFudHNcbiAgICAgICAgWzB4RkU3MCwgMHhGRUZFXSwgLy8gQXJhYmljIFByZXNlbnRhdGlvbiBGb3Jtcy1CXG4gICAgICAgIFsweEZFRkYsIDB4RkVGRl0sIC8vIFNwZWNpYWxzXG4gICAgICAgIFsweEZGMDAsIDB4RkZFRl0sIC8vIEhhbGZ3aWR0aCBhbmQgRnVsbHdpZHRoIEZvcm1zXG4gICAgICAgIFsweEZGRjAsIDB4RkZGRF0gIC8vIFNwZWNpYWxzXG4gICAgICBdO1xuXG4gICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgIG1pbmltdW1DaGFyczogOCxcbiAgICAgICAgc3RyZW5ndGhTY2FsZUZhY3RvcjogMSxcbiAgICAgICAgYmFubmVkUGFzc3dvcmRzOiB3aW5kb3cuQ09NUExFWElGWV9CQU5MSVNUIHx8IFtdLFxuICAgICAgICBiYW5Nb2RlOiAnc3RyaWN0JyAvLyAoc3RyaWN0fGxvb3NlKVxuICAgICAgfTtcblxuICAgICAgaWYoJC5pc0Z1bmN0aW9uKG9wdGlvbnMpICYmICFjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgZnVuY3Rpb24gYWRkaXRpb25hbENvbXBsZXhpdHlGb3JDaGFyc2V0KHN0ciwgY2hhcnNldCkge1xuICAgICAgICBmb3IgKHZhciBpID0gc3RyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGNoYXJzZXRbMF0gPD0gc3RyLmNoYXJDb2RlQXQoaSkgJiYgc3RyLmNoYXJDb2RlQXQoaSkgPD0gY2hhcnNldFsxXSkge1xuICAgICAgICAgICAgcmV0dXJuIGNoYXJzZXRbMV0gLSBjaGFyc2V0WzBdICsgMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGluQmFubGlzdChzdHIpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuYmFuTW9kZSA9PT0gJ3N0cmljdCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMuYmFubmVkUGFzc3dvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoc3RyLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihvcHRpb25zLmJhbm5lZFBhc3N3b3Jkc1tpXS50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkLmluQXJyYXkoc3RyLCBvcHRpb25zLmJhbm5lZFBhc3N3b3JkcykgPiAtMSA/IHRydWUgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBldmFsdWF0ZVNlY3VyaXR5KCkge1xuICAgICAgICB2YXIgcGFzc3dvcmQgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICB2YXIgY29tcGxleGl0eSA9IDAsIHZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgLy8gUmVzZXQgY29tcGxleGl0eSB0byAwIHdoZW4gYmFubmVkIHBhc3N3b3JkIGlzIGZvdW5kXG4gICAgICAgIGlmICghaW5CYW5saXN0KHBhc3N3b3JkKSkge1xuXG4gICAgICAgICAgLy8gQWRkIGNoYXJhY3RlciBjb21wbGV4aXR5XG4gICAgICAgICAgZm9yICh2YXIgaSA9IENIQVJTRVRTLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb21wbGV4aXR5ICs9IGFkZGl0aW9uYWxDb21wbGV4aXR5Rm9yQ2hhcnNldChwYXNzd29yZCwgQ0hBUlNFVFNbaV0pO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBsZXhpdHkgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXNlIG5hdHVyYWwgbG9nIHRvIHByb2R1Y2UgbGluZWFyIHNjYWxlXG4gICAgICAgIGNvbXBsZXhpdHkgPSBNYXRoLmxvZyhNYXRoLnBvdyhjb21wbGV4aXR5LCBwYXNzd29yZC5sZW5ndGgpKSAqICgxL29wdGlvbnMuc3RyZW5ndGhTY2FsZUZhY3Rvcik7XG5cbiAgICAgICAgdmFsaWQgPSAoY29tcGxleGl0eSA+IE1JTl9DT01QTEVYSVRZICYmIHBhc3N3b3JkLmxlbmd0aCA+PSBvcHRpb25zLm1pbmltdW1DaGFycyk7XG5cbiAgICAgICAgLy8gU2NhbGUgdG8gcGVyY2VudGFnZSwgc28gaXQgY2FuIGJlIHVzZWQgZm9yIGEgcHJvZ3Jlc3MgYmFyXG4gICAgICAgIGNvbXBsZXhpdHkgPSAoY29tcGxleGl0eSAvIE1BWF9DT01QTEVYSVRZKSAqIDEwMDtcbiAgICAgICAgY29tcGxleGl0eSA9IChjb21wbGV4aXR5ID4gMTAwKSA/IDEwMCA6IGNvbXBsZXhpdHk7XG5cbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCB2YWxpZCwgY29tcGxleGl0eSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBcdGlmKCQodGhpcykudmFsKCkpIHtcbiAgICAgICAgICBldmFsdWF0ZVNlY3VyaXR5LmFwcGx5KHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICQodGhpcykuYmluZCgna2V5dXAgZm9jdXMgaW5wdXQgcHJvcGVydHljaGFuZ2UgbW91c2V1cCcsIGV2YWx1YXRlU2VjdXJpdHkpO1xuICAgICAgfSk7XG5cbiAgICB9XG4gIH0pO1xuXG59KShqUXVlcnkpO1xuIiwiLyohXG4qIGpRdWVyeSBQYXNzd29yZCBTdHJlbmd0aCBwbHVnaW4gZm9yIFp1cmIgRm91bmRhdGlvblxuKiAyMDE1LTEwLTA1XG4qXG4qIENvcHlyaWdodCAoYykgMjAwOC0yMDEzIFRhbmUgUGlwZXJcbiogQ29weXJpZ2h0IChjKSAyMDEzIEFsZWphbmRybyBCbGFuY29cbiogQ29weXJpZ2h0IChjKSAyMDE0IEVkIFRvd25lbmRcbiogRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGFuZCBHUEwgbGljZW5zZXMuXG4qL1xuXG4oZnVuY3Rpb24gKGpRdWVyeSkge1xuLy8gU291cmNlOiBzcmMvcnVsZXMuanNcblxuXG5cblxudmFyIHJ1bGVzRW5naW5lID0ge307XG5cbnRyeSB7XG4gICAgaWYgKCFqUXVlcnkgJiYgbW9kdWxlICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpLFxuICAgICAgICAgICAganNkb20gPSByZXF1aXJlKFwianNkb21cIikuanNkb207XG4gICAgICAgIGpRdWVyeSA9IGpRdWVyeShqc2RvbSgpLnBhcmVudFdpbmRvdyk7XG4gICAgfVxufSBjYXRjaCAoaWdub3JlKSB7fVxuXG4oZnVuY3Rpb24gKCQsIHJ1bGVzRW5naW5lKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIHZhbGlkYXRpb24gPSB7fTtcblxuICAgIHJ1bGVzRW5naW5lLmZvcmJpZGRlblNlcXVlbmNlcyA9IFtcbiAgICAgICAgXCIwMTIzNDU2Nzg5XCIsIFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIiwgXCJxd2VydHl1aW9wXCIsIFwiYXNkZmdoamtsXCIsXG4gICAgICAgIFwienhjdmJubVwiLCBcIiFAIyQlXiYqKClfK1wiXG4gICAgXTtcblxuICAgIHZhbGlkYXRpb24ud29yZE5vdEVtYWlsID0gZnVuY3Rpb24gKG9wdGlvbnMsIHdvcmQsIHNjb3JlKSB7XG4gICAgICAgIGlmICh3b3JkLm1hdGNoKC9eKFtcXHdcXCFcXCMkXFwlXFwmXFwnXFwqXFwrXFwtXFwvXFw9XFw/XFxeXFxge1xcfFxcfVxcfl0rXFwuKSpbXFx3XFwhXFwjJFxcJVxcJlxcJ1xcKlxcK1xcLVxcL1xcPVxcP1xcXlxcYHtcXHxcXH1cXH5dK0AoKCgoKFthLXowLTldezF9W2EtejAtOVxcLV17MCw2Mn1bYS16MC05XXsxfSl8W2Etel0pXFwuKStbYS16XXsyLDZ9KXwoXFxkezEsM31cXC4pezN9XFxkezEsM30oXFw6XFxkezEsNX0pPykkL2kpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcblxuICAgIHZhbGlkYXRpb24ud29yZExlbmd0aCA9IGZ1bmN0aW9uIChvcHRpb25zLCB3b3JkLCBzY29yZSkge1xuICAgICAgICB2YXIgd29yZGxlbiA9IHdvcmQubGVuZ3RoLFxuICAgICAgICAgICAgbGVuU2NvcmUgPSBNYXRoLnBvdyh3b3JkbGVuLCBvcHRpb25zLnJ1bGVzLnJhaXNlUG93ZXIpO1xuICAgICAgICBpZiAod29yZGxlbiA8IG9wdGlvbnMuY29tbW9uLm1pbkNoYXIpIHtcbiAgICAgICAgICAgIGxlblNjb3JlID0gKGxlblNjb3JlICsgc2NvcmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsZW5TY29yZTtcbiAgICB9O1xuXG4gICAgdmFsaWRhdGlvbi53b3JkU2ltaWxhclRvVXNlcm5hbWUgPSBmdW5jdGlvbiAob3B0aW9ucywgd29yZCwgc2NvcmUpIHtcbiAgICAgICAgdmFyIHVzZXJuYW1lID0gJChvcHRpb25zLmNvbW1vbi51c2VybmFtZUZpZWxkKS52YWwoKTtcbiAgICAgICAgaWYgKHVzZXJuYW1lICYmIHdvcmQudG9Mb3dlckNhc2UoKS5tYXRjaCh1c2VybmFtZS5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw9XFw/XFw6XFwuXFxcXFxcXlxcJFxcfFxcIVxcLF0vZywgXCJcXFxcJCZcIikudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY29yZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuXG4gICAgdmFsaWRhdGlvbi53b3JkVHdvQ2hhcmFjdGVyQ2xhc3NlcyA9IGZ1bmN0aW9uIChvcHRpb25zLCB3b3JkLCBzY29yZSkge1xuICAgICAgICBpZiAod29yZC5tYXRjaCgvKFthLXpdLipbQS1aXSl8KFtBLVpdLipbYS16XSkvKSB8fFxuICAgICAgICAgICAgICAgICh3b3JkLm1hdGNoKC8oW2EtekEtWl0pLykgJiYgd29yZC5tYXRjaCgvKFswLTldKS8pKSB8fFxuICAgICAgICAgICAgICAgICh3b3JkLm1hdGNoKC8oLlshLEAsIywkLCUsXFxeLCYsKiw/LF8sfl0pLykgJiYgd29yZC5tYXRjaCgvW2EtekEtWjAtOV9dLykpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcblxuICAgIHZhbGlkYXRpb24ud29yZFJlcGV0aXRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMsIHdvcmQsIHNjb3JlKSB7XG4gICAgICAgIGlmICh3b3JkLm1hdGNoKC8oLilcXDFcXDEvKSkgeyByZXR1cm4gc2NvcmU7IH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcblxuICAgIHZhbGlkYXRpb24ud29yZFNlcXVlbmNlcyA9IGZ1bmN0aW9uIChvcHRpb25zLCB3b3JkLCBzY29yZSkge1xuICAgICAgICB2YXIgZm91bmQgPSBmYWxzZSxcbiAgICAgICAgICAgIGo7XG4gICAgICAgIGlmICh3b3JkLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICQuZWFjaChydWxlc0VuZ2luZS5mb3JiaWRkZW5TZXF1ZW5jZXMsIGZ1bmN0aW9uIChpZHgsIHNlcSkge1xuICAgICAgICAgICAgICAgIGlmIChmb3VuZCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgICB2YXIgc2VxdWVuY2VzID0gW3NlcSwgc2VxLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyldO1xuICAgICAgICAgICAgICAgICQuZWFjaChzZXF1ZW5jZXMsIGZ1bmN0aW9uIChpZHgsIHNlcXVlbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCAod29yZC5sZW5ndGggLSAyKTsgaiArPSAxKSB7IC8vIGl0ZXJhdGUgdGhlIHdvcmQgdHJvdWdoIGEgc2xpZGluZyB3aW5kb3cgb2Ygc2l6ZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmluZGV4T2Yod29yZC50b0xvd2VyQ2FzZSgpLnN1YnN0cmluZyhqLCBqICsgMykpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGZvdW5kKSB7IHJldHVybiBzY29yZTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG5cbiAgICB2YWxpZGF0aW9uLndvcmRMb3dlcmNhc2UgPSBmdW5jdGlvbiAob3B0aW9ucywgd29yZCwgc2NvcmUpIHtcbiAgICAgICAgcmV0dXJuIHdvcmQubWF0Y2goL1thLXpdLykgJiYgc2NvcmU7XG4gICAgfTtcblxuICAgIHZhbGlkYXRpb24ud29yZFVwcGVyY2FzZSA9IGZ1bmN0aW9uIChvcHRpb25zLCB3b3JkLCBzY29yZSkge1xuICAgICAgICByZXR1cm4gd29yZC5tYXRjaCgvW0EtWl0vKSAmJiBzY29yZTtcbiAgICB9O1xuXG4gICAgdmFsaWRhdGlvbi53b3JkT25lTnVtYmVyID0gZnVuY3Rpb24gKG9wdGlvbnMsIHdvcmQsIHNjb3JlKSB7XG4gICAgICAgIHJldHVybiB3b3JkLm1hdGNoKC9cXGQrLykgJiYgc2NvcmU7XG4gICAgfTtcblxuICAgIHZhbGlkYXRpb24ud29yZFRocmVlTnVtYmVycyA9IGZ1bmN0aW9uIChvcHRpb25zLCB3b3JkLCBzY29yZSkge1xuICAgICAgICByZXR1cm4gd29yZC5tYXRjaCgvKC4qWzAtOV0uKlswLTldLipbMC05XSkvKSAmJiBzY29yZTtcbiAgICB9O1xuXG4gICAgdmFsaWRhdGlvbi53b3JkT25lU3BlY2lhbENoYXIgPSBmdW5jdGlvbiAob3B0aW9ucywgd29yZCwgc2NvcmUpIHtcbiAgICAgICAgcmV0dXJuIHdvcmQubWF0Y2goL1shLEAsIywkLCUsXFxeLCYsKiw/LF8sfl0vKSAmJiBzY29yZTtcbiAgICB9O1xuXG4gICAgdmFsaWRhdGlvbi53b3JkVHdvU3BlY2lhbENoYXIgPSBmdW5jdGlvbiAob3B0aW9ucywgd29yZCwgc2NvcmUpIHtcbiAgICAgICAgcmV0dXJuIHdvcmQubWF0Y2goLyguKlshLEAsIywkLCUsXFxeLCYsKiw/LF8sfl0uKlshLEAsIywkLCUsXFxeLCYsKiw/LF8sfl0pLykgJiYgc2NvcmU7XG4gICAgfTtcblxuICAgIHZhbGlkYXRpb24ud29yZFVwcGVyTG93ZXJDb21ibyA9IGZ1bmN0aW9uIChvcHRpb25zLCB3b3JkLCBzY29yZSkge1xuICAgICAgICByZXR1cm4gd29yZC5tYXRjaCgvKFthLXpdLipbQS1aXSl8KFtBLVpdLipbYS16XSkvKSAmJiBzY29yZTtcbiAgICB9O1xuXG4gICAgdmFsaWRhdGlvbi53b3JkTGV0dGVyTnVtYmVyQ29tYm8gPSBmdW5jdGlvbiAob3B0aW9ucywgd29yZCwgc2NvcmUpIHtcbiAgICAgICAgcmV0dXJuIHdvcmQubWF0Y2goLyhbYS16QS1aXSkvKSAmJiB3b3JkLm1hdGNoKC8oWzAtOV0pLykgJiYgc2NvcmU7XG4gICAgfTtcblxuICAgIHZhbGlkYXRpb24ud29yZExldHRlck51bWJlckNoYXJDb21ibyA9IGZ1bmN0aW9uIChvcHRpb25zLCB3b3JkLCBzY29yZSkge1xuICAgICAgICByZXR1cm4gd29yZC5tYXRjaCgvKFthLXpBLVowLTldLipbISxALCMsJCwlLFxcXiwmLCosPyxfLH5dKXwoWyEsQCwjLCQsJSxcXF4sJiwqLD8sXyx+XS4qW2EtekEtWjAtOV0pLykgJiYgc2NvcmU7XG4gICAgfTtcblxuICAgIHJ1bGVzRW5naW5lLnZhbGlkYXRpb24gPSB2YWxpZGF0aW9uO1xuXG4gICAgcnVsZXNFbmdpbmUuZXhlY3V0ZVJ1bGVzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHdvcmQpIHtcbiAgICAgICAgdmFyIHRvdGFsU2NvcmUgPSAwO1xuXG4gICAgICAgICQuZWFjaChvcHRpb25zLnJ1bGVzLmFjdGl2YXRlZCwgZnVuY3Rpb24gKHJ1bGUsIGFjdGl2ZSkge1xuICAgICAgICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHZhciBzY29yZSA9IG9wdGlvbnMucnVsZXMuc2NvcmVzW3J1bGVdLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdCA9IHJ1bGVzRW5naW5lLnZhbGlkYXRpb25bcnVsZV0sXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCEkLmlzRnVuY3Rpb24oZnVuY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0ID0gb3B0aW9ucy5ydWxlcy5leHRyYVtydWxlXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGZ1bmN0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBmdW5jdChvcHRpb25zLCB3b3JkLCBzY29yZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsU2NvcmUgKz0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPCAwIHx8ICghJC5pc051bWVyaWMocmVzdWx0KSAmJiAhcmVzdWx0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gb3B0aW9ucy51aS5zcGFuRXJyb3Iob3B0aW9ucywgcnVsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JNZXNzYWdlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmluc3RhbmNlcy5lcnJvcnMucHVzaChlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdG90YWxTY29yZTtcbiAgICB9O1xufShqUXVlcnksIHJ1bGVzRW5naW5lKSk7XG5cbnRyeSB7XG4gICAgaWYgKG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bGVzRW5naW5lO1xuICAgIH1cbn0gY2F0Y2ggKGlnbm9yZSkge31cblxuLy8gU291cmNlOiBzcmMvb3B0aW9ucy5qc1xuXG5cblxuXG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7fTtcblxuZGVmYXVsdE9wdGlvbnMuY29tbW9uID0ge307XG5kZWZhdWx0T3B0aW9ucy5jb21tb24ubWluQ2hhciA9IDY7XG5kZWZhdWx0T3B0aW9ucy5jb21tb24udXNlcm5hbWVGaWVsZCA9IFwiI3VzZXJuYW1lXCI7XG5kZWZhdWx0T3B0aW9ucy5jb21tb24udXNlcklucHV0cyA9IFtcbiAgICAvLyBTZWxlY3RvcnMgZm9yIGlucHV0IGZpZWxkcyB3aXRoIHVzZXIgaW5wdXRcbl07XG5kZWZhdWx0T3B0aW9ucy5jb21tb24ub25Mb2FkID0gdW5kZWZpbmVkO1xuZGVmYXVsdE9wdGlvbnMuY29tbW9uLm9uS2V5VXAgPSB1bmRlZmluZWQ7XG5kZWZhdWx0T3B0aW9ucy5jb21tb24uenhjdmJuID0gZmFsc2U7XG5kZWZhdWx0T3B0aW9ucy5jb21tb24uenhjdmJuVGVybXMgPSBbXG4gICAgLy8gTGlzdCBvZiBkaXNyZWNvbW1lbmRlZCB3b3Jkc1xuXTtcbmRlZmF1bHRPcHRpb25zLmNvbW1vbi5kZWJ1ZyA9IGZhbHNlO1xuXG5kZWZhdWx0T3B0aW9ucy5ydWxlcyA9IHt9O1xuZGVmYXVsdE9wdGlvbnMucnVsZXMuZXh0cmEgPSB7fTtcbmRlZmF1bHRPcHRpb25zLnJ1bGVzLnNjb3JlcyA9IHtcbiAgICB3b3JkTm90RW1haWw6IC0xMDAsXG4gICAgd29yZExlbmd0aDogLTUwLFxuICAgIHdvcmRTaW1pbGFyVG9Vc2VybmFtZTogLTEwMCxcbiAgICB3b3JkU2VxdWVuY2VzOiAtMjAsXG4gICAgd29yZFR3b0NoYXJhY3RlckNsYXNzZXM6IDIsXG4gICAgd29yZFJlcGV0aXRpb25zOiAtMjUsXG4gICAgd29yZExvd2VyY2FzZTogMSxcbiAgICB3b3JkVXBwZXJjYXNlOiAzLFxuICAgIHdvcmRPbmVOdW1iZXI6IDMsXG4gICAgd29yZFRocmVlTnVtYmVyczogNSxcbiAgICB3b3JkT25lU3BlY2lhbENoYXI6IDMsXG4gICAgd29yZFR3b1NwZWNpYWxDaGFyOiA1LFxuICAgIHdvcmRVcHBlckxvd2VyQ29tYm86IDIsXG4gICAgd29yZExldHRlck51bWJlckNvbWJvOiAyLFxuICAgIHdvcmRMZXR0ZXJOdW1iZXJDaGFyQ29tYm86IDJcbn07XG5kZWZhdWx0T3B0aW9ucy5ydWxlcy5hY3RpdmF0ZWQgPSB7XG4gICAgd29yZE5vdEVtYWlsOiB0cnVlLFxuICAgIHdvcmRMZW5ndGg6IHRydWUsXG4gICAgd29yZFNpbWlsYXJUb1VzZXJuYW1lOiB0cnVlLFxuICAgIHdvcmRTZXF1ZW5jZXM6IHRydWUsXG4gICAgd29yZFR3b0NoYXJhY3RlckNsYXNzZXM6IGZhbHNlLFxuICAgIHdvcmRSZXBldGl0aW9uczogZmFsc2UsXG4gICAgd29yZExvd2VyY2FzZTogdHJ1ZSxcbiAgICB3b3JkVXBwZXJjYXNlOiB0cnVlLFxuICAgIHdvcmRPbmVOdW1iZXI6IHRydWUsXG4gICAgd29yZFRocmVlTnVtYmVyczogdHJ1ZSxcbiAgICB3b3JkT25lU3BlY2lhbENoYXI6IHRydWUsXG4gICAgd29yZFR3b1NwZWNpYWxDaGFyOiB0cnVlLFxuICAgIHdvcmRVcHBlckxvd2VyQ29tYm86IHRydWUsXG4gICAgd29yZExldHRlck51bWJlckNvbWJvOiB0cnVlLFxuICAgIHdvcmRMZXR0ZXJOdW1iZXJDaGFyQ29tYm86IHRydWVcbn07XG5kZWZhdWx0T3B0aW9ucy5ydWxlcy5yYWlzZVBvd2VyID0gMS40O1xuXG5kZWZhdWx0T3B0aW9ucy51aSA9IHt9O1xuZGVmYXVsdE9wdGlvbnMudWkuY29sb3JDbGFzc2VzID0gW1wiYWxlcnRcIiwgXCJ3YXJuaW5nXCIsIFwic3VjY2Vzc1wiXTtcbmRlZmF1bHRPcHRpb25zLnVpLnNob3dQcm9ncmVzc0JhciA9IHRydWU7XG5kZWZhdWx0T3B0aW9ucy51aS5zaG93UG9wb3ZlciA9IGZhbHNlO1xuZGVmYXVsdE9wdGlvbnMudWkucG9wb3ZlclBsYWNlbWVudCA9IFwiYm90dG9tXCI7XG5kZWZhdWx0T3B0aW9ucy51aS5zaG93U3RhdHVzID0gZmFsc2U7XG5kZWZhdWx0T3B0aW9ucy51aS5zcGFuRXJyb3IgPSBmdW5jdGlvbiAob3B0aW9ucywga2V5KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIHRleHQgPSBvcHRpb25zLnVpLmVycm9yTWVzc2FnZXNba2V5XTtcbiAgICBpZiAoIXRleHQpIHsgcmV0dXJuICcnOyB9XG4gICAgcmV0dXJuIHRleHQ7XG59O1xuZGVmYXVsdE9wdGlvbnMudWkucG9wb3ZlckVycm9yID0gZnVuY3Rpb24gKGVycm9ycykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBtZXNzYWdlID0gXCI8ZGl2PkVycm9yczo8dWwgY2xhc3M9J2Vycm9yLWxpc3QnIHN0eWxlPSdtYXJnaW4tYm90dG9tOiAwOyc+XCI7XG5cbiAgICBqUXVlcnkuZWFjaChlcnJvcnMsIGZ1bmN0aW9uIChpZHgsIGVycikge1xuICAgICAgICBtZXNzYWdlICs9IFwiPGxpPlwiICsgZXJyICsgXCI8L2xpPlwiO1xuICAgIH0pO1xuICAgIG1lc3NhZ2UgKz0gXCI8L3VsPjwvZGl2PlwiO1xuICAgIHJldHVybiBtZXNzYWdlO1xufTtcbmRlZmF1bHRPcHRpb25zLnVpLmVycm9yTWVzc2FnZXMgPSB7XG4gICAgd29yZExlbmd0aDogXCJZb3VyIHBhc3N3b3JkIGlzIHRvbyBzaG9ydFwiLFxuICAgIHdvcmROb3RFbWFpbDogXCJEbyBub3QgdXNlIHlvdXIgZW1haWwgYXMgeW91ciBwYXNzd29yZFwiLFxuICAgIHdvcmRTaW1pbGFyVG9Vc2VybmFtZTogXCJZb3VyIHBhc3N3b3JkIGNhbm5vdCBjb250YWluIHlvdXIgdXNlcm5hbWVcIixcbiAgICB3b3JkVHdvQ2hhcmFjdGVyQ2xhc3NlczogXCJVc2UgZGlmZmVyZW50IGNoYXJhY3RlciBjbGFzc2VzXCIsXG4gICAgd29yZFJlcGV0aXRpb25zOiBcIlRvbyBtYW55IHJlcGV0aXRpb25zXCIsXG4gICAgd29yZFNlcXVlbmNlczogXCJZb3VyIHBhc3N3b3JkIGNvbnRhaW5zIHNlcXVlbmNlc1wiXG59O1xuZGVmYXVsdE9wdGlvbnMudWkudmVyZGljdHMgPSBbXCJXZWFrXCIsIFwiTm9ybWFsXCIsIFwiTWVkaXVtXCIsIFwiU3Ryb25nXCIsIFwiVmVyeSBTdHJvbmdcIl07XG5kZWZhdWx0T3B0aW9ucy51aS5zaG93VmVyZGljdHMgPSB0cnVlO1xuZGVmYXVsdE9wdGlvbnMudWkuc2hvd1ZlcmRpY3RzSW5zaWRlUHJvZ3Jlc3NCYXIgPSBmYWxzZTtcbmRlZmF1bHRPcHRpb25zLnVpLnVzZVZlcmRpY3RDc3NDbGFzcyA9IGZhbHNlO1xuZGVmYXVsdE9wdGlvbnMudWkuc2hvd0Vycm9ycyA9IGZhbHNlO1xuZGVmYXVsdE9wdGlvbnMudWkuY29udGFpbmVyID0gdW5kZWZpbmVkO1xuZGVmYXVsdE9wdGlvbnMudWkudmlld3BvcnRzID0ge1xuICAgIHByb2dyZXNzOiB1bmRlZmluZWQsXG4gICAgdmVyZGljdDogXCIucG9zdGZpeFwiLFxuICAgIGVycm9yczogdW5kZWZpbmVkXG59O1xuZGVmYXVsdE9wdGlvbnMudWkuc2NvcmVzID0gWzE0LCAyNiwgMzgsIDUwXTtcblxuLy8gU291cmNlOiBzcmMvdWkuanNcblxuXG5cblxudmFyIHVpID0ge307XG5cbihmdW5jdGlvbiAoJCwgdWkpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBzdGF0dXNDbGFzc2VzID0gW1wiZXJyb3JcIiwgXCJ3YXJuaW5nXCIsIFwic3VjY2Vzc1wiXTtcblxuICAgIHVpLmdldENvbnRhaW5lciA9IGZ1bmN0aW9uIChvcHRpb25zLCAkZWwpIHtcbiAgICAgICAgdmFyICRjb250YWluZXI7XG5cbiAgICAgICAgLy8gdHJ5IHRvIGRldGlybWluZSByaWdodCBzY29wZSBiZSBzZWFyY2hpbmcgdXB3YXJkc1xuICAgICAgICAkY29udGFpbmVyID0gJGVsLnBhcmVudHMob3B0aW9ucy51aS5jb250YWluZXIpO1xuICAgICAgICBpZiAoISgkY29udGFpbmVyICYmICRjb250YWluZXIubGVuZ3RoID09PSAxKSkge1xuICAgICAgICAgICAgJGNvbnRhaW5lciA9ICRlbC5wYXJlbnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJGNvbnRhaW5lcjtcbiAgICB9O1xuXG4gICAgdWkuZmluZEVsZW1lbnQgPSBmdW5jdGlvbiAoJGNvbnRhaW5lciwgdmlld3BvcnQsIGNzc1NlbGVjdG9yKSB7XG4gICAgICAgIGlmICh2aWV3cG9ydCkge1xuICAgICAgICAgICAgcmV0dXJuICRjb250YWluZXIuZmluZCh2aWV3cG9ydCkuZmluZChjc3NTZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRjb250YWluZXIuZmluZChjc3NTZWxlY3Rvcik7XG4gICAgfTtcblxuICAgIHVpLmdldFVJRWxlbWVudHMgPSBmdW5jdGlvbiAob3B0aW9ucywgJGVsKSB7XG4gICAgICAgIHZhciAkY29udGFpbmVyLCByZXN1bHQ7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5zdGFuY2VzLnZpZXdwb3J0cykge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuaW5zdGFuY2VzLnZpZXdwb3J0cztcbiAgICAgICAgfVxuXG4gICAgICAgICRjb250YWluZXIgPSB1aS5nZXRDb250YWluZXIob3B0aW9ucywgJGVsKTtcblxuICAgICAgICByZXN1bHQgPSB7fTtcbiAgICAgICAgcmVzdWx0LiRwcm9ncmVzc2JhciA9IHVpLmZpbmRFbGVtZW50KCRjb250YWluZXIsIG9wdGlvbnMudWkudmlld3BvcnRzLnByb2dyZXNzLCBcImRpdi5wcm9ncmVzc1wiKTtcbiAgICAgICAgaWYgKG9wdGlvbnMudWkuc2hvd1ZlcmRpY3RzSW5zaWRlUHJvZ3Jlc3NCYXIpIHtcbiAgICAgICAgICAgIHJlc3VsdC4kdmVyZGljdCA9IHJlc3VsdC4kcHJvZ3Jlc3NiYXIuZmluZChcInNwYW4ucHJvZ3Jlc3MtbWV0ZXItdGV4dFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3B0aW9ucy51aS5zaG93UG9wb3Zlcikge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnVpLnNob3dWZXJkaWN0c0luc2lkZVByb2dyZXNzQmFyKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LiR2ZXJkaWN0ID0gdWkuZmluZEVsZW1lbnQoJGNvbnRhaW5lciwgb3B0aW9ucy51aS52aWV3cG9ydHMudmVyZGljdCwgXCJzcGFuLnByb2dyZXNzLW1ldGVyLXRleHRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQuJGVycm9ycyA9IHVpLmZpbmRFbGVtZW50KCRjb250YWluZXIsIG9wdGlvbnMudWkudmlld3BvcnRzLmVycm9ycywgXCJzcGFuLmVycm9yXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5pbnN0YW5jZXMudmlld3BvcnRzID0gcmVzdWx0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICB1aS5pbml0UHJvZ3Jlc3NCYXIgPSBmdW5jdGlvbiAob3B0aW9ucywgJGVsKSB7XG4gICAgICAgIHZhciAkY29udGFpbmVyID0gdWkuZ2V0Q29udGFpbmVyKG9wdGlvbnMsICRlbCksXG4gICAgICAgICAgICBwcm9ncmVzc2JhciA9IFwiPGRpdiBjbGFzcz0ncHJvZ3Jlc3MnPjxkaXYgY2xhc3M9J3Byb2dyZXNzLW1ldGVyJyBzdHlsZT0nd2lkdGg6MCUnPlwiO1xuICAgICAgICBpZiAob3B0aW9ucy51aS5zaG93VmVyZGljdHNJbnNpZGVQcm9ncmVzc0Jhcikge1xuICAgICAgICAgICAgcHJvZ3Jlc3NiYXIgKz0gXCI8c3BhbiBjbGFzcz0ncHJvZ3Jlc3MtbWV0ZXItdGV4dCc+PC9zcGFuPlwiO1xuICAgICAgICB9XG4gICAgICAgIHByb2dyZXNzYmFyICs9IFwiPC9kaXY+PC9kaXY+XCI7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudWkudmlld3BvcnRzLnByb2dyZXNzKSB7XG4gICAgICAgICAgICAkY29udGFpbmVyLmZpbmQob3B0aW9ucy51aS52aWV3cG9ydHMucHJvZ3Jlc3MpLmFwcGVuZChwcm9ncmVzc2Jhcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKHByb2dyZXNzYmFyKS5pbnNlcnRBZnRlcigkZWwpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHVpLmluaXRIZWxwZXIgPSBmdW5jdGlvbiAob3B0aW9ucywgJGVsLCBodG1sLCB2aWV3cG9ydCkge1xuICAgICAgICB2YXIgJGNvbnRhaW5lciA9IHVpLmdldENvbnRhaW5lcihvcHRpb25zLCAkZWwpO1xuICAgICAgICBpZiAodmlld3BvcnQpIHtcbiAgICAgICAgICAgICRjb250YWluZXIuZmluZCh2aWV3cG9ydCkuYXBwZW5kKGh0bWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJChodG1sKS5pbnNlcnRBZnRlcigkZWwpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHVpLmluaXRWZXJkaWN0ID0gZnVuY3Rpb24gKG9wdGlvbnMsICRlbCkge1xuICAgICAgICB1aS5pbml0SGVscGVyKG9wdGlvbnMsICRlbCwgXCI8c3BhbiBjbGFzcz0ncGFzc3dvcmQtdmVyZGljdCc+PC9zcGFuPlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy51aS52aWV3cG9ydHMudmVyZGljdCk7XG4gICAgfTtcblxuICAgIHVpLmluaXRFcnJvckxpc3QgPSBmdW5jdGlvbiAob3B0aW9ucywgJGVsKSB7XG4gICAgICAgIHZhciAkY29udGFpbmVyID0gdWkuZ2V0Q29udGFpbmVyKG9wdGlvbnMsICRlbCk7XG4gICAgICAgIGlmICghdWkuZmluZEVsZW1lbnQoJGNvbnRhaW5lciwgb3B0aW9ucy51aS52aWV3cG9ydHMuZXJyb3JzLCAnc3Bhbi5lcnJvcicpLmxlbmd0aCkge1xuICAgICAgICAgICAgdWkuaW5pdEhlbHBlcihvcHRpb25zLCAkZWwsIFwiPHNwYW4gY2xhc3M9J2Vycm9yJyBzdHlsZT0nZGlzcGxheTpub25lOyc+PC9zcGFuPlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy51aS52aWV3cG9ydHMuZXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB1aS5pbml0UG9wb3ZlciA9IGZ1bmN0aW9uIChvcHRpb25zLCAkZWwpIHtcbiAgICAgICAgLy8gU3VwcG9ydCBmb3VuZGF0aW9uIHRvb2x0aXBzP1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcblxuICAgIHVpLmluaXRVSSA9IGZ1bmN0aW9uIChvcHRpb25zLCAkZWwpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMudWkuc2hvd1BvcG92ZXIpIHtcbiAgICAgICAgICAgIHVpLmluaXRQb3BvdmVyKG9wdGlvbnMsICRlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51aS5zaG93RXJyb3JzKSB7IHVpLmluaXRFcnJvckxpc3Qob3B0aW9ucywgJGVsKTsgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudWkuc2hvd1ZlcmRpY3RzICYmICFvcHRpb25zLnVpLnNob3dWZXJkaWN0c0luc2lkZVByb2dyZXNzQmFyKSB7XG4gICAgICAgICAgICAgICAgdWkuaW5pdFZlcmRpY3Qob3B0aW9ucywgJGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy51aS5zaG93UHJvZ3Jlc3NCYXIpIHtcbiAgICAgICAgICAgIHVpLmluaXRQcm9ncmVzc0JhcihvcHRpb25zLCAkZWwpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHVpLnBvc3NpYmxlUHJvZ3Jlc3NCYXJDbGFzc2VzID0gW1wiYWxlcnRcIiwgXCJ3YXJuaW5nXCIsIFwic3VjY2Vzc1wiXTtcblxuICAgIHVpLnVwZGF0ZVByb2dyZXNzQmFyID0gZnVuY3Rpb24gKG9wdGlvbnMsICRlbCwgY3NzQ2xhc3MsIHBlcmNlbnRhZ2UpIHtcbiAgICAgICAgdmFyICRwcm9ncmVzc2JhciA9IHVpLmdldFVJRWxlbWVudHMob3B0aW9ucywgJGVsKS4kcHJvZ3Jlc3NiYXIsXG4gICAgICAgICAgICAkYmFyID0gJHByb2dyZXNzYmFyLmZpbmQoXCIucHJvZ3Jlc3MtbWV0ZXJcIik7XG5cbiAgICAgICAgJC5lYWNoKG9wdGlvbnMudWkuY29sb3JDbGFzc2VzLCBmdW5jdGlvbiAoaWR4LCB2YWx1ZSkge1xuICAgICAgICAgICAgJHByb2dyZXNzYmFyLnJlbW92ZUNsYXNzKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgICRwcm9ncmVzc2Jhci5hZGRDbGFzcyhvcHRpb25zLnVpLmNvbG9yQ2xhc3Nlc1tjc3NDbGFzc10pO1xuICAgICAgICAkYmFyLmNzcyhcIndpZHRoXCIsIHBlcmNlbnRhZ2UgKyAnJScpO1xuICAgIH07XG5cbiAgICB1aS51cGRhdGVWZXJkaWN0ID0gZnVuY3Rpb24gKG9wdGlvbnMsICRlbCwgY3NzQ2xhc3MsIHRleHQpIHtcbiAgICAgICAgdmFyICR2ZXJkaWN0ID0gdWkuZ2V0VUlFbGVtZW50cyhvcHRpb25zLCAkZWwpLiR2ZXJkaWN0O1xuICAgICAgICAkdmVyZGljdC5yZW1vdmVDbGFzcyhvcHRpb25zLnVpLmNvbG9yQ2xhc3Nlcy5qb2luKCcgJykpO1xuICAgICAgICBpZiAoY3NzQ2xhc3MgPiAtMSkge1xuICAgICAgICAgICAgJHZlcmRpY3QuYWRkQ2xhc3Mob3B0aW9ucy51aS5jb2xvckNsYXNzZXNbY3NzQ2xhc3NdKTtcbiAgICAgICAgfVxuICAgICAgICAkdmVyZGljdC5odG1sKHRleHQpO1xuICAgIH07XG5cbiAgICB1aS51cGRhdGVFcnJvcnMgPSBmdW5jdGlvbiAob3B0aW9ucywgJGVsKSB7XG4gICAgICAgIHZhciAkY29udGFpbmVyID0gdWkuZ2V0Q29udGFpbmVyKG9wdGlvbnMsICRlbCksXG4gICAgICAgICAgICAkZXJyb3JzID0gdWkuZ2V0VUlFbGVtZW50cyhvcHRpb25zLCAkZWwpLiRlcnJvcnMsXG4gICAgICAgICAgICBodG1sID0gXCJcIjtcbiAgICAgICAgJC5lYWNoKG9wdGlvbnMuaW5zdGFuY2VzLmVycm9ycywgZnVuY3Rpb24gKGlkeCwgZXJyKSB7XG4gICAgICAgICAgICBodG1sICs9IGVyciArIFwiIFwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaHRtbCAhPT0gXCJcIikge1xuICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcygnZXJyb3InKTtcbiAgICAgICAgICAgICRlcnJvcnMuc2hvdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGNvbnRhaW5lci5yZW1vdmVDbGFzcygnZXJyb3InKTtcbiAgICAgICAgICAgICRlcnJvcnMuaGlkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgJGVycm9ycy5odG1sKGh0bWwpO1xuICAgIH07XG5cbiAgICB1aS51cGRhdGVQb3BvdmVyID0gZnVuY3Rpb24gKG9wdGlvbnMsICRlbCwgdmVyZGljdFRleHQpIHtcbiAgICAgICAgdmFyIHBvcG92ZXIgPSAkZWwuZGF0YShcImJzLnBvcG92ZXJcIiksXG4gICAgICAgICAgICBodG1sID0gXCJcIixcbiAgICAgICAgICAgIGhpZGUgPSB0cnVlO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnVpLnNob3dWZXJkaWN0cyAmJlxuICAgICAgICAgICAgICAgICFvcHRpb25zLnVpLnNob3dWZXJkaWN0c0luc2lkZVByb2dyZXNzQmFyICYmXG4gICAgICAgICAgICAgICAgdmVyZGljdFRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaHRtbCA9IFwiPGg1PjxzcGFuIGNsYXNzPSdwYXNzd29yZC12ZXJkaWN0Jz5cIiArIHZlcmRpY3RUZXh0ICtcbiAgICAgICAgICAgICAgICBcIjwvc3Bhbj48L2g1PlwiO1xuICAgICAgICAgICAgaGlkZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnVpLnNob3dFcnJvcnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmluc3RhbmNlcy5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGhpZGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGh0bWwgKz0gb3B0aW9ucy51aS5wb3BvdmVyRXJyb3Iob3B0aW9ucy5pbnN0YW5jZXMuZXJyb3JzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoaWRlKSB7XG4gICAgICAgICAgICAkZWwucG9wb3ZlcihcImhpZGVcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9wb3Zlci4kYXJyb3cgJiYgcG9wb3Zlci4kYXJyb3cucGFyZW50cyhcImJvZHlcIikubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJGVsLmZpbmQoXCIrIC5wb3BvdmVyIC5wb3BvdmVyLWNvbnRlbnRcIikuaHRtbChodG1sKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEl0J3MgaGlkZGVuXG4gICAgICAgICAgICBwb3BvdmVyLm9wdGlvbnMuY29udGVudCA9IGh0bWw7XG4gICAgICAgICAgICAkZWwucG9wb3ZlcihcInNob3dcIik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdWkudXBkYXRlRmllbGRTdGF0dXMgPSBmdW5jdGlvbiAob3B0aW9ucywgJGVsLCBjc3NDbGFzcykge1xuICAgICAgICB2YXIgdGFyZ2V0Q2xhc3MgPSBcIi5wb3N0Zml4XCIsXG4gICAgICAgICAgICAkY29udGFpbmVyID0gJGVsLnBhcmVudHModGFyZ2V0Q2xhc3MpLmZpcnN0KCk7XG5cbiAgICAgICAgJC5lYWNoKHN0YXR1c0NsYXNzZXMsIGZ1bmN0aW9uIChpZHgsIGNzcykge1xuICAgICAgICAgICAgJGNvbnRhaW5lci5yZW1vdmVDbGFzcyhjc3MpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjc3NDbGFzcyA9IHN0YXR1c0NsYXNzZXNbY3NzQ2xhc3NdO1xuICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKGNzc0NsYXNzKTtcbiAgICB9O1xuXG4gICAgdWkucGVyY2VudGFnZSA9IGZ1bmN0aW9uIChzY29yZSwgbWF4aW11bikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gTWF0aC5mbG9vcigxMDAgKiBzY29yZSAvIG1heGltdW4pO1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPD0gMCA/IDEgOiByZXN1bHQ7IC8vIERvbid0IHNob3cgdGhlIHByb2dyZXNzIGJhciBlbXB0eVxuICAgICAgICByZXN1bHQgPSByZXN1bHQgPiAxMDAgPyAxMDAgOiByZXN1bHQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHVpLmdldFZlcmRpY3RBbmRDc3NDbGFzcyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzY29yZSkge1xuICAgICAgICB2YXIgY3NzQ2xhc3MsIHZlcmRpY3RUZXh0LCBsZXZlbDtcblxuICAgICAgICBpZiAoc2NvcmUgPD0gMCkge1xuICAgICAgICAgICAgY3NzQ2xhc3MgPSAwO1xuICAgICAgICAgICAgbGV2ZWwgPSAtMTtcbiAgICAgICAgICAgIHZlcmRpY3RUZXh0ID0gb3B0aW9ucy51aS52ZXJkaWN0c1swXTtcbiAgICAgICAgfSBlbHNlIGlmIChzY29yZSA8IG9wdGlvbnMudWkuc2NvcmVzWzBdKSB7XG4gICAgICAgICAgICBjc3NDbGFzcyA9IDA7XG4gICAgICAgICAgICBsZXZlbCA9IDA7XG4gICAgICAgICAgICB2ZXJkaWN0VGV4dCA9IG9wdGlvbnMudWkudmVyZGljdHNbMF07XG4gICAgICAgIH0gZWxzZSBpZiAoc2NvcmUgPCBvcHRpb25zLnVpLnNjb3Jlc1sxXSkge1xuICAgICAgICAgICAgY3NzQ2xhc3MgPSAwO1xuICAgICAgICAgICAgbGV2ZWwgPSAxO1xuICAgICAgICAgICAgdmVyZGljdFRleHQgPSBvcHRpb25zLnVpLnZlcmRpY3RzWzFdO1xuICAgICAgICB9IGVsc2UgaWYgKHNjb3JlIDwgb3B0aW9ucy51aS5zY29yZXNbMl0pIHtcbiAgICAgICAgICAgIGNzc0NsYXNzID0gMTtcbiAgICAgICAgICAgIGxldmVsID0gMjtcbiAgICAgICAgICAgIHZlcmRpY3RUZXh0ID0gb3B0aW9ucy51aS52ZXJkaWN0c1syXTtcbiAgICAgICAgfSBlbHNlIGlmIChzY29yZSA8IG9wdGlvbnMudWkuc2NvcmVzWzNdKSB7XG4gICAgICAgICAgICBjc3NDbGFzcyA9IDE7XG4gICAgICAgICAgICBsZXZlbCA9IDM7XG4gICAgICAgICAgICB2ZXJkaWN0VGV4dCA9IG9wdGlvbnMudWkudmVyZGljdHNbM107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjc3NDbGFzcyA9IDI7XG4gICAgICAgICAgICBsZXZlbCA9IDQ7XG4gICAgICAgICAgICB2ZXJkaWN0VGV4dCA9IG9wdGlvbnMudWkudmVyZGljdHNbNF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW3ZlcmRpY3RUZXh0LCBjc3NDbGFzcywgbGV2ZWxdO1xuICAgIH07XG5cbiAgICB1aS51cGRhdGVVSSA9IGZ1bmN0aW9uIChvcHRpb25zLCAkZWwsIHNjb3JlKSB7XG4gICAgICAgIHZhciBjc3NDbGFzcywgYmFyUGVyY2VudGFnZSwgdmVyZGljdFRleHQsIHZlcmRpY3RDc3NDbGFzcztcblxuICAgICAgICBjc3NDbGFzcyA9IHVpLmdldFZlcmRpY3RBbmRDc3NDbGFzcyhvcHRpb25zLCBzY29yZSk7XG4gICAgICAgIHZlcmRpY3RUZXh0ID0gc2NvcmUgPT09IDAgPyAnJyA6IGNzc0NsYXNzWzBdO1xuICAgICAgICBjc3NDbGFzcyA9IGNzc0NsYXNzWzFdO1xuICAgICAgICB2ZXJkaWN0Q3NzQ2xhc3MgPSBvcHRpb25zLnVpLnVzZVZlcmRpY3RDc3NDbGFzcyA/IGNzc0NsYXNzIDogLTE7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudWkuc2hvd1Byb2dyZXNzQmFyKSB7XG4gICAgICAgICAgICBiYXJQZXJjZW50YWdlID0gdWkucGVyY2VudGFnZShzY29yZSwgb3B0aW9ucy51aS5zY29yZXNbM10pO1xuICAgICAgICAgICAgdWkudXBkYXRlUHJvZ3Jlc3NCYXIob3B0aW9ucywgJGVsLCBjc3NDbGFzcywgYmFyUGVyY2VudGFnZSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51aS5zaG93VmVyZGljdHNJbnNpZGVQcm9ncmVzc0Jhcikge1xuICAgICAgICAgICAgICAgIHVpLnVwZGF0ZVZlcmRpY3Qob3B0aW9ucywgJGVsLCB2ZXJkaWN0Q3NzQ2xhc3MsIHZlcmRpY3RUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnVpLnNob3dTdGF0dXMpIHtcbiAgICAgICAgICAgIHVpLnVwZGF0ZUZpZWxkU3RhdHVzKG9wdGlvbnMsICRlbCwgY3NzQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudWkuc2hvd1BvcG92ZXIpIHtcbiAgICAgICAgICAgIHVpLnVwZGF0ZVBvcG92ZXIob3B0aW9ucywgJGVsLCB2ZXJkaWN0VGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51aS5zaG93VmVyZGljdHMgJiYgIW9wdGlvbnMudWkuc2hvd1ZlcmRpY3RzSW5zaWRlUHJvZ3Jlc3NCYXIpIHtcbiAgICAgICAgICAgICAgICB1aS51cGRhdGVWZXJkaWN0KG9wdGlvbnMsICRlbCwgdmVyZGljdENzc0NsYXNzLCB2ZXJkaWN0VGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy51aS5zaG93RXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgdWkudXBkYXRlRXJyb3JzKG9wdGlvbnMsICRlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufShqUXVlcnksIHVpKSk7XG5cbi8vIFNvdXJjZTogc3JjL21ldGhvZHMuanNcblxuXG5cblxudmFyIG1ldGhvZHMgPSB7fTtcblxuKGZ1bmN0aW9uICgkLCBtZXRob2RzKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIG9uS2V5VXAsIGFwcGx5VG9BbGw7XG5cbiAgICBvbktleVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciAkZWwgPSAkKGV2ZW50LnRhcmdldCksXG4gICAgICAgICAgICBvcHRpb25zID0gJGVsLmRhdGEoXCJwd3N0cmVuZ3RoLWZvdW5kYXRpb25cIiksXG4gICAgICAgICAgICB3b3JkID0gJGVsLnZhbCgpLFxuICAgICAgICAgICAgdXNlcklucHV0cyxcbiAgICAgICAgICAgIHZlcmRpY3RUZXh0LFxuICAgICAgICAgICAgdmVyZGljdExldmVsLFxuICAgICAgICAgICAgc2NvcmU7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cblxuICAgICAgICBvcHRpb25zLmluc3RhbmNlcy5lcnJvcnMgPSBbXTtcbiAgICAgICAgaWYgKHdvcmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzY29yZSA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5jb21tb24uenhjdmJuKSB7XG4gICAgICAgICAgICAgICAgdXNlcklucHV0cyA9IFtdO1xuICAgICAgICAgICAgICAgICQuZWFjaChvcHRpb25zLmNvbW1vbi51c2VySW5wdXRzLmNvbmNhdChbb3B0aW9ucy5jb21tb24udXNlcm5hbWVGaWVsZF0pLCBmdW5jdGlvbiAoaWR4LCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSAkKHNlbGVjdG9yKS52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7IHVzZXJJbnB1dHMucHVzaCh2YWx1ZSk7IH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB1c2VySW5wdXRzID0gdXNlcklucHV0cy5jb25jYXQob3B0aW9ucy5jb21tb24uenhjdmJuVGVybXMpO1xuICAgICAgICAgICAgICAgIHNjb3JlID0genhjdmJuKHdvcmQsIHVzZXJJbnB1dHMpLmVudHJvcHk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjb3JlID0gcnVsZXNFbmdpbmUuZXhlY3V0ZVJ1bGVzKG9wdGlvbnMsIHdvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHVpLnVwZGF0ZVVJKG9wdGlvbnMsICRlbCwgc2NvcmUpO1xuICAgICAgICB2ZXJkaWN0VGV4dCA9IHVpLmdldFZlcmRpY3RBbmRDc3NDbGFzcyhvcHRpb25zLCBzY29yZSk7XG4gICAgICAgIHZlcmRpY3RMZXZlbCA9IHZlcmRpY3RUZXh0WzJdO1xuICAgICAgICB2ZXJkaWN0VGV4dCA9IHZlcmRpY3RUZXh0WzBdO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmNvbW1vbi5kZWJ1ZykgeyBjb25zb2xlLmxvZyhzY29yZSArICcgLSAnICsgdmVyZGljdFRleHQpOyB9XG5cbiAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRpb25zLmNvbW1vbi5vbktleVVwKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5jb21tb24ub25LZXlVcChldmVudCwge1xuICAgICAgICAgICAgICAgIHNjb3JlOiBzY29yZSxcbiAgICAgICAgICAgICAgICB2ZXJkaWN0VGV4dDogdmVyZGljdFRleHQsXG4gICAgICAgICAgICAgICAgdmVyZGljdExldmVsOiB2ZXJkaWN0TGV2ZWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIG1ldGhvZHMuaW5pdCA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGlkeCwgZWwpIHtcbiAgICAgICAgICAgIC8vIE1ha2UgaXQgZGVlcCBleHRlbmQgKGZpcnN0IHBhcmFtKSBzbyBpdCBleHRlbmRzIHRvbyB0aGVcbiAgICAgICAgICAgIC8vIHJ1bGVzIGFuZCBvdGhlciBpbnNpZGUgb2JqZWN0c1xuICAgICAgICAgICAgdmFyIGNsb25lZERlZmF1bHRzID0gJC5leHRlbmQodHJ1ZSwge30sIGRlZmF1bHRPcHRpb25zKSxcbiAgICAgICAgICAgICAgICBsb2NhbE9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCBjbG9uZWREZWZhdWx0cywgc2V0dGluZ3MpLFxuICAgICAgICAgICAgICAgICRlbCA9ICQoZWwpO1xuXG4gICAgICAgICAgICBsb2NhbE9wdGlvbnMuaW5zdGFuY2VzID0ge307XG4gICAgICAgICAgICAkZWwuZGF0YShcInB3c3RyZW5ndGgtZm91bmRhdGlvblwiLCBsb2NhbE9wdGlvbnMpO1xuICAgICAgICAgICAgJGVsLm9uKFwia2V5dXBcIiwgb25LZXlVcCk7XG4gICAgICAgICAgICAkZWwub24oXCJjaGFuZ2VcIiwgb25LZXlVcCk7XG4gICAgICAgICAgICAkZWwub24oXCJvbnBhc3RlXCIsIG9uS2V5VXApO1xuXG4gICAgICAgICAgICB1aS5pbml0VUkobG9jYWxPcHRpb25zLCAkZWwpO1xuICAgICAgICAgICAgaWYgKCQudHJpbSgkZWwudmFsKCkpKSB7IC8vIE5vdCBlbXB0eSwgY2FsY3VsYXRlIHRoZSBzdHJlbmd0aFxuICAgICAgICAgICAgICAgICRlbC50cmlnZ2VyKFwia2V5dXBcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24obG9jYWxPcHRpb25zLmNvbW1vbi5vbkxvYWQpKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxPcHRpb25zLmNvbW1vbi5vbkxvYWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIG1ldGhvZHMuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uIChpZHgsIGVsKSB7XG4gICAgICAgICAgICB2YXIgJGVsID0gJChlbCksXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9ICRlbC5kYXRhKFwicHdzdHJlbmd0aC1mb3VuZGF0aW9uXCIpLFxuICAgICAgICAgICAgICAgIGVsZW1lbnRzID0gdWkuZ2V0VUlFbGVtZW50cyhvcHRpb25zLCAkZWwpO1xuICAgICAgICAgICAgZWxlbWVudHMuJHByb2dyZXNzYmFyLnJlbW92ZSgpO1xuICAgICAgICAgICAgZWxlbWVudHMuJHZlcmRpY3QucmVtb3ZlKCk7XG4gICAgICAgICAgICBlbGVtZW50cy4kZXJyb3JzLnJlbW92ZSgpO1xuICAgICAgICAgICAgJGVsLnJlbW92ZURhdGEoXCJwd3N0cmVuZ3RoLWZvdW5kYXRpb25cIik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBtZXRob2RzLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGlkeCwgZWwpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IHsgdGFyZ2V0OiBlbCB9O1xuICAgICAgICAgICAgb25LZXlVcChldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBtZXRob2RzLmFkZFJ1bGUgPSBmdW5jdGlvbiAobmFtZSwgbWV0aG9kLCBzY29yZSwgYWN0aXZlKSB7XG4gICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoaWR4LCBlbCkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSAkKGVsKS5kYXRhKFwicHdzdHJlbmd0aC1mb3VuZGF0aW9uXCIpO1xuXG4gICAgICAgICAgICBvcHRpb25zLnJ1bGVzLmFjdGl2YXRlZFtuYW1lXSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIG9wdGlvbnMucnVsZXMuc2NvcmVzW25hbWVdID0gc2NvcmU7XG4gICAgICAgICAgICBvcHRpb25zLnJ1bGVzLmV4dHJhW25hbWVdID0gbWV0aG9kO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgYXBwbHlUb0FsbCA9IGZ1bmN0aW9uIChydWxlLCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGlkeCwgZWwpIHtcbiAgICAgICAgICAgICQoZWwpLmRhdGEoXCJwd3N0cmVuZ3RoLWZvdW5kYXRpb25cIikucnVsZXNbcHJvcF1bcnVsZV0gPSB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIG1ldGhvZHMuY2hhbmdlU2NvcmUgPSBmdW5jdGlvbiAocnVsZSwgc2NvcmUpIHtcbiAgICAgICAgYXBwbHlUb0FsbC5jYWxsKHRoaXMsIHJ1bGUsIFwic2NvcmVzXCIsIHNjb3JlKTtcbiAgICB9O1xuXG4gICAgbWV0aG9kcy5ydWxlQWN0aXZlID0gZnVuY3Rpb24gKHJ1bGUsIGFjdGl2ZSkge1xuICAgICAgICBhcHBseVRvQWxsLmNhbGwodGhpcywgcnVsZSwgXCJhY3RpdmF0ZWRcIiwgYWN0aXZlKTtcbiAgICB9O1xuXG4gICAgJC5mbi5wd3N0cmVuZ3RoID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICAgIGlmIChtZXRob2RzW21ldGhvZF0pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG1ldGhvZHNbbWV0aG9kXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbWV0aG9kID09PSBcIm9iamVjdFwiIHx8ICFtZXRob2QpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG1ldGhvZHMuaW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJC5lcnJvcihcIk1ldGhvZCBcIiArICBtZXRob2QgKyBcIiBkb2VzIG5vdCBleGlzdCBvbiBqUXVlcnkucHdzdHJlbmd0aC1mb3VuZGF0aW9uXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufShqUXVlcnksIG1ldGhvZHMpKTtcbn0oalF1ZXJ5KSk7XG4iXX0=
=======
//# sourceMappingURL=data:application/json;charset=utf8;base64,
>>>>>>> master
